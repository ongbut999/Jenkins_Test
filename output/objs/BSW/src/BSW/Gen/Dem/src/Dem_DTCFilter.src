	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15620a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_DTCFilter.src BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c'

	
$TC16X
	
	.sdecl	'.text.Dem_DTCFilter.Dem_DtcFilterInit',code,cluster('Dem_DtcFilterInit')
	.sect	'.text.Dem_DTCFilter.Dem_DtcFilterInit'
	.align	2
	
	.global	Dem_DtcFilterInit

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     3  #include "Dem_Dcm.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     4  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     5  #include "Dem_DTCFilter.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     7  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     8  #include "Dem_Cfg_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	     9  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    10  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    11  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    12  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    13  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    14  #include "Dem_ChronoSort.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    15  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    16  typedef struct
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    17  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    18  	/* state machine */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    19  	volatile boolean start;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    20  	volatile boolean exec;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    21  	/* output parameter */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    22  	volatile uint8   DTCStatus;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    23  	/* input parameter */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    24  	volatile Dem_DTCOriginType DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    25  	volatile Dem_DtcIdType DtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    26  } Dem_DTCFilterSyncState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    28  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    29  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    30  	DEM_BITARRAY_DEFINE(Dem_DTCFilterMatching,DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    31  	Dem_DTCFilterState Dem_DTCFilter;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    32  	#if DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    33  	static Dem_DTCFilterSyncState Dem_DTCFilterSync;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    34  	#endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    35  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    36  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    37  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    38  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    40  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    41  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    42  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    43  /* called in DCM task context */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    44  DEM_INLINE void Dem_DtcFilterSyncInit(void)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    45  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    46  #if DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    47  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    48  	Dem_DTCFilterSync.start  = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    49  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    52  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    53  DEM_INLINE boolean Dem_DtcFilterSyncGetDtcStatusByte (Dem_DtcIdType dtcId, Dem_DTCOriginType DTCOrigin, uint8* DTCStatus)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    54  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    55  	DEM_UNUSED_PARAM(DTCOrigin);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    56  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    57  #if DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    58  	/* Sync currently is only necessary to retrieve the stored DTC status in MIRROR Memory */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    59  	if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    60  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    61  		/* sync job is running: just wait till results are available */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    62  		if (Dem_DTCFilterSync.exec)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    63  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    64  			return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    65  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    66  		/* start/init a new sync job */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    67  		if (Dem_DTCFilterSync.start)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    68  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    69  			Dem_DTCFilterSync.DtcId = dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    70  			Dem_DTCFilterSync.DTCOrigin = DTCOrigin;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    71  			Dem_DTCFilterSync.start = FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    72  			Dem_DTCFilterSync.exec = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    73  			return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    74  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    75  		/* take the results of a finished sync job*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    76  		*DTCStatus = Dem_DTCFilterSync.DTCStatus;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    77  		Dem_DTCFilterSync.start = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    78  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    79  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    80  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    81  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    82  	/* retrieve of current DTC status */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    83  	*DTCStatus = Dem_DtcStatusByteRetrieve(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    84  	return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    85  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    86  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    87  /* called in DEM task context */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    88  DEM_INLINE void Dem_DtcFilterSyncCyclic(void)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    89  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    90  #if DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    91  	if (Dem_DTCFilterSync.exec)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    92  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    93  		boolean DtcStatusIsValid;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    94  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    95  		/* this is the sync action */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    96  		Dem_DTCFilterSync.DTCStatus = Dem_DtcStatusByteRetrieveWithOrigin(Dem_DTCFilterSync.DtcId, Dem_DTCFilterSync.DTCOrigin, &DtcStatusIsValid);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    97  		Dem_DTCFilterSync.exec = FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    98  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    99  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   100  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   101  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   102  void Dem_DtcFilterInit(void)
; Function Dem_DtcFilterInit
.L142:
Dem_DtcFilterInit:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   103  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   104  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   105      rba_DemObdBasic_Dtc_DtcFilterInit(&Dem_DTCFilter);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   106  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   107  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   108  #if (DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   109      Dem_ChronoSortDTCFilterInit();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   110  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   111      Dem_DtcIdIteratorInvalidate(&Dem_DTCFilter.searchIt);
	movh.a	a15,#@his(Dem_DTCFilter)
	lea	a15,[a15]@los(Dem_DTCFilter)
.L789:
	lea	a2,[a15]12
.L454:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
	mov	d15,#0
.L790:
	st.w	[a2],d15
.L455:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   112      Dem_DtcIdIteratorInvalidate(&Dem_DTCFilter.retrieveIt);
	lea	a2,[a15]16
.L459:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
	mov	d15,#0
.L791:
	st.w	[a2],d15
.L460:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   113      Dem_DTCFilter.isNewFilterCriteria = TRUE;
	mov	d15,#1
.L792:
	st.b	[a15],d15
.L793:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   114  }
	ret
.L452:
	
__Dem_DtcFilterInit_function_end:
	.size	Dem_DtcFilterInit,__Dem_DtcFilterInit_function_end-Dem_DtcFilterInit
.L227:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_SetDTCFilterstartIterator',code,cluster('Dem_SetDTCFilterstartIterator')
	.sect	'.text.Dem_DTCFilter.Dem_SetDTCFilterstartIterator'
	.align	2
	
	.global	Dem_SetDTCFilterstartIterator

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   115  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   116  void Dem_SetDTCFilterstartIterator(void)
; Function Dem_SetDTCFilterstartIterator
.L144:
Dem_SetDTCFilterstartIterator:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   117  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   118      Dem_DtcIdIteratorNew(&Dem_DTCFilter.searchIt);
	movh.a	a15,#@his(Dem_DTCFilter)
	lea	a15,[a15]@los(Dem_DTCFilter)
.L768:
	lea	a2,[a15]12
.L431:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
	mov	d15,#1
.L769:
	st.w	[a2],d15
.L432:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   119      Dem_DtcIdIteratorNew(&Dem_DTCFilter.retrieveIt);
	lea	a15,[a15]16
.L436:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
	mov	d15,#1
.L770:
	st.w	[a15],d15
.L437:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   120  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   121      Dem_BitArrayClearAll(Dem_DTCFilterMatching, DEM_DTCID_ARRAYLENGTH);
	movh.a	a15,#@his(Dem_DTCFilterMatching)
	lea	a15,[a15]@los(Dem_DTCFilterMatching)
.L771:
	mov	d0,#5
.L439:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    46  DEM_INLINE void Dem_BitArrayClearBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    48      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    49      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    50      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    51      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    52              ((uint32) 1) << local_bitpos;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    54      buffer[element_pos] &= (uint32) ~ mask;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    55      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    61  DEM_INLINE void Dem_BitArrayOverwriteBit(DEM_BITARRAY_FUNCPARAM(buffer),
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    62                   uint32 bit_position, Dem_boolean_least will_bit_be_set)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    63  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    65          Dem_BitArraySetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    66      } else {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    67          Dem_BitArrayClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    68      }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    69      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    70  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    75  DEM_INLINE Dem_boolean_least Dem_BitArrayIsBitSet(DEM_BITARRAY_CONSTFUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    77      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    78      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    79      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    80      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    81              ((uint32) 1) << local_bitpos;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    83      /* Comparison is necessary in case element type is uint32 and
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    84       * local_bitpos has its maximal value: the conversion to int would
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    85       * be implementation-defined otherwise. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    86      return (buffer[element_pos] & mask) != 0u;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    87  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    88  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    92  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    93  DEM_INLINE void Dem_BitArrayClearAll (DEM_BITARRAY_FUNCPARAM(buffer), uint32 number_of_bits)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    94  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    95      uint32 i;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    96      for (i = 0; i < DEM_BITARRAY_DATAELEMENTS(number_of_bits); i++) {
	mov	d1,#0
.L531:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    96      for (i = 0; i < DEM_BITARRAY_DATAELEMENTS(number_of_bits); i++) {      (inlined)
	j	.L2
.L3:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    97          buffer[i] = 0U;
	addsc.a	a2,a15,d1,#2
.L772:
	mov	d15,#0
.L773:
	st.w	[a2],d15
.L774:
	add	d1,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    96      for (i = 0; i < DEM_BITARRAY_DATAELEMENTS(number_of_bits); i++) {      (inlined)
.L2:
	add	d15,d0,#-1
	sh	d15,#-5
	add	d15,#1
.L775:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    96      for (i = 0; i < DEM_BITARRAY_DATAELEMENTS(number_of_bits); i++) {      (inlined)
	jlt.u	d1,d15,.L3
.L776:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    99      return;      (inlined)
	j	.L4

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	   100  }      (inlined)
.L4:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   122  }
	ret
.L429:
	
__Dem_SetDTCFilterstartIterator_function_end:
	.size	Dem_SetDTCFilterstartIterator,__Dem_SetDTCFilterstartIterator_function_end-Dem_SetDTCFilterstartIterator
.L217:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_SetDTCFilter',code,cluster('Dem_SetDTCFilter')
	.sect	'.text.Dem_DTCFilter.Dem_SetDTCFilter'
	.align	2
	
	.global	Dem_SetDTCFilter

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   123  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   124  Dem_ReturnSetFilterType Dem_SetDTCFilter(uint8 DTCStatusMask,
; Function Dem_SetDTCFilter
.L146:
Dem_SetDTCFilter:	.type	func
	sub.a	a10,#8
.L532:
	mov	e8,d5,d4
	mov	d10,d6
.L534:
	st.b	[a10],d7
	ld.bu	d11,[a10]8
.L535:
	ld.bu	d12,[a10]12
.L536:
	ld.bu	d13,[a10]16
.L537:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   125                                            Dem_DTCKindType DTCKind,
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   126                                            Dem_DTCFormatType DTCFormat,
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   127                                            Dem_DTCOriginType DTCOrigin,
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   128                                            Dem_FilterWithSeverityType FilterWithSeverity,
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   129                                            Dem_DTCSeverityType DTCSeverityMask,
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   130                                            Dem_FilterForFDCType FilterForFaultDetectionCounter)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   131  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   132      Dem_ReturnSetFilterType returnVal = DEM_FILTER_ACCEPTED;
	mov	d14,#0
.L538:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   133  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   134      /* not clear when to return DEM_WRONG_FILTER: all function parameters must be valid, as specified in AR-spec for each data-type */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   135      DEM_ENTERLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   136      /* Call the FilterInit to reinit the iterators as it will be more robust when a running filter operation is interrupted by a new call to setDTCFilter */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   137      Dem_DtcFilterInit();
	call	Dem_DtcFilterInit
.L533:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   138  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   139      /* parameter check: DTCOrigin */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   140  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   141      if (!(Dem_EvMemIsDtcOriginValid(&DTCOrigin)
	lea	a15,[a10]0
.L258:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    53  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcOriginValid (Dem_DTCOriginType  *DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
	ld.bu	d15,[a15]
.L615:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
	jne	d15,#0,.L5
.L616:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    56      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    57          *DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	mov	d15,#4
.L617:
	st.b	[a15],d15

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
.L5:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    58      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    60                 (*DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d15,[a15]
.L618:
	eq	d15,d15,#1
.L619:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (      (inlined)
	j	.L6

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    68  }      (inlined)
.L6:
	jne	d15,#0,.L7
.L620:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   142  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   143      || (DTCOrigin == DEM_DTC_ORIGIN_PERMANENT_MEMORY)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   144  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   145      ))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   146      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   147          DEM_DET(DEM_DET_APIID_DcmSetDTCFilter, DEM_E_WRONG_CONFIGURATION);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#19
	mov	d7,#16
	call	Det_ReportError
.L621:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   148          returnVal = DEM_WRONG_FILTER;
	mov	d14,#1
.L7:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   149      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   150  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   151      /* parameter check: DTCFormat */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   152      if ((DTCFormat == DEM_DTC_FORMAT_OBD) && (DEM_CFG_OBD == DEM_CFG_OBD_OFF))
	jne	d10,#0,.L8
.L622:
	mov	d15,#1
.L623:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   153      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   154          returnVal = DEM_WRONG_FILTER;
	cmov	d14,d15,#1
.L9:
.L8:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   155      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   156  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   157      if (returnVal != DEM_WRONG_FILTER)
	jeq	d14,#1,.L10
.L624:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   158      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   159          Dem_DTCFilter.DTCStatusMask = (uint8) (DTCStatusMask & DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
	movh.a	a15,#@his(Dem_DTCFilter)
	lea	a15,[a15]@los(Dem_DTCFilter)
.L539:
	st.b	[a15]1,d8
.L540:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   160          Dem_DTCFilter.DTCKind = DTCKind;
	st.b	[a15]2,d9
.L541:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   161          Dem_DTCFilter.DTCFormat = DTCFormat;
	st.b	[a15]3,d10
.L625:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   162          Dem_DTCFilter.DTCOrigin = DTCOrigin;
	ld.bu	d15,[a10]
.L626:
	st.b	[a15]4,d15
.L627:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   163          Dem_DTCFilter.FilterWithSeverity = FilterWithSeverity;
	st.b	[a15]5,d11
.L628:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   164          Dem_DTCFilter.DTCSeverityMask = DTCSeverityMask;
	st.b	[a15]6,d12
.L629:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   165          Dem_DTCFilter.FilterForFaultDetectionCounter = FilterForFaultDetectionCounter;
	st.b	[a15]7,d13
.L630:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   166  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   167          Dem_DTCFilter.numberOfMatchingDTCs = 0;
	mov	d15,#0
.L631:
	st.h	[a15]8,d15
.L632:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   168  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   169          Dem_DtcFilterSyncInit();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   170  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   171          if (DTCFormat == DEM_DTC_FORMAT_OBD)
	jne	d10,#0,.L11
.L633:
	j	.L12
.L11:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   172          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   173  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   174              rba_DemObdBasic_Dtc_SetDTCFilter(&Dem_DTCFilter, DTCOrigin);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   175  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   176          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   177          else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   178          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   179  #if (DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   180              if (!Dem_ChronoSortSetDTCFilter(&Dem_DTCFilter)) /** To determine whether the filtering is performed by chrono or standard algorithm. */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   181  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   182              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   183                  Dem_SetDTCFilterstartIterator();
	call	Dem_SetDTCFilterstartIterator
.L12:
.L10:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   184              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   185          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   186      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   187  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   188      DEM_EXITLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   189  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   190      return returnVal;
	mov	d2,d14
.L542:
	j	.L13

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   191  }
.L13:
	ret
.L248:
	
__Dem_SetDTCFilter_function_end:
	.size	Dem_SetDTCFilter,__Dem_SetDTCFilter_function_end-Dem_SetDTCFilter
.L177:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_DTCFilterMatches',code,cluster('Dem_DTCFilterMatches')
	.sect	'.text.Dem_DTCFilter.Dem_DTCFilterMatches'
	.align	2
	
	.global	Dem_DTCFilterMatches

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   192  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   193  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   194  DEM_INLINE Dem_boolean_least Dem_DTCFilterMatchesStatus(uint8 DtcStatus, sint8 FaultDetectionCounter)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   195  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   196      Dem_boolean_least matches = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   197  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   198      if (Dem_DTCFilter.DTCStatusMask != 0)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   199      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   200          matches = matches && ((Dem_DTCFilter.DTCStatusMask & (DtcStatus & DEM_CFG_DTCSTATUS_AVAILABILITYMASK)) != 0u);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   201      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   202  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   203      if (Dem_DTCFilter.FilterForFaultDetectionCounter == DEM_FILTER_FOR_FDC_YES)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   204      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   205          matches = matches && ((FaultDetectionCounter > 0) && (FaultDetectionCounter < 127));
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   206      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   207  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   208      return matches;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   209  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   210  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   211  Dem_boolean_least Dem_DTCFilterMatches(Dem_DtcIdType dtcId)
; Function Dem_DTCFilterMatches
.L148:
Dem_DTCFilterMatches:	.type	func
	sub.a	a10,#8
.L543:
	mov	d8,d4
.L545:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   212  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   213      uint8 DtcStatus = 0;
	mov	d9,#0
.L546:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   214      Dem_boolean_least matches = TRUE;
	mov	d11,#1
.L547:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   215      sint8 FaultDetectionCounter = 0;
	mov	d10,#0
.L548:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   216  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   217      boolean DtcStatusIsValid;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   218  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   219      if (Dem_DTCFilter.DTCStatusMask != 0)
	movh.a	a15,#@his(Dem_DTCFilter)
	lea	a15,[a15]@los(Dem_DTCFilter)
.L803:
	mov.aa	a12,a15
	add.a	a12,#1
	ld.bu	d15,[a12]
.L804:
	jeq	d15,#0,.L14
.L805:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   220      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   221          DtcStatus = Dem_DtcStatusByteRetrieveWithOrigin(dtcId, Dem_DTCFilter.DTCOrigin, &DtcStatusIsValid);
	ld.bu	d5,[a15]4
.L806:
	lea	a4,[a10]0
	mov	d4,d8
	call	Dem_DtcStatusByteRetrieveWithOrigin
.L544:
	mov	d9,d2
.L14:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   222      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   223  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   224      if (Dem_DTCFilter.DTCKind != DEM_DTC_KIND_ALL_DTCS)
	ld.bu	d15,[a15]2
.L807:
	jeq	d15,#1,.L15
.L808:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   225      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   226          matches = matches && (Dem_Cfg_Dtc_GetKind(dtcId) == Dem_DTCFilter.DTCKind);
	mov	d0,#0
.L809:
	jeq	d11,#0,.L16

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L17:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
	mul	d1,d8,#12
.L810:
	movh.a	a2,#@his(Dem_Cfg_Dtc)
	lea	a2,[a2]@los(Dem_Cfg_Dtc)
.L811:
	addsc.a	a2,a2,d1,#0
.L812:
	ld.bu	d1,[a2]5
.L813:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }      (inlined)
.L18:
	eq	d15,d1,d15
.L814:
	cmov	d0,d15,#1
.L19:
.L16:
	mov	d11,d0
.L15:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   227      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   228  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   229      if (!Dem_DtcUsesOrigin(dtcId, Dem_DTCFilter.DTCOrigin))
	ld.bu	d15,[a15]4
.L473:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
	movh.a	a2,#@his(Dem_MapDtcIdToEventId)
	lea	a2,[a2]@los(Dem_MapDtcIdToEventId)
.L815:
	addsc.a	a2,a2,d8,#1
	ld.hu	d0,[a2]0
.L551:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];      (inlined)
	j	.L20

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }      (inlined)
.L20:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }      (inlined)
.L21:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
	jne	d15,#1,.L22

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L23:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a2,#@his(Dem_EvtParam_16)
	lea	a2,[a2]@los(Dem_EvtParam_16)
.L816:
	addsc.a	a2,a2,d0,#1
.L817:
	ld.hu	d0,[a2]0
.L552:
	mov	d1,#0
.L499:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L818:
	and	d0,d0,#1
.L819:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L24

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L24:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d0,d0,#0
.L820:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L25

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L25:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L26

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L26:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
	jne	d0,#0,.L27
.L22:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))      (inlined)
	jne	d15,#4,.L28

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L29:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79   is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  
	mov	d0,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;      (inlined)
	j	.L30

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }      (inlined)
.L30:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))      (inlined)
	jne	d0,#0,.L31
.L28:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
	jne	d15,#2,.L32

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L33:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;      (inlined)
	j	.L34

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }      (inlined)
.L34:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
	jeq	d15,#0,.L35
.L31:
.L27:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
	mov	d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;      (inlined)
	j	.L36

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
.L35:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
.L32:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;      (inlined)
	j	.L37

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }      (inlined)
.L37:
.L36:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   285      return Dem_EventUsesOrigin(eventId, origin);      (inlined)
	j	.L38

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   286  }      (inlined)
.L38:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   230      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   231          matches = FALSE;
	cmovn	d11,d15,#0
.L39:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   232      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   233  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   234      if (Dem_DTCFilter.FilterWithSeverity == DEM_FILTER_WITH_SEVERITY_YES)
	ld.bu	d15,[a15]5
.L821:
	jne	d15,#0,.L40
.L822:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   235      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   236          matches = matches && ((Dem_Cfg_Dtc_GetSeverity(dtcId) & Dem_DTCFilter.DTCSeverityMask) != 0);
	mov	d0,#0
.L823:
	jeq	d11,#0,.L41

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L42:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
	mul	d15,d8,#12
.L824:
	movh.a	a2,#@his(Dem_Cfg_Dtc)
	lea	a2,[a2]@los(Dem_Cfg_Dtc)
.L825:
	addsc.a	a2,a2,d15,#0
.L826:
	ld.bu	d1,[a2]4
.L827:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }      (inlined)
.L43:
	ld.bu	d15,[a15]6
.L828:
	and	d1,d15
.L829:
	seln	d0,d1,d0,#1
.L44:
.L41:
	mov	d11,d0
.L40:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   237      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   238  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   239      if (Dem_DTCFilter.FilterForFaultDetectionCounter == DEM_FILTER_FOR_FDC_YES)
	add.a	a15,#7
	ld.bu	d15,[a15]
.L830:
	jne	d15,#0,.L45
.L831:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   240      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   241          FaultDetectionCounter = Dem_DtcFaultDetectionRetrieve(dtcId);
	mov	d4,d8
.L553:
	call	Dem_DtcFaultDetectionRetrieve
.L549:
	mov	d10,d2
.L45:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   242      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   243  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   244      matches = matches && Dem_DTCFilterMatchesStatus(DtcStatus, FaultDetectionCounter);
	mov	d2,#0
.L832:
	jeq	d11,#0,.L46
.L520:
	mov	d15,#1
.L554:
	ld.bu	d0,[a12]
.L833:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   198      if (Dem_DTCFilter.DTCStatusMask != 0)      (inlined)
	jeq	d0,#0,.L47
.L834:
	mov	d1,#0
.L835:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   200          matches = matches && ((Dem_DTCFilter.DTCStatusMask & (DtcStatus & DEM_CFG_DTCSTATUS_AVAILABILITYMASK)) != 0u);      (inlined)
	jeq	d15,#0,.L48
.L836:
	and	d9,d0
.L550:
	seln	d1,d9,d1,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   200          matches = matches && ((Dem_DTCFilter.DTCStatusMask & (DtcStatus & DEM_CFG_DTCSTATUS_AVAILABILITYMASK)) != 0u);      (inlined)
.L49:
.L48:
	mov	d15,d1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   198      if (Dem_DTCFilter.DTCStatusMask != 0)      (inlined)
.L47:
	ld.bu	d0,[a15]
.L837:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   203      if (Dem_DTCFilter.FilterForFaultDetectionCounter == DEM_FILTER_FOR_FDC_YES)      (inlined)
	jne	d0,#0,.L50
.L838:
	mov	d0,#0
.L839:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   205          matches = matches && ((FaultDetectionCounter > 0) && (FaultDetectionCounter < 127));      (inlined)
	jeq	d15,#0,.L51
.L840:
	jlt	d10,#1,.L52
.L841:
	mov	d15,#127
.L555:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   205          matches = matches && ((FaultDetectionCounter > 0) && (FaultDetectionCounter < 127));      (inlined)
	lt	d15,d10,d15
.L842:
	cmov	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   205          matches = matches && ((FaultDetectionCounter > 0) && (FaultDetectionCounter < 127));      (inlined)
.L53:
.L51:
.L52:
	mov	d15,d0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   203      if (Dem_DTCFilter.FilterForFaultDetectionCounter == DEM_FILTER_FOR_FDC_YES)      (inlined)
.L50:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   208      return matches;      (inlined)
	j	.L54

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   209  }      (inlined)
.L54:
	cmov	d2,d15,#1
.L55:
.L46:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   245  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   246  #if(DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   247     matches = matches && rba_DemObdBasic_Dtc_DTCFilterMatches(dtcId, Dem_DTCFilter);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   248  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   249  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   250      return matches;
	j	.L56

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   251  }
.L56:
	ret
.L462:
	
__Dem_DTCFilterMatches_function_end:
	.size	Dem_DTCFilterMatches,__Dem_DTCFilterMatches_function_end-Dem_DTCFilterMatches
.L237:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_DTCFilterStandardMainFunction',code,cluster('Dem_DTCFilterStandardMainFunction')
	.sect	'.text.Dem_DTCFilter.Dem_DTCFilterStandardMainFunction'
	.align	2
	
	.global	Dem_DTCFilterStandardMainFunction

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   252  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   253  void Dem_DTCFilterStandardMainFunction(void)
; Function Dem_DTCFilterStandardMainFunction
.L150:
Dem_DTCFilterStandardMainFunction:	.type	func
	sub.a	a10,#8
.L556:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   254  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   255      const sint32 epc = (sint32)DEM_DTC_FILTER_NUMBER_OF_EVENTS_PER_CYCLE; //to avoid MISRA warnings
	mov	d8,#25
.L557:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   256      sint32 i = epc;
	mov	d9,d8
.L558:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   257      Dem_DtcIdIterator searchItCopy; /* local copy of Dem_DTCFilter.searchIt to reduce lock time */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   258      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   259      Dem_boolean_least matches;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   260      sint32 numberOfEvents;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   261  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   262      DEM_ENTERLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   263      Dem_DTCFilter.isNewFilterCriteria = FALSE;
	movh.a	a12,#@his(Dem_DTCFilter)
	lea	a12,[a12]@los(Dem_DTCFilter)
.L732:
	mov	d0,#0
.L733:
	st.b	[a12],d0
.L734:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   264      searchItCopy = Dem_DTCFilter.searchIt;
	lea	a13,[a12]12
	ld.w	d0,[a13]
.L735:
	st.w	[a10],d0
.L736:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   265      DEM_EXITLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   266  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   267      Dem_DtcFilterSyncCyclic();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   268  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   269      if (Dem_DtcIdIteratorIsValid(&searchItCopy))
	lea	a15,[a10]0
.L382:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
	mov	d0,#0
.L737:
	ld.w	d15,[a15]
.L738:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L57
.L739:
	ge.u	d15,d15,#5
.L740:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
.L58:
.L57:
	j	.L59

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }      (inlined)
.L59:
	jeq	d0,#0,.L60
.L383:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   270      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   271          while (i>0)
	j	.L61
.L62:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   272          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   273              /* check filter-rules for current dtcId */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   274              dtcId = Dem_DtcIdIteratorCurrent(&searchItCopy);
	lea	a15,[a10]0
.L385:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d0,[a15]
.L741:
	extr.u	d10,d0,#0,#16
.L559:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L63

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L63:
	mov	d0,#0
.L742:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d10,#0,.L64
.L743:
	ge.u	d15,d10,#5
.L744:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L65:
.L64:
	j	.L66

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L66:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   275  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   276              if (!Dem_isDtcIdValid(dtcId))
	jne	d0,#0,.L67
.L388:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   277              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   278                  return;
	j	.L68
.L67:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L745:
	addsc.a	a15,a15,d10,#0
.L746:
	ld.bu	d0,[a15]
.L747:
	mov	d1,#0
.L398:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L748:
	and	d15,d0,#1
.L749:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L69

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L69:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L750:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L70

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L70:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L71

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L71:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   279              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   280  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   281              if (!Dem_DtcIsSuppressed(dtcId))
	jne	d15,#0,.L72
.L393:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;      (inlined)
	j	.L73

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }      (inlined)
.L73:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   282              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   283                  numberOfEvents = (sint32)Dem_DtcIdGetNumberOfEvents(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   284                  /* only execute if number of events of current DTC does not exceed the total number of events allowed in this cycle or it is the first DTC in this cycle */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   285                  if ((numberOfEvents > i) && (i != epc))
	jge	d9,d15,.L74
.L751:
	jeq	d9,d8,.L75
.L752:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   286                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   287                      break;
	j	.L76
.L75:
.L74:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   288                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   289                  i = i - numberOfEvents;
	sub	d9,d15
.L753:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   290                  matches = Dem_DTCFilterMatches(dtcId);
	mov	d4,d10
	call	Dem_DTCFilterMatches
.L560:
	j	.L77
.L72:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   291              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   292              else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   293              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   294                  i = i - 1;
	add	d9,#-1
.L754:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   295                  matches = FALSE;
	mov	d2,#0
.L77:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   296              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   297  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   298  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   299              DEM_ENTERLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   300              if (!Dem_DTCFilter.isNewFilterCriteria)
	ld.bu	d15,[a12]
.L755:
	jne	d15,#0,.L78
.L756:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   301              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   302                  if (matches)
	jeq	d2,#0,.L79
.L757:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   303                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   304                      Dem_BitArraySetBit(Dem_DTCFilterMatching, dtcId);
	movh.a	a15,#@his(Dem_DTCFilterMatching)
	lea	a15,[a15]@los(Dem_DTCFilterMatching)
.L415:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d10,#-5
.L561:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,d10,#31
.L562:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L758:
	sh	d1,d1,d15
.L564:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L563:
	or	d15,d1
	st.w	[a15],d15
.L759:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;      (inlined)
	j	.L80

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }      (inlined)
.L80:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   305                      Dem_DTCFilter.numberOfMatchingDTCs++;
	lea	a15,[a12]8
	ld.hu	d15,[a12]8
.L760:
	add	d15,#1
	st.h	[a15],d15
.L79:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
	ld.w	d15,[a13]
.L761:
	add	d15,#1
	st.w	[a13],d15
.L427:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   306                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   307  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   308                  /* advance iterator to next dtcId */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   309                  Dem_DtcIdIteratorNext(&Dem_DTCFilter.searchIt);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   310                  searchItCopy = Dem_DTCFilter.searchIt;
	ld.w	d15,[a13]
.L762:
	st.w	[a10],d15
.L763:
	j	.L81
.L78:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   311              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   312              else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   313              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   314                  i = 0;
	mov	d9,#0
.L81:
.L61:
	jge	d9,#1,.L62

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   315              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   316              DEM_EXITLOCK_DCM();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   317          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   318      }
.L76:
.L60:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   319  }
.L68:
	ret
.L373:
	
__Dem_DTCFilterStandardMainFunction_function_end:
	.size	Dem_DTCFilterStandardMainFunction,__Dem_DTCFilterStandardMainFunction_function_end-Dem_DTCFilterStandardMainFunction
.L212:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_IsStandardFilterFinished',code,cluster('Dem_IsStandardFilterFinished')
	.sect	'.text.Dem_DTCFilter.Dem_IsStandardFilterFinished'
	.align	2
	
	.global	Dem_IsStandardFilterFinished

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   320  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   321  boolean Dem_IsStandardFilterFinished(const Dem_DtcIdIterator *it)
; Function Dem_IsStandardFilterFinished
.L152:
Dem_IsStandardFilterFinished:	.type	func

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
	mov	d0,#0
.L781:
	ld.w	d15,[a4]
.L782:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L82
.L783:
	ge.u	d15,d15,#5
.L784:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
.L83:
.L82:
	j	.L84

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }      (inlined)
.L84:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   322  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   323      return (!Dem_DtcIdIteratorIsValid(it));
	eq	d2,d0,#0
.L450:
	j	.L85

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   324  }
.L85:
	ret
.L447:
	
__Dem_IsStandardFilterFinished_function_end:
	.size	Dem_IsStandardFilterFinished,__Dem_IsStandardFilterFinished_function_end-Dem_IsStandardFilterFinished
.L222:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_DTCFilterMainFunction',code,cluster('Dem_DTCFilterMainFunction')
	.sect	'.text.Dem_DTCFilter.Dem_DTCFilterMainFunction'
	.align	2
	
	.global	Dem_DTCFilterMainFunction

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   325  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   326  void Dem_DTCFilterMainFunction(void)
; Function Dem_DTCFilterMainFunction
.L154:
Dem_DTCFilterMainFunction:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   327  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   328  #if DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   329      if (Dem_IsChronoSortEnabled())
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   330      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   331          Dem_ChronoSortMainFunction(&Dem_DTCFilter);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   332      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   333      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   334  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   335      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   336          Dem_DTCFilterStandardMainFunction();
	call	Dem_DTCFilterStandardMainFunction
.L798:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   337      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   338  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   339  #if (DEM_CFG_J1939DCM_READ_DTC_SUPPORT)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   340      Dem_J1939DcmDTCFilterMainFunction();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   341  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   342  }
	ret
.L461:
	
__Dem_DTCFilterMainFunction_function_end:
	.size	Dem_DTCFilterMainFunction,__Dem_DTCFilterMainFunction_function_end-Dem_DTCFilterMainFunction
.L232:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_GetNextFilteredStandardDTCID',code,cluster('Dem_GetNextFilteredStandardDTCID')
	.sect	'.text.Dem_DTCFilter.Dem_GetNextFilteredStandardDTCID'
	.align	2
	
	.global	Dem_GetNextFilteredStandardDTCID

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   343  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   344  Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredStandardDTCID(Dem_DtcIdType* dtcId, uint32* DTC, uint8* DTCStatus, sint8* DTCFaultDetectionCounter)
; Function Dem_GetNextFilteredStandardDTCID
.L156:
Dem_GetNextFilteredStandardDTCID:	.type	func
	sub.a	a10,#16
.L565:
	mov.aa	a12,a4
.L566:
	st.a	[a10]12,a5
.L567:
	st.a	[a10]4,a6
.L568:
	st.a	[a10]8,a7
.L569:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   345  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   346      uint16_least i = DEM_DTC_FILTER_RETRIEVE_NUMBER_OF_DTCS;
	mov	d8,#50
.L570:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   347      uint8 localDTCStatus;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   348      sint8 FaultDetectionCounter = 0;
	mov	d9,#0
.L571:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   349  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   350      while (i > 0u)
	j	.L86
.L87:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   351      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   352          if (!Dem_DtcIdIteratorIsValid(&Dem_DTCFilter.retrieveIt))
	movh.a	a15,#@his(Dem_DTCFilter)
	lea	a15,[a15]@los(Dem_DTCFilter)
.L682:
	lea	a13,[a15]16
.L318:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
	mov	d0,#0
.L683:
	ld.w	d15,[a13]
.L684:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L88
.L685:
	ge.u	d15,d15,#5
.L686:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
.L89:
.L88:
	j	.L90

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }      (inlined)
.L90:
	jne	d0,#0,.L91
.L319:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   353          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   354              return DEM_FILTERED_NO_MATCHING_DTC;
	mov	d2,#1
.L687:
	j	.L92
.L91:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   355          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   356  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   357          if (Dem_DTCFilter.retrieveIt == Dem_DTCFilter.searchIt)
	ld.w	d0,[a13]
.L688:
	ld.w	d15,[a15]12
.L689:
	jne	d15,d0,.L93
.L690:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   358          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   359              return DEM_FILTERED_PENDING;
	mov	d2,#3
.L691:
	j	.L94
.L93:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
	ld.w	d0,[a13]
.L692:
	extr.u	d4,d0,#0,#16
.L693:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);      (inlined)
	j	.L95

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }      (inlined)
.L95:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   360          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   361  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   362          *dtcId = Dem_DtcIdIteratorCurrent(&Dem_DTCFilter.retrieveIt);
	st.h	[a12],d4
.L694:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   363  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   364          if (Dem_BitArrayIsBitSet(Dem_DTCFilterMatching, *dtcId))
	movh.a	a2,#@his(Dem_DTCFilterMatching)
	lea	a2,[a2]@los(Dem_DTCFilterMatching)
.L326:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    46  DEM_INLINE void Dem_BitArrayClearBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    48      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    49      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    50      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    51      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    52              ((uint32) 1) << local_bitpos;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    54      buffer[element_pos] &= (uint32) ~ mask;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    55      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    61  DEM_INLINE void Dem_BitArrayOverwriteBit(DEM_BITARRAY_FUNCPARAM(buffer),
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    62                   uint32 bit_position, Dem_boolean_least will_bit_be_set)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    63  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    65          Dem_BitArraySetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    66      } else {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    67          Dem_BitArrayClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    68      }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    69      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    70  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    75  DEM_INLINE Dem_boolean_least Dem_BitArrayIsBitSet(DEM_BITARRAY_CONSTFUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    77      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    78      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d4,#-5
.L573:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    79      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,d4,#31
.L575:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    80      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    81              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L695:
	sh	d1,d1,d15
.L577:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    83      /* Comparison is necessary in case element type is uint32 and
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    84       * local_bitpos has its maximal value: the conversion to int would
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    85       * be implementation-defined otherwise. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    86      return (buffer[element_pos] & mask) != 0u;
	addsc.a	a2,a2,d0,#2
	ld.w	d15,[a2]
.L576:
	and	d15,d1
.L696:
	ne	d15,d15,#0
.L697:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    86      return (buffer[element_pos] & mask) != 0u;      (inlined)
	j	.L96

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    87  }      (inlined)
.L96:
	jeq	d15,#0,.L97
.L698:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   365          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   366              if (!Dem_DtcFilterSyncGetDtcStatusByte(*dtcId, Dem_DTCFilter.DTCOrigin, &localDTCStatus))
	lea	a14,[a10]0
.L339:
	call	Dem_DtcStatusByteRetrieve
.L574:
	st.b	[a14],d2
.L699:
	mov	d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    84  	return TRUE;      (inlined)
	j	.L98

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	    85  }      (inlined)
.L98:
	jne	d15,#0,.L99
.L700:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   367              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   368                  return DEM_FILTERED_PENDING;
	mov	d2,#3
.L701:
	j	.L100
.L99:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   369              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   370  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   371              if (Dem_DTCFilter.FilterForFaultDetectionCounter == DEM_FILTER_FOR_FDC_YES)
	mov.aa	a14,a15
	add.a	a14,#7
	ld.bu	d15,[a14]
.L702:
	jne	d15,#0,.L101
.L703:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   372              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   373                  FaultDetectionCounter = Dem_DtcFaultDetectionRetrieve(*dtcId);
	ld.hu	d4,[a12]0
	call	Dem_DtcFaultDetectionRetrieve
.L572:
	mov	d9,d2
.L101:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   374              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   375  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   376              if(Dem_DTCFilterMatchesStatus(localDTCStatus, FaultDetectionCounter))
	ld.bu	d0,[a10]
.L348:
	mov	d1,#1
.L578:
	ld.bu	d15,[a15]1
.L704:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   198      if (Dem_DTCFilter.DTCStatusMask != 0)      (inlined)
	jeq	d15,#0,.L102
.L705:
	mov	d2,#0
.L706:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   200          matches = matches && ((Dem_DTCFilter.DTCStatusMask & (DtcStatus & DEM_CFG_DTCSTATUS_AVAILABILITYMASK)) != 0u);      (inlined)
	jeq	d1,#0,.L103
.L707:
	and	d15,d0
.L708:
	cmov	d2,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   200          matches = matches && ((Dem_DTCFilter.DTCStatusMask & (DtcStatus & DEM_CFG_DTCSTATUS_AVAILABILITYMASK)) != 0u);      (inlined)
.L104:
.L103:
	mov	d1,d2

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   198      if (Dem_DTCFilter.DTCStatusMask != 0)      (inlined)
.L102:
	ld.bu	d15,[a14]
.L709:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   203      if (Dem_DTCFilter.FilterForFaultDetectionCounter == DEM_FILTER_FOR_FDC_YES)      (inlined)
	jne	d15,#0,.L105
.L710:
	mov	d0,#0
.L711:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   205          matches = matches && ((FaultDetectionCounter > 0) && (FaultDetectionCounter < 127));      (inlined)
	jeq	d1,#0,.L106
.L712:
	jlt	d9,#1,.L107
.L713:
	mov	d15,#127
.L714:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   205          matches = matches && ((FaultDetectionCounter > 0) && (FaultDetectionCounter < 127));      (inlined)
	lt	d15,d9,d15
.L715:
	cmov	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   205          matches = matches && ((FaultDetectionCounter > 0) && (FaultDetectionCounter < 127));      (inlined)
.L108:
.L106:
.L107:
	mov	d1,d0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   203      if (Dem_DTCFilter.FilterForFaultDetectionCounter == DEM_FILTER_FOR_FDC_YES)      (inlined)
.L105:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   208      return matches;      (inlined)
	j	.L109

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   209  }      (inlined)
.L109:
	jeq	d1,#0,.L110
.L349:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   377              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   378                  if (DTCStatus != NULL_PTR)
	ld.a	a15,[a10]4
.L579:
	jz.a	a15,.L111
.L716:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   379                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   380                      *DTCStatus = (uint8) (localDTCStatus & DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
	ld.bu	d15,[a10]
.L717:
	st.b	[a15],d15
.L111:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   381                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   382  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   383                  if(DTCFaultDetectionCounter != NULL_PTR)
	ld.a	a15,[a10]8
.L580:
	jz.a	a15,.L112
.L718:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   384                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   385                      *DTCFaultDetectionCounter = FaultDetectionCounter;
	st.b	[a15],d9
.L112:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   386                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   387  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   388                  *DTC = Dem_GetDtcCode(*dtcId);
	ld.hu	d15,[a12]0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L113:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    73  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    74  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetNv_Storage(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    75  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    76  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    77  	return Dem_Cfg_Dtc[indx].Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    78  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    79  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    80  LOCAL_INLINE uint8 Dem_Cfg_Dtc_GetFunc_Unit(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    84  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    85  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    86  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetDtcCode_Is_Index(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    87  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    88  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    89  	return Dem_Cfg_Dtc[indx].DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    90  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    91  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    92  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    93  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetObd_DtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    94  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    95  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    96  	return DEM_INVALID_DTC; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    97  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    98  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    99  LOCAL_INLINE Dem_DtcCodeType Dem_Cfg_Dtc_GetDtcCode(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   100  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   101  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;
	mul	d15,d15,#12
.L719:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
.L581:
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L720:
	addsc.a	a15,a15,d15,#0
.L721:
	ld.w	d15,[a15]
.L722:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   102  	return Dem_Cfg_Dtc[indx].DtcCode;      (inlined)
	j	.L114

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	   103  }      (inlined)
.L114:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);      (inlined)
	j	.L115

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }      (inlined)
.L115:
	ld.a	a15,[a10]12
.L361:
	st.w	[a15],d15
.L362:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
	ld.w	d15,[a13]
.L723:
	add	d15,#1
	st.w	[a13],d15
.L368:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   389  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   390                  Dem_DtcIdIteratorNext(&Dem_DTCFilter.retrieveIt);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   391                  return DEM_FILTERED_OK;
	mov	d2,#0
.L724:
	j	.L116
.L110:
.L97:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   392              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   393          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   394          i--;
	add	d8,#-1
.L372:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
	ld.w	d15,[a13]
.L725:
	add	d15,#1
	st.w	[a13],d15
.L86:
	jne	d8,#0,.L87
.L726:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   395          Dem_DtcIdIteratorNext(&Dem_DTCFilter.retrieveIt);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   396      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   397      return DEM_FILTERED_PENDING;
	mov	d2,#3
.L727:
	j	.L117

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   398  }
.L117:
.L116:
.L100:
.L94:
.L92:
	ret
.L307:
	
__Dem_GetNextFilteredStandardDTCID_function_end:
	.size	Dem_GetNextFilteredStandardDTCID,__Dem_GetNextFilteredStandardDTCID_function_end-Dem_GetNextFilteredStandardDTCID
.L207:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_GetNextFilteredDTCID',code,cluster('Dem_GetNextFilteredDTCID')
	.sect	'.text.Dem_DTCFilter.Dem_GetNextFilteredDTCID'
	.align	2
	

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   399  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   400  static Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredDTCID(Dem_DtcIdType* dtcId, uint32* DTC, uint8* DTCStatus, sint8* DTCFaultDetectionCounter)
; Function Dem_GetNextFilteredDTCID
.L158:
Dem_GetNextFilteredDTCID:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   401  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   402  #if DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   403      if (Dem_IsChronoSortEnabled())
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   404      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   405          return Dem_ChronoSortGetNextFilteredDTCID(dtcId, DTC, DTCStatus);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   406      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   407      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   408  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   409      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   410          return Dem_GetNextFilteredStandardDTCID(dtcId, DTC, DTCStatus, DTCFaultDetectionCounter);
	call	Dem_GetNextFilteredStandardDTCID
.L582:
	j	.L118

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   411      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   412  }
.L118:
	ret
.L524:
	
__Dem_GetNextFilteredDTCID_function_end:
	.size	Dem_GetNextFilteredDTCID,__Dem_GetNextFilteredDTCID_function_end-Dem_GetNextFilteredDTCID
.L242:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_GetNextFilteredDTC',code,cluster('Dem_GetNextFilteredDTC')
	.sect	'.text.Dem_DTCFilter.Dem_GetNextFilteredDTC'
	.align	2
	
	.global	Dem_GetNextFilteredDTC

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   413  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   414  Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredDTC(uint32* DTC, uint8* DTCStatus)
; Function Dem_GetNextFilteredDTC
.L160:
Dem_GetNextFilteredDTC:	.type	func
	sub.a	a10,#8
.L583:
	mov.aa	a15,a4
.L586:
	mov.aa	a6,a5
.L587:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   415  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   416      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   417      Dem_ReturnGetNextFilteredDTCType retVal = DEM_FILTERED_NO_MATCHING_DTC;
	mov	d2,#1
.L588:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   418  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   419  #if DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   420      if(Dem_IsChronoSortEnabled() || (Dem_DtcIdIteratorIsValid(&Dem_DTCFilter.retrieveIt)))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   421  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   422      if (Dem_DtcIdIteratorIsValid(&Dem_DTCFilter.retrieveIt))
	movh.a	a2,#@his(Dem_DTCFilter)
	lea	a2,[a2]@los(Dem_DTCFilter)
.L648:
	lea	a2,[a2]16
.L280:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
	mov	d0,#0
.L649:
	ld.w	d15,[a2]
.L650:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L119
.L651:
	ge.u	d15,d15,#5
.L652:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
.L120:
.L119:
	j	.L121

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }      (inlined)
.L121:
	jeq	d0,#0,.L122
.L281:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   423  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   424      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   425          retVal = Dem_GetNextFilteredDTCID (&dtcId, DTC, DTCStatus, NULL_PTR);
	lea	a4,[a10]0
.L584:
	mov.a	a7,#0
	mov.aa	a5,a15
.L585:
	call	Dem_GetNextFilteredDTCID
.L122:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   426      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   427  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   428      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   429      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   430          retVal = rba_DemObdBasic_Dtc_GetNextFilteredDTC(&Dem_DTCFilter, DTC, DTCStatus);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   431      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   432  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   433  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   434      return retVal;
	j	.L123

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   435  }
.L123:
	ret
.L272:
	
__Dem_GetNextFilteredDTC_function_end:
	.size	Dem_GetNextFilteredDTC,__Dem_GetNextFilteredDTC_function_end-Dem_GetNextFilteredDTC
.L187:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_GetNextFilteredDTCAndFDC',code,cluster('Dem_GetNextFilteredDTCAndFDC')
	.sect	'.text.Dem_DTCFilter.Dem_GetNextFilteredDTCAndFDC'
	.align	2
	
	.global	Dem_GetNextFilteredDTCAndFDC

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   436  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   437  Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredDTCAndFDC(uint32* DTC, sint8* DTCFaultDetectionCounter)
; Function Dem_GetNextFilteredDTCAndFDC
.L162:
Dem_GetNextFilteredDTCAndFDC:	.type	func
	sub.a	a10,#8
.L589:
	mov.aa	a15,a4
.L590:
	mov.aa	a12,a5

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   438  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   439  	Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   440  	Dem_ReturnGetNextFilteredDTCType retVal;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   441  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   442  	DEM_ASSERT(((DTC != NULL_PTR) && (DTCFaultDetectionCounter != NULL_PTR)),DEM_DET_APIID_GETNEXTFILTEREDDTCANDFDC, DEM_E_PARAM_POINTER);
.L124:
	jz.a	a15,.L125
.L657:
	jnz.a	a12,.L126
.L125:
	mov	d4,#54
	mov	d5,#0
	mov	d6,#59
	mov	d7,#17
	call	Det_ReportError
.L126:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   443  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   444  	retVal = Dem_GetNextFilteredDTCID (&dtcId, DTC, NULL_PTR, DTCFaultDetectionCounter);
	lea	a4,[a10]0
.L658:
	mov.a	a6,#0
.L659:
	mov.aa	a5,a15
.L591:
	mov.aa	a7,a12
.L593:
	call	Dem_GetNextFilteredDTCID
.L592:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   445  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   446  	return retVal;
	j	.L127

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   447  }
.L127:
	ret
.L283:
	
__Dem_GetNextFilteredDTCAndFDC_function_end:
	.size	Dem_GetNextFilteredDTCAndFDC,__Dem_GetNextFilteredDTCAndFDC_function_end-Dem_GetNextFilteredDTCAndFDC
.L192:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_GetNextFilteredDTCAndSeverity',code,cluster('Dem_GetNextFilteredDTCAndSeverity')
	.sect	'.text.Dem_DTCFilter.Dem_GetNextFilteredDTCAndSeverity'
	.align	2
	
	.global	Dem_GetNextFilteredDTCAndSeverity

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   448  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   449  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   450  Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredDTCAndSeverity (uint32* DTC, uint8* DTCStatus, Dem_DTCSeverityType* DTCSeverity, uint8* DTCFunctionalUnit)
; Function Dem_GetNextFilteredDTCAndSeverity
.L164:
Dem_GetNextFilteredDTCAndSeverity:	.type	func
	sub.a	a10,#8
.L594:
	mov.aa	a15,a4
.L599:
	mov.aa	a2,a5
.L601:
	mov.aa	a12,a6
.L603:
	mov.aa	a13,a7
.L604:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   451  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   452  	Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   453  	Dem_ReturnGetNextFilteredDTCType retVal;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   454  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   455  	retVal = Dem_GetNextFilteredDTCID (&dtcId, DTC, DTCStatus, NULL_PTR);
	lea	a4,[a10]0
.L595:
	mov.a	a7,#0
.L596:
	mov.aa	a5,a15
.L598:
	mov.aa	a6,a2
.L597:
	call	Dem_GetNextFilteredDTCID
.L602:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   456  	if (retVal == DEM_FILTERED_OK)
	jne	d2,#0,.L128
.L664:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   457  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   458  		*DTCSeverity = Dem_Cfg_Dtc_GetSeverity(dtcId);
	ld.hu	d15,[a10]0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L129:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
	movh.a	a2,#@his(Dem_Cfg_Dtc)
	lea	a2,[a2]@los(Dem_Cfg_Dtc)
.L665:
	mul	d15,d15,#12
	addsc.a	a15,a2,d15,#0
.L600:
	ld.bu	d15,[a15]4
.L666:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;      (inlined)
	j	.L130

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }      (inlined)
.L130:
	st.b	[a12],d15
.L667:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   459  		*DTCFunctionalUnit = Dem_Cfg_Dtc_GetFunc_Unit(dtcId);
	ld.hu	d15,[a10]0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L131:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    68  LOCAL_INLINE Dem_DTCSeverityType Dem_Cfg_Dtc_GetSeverity(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    69  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    70  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    71  	return Dem_Cfg_Dtc[indx].Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    72  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    73  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    74  LOCAL_INLINE boolean Dem_Cfg_Dtc_GetNv_Storage(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    75  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    76  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    77  	return Dem_Cfg_Dtc[indx].Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    78  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    79  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    80  LOCAL_INLINE uint8 Dem_Cfg_Dtc_GetFunc_Unit(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;
	mul	d15,d15,#12
	addsc.a	a15,a2,d15,#0
.L668:
	ld.bu	d15,[a15]7
.L669:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    83  	return Dem_Cfg_Dtc[indx].Func_Unit;      (inlined)
	j	.L132

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    84  }      (inlined)
.L132:
	st.b	[a13],d15
.L128:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   460  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   461  	return retVal;
	j	.L133

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   462  }
.L133:
	ret
.L289:
	
__Dem_GetNextFilteredDTCAndSeverity_function_end:
	.size	Dem_GetNextFilteredDTCAndSeverity,__Dem_GetNextFilteredDTCAndSeverity_function_end-Dem_GetNextFilteredDTCAndSeverity
.L197:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_GetNumberOfStandardFilteredDTC',code,cluster('Dem_GetNumberOfStandardFilteredDTC')
	.sect	'.text.Dem_DTCFilter.Dem_GetNumberOfStandardFilteredDTC'
	.align	2
	
	.global	Dem_GetNumberOfStandardFilteredDTC

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   463  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   464  Dem_ReturnGetNumberOfFilteredDTCType Dem_GetNumberOfStandardFilteredDTC(uint16* NumberOfFilteredDTC)
; Function Dem_GetNumberOfStandardFilteredDTC
.L166:
Dem_GetNumberOfStandardFilteredDTC:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   465  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   466      *NumberOfFilteredDTC = Dem_DTCFilter.numberOfMatchingDTCs;
	movh.a	a15,#@his(Dem_DTCFilter)
	lea	a15,[a15]@los(Dem_DTCFilter)
.L674:
	ld.hu	d15,[a15]8
.L675:
	st.h	[a4],d15
.L676:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   467      return DEM_NUMBER_OK;
	mov	d2,#0
.L677:
	j	.L134

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   468  }
.L134:
	ret
.L305:
	
__Dem_GetNumberOfStandardFilteredDTC_function_end:
	.size	Dem_GetNumberOfStandardFilteredDTC,__Dem_GetNumberOfStandardFilteredDTC_function_end-Dem_GetNumberOfStandardFilteredDTC
.L202:
	; End of function
	
	.sdecl	'.text.Dem_DTCFilter.Dem_GetNumberOfFilteredDTC',code,cluster('Dem_GetNumberOfFilteredDTC')
	.sect	'.text.Dem_DTCFilter.Dem_GetNumberOfFilteredDTC'
	.align	2
	
	.global	Dem_GetNumberOfFilteredDTC

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   469  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   470  Dem_ReturnGetNumberOfFilteredDTCType Dem_GetNumberOfFilteredDTC(uint16* NumberOfFilteredDTC)
; Function Dem_GetNumberOfFilteredDTC
.L168:
Dem_GetNumberOfFilteredDTC:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   471  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   472      Dem_ReturnGetNumberOfFilteredDTCType retVal;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   473  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   474      if (Dem_DtcIdIteratorIsValid(&Dem_DTCFilter.searchIt))
	movh.a	a15,#@his(Dem_DTCFilter)
	lea	a15,[a15]@los(Dem_DTCFilter)
.L638:
	lea	a15,[a15]12
.L267:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
	mov	d0,#0
.L639:
	ld.w	d15,[a15]
.L640:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L135
.L641:
	ge.u	d15,d15,#5
.L642:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));      (inlined)
.L136:
.L135:
	j	.L137

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }      (inlined)
.L137:
	jeq	d0,#0,.L138
.L268:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   475      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   476          return DEM_NUMBER_PENDING;
	mov	d2,#2
.L643:
	j	.L139
.L138:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   477      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   478  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   479  #if (DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   480      if (Dem_IsChronoSortEnabled())
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   481      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   482          retVal = Dem_ChronoSortGetNumberOfFilteredDTC(NumberOfFilteredDTC);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   483      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   484      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   485  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   486      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   487          retVal = Dem_GetNumberOfStandardFilteredDTC(NumberOfFilteredDTC);
	call	Dem_GetNumberOfStandardFilteredDTC
.L605:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   488      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   489  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   490      return retVal;
	j	.L140

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   491  }
.L140:
.L139:
	ret
.L262:
	
__Dem_GetNumberOfFilteredDTC_function_end:
	.size	Dem_GetNumberOfFilteredDTC,__Dem_GetNumberOfFilteredDTC_function_end-Dem_GetNumberOfFilteredDTC
.L182:
	; End of function
	
	.sdecl	'.bss.Dem_DTCFilter.Dem_DTCFilterMatching',data,cluster('Dem_DTCFilterMatching')
	.sect	'.bss.Dem_DTCFilter.Dem_DTCFilterMatching'
	.global	Dem_DTCFilterMatching
	.align	4
Dem_DTCFilterMatching:	.type	object
	.size	Dem_DTCFilterMatching,4
	.space	4
	.sdecl	'.bss.Dem_DTCFilter.Dem_DTCFilter',data,cluster('Dem_DTCFilter')
	.sect	'.bss.Dem_DTCFilter.Dem_DTCFilter'
	.global	Dem_DTCFilter
	.align	4
Dem_DTCFilter:	.type	object
	.size	Dem_DTCFilter,20
	.space	20
	.calls	'Dem_SetDTCFilter','Dem_DtcFilterInit'
	.calls	'Dem_SetDTCFilter','Det_ReportError'
	.calls	'Dem_SetDTCFilter','Dem_SetDTCFilterstartIterator'
	.calls	'Dem_DTCFilterMatches','Dem_DtcStatusByteRetrieveWithOrigin'
	.calls	'Dem_DTCFilterMatches','Dem_DtcFaultDetectionRetrieve'
	.calls	'Dem_DTCFilterStandardMainFunction','Dem_DTCFilterMatches'
	.calls	'Dem_DTCFilterMainFunction','Dem_DTCFilterStandardMainFunction'
	.calls	'Dem_GetNextFilteredStandardDTCID','Dem_DtcStatusByteRetrieve'
	.calls	'Dem_GetNextFilteredStandardDTCID','Dem_DtcFaultDetectionRetrieve'
	.calls	'Dem_GetNextFilteredDTCID','Dem_GetNextFilteredStandardDTCID'
	.calls	'Dem_GetNextFilteredDTC','Dem_GetNextFilteredDTCID'
	.calls	'Dem_GetNextFilteredDTCAndFDC','Det_ReportError'
	.calls	'Dem_GetNextFilteredDTCAndFDC','Dem_GetNextFilteredDTCID'
	.calls	'Dem_GetNextFilteredDTCAndSeverity','Dem_GetNextFilteredDTCID'
	.calls	'Dem_GetNumberOfFilteredDTC','Dem_GetNumberOfStandardFilteredDTC'
	.calls	'Dem_DtcFilterInit','',0
	.calls	'Dem_SetDTCFilterstartIterator','',0
	.calls	'Dem_SetDTCFilter','',8
	.calls	'Dem_DTCFilterMatches','',8
	.calls	'Dem_DTCFilterStandardMainFunction','',8
	.calls	'Dem_IsStandardFilterFinished','',0
	.calls	'Dem_DTCFilterMainFunction','',0
	.calls	'Dem_GetNextFilteredStandardDTCID','',16
	.calls	'Dem_GetNextFilteredDTCID','',0
	.calls	'Dem_GetNextFilteredDTC','',8
	.calls	'Dem_GetNextFilteredDTCAndFDC','',8
	.calls	'Dem_GetNextFilteredDTCAndSeverity','',8
	.calls	'Dem_GetNumberOfStandardFilteredDTC','',0
	.extern	Det_ReportError
	.extern	Dem_Cfg_Dtc
	.extern	Dem_MapDtcIdToEventId
	.extern	Dem_EvtParam_16
	.extern	Dem_DtcStatusByteRetrieve
	.extern	Dem_DtcStatusByteRetrieveWithOrigin
	.extern	Dem_AllDTCsState
	.extern	Dem_DtcFaultDetectionRetrieve
	.calls	'Dem_GetNumberOfFilteredDTC','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L170:
	.word	23665
	.half	3
	.word	.L171
	.byte	4
.L169:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L172
.L445:
	.byte	2
	.byte	'unsigned int',0,4,7
.L273:
	.byte	3
	.word	143
.L414:
	.byte	4
	.byte	'Dem_BitArraySetBit',0,3,1,33,17,1,1
.L416:
	.byte	5
	.byte	'buffer',0,1,33,36
	.word	159
.L418:
	.byte	5
	.byte	'bit_position',0,1,33,75
	.word	143
.L420:
	.byte	6,0,4
	.byte	'Dem_BitArrayClearBit',0,3,1,46,17,1,1,5
	.byte	'buffer',0,1,46,38
	.word	159
	.byte	5
	.byte	'bit_position',0,1,46,77
	.word	143
	.byte	6,0
.L247:
	.byte	2
	.byte	'unsigned char',0,1,8,4
	.byte	'Dem_BitArrayOverwriteBit',0,3,1,61,17,1,1,5
	.byte	'buffer',0,1,61,42
	.word	159
	.byte	5
	.byte	'bit_position',0,1,62,25
	.word	143
	.byte	5
	.byte	'will_bit_be_set',0,1,62,57
	.word	294
	.byte	7,6,6,0,0,8
	.word	143
	.byte	3
	.word	408
.L325:
	.byte	9
	.byte	'Dem_BitArrayIsBitSet',0,3,1,75,30
	.word	294
	.byte	1,1
.L327:
	.byte	5
	.byte	'buffer',0,1,75,51
	.word	413
.L329:
	.byte	5
	.byte	'bit_position',0,1,75,95
	.word	143
.L331:
	.byte	6,0
.L438:
	.byte	4
	.byte	'Dem_BitArrayClearAll',0,3,1,93,17,1,1
.L440:
	.byte	5
	.byte	'buffer',0,1,93,39
	.word	159
.L442:
	.byte	5
	.byte	'number_of_bits',0,1,93,78
	.word	143
.L444:
	.byte	6,0
.L275:
	.byte	3
	.word	294
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,49
	.word	556
	.byte	5
	.byte	'bit_position',0,2,36,63
	.word	294
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,51
	.word	556
	.byte	5
	.byte	'bit_position',0,2,42,65
	.word	294
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,2,48,19,1,1,5
	.byte	'buffer',0,2,48,55
	.word	556
	.byte	5
	.byte	'bit_position',0,2,48,69
	.word	294
	.byte	5
	.byte	'will_bit_be_set',0,2,48,91
	.word	294
	.byte	7,6,6,0,0
.L404:
	.byte	9
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,2,60,20
	.word	294
	.byte	1,1
.L405:
	.byte	5
	.byte	'value',0,2,60,55
	.word	294
.L407:
	.byte	5
	.byte	'bit_position',0,2,60,68
	.word	294
.L409:
	.byte	6,0
.L397:
	.byte	9
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,2,64,22
	.word	294
	.byte	1,1
.L399:
	.byte	5
	.byte	'value',0,2,64,53
	.word	294
.L401:
	.byte	5
	.byte	'bit_position',0,2,64,66
	.word	294
.L403:
	.byte	7,6,0,0,9
	.byte	'rba_DiagLib_Bit8GetBits',0,3,2,69,20
	.word	294
	.byte	1,1,5
	.byte	'value',0,2,69,50
	.word	294
	.byte	5
	.byte	'bit_position',0,2,69,63
	.word	294
	.byte	5
	.byte	'number_of_bits',0,2,69,83
	.word	294
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,2,77,19,1,1,5
	.byte	'value',0,2,77,52
	.word	556
	.byte	5
	.byte	'bit_position',0,2,77,65
	.word	294
	.byte	5
	.byte	'number_of_bits',0,2,77,85
	.word	294
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,2,83,19,1,1,5
	.byte	'value',0,2,83,56
	.word	556
	.byte	5
	.byte	'bit_position',0,2,83,69
	.word	294
	.byte	5
	.byte	'number_of_bits',0,2,83,89
	.word	294
	.byte	5
	.byte	'newValue',0,2,83,111
	.word	294
	.byte	7,6,0,0,9
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,3,125,21
	.word	143
	.byte	1,1,5
	.byte	'Input_u32',0,3,125,55
	.word	143
	.byte	6,0
.L277:
	.byte	2
	.byte	'unsigned short int',0,2,7,9
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,3,150,1,21
	.word	1314
	.byte	1,1,5
	.byte	'Input_u16',0,3,150,1,55
	.word	1314
	.byte	6,0,9
	.byte	'Dem_LibGetParamUI8',0,3,4,36,18
	.word	294
	.byte	1,1,5
	.byte	'parameter',0,4,36,44
	.word	294
	.byte	6,0,9
	.byte	'Dem_LibGetParamBool',0,3,4,41,20
	.word	294
	.byte	1,1,5
	.byte	'parameter',0,4,41,49
	.word	294
	.byte	6,0
.L468:
	.byte	9
	.byte	'Dem_Cfg_Dtc_GetKind',0,3,5,62,30
	.word	294
	.byte	1,1
.L469:
	.byte	5
	.byte	'indx',0,5,62,64
	.word	1314
.L471:
	.byte	6,0
.L297:
	.byte	9
	.byte	'Dem_Cfg_Dtc_GetSeverity',0,3,5,68,34
	.word	294
	.byte	1,1
.L298:
	.byte	5
	.byte	'indx',0,5,68,72
	.word	1314
.L300:
	.byte	6,0
.L301:
	.byte	9
	.byte	'Dem_Cfg_Dtc_GetFunc_Unit',0,3,5,80,20
	.word	294
	.byte	1,1
.L302:
	.byte	5
	.byte	'indx',0,5,80,59
	.word	1314
.L304:
	.byte	6,0
.L363:
	.byte	9
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,5,99,30
	.word	143
	.byte	1,1
.L364:
	.byte	5
	.byte	'indx',0,5,99,67
	.word	1314
.L366:
	.byte	6,0
.L387:
	.byte	9
	.byte	'Dem_isDtcIdValid',0,3,6,152,1,30
	.word	294
	.byte	1,1
.L389:
	.byte	5
	.byte	'id',0,6,152,1,62
	.word	1314
.L391:
	.byte	6,0,9
	.byte	'Dem_DtcIdFromEventId',0,3,6,158,1,27
	.word	1314
	.byte	1,1,5
	.byte	'id',0,6,158,1,65
	.word	1314
	.byte	6,0
.L484:
	.byte	9
	.byte	'Dem_DtcIdGetEventId',0,3,6,166,1,28
	.word	1314
	.byte	1,1
.L485:
	.byte	5
	.byte	'dtcid',0,6,166,1,63
	.word	1314
.L487:
	.byte	6,0
.L480:
	.byte	9
	.byte	'Dem_DtcIdGetFirstEventId',0,3,6,174,1,28
	.word	1314
	.byte	1,1
.L481:
	.byte	5
	.byte	'dtcid',0,6,174,1,68
	.word	1314
.L483:
	.byte	7,6,0,0
.L410:
	.byte	9
	.byte	'Dem_DtcIdGetNumberOfEvents',0,3,6,183,1,19
	.word	1314
	.byte	1,1
.L411:
	.byte	5
	.byte	'dtcid',0,6,183,1,61
	.word	1314
.L413:
	.byte	6,0
.L313:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.word	1944
.L430:
	.byte	4
	.byte	'Dem_DtcIdIteratorNew',0,3,6,202,1,17,1,1
.L433:
	.byte	5
	.byte	'it',0,6,202,1,57
	.word	1965
.L435:
	.byte	6,0,8
	.word	1944
.L448:
	.byte	3
	.word	2013
.L266:
	.byte	9
	.byte	'Dem_DtcIdIteratorIsValid',0,3,6,207,1,30
	.word	294
	.byte	1,1
.L269:
	.byte	5
	.byte	'it',0,6,207,1,80
	.word	2018
.L271:
	.byte	6,0
.L367:
	.byte	4
	.byte	'Dem_DtcIdIteratorNext',0,3,6,212,1,17,1,1
.L369:
	.byte	5
	.byte	'it',0,6,212,1,58
	.word	1965
.L371:
	.byte	6,0
.L321:
	.byte	9
	.byte	'Dem_DtcIdIteratorCurrent',0,3,6,217,1,26
	.word	1314
	.byte	1,1
.L322:
	.byte	5
	.byte	'it',0,6,217,1,76
	.word	2018
.L324:
	.byte	6,0
.L453:
	.byte	4
	.byte	'Dem_DtcIdIteratorInvalidate',0,3,6,222,1,17,1,1
.L456:
	.byte	5
	.byte	'it',0,6,222,1,64
	.word	1965
.L458:
	.byte	6,0,9
	.byte	'Dem_DtcGroupIdIsValid',0,3,6,252,1,30
	.word	294
	.byte	1,1,5
	.byte	'dtcGroupID',0,6,252,1,72
	.word	294
	.byte	6,0,8
	.word	1314
	.byte	3
	.word	2275
	.byte	10,6,171,2,9,8,11
	.byte	'it',0
	.word	2280
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	2280
	.byte	4,2,35,4,0,3
	.word	2285
	.byte	4
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,6,177,2,17,1,1,5
	.byte	'it',0,6,177,2,78
	.word	2317
	.byte	5
	.byte	'dtcid',0,6,177,2,96
	.word	1314
	.byte	7,6,0,0,8
	.word	2285
	.byte	3
	.word	2397
	.byte	9
	.byte	'Dem_EventIdListIteratorIsValid',0,3,6,193,2,30
	.word	294
	.byte	1,1,5
	.byte	'it',0,6,193,2,92
	.word	2402
	.byte	6,0,4
	.byte	'Dem_EventIdListIteratorNext',0,3,6,198,2,17,1,1,5
	.byte	'it',0,6,198,2,70
	.word	2317
	.byte	6,0,9
	.byte	'Dem_EventIdListIteratorCurrent',0,3,6,203,2,28
	.word	1314
	.byte	1,1,5
	.byte	'it',0,6,203,2,90
	.word	2402
	.byte	6,0
.L263:
	.byte	3
	.word	1314
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,7,36,19,1,1,5
	.byte	'buffer',0,7,36,51
	.word	2571
	.byte	5
	.byte	'bit_position',0,7,36,65
	.word	294
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,7,42,19,1,1,5
	.byte	'buffer',0,7,42,53
	.word	2571
	.byte	5
	.byte	'bit_position',0,7,42,67
	.word	294
	.byte	6,0
.L505:
	.byte	9
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,7,60,21
	.word	1314
	.byte	1,1
.L506:
	.byte	5
	.byte	'value',0,7,60,58
	.word	1314
.L508:
	.byte	5
	.byte	'bit_position',0,7,60,71
	.word	294
.L510:
	.byte	6,0
.L498:
	.byte	9
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,7,65,22
	.word	294
	.byte	1,1
.L500:
	.byte	5
	.byte	'value',0,7,65,55
	.word	1314
.L502:
	.byte	5
	.byte	'bit_position',0,7,65,68
	.word	294
.L504:
	.byte	7,6,0,0,9
	.byte	'rba_DiagLib_Bit16GetBits',0,3,7,70,21
	.word	1314
	.byte	1,1,5
	.byte	'value',0,7,70,53
	.word	1314
	.byte	5
	.byte	'bit_position',0,7,70,66
	.word	294
	.byte	5
	.byte	'number_of_bits',0,7,70,86
	.word	294
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,7,78,19,1,1,5
	.byte	'value',0,7,78,54
	.word	2571
	.byte	5
	.byte	'bit_position',0,7,78,67
	.word	294
	.byte	5
	.byte	'number_of_bits',0,7,78,87
	.word	294
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,8,36,19,1,1,5
	.byte	'buffer',0,8,36,51
	.word	159
	.byte	5
	.byte	'bit_position',0,8,36,65
	.word	294
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,8,42,19,1,1,5
	.byte	'buffer',0,8,42,53
	.word	159
	.byte	5
	.byte	'bit_position',0,8,42,67
	.word	294
	.byte	6,0,9
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,8,60,21
	.word	143
	.byte	1,1,5
	.byte	'value',0,8,60,58
	.word	143
	.byte	5
	.byte	'bit_position',0,8,60,71
	.word	294
	.byte	6,0,9
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,8,65,22
	.word	294
	.byte	1,1,5
	.byte	'value',0,8,65,55
	.word	143
	.byte	5
	.byte	'bit_position',0,8,65,68
	.word	294
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,8,78,19,1,1,5
	.byte	'value',0,8,78,54
	.word	159
	.byte	5
	.byte	'bit_position',0,8,78,67
	.word	294
	.byte	5
	.byte	'number_of_bits',0,8,78,87
	.word	294
	.byte	6,0,9
	.byte	'Dem_EnCoAreAllFulfilled',0,3,9,32,30
	.word	294
	.byte	1,1,5
	.byte	'enableConditionList',0,9,32,68
	.word	294
	.byte	6,0,9
	.byte	'Dem_NvMGetNvMBlocKId',0,3,10,49,28
	.word	1314
	.byte	1,1,5
	.byte	'id',0,10,49,68
	.word	294
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,10,138,1,17,1,1,6,0,9
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,11,36,21
	.word	1314
	.byte	1,1,5
	.byte	'val',0,11,36,70
	.word	1314
	.byte	7,6,0,0,9
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,11,41,21
	.word	143
	.byte	1,1,5
	.byte	'val',0,11,41,70
	.word	143
	.byte	7,6,0,0,9
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,12,55,22
	.word	294
	.byte	1,1,5
	.byte	'indx',0,12,55,78
	.word	1314
	.byte	6,0
.L494:
	.byte	9
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,12,75,22
	.word	294
	.byte	1,1
.L495:
	.byte	5
	.byte	'indx',0,12,75,77
	.word	1314
.L497:
	.byte	7,6,0,0
.L511:
	.byte	9
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,12,82,22
	.word	294
	.byte	1,1
.L512:
	.byte	5
	.byte	'indx',0,12,82,79
	.word	1314
.L514:
	.byte	6,0
.L515:
	.byte	9
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,12,89,22
	.word	294
	.byte	1,1
.L516:
	.byte	5
	.byte	'indx',0,12,89,76
	.word	1314
.L518:
	.byte	6,0,9
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,12,95,22
	.word	294
	.byte	1,1,5
	.byte	'indx',0,12,95,67
	.word	1314
	.byte	7,6,0,0,9
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,12,122,20
	.word	294
	.byte	1,1,5
	.byte	'indx',0,12,122,69
	.word	1314
	.byte	6,0,9
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,12,129,1,20
	.word	294
	.byte	1,1,5
	.byte	'indx',0,12,129,1,65
	.word	1314
	.byte	6,0,9
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,12,136,1,20
	.word	294
	.byte	1,1,5
	.byte	'indx',0,12,136,1,67
	.word	1314
	.byte	6,0,9
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,12,149,1,20
	.word	294
	.byte	1,1,5
	.byte	'indx',0,12,149,1,72
	.word	1314
	.byte	6,0,9
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,12,155,1,21
	.word	1314
	.byte	1,1,5
	.byte	'indx',0,12,155,1,79
	.word	1314
	.byte	7,6,0,0,9
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,12,168,1,20
	.word	294
	.byte	1,1,5
	.byte	'indx',0,12,168,1,67
	.word	1314
	.byte	6,0,9
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,12,208,1,27
	.word	294
	.byte	1,1,5
	.byte	'indx',0,12,208,1,76
	.word	1314
	.byte	6,0,2
	.byte	'short int',0,2,5,9
	.byte	'Dem_EvtGetDebounceLevel',0,3,13,193,1,19
	.word	4476
	.byte	1,1,5
	.byte	'EventId',0,13,193,1,60
	.word	1314
	.byte	6,0,9
	.byte	'Dem_EvtGetLastReportedEvent',0,3,13,219,1,32
	.word	294
	.byte	1,1,5
	.byte	'EventId',0,13,219,1,77
	.word	1314
	.byte	6,0,4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,13,227,3,17,1,1,6,0,4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,13,233,3,17,1,1,5
	.byte	'reason',0,13,233,3,72
	.word	294
	.byte	7,6,0,0,9
	.byte	'Dem_EvtIsSuppressed',0,3,13,244,4,30
	.word	294
	.byte	1,1,5
	.byte	'EventId',0,13,244,4,67
	.word	1314
	.byte	7,6,0,0,12
	.word	1314
	.byte	3
	.word	4765
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,14,27,17,1,1,5
	.byte	'result',0,14,27,79
	.word	4770
	.byte	5
	.byte	'request',0,14,27,109
	.word	1314
	.byte	5
	.byte	'newResult',0,14,27,133,1
	.word	294
	.byte	6,0,12
	.word	1314
	.byte	3
	.word	4865
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,14,65,17,1,1,5
	.byte	'request',0,14,65,82
	.word	4870
	.byte	5
	.byte	'newRequest',0,14,65,97
	.word	294
	.byte	6,0,3
	.word	143
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,14,151,1,17,1,1,5
	.byte	'selection',0,14,151,1,93
	.word	4952
	.byte	6,0,9
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,14,168,1,18
	.word	294
	.byte	1,1,5
	.byte	'selection',0,14,168,1,86
	.word	143
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,15,53,17,1,1,5
	.byte	'ClientId',0,15,53,80
	.word	294
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,15,68,17,1,1,5
	.byte	'state',0,15,68,62
	.word	294
	.byte	6,0,9
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,15,78,20
	.word	294
	.byte	1,1,5
	.byte	'ClientId',0,15,78,91
	.word	294
	.byte	7,6,6,6,6,0,0,3
	.word	294
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,16,17,17,1,1,5
	.byte	'trigger',0,16,17,52
	.word	5335
	.byte	5
	.byte	'trigger2set',0,16,17,77
	.word	294
	.byte	6,0,9
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,16,22,30
	.word	294
	.byte	1,1,5
	.byte	'trigger2test',0,16,22,69
	.word	294
	.byte	6,0,9
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,17,101,30
	.word	294
	.byte	1,1,5
	.byte	'EventId',0,17,101,87
	.word	1314
	.byte	5
	.byte	'debAction',0,17,101,120
	.word	1944
	.byte	6,0,9
	.byte	'Dem_EvMemIsMemIdValid',0,3,18,103,30
	.word	294
	.byte	1,1,5
	.byte	'MemId',0,18,103,65
	.word	1944
	.byte	6,0,9
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,18,112,30
	.word	294
	.byte	1,1,5
	.byte	'LocId',0,18,112,73
	.word	1944
	.byte	6,0,10,19,133,1,3,4,11
	.byte	'Status',0
	.word	1314
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	1314
	.byte	2,2,35,2,0,13,19,131,1,9,4,11
	.byte	'Data',0
	.word	5654
	.byte	4,2,35,0,0,14,7
	.word	294
	.byte	15,6,0,10,19,144,1,9,20,11
	.byte	'Hdr',0
	.word	5694
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	5715
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	294
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	294
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	294
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	294
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	294
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	143
	.byte	4,2,35,16,0,8
	.word	5724
	.byte	3
	.word	5892
	.byte	9
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,18,134,1,25
	.word	1944
	.byte	1,1,5
	.byte	'EventMemory',0,18,134,1,89
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemStatus',0,3,18,139,1,25
	.word	1944
	.byte	1,1,5
	.byte	'LocId',0,18,139,1,65
	.word	1944
	.byte	7,6,0,0,9
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,18,152,1,28
	.word	1314
	.byte	1,1,5
	.byte	'EventMemory',0,18,152,1,93
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,18,170,1,19
	.word	143
	.byte	1,1,5
	.byte	'EventMemory',0,18,170,1,83
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,18,188,1,18
	.word	294
	.byte	1,1,5
	.byte	'EventMemory',0,18,188,1,85
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,18,216,1,24
	.word	1944
	.byte	1,1,5
	.byte	'EventMemory',0,18,216,1,96
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,18,233,1,25
	.word	1944
	.byte	1,1,5
	.byte	'EventMemory',0,18,233,1,100
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,18,133,2,25
	.word	1944
	.byte	1,1,5
	.byte	'EventMemory',0,18,133,2,95
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,18,144,2,25
	.word	1944
	.byte	1,1,5
	.byte	'LocId',0,18,144,2,71
	.word	1944
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,18,150,2,17,1,1,5
	.byte	'LocId',0,18,150,2,63
	.word	1944
	.byte	5
	.byte	'AgingCounter',0,18,150,2,83
	.word	1944
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,18,161,2,25
	.word	1944
	.byte	1,1,5
	.byte	'EventMemory',0,18,161,2,103
	.word	5897
	.byte	6,0
.L316:
	.byte	2
	.byte	'char',0,1,6,9
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,18,213,2,18
	.word	6683
	.byte	1,1,5
	.byte	'EventMemory',0,18,213,2,92
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,18,224,2,18
	.word	6683
	.byte	1,1,5
	.byte	'EventMemory',0,18,224,2,88
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,18,238,3,25
	.word	1944
	.byte	1,1,5
	.byte	'EventMemory',0,18,238,3,101
	.word	5897
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,18,141,4,28
	.word	294
	.byte	1,1,5
	.byte	'EventMemory',0,18,141,4,93
	.word	5897
	.byte	6,0,3
	.word	5724
	.byte	9
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,18,170,4,19
	.word	556
	.byte	1,1,5
	.byte	'EventMemory',0,18,170,4,75
	.word	6988
	.byte	6,0,9
	.byte	'Dem_EvMemIsStored',0,3,18,206,4,30
	.word	294
	.byte	1,1,5
	.byte	'Status',0,18,206,4,61
	.word	1944
	.byte	6,0,9
	.byte	'Dem_EvMemIsEmpty',0,3,18,211,4,30
	.word	294
	.byte	1,1,5
	.byte	'Status',0,18,211,4,60
	.word	1944
	.byte	6,0,9
	.byte	'Dem_EvMemSetToEmpty',0,3,18,226,4,25
	.word	1944
	.byte	1,1,6,0,9
	.byte	'Dem_EvMemGetShadowVisibility',0,3,18,242,4,30
	.word	294
	.byte	1,1,6,0,9
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,18,131,5,25
	.word	1944
	.byte	1,1,5
	.byte	'MemId',0,18,131,5,69
	.word	1944
	.byte	6,0,9
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,18,143,5,25
	.word	1944
	.byte	1,1,5
	.byte	'MemId',0,18,143,5,67
	.word	1944
	.byte	6,0,3
	.word	1944
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,18,179,5,17,1,1,5
	.byte	'MemId',0,18,179,5,63
	.word	7348
	.byte	6,0,8
	.word	1944
	.byte	3
	.word	7410
	.byte	9
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,18,184,5,30
	.word	294
	.byte	1,1,5
	.byte	'MemId',0,18,184,5,86
	.word	7415
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,18,189,5,17,1,1,5
	.byte	'MemId',0,18,189,5,64
	.word	7348
	.byte	6,0,9
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,18,247,5,30
	.word	294
	.byte	1,1,5
	.byte	'StatusOld',0,18,247,5,66
	.word	1944
	.byte	5
	.byte	'StatusNew',0,18,247,5,90
	.word	1944
	.byte	5
	.byte	'Trigger',0,18,247,5,114
	.word	1944
	.byte	6,0,9
	.byte	'Dem_EvMemGetRamStsMask',0,3,18,154,7,25
	.word	1944
	.byte	1,1,5
	.byte	'EventId',0,18,154,7,64
	.word	1314
	.byte	7,6,0,0,3
	.word	294
.L257:
	.byte	9
	.byte	'Dem_EvMemIsDtcOriginValid',0,3,20,53,30
	.word	294
	.byte	1,1
.L259:
	.byte	5
	.byte	'DTCOrigin',0,20,53,77
	.word	7691
.L261:
	.byte	6,0,9
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,21,20,25
	.word	1944
	.byte	1,1,5
	.byte	'EventId',0,21,20,81
	.word	1314
	.byte	6,0,9
	.byte	'Dem_EvMemIsAged',0,3,21,61,30
	.word	294
	.byte	1,1,5
	.byte	'EventId',0,21,61,62
	.word	1314
	.byte	5
	.byte	'LocId',0,21,61,84
	.word	1944
	.byte	5
	.byte	'StatusNew',0,21,61,104
	.word	1944
	.byte	6,0,9
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,22,150,1,25
	.word	1944
	.byte	1,1,5
	.byte	'DTCOrigin',0,22,150,1,73
	.word	294
	.byte	6,0,9
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,22,222,1,25
	.word	1944
	.byte	1,1,5
	.byte	'EventId',0,22,222,1,67
	.word	1314
	.byte	7,6,0,0
.L392:
	.byte	9
	.byte	'Dem_DtcIsSuppressed',0,3,23,118,30
	.word	294
	.byte	1,1
.L394:
	.byte	5
	.byte	'dtcId',0,23,118,65
	.word	1314
.L396:
	.byte	7,6,0,0,9
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,23,128,1,30
	.word	294
	.byte	1,1,5
	.byte	'dtcId',0,23,128,1,73
	.word	1314
	.byte	6,0
.L356:
	.byte	9
	.byte	'Dem_GetDtcCode',0,3,23,223,1,28
	.word	143
	.byte	1,1
.L357:
	.byte	5
	.byte	'dtcId',0,23,223,1,58
	.word	1314
.L359:
	.byte	7,6,0,0
.L488:
	.byte	9
	.byte	'Dem_EventUsesOrigin',0,3,23,137,2,30
	.word	294
	.byte	1,1
.L489:
	.byte	5
	.byte	'eventId',0,23,137,2,67
	.word	1314
.L491:
	.byte	5
	.byte	'origin',0,23,137,2,94
	.word	294
.L493:
	.byte	7,6,6,6,0,0
.L472:
	.byte	9
	.byte	'Dem_DtcUsesOrigin',0,3,23,154,2,30
	.word	294
	.byte	1,1
.L474:
	.byte	5
	.byte	'dtcId',0,23,154,2,63
	.word	1314
.L476:
	.byte	5
	.byte	'origin',0,23,154,2,88
	.word	294
.L478:
	.byte	7,6,6,0,0
.L338:
	.byte	9
	.byte	'Dem_DtcFilterSyncGetDtcStatusByte',0,3,24,53,20
	.word	294
	.byte	1,1
.L340:
	.byte	5
	.byte	'dtcId',0,24,53,69
	.word	1314
.L342:
	.byte	5
	.byte	'DTCOrigin',0,24,53,94
	.word	294
.L344:
	.byte	5
	.byte	'DTCStatus',0,24,53,112
	.word	556
.L346:
	.byte	6,0
.L347:
	.byte	9
	.byte	'Dem_DTCFilterMatchesStatus',0,3,24,194,1,30
	.word	294
	.byte	1,1
.L350:
	.byte	5
	.byte	'DtcStatus',0,24,194,1,63
	.word	294
.L352:
	.byte	5
	.byte	'FaultDetectionCounter',0,24,194,1,80
	.word	6683
.L354:
	.byte	6,0
.L285:
	.byte	3
	.word	6683
.L292:
	.byte	3
	.word	294
	.byte	16
	.word	164
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	6,0,16
	.word	228
	.byte	17
	.word	256
	.byte	17
	.word	271
	.byte	6,0,16
	.word	311
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	7,18
	.word	164
	.byte	17
	.word	190
	.byte	17
	.word	205
	.byte	19
	.word	226
	.byte	0,6,18
	.word	228
	.byte	17
	.word	256
	.byte	17
	.word	271
	.byte	19
	.word	292
	.byte	0,6,0,0,16
	.word	418
	.byte	17
	.word	450
	.byte	17
	.word	465
	.byte	6,0,16
	.word	488
	.byte	17
	.word	516
	.byte	17
	.word	531
	.byte	6,0,16
	.word	561
	.byte	17
	.word	591
	.byte	17
	.word	606
	.byte	6,0,16
	.word	629
	.byte	17
	.word	661
	.byte	17
	.word	676
	.byte	6,0,16
	.word	699
	.byte	17
	.word	735
	.byte	17
	.word	750
	.byte	17
	.word	771
	.byte	7,18
	.word	561
	.byte	17
	.word	591
	.byte	17
	.word	606
	.byte	19
	.word	627
	.byte	0,6,18
	.word	629
	.byte	17
	.word	661
	.byte	17
	.word	676
	.byte	19
	.word	697
	.byte	0,6,0,0,16
	.word	800
	.byte	17
	.word	840
	.byte	17
	.word	854
	.byte	6,0,16
	.word	877
	.byte	17
	.word	913
	.byte	17
	.word	927
	.byte	7,18
	.word	800
	.byte	17
	.word	840
	.byte	17
	.word	854
	.byte	19
	.word	875
	.byte	0,6,0,0,16
	.word	952
	.byte	17
	.word	987
	.byte	17
	.word	1001
	.byte	17
	.word	1022
	.byte	6,0,16
	.word	1047
	.byte	17
	.word	1080
	.byte	17
	.word	1094
	.byte	17
	.word	1115
	.byte	6,0,16
	.word	1140
	.byte	17
	.word	1177
	.byte	17
	.word	1191
	.byte	17
	.word	1212
	.byte	17
	.word	1235
	.byte	7,18
	.word	1047
	.byte	17
	.word	1080
	.byte	17
	.word	1094
	.byte	17
	.word	1115
	.byte	19
	.word	1138
	.byte	0,6,0,0,20
	.byte	'Det_ReportError',0,25,112,16
	.word	294
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,25,112,39
	.word	1314
	.byte	5
	.byte	'InstanceId',0,25,112,55
	.word	294
	.byte	5
	.byte	'ApiId',0,25,112,73
	.word	294
	.byte	5
	.byte	'ErrorId',0,25,112,86
	.word	294
	.byte	0,16
	.word	1256
	.byte	17
	.word	1294
	.byte	6,0,16
	.word	1336
	.byte	17
	.word	1375
	.byte	6,0,16
	.word	1396
	.byte	17
	.word	1426
	.byte	6,0,16
	.word	1446
	.byte	17
	.word	1477
	.byte	6,0,16
	.word	1497
	.byte	17
	.word	1528
	.byte	6,0,16
	.word	1543
	.byte	17
	.word	1578
	.byte	6,0,16
	.word	1593
	.byte	17
	.word	1629
	.byte	6,0,16
	.word	1644
	.byte	17
	.word	1678
	.byte	6,0,16
	.word	1693
	.byte	17
	.word	1722
	.byte	6,0,16
	.word	1736
	.byte	17
	.word	1769
	.byte	6,0,16
	.word	1783
	.byte	17
	.word	1815
	.byte	6,0,16
	.word	1832
	.byte	17
	.word	1869
	.byte	7,18
	.word	1783
	.byte	17
	.word	1815
	.byte	19
	.word	1830
	.byte	0,6,0,0,16
	.word	1888
	.byte	17
	.word	1927
	.byte	6,0,16
	.word	1970
	.byte	17
	.word	1999
	.byte	6,0,16
	.word	2023
	.byte	17
	.word	2060
	.byte	6,0,16
	.word	2074
	.byte	17
	.word	2104
	.byte	6,0,16
	.word	2118
	.byte	17
	.word	2155
	.byte	6,0,16
	.word	2169
	.byte	17
	.word	2205
	.byte	6,0,16
	.word	2219
	.byte	17
	.word	2253
	.byte	6,0,16
	.word	2322
	.byte	17
	.word	2366
	.byte	17
	.word	2378
	.byte	7,18
	.word	1693
	.byte	17
	.word	1722
	.byte	19
	.word	1734
	.byte	0,6,0,0,16
	.word	2407
	.byte	17
	.word	2450
	.byte	6,0,16
	.word	2464
	.byte	17
	.word	2500
	.byte	6,0,16
	.word	2514
	.byte	17
	.word	2557
	.byte	6,0,16
	.word	2576
	.byte	17
	.word	2607
	.byte	17
	.word	2622
	.byte	6,0,16
	.word	2645
	.byte	17
	.word	2678
	.byte	17
	.word	2693
	.byte	6,0,16
	.word	2716
	.byte	17
	.word	2757
	.byte	17
	.word	2771
	.byte	6,0,16
	.word	2794
	.byte	17
	.word	2831
	.byte	17
	.word	2845
	.byte	7,18
	.word	2716
	.byte	17
	.word	2757
	.byte	17
	.word	2771
	.byte	19
	.word	2792
	.byte	0,6,0,0,16
	.word	2870
	.byte	17
	.word	2906
	.byte	17
	.word	2920
	.byte	17
	.word	2941
	.byte	6,0,16
	.word	2966
	.byte	17
	.word	3000
	.byte	17
	.word	3014
	.byte	17
	.word	3035
	.byte	6,0,16
	.word	3060
	.byte	17
	.word	3091
	.byte	17
	.word	3106
	.byte	6,0,16
	.word	3129
	.byte	17
	.word	3162
	.byte	17
	.word	3177
	.byte	6,0,16
	.word	3200
	.byte	17
	.word	3241
	.byte	17
	.word	3255
	.byte	6,0,16
	.word	3278
	.byte	17
	.word	3315
	.byte	17
	.word	3329
	.byte	7,18
	.word	3200
	.byte	17
	.word	3241
	.byte	17
	.word	3255
	.byte	19
	.word	3276
	.byte	0,6,0,0,16
	.word	3354
	.byte	17
	.word	3388
	.byte	17
	.word	3402
	.byte	17
	.word	3423
	.byte	6,0,16
	.word	3448
	.byte	17
	.word	3483
	.byte	6,0,16
	.word	3513
	.byte	17
	.word	3545
	.byte	6,0,16
	.word	3558
	.byte	6,0,16
	.word	3586
	.byte	17
	.word	3639
	.byte	7,18
	.word	1336
	.byte	17
	.word	1375
	.byte	19
	.word	1394
	.byte	0,6,0,0,16
	.word	3655
	.byte	17
	.word	3708
	.byte	7,18
	.word	1256
	.byte	17
	.word	1294
	.byte	19
	.word	1312
	.byte	0,6,0,0,16
	.word	3724
	.byte	17
	.word	3775
	.byte	6,0,16
	.word	3790
	.byte	17
	.word	3840
	.byte	7,18
	.word	2794
	.byte	17
	.word	2831
	.byte	17
	.word	2845
	.byte	21
	.word	2866
	.byte	18
	.word	2716
	.byte	17
	.word	2757
	.byte	17
	.word	2771
	.byte	19
	.word	2792
	.byte	0,19
	.word	2867
	.byte	0,0,6,0,0,16
	.word	3857
	.byte	17
	.word	3909
	.byte	6,0,16
	.word	3924
	.byte	17
	.word	3973
	.byte	6,0,16
	.word	3988
	.byte	17
	.word	4028
	.byte	7,18
	.word	2794
	.byte	17
	.word	2831
	.byte	17
	.word	2845
	.byte	21
	.word	2866
	.byte	18
	.word	2716
	.byte	17
	.word	2757
	.byte	17
	.word	2771
	.byte	19
	.word	2792
	.byte	0,19
	.word	2867
	.byte	0,0,6,0,0,16
	.word	4045
	.byte	17
	.word	4089
	.byte	6,0,16
	.word	4104
	.byte	17
	.word	4145
	.byte	6,0,16
	.word	4161
	.byte	17
	.word	4204
	.byte	6,0,16
	.word	4220
	.byte	17
	.word	4268
	.byte	6,0,16
	.word	4284
	.byte	17
	.word	4338
	.byte	7,18
	.word	2870
	.byte	17
	.word	2906
	.byte	17
	.word	2920
	.byte	17
	.word	2941
	.byte	19
	.word	2964
	.byte	0,6,0,0,16
	.word	4356
	.byte	17
	.word	4399
	.byte	6,0,16
	.word	4415
	.byte	17
	.word	4460
	.byte	6,0,16
	.word	4489
	.byte	17
	.word	4525
	.byte	6,0,16
	.word	4544
	.byte	17
	.word	4584
	.byte	6,0,16
	.word	4603
	.byte	6,0,16
	.word	4656
	.byte	17
	.word	4692
	.byte	7,18
	.word	3060
	.byte	17
	.word	3091
	.byte	17
	.word	3106
	.byte	19
	.word	3127
	.byte	0,6,0,0,16
	.word	4712
	.byte	17
	.word	4744
	.byte	7,18
	.word	877
	.byte	17
	.word	913
	.byte	17
	.word	927
	.byte	21
	.word	948
	.byte	18
	.word	800
	.byte	17
	.word	840
	.byte	17
	.word	854
	.byte	19
	.word	875
	.byte	0,19
	.word	949
	.byte	0,0,6,0,0,16
	.word	4775
	.byte	17
	.word	4813
	.byte	17
	.word	4828
	.byte	17
	.word	4844
	.byte	6,0,16
	.word	4875
	.byte	17
	.word	4915
	.byte	17
	.word	4931
	.byte	6,0,16
	.word	4957
	.byte	17
	.word	5015
	.byte	6,0,16
	.word	5036
	.byte	17
	.word	5091
	.byte	6,0,16
	.word	5112
	.byte	17
	.word	5165
	.byte	6,0,16
	.word	5184
	.byte	17
	.word	5230
	.byte	6,0,16
	.word	5246
	.byte	17
	.word	5311
	.byte	7,18
	.word	1396
	.byte	17
	.word	1426
	.byte	19
	.word	1444
	.byte	0,6,18
	.word	1396
	.byte	17
	.word	1426
	.byte	19
	.word	1444
	.byte	0,6,18
	.word	5036
	.byte	17
	.word	5091
	.byte	19
	.word	5110
	.byte	0,6,18
	.word	4775
	.byte	17
	.word	4813
	.byte	17
	.word	4828
	.byte	17
	.word	4844
	.byte	19
	.word	4863
	.byte	0,6,0,0,20
	.byte	'Dem_DtcStatusByteRetrieve',0,26,15,7
	.word	294
	.byte	1,1,1,1,5
	.byte	'dtcId',0,26,15,48
	.word	1314
	.byte	0,3
	.word	294
	.byte	20
	.byte	'Dem_DtcStatusByteRetrieveWithOrigin',0,26,16,7
	.word	294
	.byte	1,1,1,1,5
	.byte	'dtcId',0,26,16,58
	.word	1314
	.byte	5
	.byte	'DtcOrigin',0,26,16,83
	.word	294
	.byte	5
	.byte	'DtcStatusIsValid',0,26,16,103
	.word	10282
	.byte	0,16
	.word	5340
	.byte	17
	.word	5365
	.byte	17
	.word	5381
	.byte	6,0,16
	.word	5403
	.byte	17
	.word	5437
	.byte	6,0,16
	.word	5460
	.byte	17
	.word	5512
	.byte	17
	.word	5528
	.byte	6,0,16
	.word	5548
	.byte	17
	.word	5581
	.byte	6,0,16
	.word	5597
	.byte	17
	.word	5638
	.byte	6,0,16
	.word	5902
	.byte	17
	.word	5946
	.byte	6,0,16
	.word	5969
	.byte	17
	.word	6008
	.byte	7,18
	.word	5902
	.byte	17
	.word	5946
	.byte	19
	.word	5967
	.byte	0,6,0,0,16
	.word	6027
	.byte	17
	.word	6072
	.byte	6,0,16
	.word	6095
	.byte	17
	.word	6139
	.byte	6,0,16
	.word	6162
	.byte	17
	.word	6209
	.byte	6,0,16
	.word	6232
	.byte	17
	.word	6284
	.byte	6,0,16
	.word	6307
	.byte	17
	.word	6362
	.byte	6,0,16
	.word	6385
	.byte	17
	.word	6435
	.byte	6,0,16
	.word	6458
	.byte	17
	.word	6503
	.byte	7,18
	.word	6385
	.byte	17
	.word	6435
	.byte	19
	.word	6456
	.byte	0,6,0,0,16
	.word	6522
	.byte	17
	.word	6563
	.byte	17
	.word	6578
	.byte	6,0,16
	.word	6602
	.byte	17
	.word	6660
	.byte	6,0,16
	.word	6691
	.byte	17
	.word	6745
	.byte	6,0,16
	.word	6768
	.byte	17
	.word	6818
	.byte	6,0,16
	.word	6841
	.byte	17
	.word	6897
	.byte	6,0,16
	.word	6920
	.byte	17
	.word	6965
	.byte	6,0,16
	.word	6993
	.byte	17
	.word	7035
	.byte	6,0,16
	.word	7058
	.byte	17
	.word	7088
	.byte	6,0,16
	.word	7106
	.byte	17
	.word	7135
	.byte	6,0,16
	.word	7153
	.byte	6,0,16
	.word	7187
	.byte	6,0,16
	.word	7230
	.byte	17
	.word	7273
	.byte	6,0,16
	.word	7290
	.byte	17
	.word	7331
	.byte	6,0,16
	.word	7353
	.byte	17
	.word	7393
	.byte	6,0,16
	.word	7420
	.byte	17
	.word	7468
	.byte	6,0,16
	.word	7485
	.byte	17
	.word	7526
	.byte	6,0,16
	.word	7543
	.byte	17
	.word	7578
	.byte	17
	.word	7597
	.byte	17
	.word	7616
	.byte	6,0,16
	.word	7635
	.byte	17
	.word	7670
	.byte	7,18
	.word	3724
	.byte	17
	.word	3775
	.byte	19
	.word	3788
	.byte	0,6,0,0,16
	.word	7696
	.byte	17
	.word	7733
	.byte	6,0,16
	.word	7753
	.byte	17
	.word	7804
	.byte	6,0,16
	.word	7822
	.byte	17
	.word	7849
	.byte	17
	.word	7865
	.byte	17
	.word	7879
	.byte	6,0,16
	.word	7899
	.byte	17
	.word	7941
	.byte	6,0,16
	.word	7962
	.byte	17
	.word	8000
	.byte	7,18
	.word	3790
	.byte	17
	.word	3840
	.byte	21
	.word	3853
	.byte	18
	.word	2794
	.byte	17
	.word	2831
	.byte	17
	.word	2845
	.byte	21
	.word	2866
	.byte	18
	.word	2716
	.byte	17
	.word	2757
	.byte	17
	.word	2771
	.byte	19
	.word	2792
	.byte	0,19
	.word	2867
	.byte	0,0,19
	.word	3854
	.byte	0,0,6,0,0,16
	.word	8021
	.byte	17
	.word	8052
	.byte	7,18
	.word	877
	.byte	17
	.word	913
	.byte	17
	.word	927
	.byte	21
	.word	948
	.byte	18
	.word	800
	.byte	17
	.word	840
	.byte	17
	.word	854
	.byte	19
	.word	875
	.byte	0,19
	.word	949
	.byte	0,0,6,0,0,16
	.word	8070
	.byte	17
	.word	8110
	.byte	6,0,16
	.word	8127
	.byte	17
	.word	8154
	.byte	7,18
	.word	1644
	.byte	17
	.word	1678
	.byte	19
	.word	1691
	.byte	0,6,0,0,16
	.word	8173
	.byte	17
	.word	8205
	.byte	17
	.word	8222
	.byte	7,18
	.word	3857
	.byte	17
	.word	3909
	.byte	19
	.word	3922
	.byte	0,6,18
	.word	3924
	.byte	17
	.word	3973
	.byte	19
	.word	3986
	.byte	0,6,18
	.word	3790
	.byte	17
	.word	3840
	.byte	21
	.word	3853
	.byte	18
	.word	2794
	.byte	17
	.word	2831
	.byte	17
	.word	2845
	.byte	21
	.word	2866
	.byte	18
	.word	2716
	.byte	17
	.word	2757
	.byte	17
	.word	2771
	.byte	19
	.word	2792
	.byte	0,19
	.word	2867
	.byte	0,0,19
	.word	3854
	.byte	0,0,6,0,0,16
	.word	8244
	.byte	17
	.word	8274
	.byte	17
	.word	8289
	.byte	7,18
	.word	1832
	.byte	17
	.word	1869
	.byte	21
	.word	1884
	.byte	18
	.word	1783
	.byte	17
	.word	1815
	.byte	19
	.word	1830
	.byte	0,19
	.word	1885
	.byte	0,0,6,18
	.word	8173
	.byte	17
	.word	8205
	.byte	17
	.word	8222
	.byte	21
	.word	8238
	.byte	18
	.word	3857
	.byte	17
	.word	3909
	.byte	19
	.word	3922
	.byte	0,19
	.word	8239
	.byte	18
	.word	3924
	.byte	17
	.word	3973
	.byte	19
	.word	3986
	.byte	0,19
	.word	8240
	.byte	18
	.word	3790
	.byte	17
	.word	3840
	.byte	21
	.word	3853
	.byte	18
	.word	2794
	.byte	17
	.word	2831
	.byte	17
	.word	2845
	.byte	21
	.word	2866
	.byte	18
	.word	2716
	.byte	17
	.word	2757
	.byte	17
	.word	2771
	.byte	19
	.word	2792
	.byte	0,19
	.word	2867
	.byte	0,0,19
	.word	3854
	.byte	0,0,19
	.word	8241
	.byte	0,0,6,0,0,20
	.byte	'Dem_DtcFaultDetectionRetrieve',0,23,199,2,7
	.word	6683
	.byte	1,1,1,1,5
	.byte	'dtcId',0,23,199,2,52
	.word	1314
	.byte	0
.L308:
	.byte	3
	.word	1314
.L332:
	.byte	8
	.word	143
.L334:
	.byte	8
	.word	143
.L336:
	.byte	8
	.word	143
.L376:
	.byte	2
	.byte	'int',0,4,5
.L374:
	.byte	8
	.word	11491
.L421:
	.byte	8
	.word	143
.L423:
	.byte	8
	.word	143
.L425:
	.byte	8
	.word	143
	.byte	16
	.word	8310
	.byte	17
	.word	8355
	.byte	17
	.word	8369
	.byte	17
	.word	8387
	.byte	6,0,16
	.word	8407
	.byte	17
	.word	8446
	.byte	17
	.word	8465
	.byte	6,0,22,1,3
	.word	11557
	.byte	23
	.byte	'__codeptr',0,24,1,1
	.word	11559
	.byte	23
	.byte	'sint8',0,27,76,25
	.word	6683
	.byte	23
	.byte	'uint8',0,27,81,25
	.word	294
	.byte	23
	.byte	'sint16',0,27,86,25
	.word	4476
	.byte	23
	.byte	'uint16',0,27,91,25
	.word	1314
	.byte	23
	.byte	'sint32',0,27,96,24
	.word	11491
	.byte	23
	.byte	'uint32',0,27,106,24
	.word	143
	.byte	2
	.byte	'unsigned long long int',0,8,7,23
	.byte	'uint64',0,27,111,30
	.word	11670
	.byte	23
	.byte	'boolean',0,27,127,25
	.word	294
	.byte	23
	.byte	'uint8_least',0,27,137,1,25
	.word	1944
	.byte	23
	.byte	'uint16_least',0,27,147,1,25
	.word	1944
	.byte	23
	.byte	'StatusType',0,28,191,1,27
	.word	294
	.byte	23
	.byte	'Std_ReturnType',0,28,199,1,15
	.word	294
	.byte	10,28,206,1,9,8,11
	.byte	'vendorID',0
	.word	1314
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	1314
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	294
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	294
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	294
	.byte	1,2,35,6,0,23
	.byte	'Std_VersionInfoType',0,28,213,1,3
	.word	11814
	.byte	23
	.byte	'Dem_ClientRequestType',0,29,46,16
	.word	1314
	.byte	23
	.byte	'Dem_ClientResultType',0,29,47,16
	.word	1314
	.byte	23
	.byte	'Dem_ClientSelectionType',0,29,48,16
	.word	143
	.byte	23
	.byte	'Dem_ClientPriorityType',0,29,50,15
	.word	294
	.byte	23
	.byte	'Dem_ComponentIdType',0,30,20,15
	.word	294
	.byte	23
	.byte	'PduIdType',0,31,22,19
	.word	1314
	.byte	23
	.byte	'PduLengthType',0,31,26,19
	.word	1314
	.byte	24,32,113,9,4,25
	.byte	'TP_DATACONF',0,0,25
	.byte	'TP_DATARETRY',0,1,25
	.byte	'TP_CONFPENDING',0,2,0,23
	.byte	'TpDataStateType',0,32,118,3
	.word	12154
	.byte	23
	.byte	'Can_IdType',0,33,32,16
	.word	143
	.byte	23
	.byte	'Can_HwHandleType',0,33,43,16
	.word	1314
	.byte	10,34,93,9,8,11
	.byte	'Class',0
	.word	294
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	294
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	143
	.byte	4,2,35,4,0,23
	.byte	'OsTrapInfoType',0,34,97,3
	.word	12274
	.byte	14,68
	.word	143
	.byte	15,16,0,10,34,154,1,9,68,11
	.byte	'store',0
	.word	12354
	.byte	68,2,35,0,0,14,68
	.word	12363
	.byte	15,0,0,23
	.byte	'Os_JumpBufType',0,34,156,1,3
	.word	12385
	.byte	23
	.byte	'Os_StackTraceType',0,34,174,1,18
	.word	143
	.byte	10,34,175,1,9,8,11
	.byte	'sp',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	143
	.byte	4,2,35,4,0,23
	.byte	'Os_StackValueType',0,34,175,1,63
	.word	12445
	.byte	23
	.byte	'Os_StackSizeType',0,34,176,1,27
	.word	12445
	.byte	26,1,1,3
	.word	12530
	.byte	23
	.byte	'Os_VoidVoidFunctionType',0,34,179,1,16
	.word	12533
	.byte	23
	.byte	'ApplicationType',0,34,193,1,23
	.word	294
	.byte	27
	.byte	'Os_ApplicationConfigurationType_s',0,34,198,1,16,2,11
	.byte	'app_id',0
	.word	294
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	294
	.byte	1,2,35,1,0,23
	.byte	'Os_ApplicationConfigurationType',0,34,201,1,3
	.word	12596
	.byte	23
	.byte	'Os_CoreStateType',0,34,203,1,16
	.word	143
	.byte	23
	.byte	'AreaIdType',0,34,204,1,16
	.word	1314
	.byte	23
	.byte	'Os_PeripheralAddressType',0,34,212,1,22
	.word	143
	.byte	23
	.byte	'TickType',0,34,221,1,22
	.word	143
	.byte	23
	.byte	'Os_StopwatchTickType',0,34,225,1,22
	.word	143
	.byte	23
	.byte	'Os_Lockable',0,34,234,1,18
	.word	159
	.byte	23
	.byte	'CoreIdType',0,34,236,1,16
	.word	1314
	.byte	23
	.byte	'SpinlockIdType',0,34,237,1,16
	.word	1314
	.byte	24,34,239,1,9,4,25
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,25
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,23
	.byte	'TryToGetSpinlockType',0,34,239,1,74
	.word	12903
	.byte	24,34,174,2,9,4,25
	.byte	'APPLICATION_ACCESSIBLE',0,0,25
	.byte	'APPLICATION_RESTARTING',0,1,25
	.byte	'APPLICATION_TERMINATED',0,2,0,23
	.byte	'ApplicationStateType',0,34,174,2,92
	.word	12996
	.byte	28
	.byte	'void',0,3
	.word	13108
	.byte	29,1,1,30
	.word	294
	.byte	30
	.word	13114
	.byte	0,3
	.word	13119
	.byte	23
	.byte	'Os_FunctionEntryType',0,34,183,2,16
	.word	13133
	.byte	27
	.byte	'Os_MeterInfoType_s',0,34,193,2,16,48,11
	.byte	'elapsed',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	143
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	143
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	143
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	12445
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	12445
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	12445
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	12445
	.byte	8,2,35,40,0,23
	.byte	'Os_MeterInfoType',0,34,202,2,3
	.word	13168
	.byte	3
	.word	13168
	.byte	23
	.byte	'Os_MeterInfoRefType',0,34,203,2,50
	.word	13366
	.byte	23
	.byte	'EventMaskType',0,34,206,2,15
	.word	294
	.byte	23
	.byte	'Os_imaskType',0,34,211,2,16
	.word	143
	.byte	27
	.byte	'Os_ISRDynType_s',0,34,213,2,16,48,11
	.byte	'meter',0
	.word	13168
	.byte	48,2,35,0,0,23
	.byte	'Os_ISRDynType',0,34,215,2,3
	.word	13445
	.byte	3
	.word	13445
	.byte	8
	.word	13506
	.byte	27
	.byte	'Os_ISRType_s',0,34,216,2,16,24,11
	.byte	'entry_function',0
	.word	12538
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	13511
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	143
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	12445
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	294
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	294
	.byte	1,2,35,21,0,23
	.byte	'Os_ISRType',0,34,223,2,3
	.word	13516
	.byte	3
	.word	12530
	.byte	8
	.word	13516
	.byte	3
	.word	13675
	.byte	23
	.byte	'ISRType',0,34,224,2,46
	.word	13680
	.byte	23
	.byte	'Os_bitmask',0,34,239,2,22
	.word	143
	.byte	23
	.byte	'Os_pset0Type',0,34,240,2,20
	.word	143
	.byte	23
	.byte	'Os_pset1Type',0,34,241,2,20
	.word	143
	.byte	23
	.byte	'Os_pset2Type',0,34,242,2,20
	.word	143
	.byte	13,34,243,2,9,4,11
	.byte	'p0',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	143
	.byte	4,2,35,0,0,23
	.byte	'Os_psetType',0,34,247,2,3
	.word	13788
	.byte	13,34,249,2,9,4,11
	.byte	't0',0
	.word	143
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	143
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	143
	.byte	4,2,35,0,0,23
	.byte	'Os_tpmaskType',0,34,253,2,3
	.word	13852
	.byte	23
	.byte	'Os_ActivationCountType',0,34,254,2,23
	.word	294
	.byte	27
	.byte	'Os_TaskDynType_s',0,34,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	12394
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	13168
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	294
	.byte	1,2,35,116,0,23
	.byte	'Os_TaskDynType',0,34,132,3,3
	.word	13950
	.byte	14,68
	.word	12363
	.byte	15,0,0,3
	.word	13950
	.byte	8
	.word	14076
	.byte	27
	.byte	'Os_TaskType_s',0,34,134,3,16,40,11
	.byte	'dynamic',0
	.word	14081
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	12538
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	13788
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	13852
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	13852
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	1314
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	143
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	12445
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	294
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	294
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	294
	.byte	1,2,35,38,0,23
	.byte	'Os_TaskType',0,34,146,3,3
	.word	14086
	.byte	8
	.word	14086
	.byte	3
	.word	14336
	.byte	23
	.byte	'TaskType',0,34,147,3,47
	.word	14341
	.byte	31
	.byte	'Os_TaskStateType',0,34,155,3,6,4,25
	.byte	'SUSPENDED',0,0,25
	.byte	'READY',0,1,25
	.byte	'WAITING',0,2,25
	.byte	'RUNNING',0,3,0,23
	.byte	'TaskStateType',0,34,156,3,31
	.word	14364
	.byte	13,34,167,3,3,4,11
	.byte	'tpmask',0
	.word	13852
	.byte	4,2,35,0,0,27
	.byte	'Os_ResourceDynType_s',0,34,166,3,16,4,11
	.byte	'saved_priority',0
	.word	14451
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType',0,34,170,3,3
	.word	14474
	.byte	3
	.word	14474
	.byte	8
	.word	14554
	.byte	27
	.byte	'Os_ResourceType_s',0,34,171,3,16,12,11
	.byte	'dynamic',0
	.word	14559
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	13852
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	294
	.byte	1,2,35,8,0,23
	.byte	'Os_ResourceType',0,34,175,3,3
	.word	14564
	.byte	10,34,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	143
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	143
	.byte	4,2,35,8,0,23
	.byte	'AlarmBaseType',0,34,185,3,3
	.word	14663
	.byte	10,34,206,3,9,8,11
	.byte	'Running',0
	.word	294
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	294
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	143
	.byte	4,2,35,4,0,23
	.byte	'Os_CounterStatusType',0,34,210,3,3
	.word	14758
	.byte	32
	.word	294
	.byte	1,1,3
	.word	14844
	.byte	23
	.byte	'Os_CounterIncrAdvType',0,34,217,3,22
	.word	14851
	.byte	27
	.byte	's_swd',0,34,222,3,12,4,11
	.byte	'count',0
	.word	143
	.byte	4,2,35,0,0,13,34,221,3,3,4,11
	.byte	'sw',0
	.word	14887
	.byte	4,2,35,0,0,27
	.byte	'Os_CounterDynType_s',0,34,220,3,16,4,11
	.byte	'type_dependent',0
	.word	14915
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType',0,34,226,3,3
	.word	14934
	.byte	3
	.word	14934
	.byte	8
	.word	15012
	.byte	27
	.byte	'Os_CounterType_s',0,34,227,3,16,28,11
	.byte	'dynamic',0
	.word	15017
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	14856
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	14663
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	13114
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	294
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	294
	.byte	1,2,35,25,0,23
	.byte	'Os_CounterType',0,34,234,3,3
	.word	15022
	.byte	3
	.word	14844
	.byte	8
	.word	15022
	.byte	3
	.word	15174
	.byte	23
	.byte	'CounterType',0,34,235,3,52
	.word	15179
	.byte	31
	.byte	'Os_ScheduleTableStatusType',0,34,240,3,6,4,25
	.byte	'SCHEDULETABLE_STOPPED',0,0,25
	.byte	'SCHEDULETABLE_NEXT',0,1,25
	.byte	'SCHEDULETABLE_WAITING',0,2,25
	.byte	'SCHEDULETABLE_RUNNING',0,3,25
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,23
	.byte	'ScheduleTableStatusType',0,34,241,3,41
	.word	15205
	.byte	8
	.word	.L606-.L170
	.byte	3
	.word	15405
	.byte	23
	.byte	'ScheduleTableType',0,34,128,4,58
	.word	15410
	.byte	27
	.byte	'Os_ScheduleTableDynType_s',0,34,130,4,16,16,11
	.byte	'match',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	15415
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	15205
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	1314
	.byte	2,2,35,12,0,3
	.word	15442
	.byte	8
	.word	15535
.L606:
	.byte	27
	.byte	'Os_ScheduleTableType_s',0,34,247,3,16,16,11
	.byte	'dynamic',0
	.word	15540
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	15184
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	294
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	1314
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	294
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	294
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	294
	.byte	1,2,35,14,0,23
	.byte	'Os_ScheduleTableType',0,34,255,3,3
	.word	15545
	.byte	8
	.word	15545
	.byte	3
	.word	15725
	.byte	8
	.word	15022
	.byte	3
	.word	15735
	.byte	12
	.word	12838
	.byte	12
	.word	13788
	.byte	12
	.word	13685
	.byte	12
	.word	14346
	.byte	12
	.word	13852
	.byte	12
	.word	294
	.byte	12
	.word	14346
	.byte	27
	.byte	'Os_ControlledCoreType_s',0,34,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	12274
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	15745
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	15750
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	15755
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	15760
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	15765
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	13371
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	13168
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	294
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	15770
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	12445
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	294
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	15775
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	12445
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	294
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	294
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	294
	.byte	1,2,35,110,0,23
	.byte	'Os_ControlledCoreType',0,34,141,7,3
	.word	15780
	.byte	3
	.word	143
	.byte	8
	.word	13516
	.byte	3
	.word	16236
	.byte	8
	.word	14086
	.byte	3
	.word	16246
	.byte	3
	.word	13168
	.byte	27
	.byte	'Os_AnyCoreType_s',0,34,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	143
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	143
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	143
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	143
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	143
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	12394
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	294
	.byte	1,2,35,92,0,23
	.byte	'Os_AnyCoreType',0,34,160,7,3
	.word	16261
	.byte	23
	.byte	'Can_TxObjPriorityClassType',0,35,219,3,16
	.word	143
	.byte	27
	.byte	'Can_TxHwObjectConfigType',0,35,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	294
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	294
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	143
	.byte	4,2,35,4,0,23
	.byte	'Can_TxHwObjectConfigType',0,35,252,3,3
	.word	16538
	.byte	27
	.byte	'Can_RxHwObjectConfigType',0,35,129,4,16,12,11
	.byte	'MaskRef',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	143
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	294
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	294
	.byte	1,2,35,9,0,23
	.byte	'Can_RxHwObjectConfigType',0,35,147,4,3
	.word	16674
	.byte	14,4
	.word	294
	.byte	15,3,0,27
	.byte	'Can_ControllerMOMapConfigType',0,35,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	16814
	.byte	4,2,35,0,0,23
	.byte	'Can_ControllerMOMapConfigType',0,35,184,4,3
	.word	16823
	.byte	27
	.byte	'Can_NPCRValueType',0,35,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	1314
	.byte	2,2,35,0,0,23
	.byte	'Can_NPCRValueType',0,35,191,4,3
	.word	16924
	.byte	27
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,35,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	1314
	.byte	2,2,35,4,0,23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,35,198,4,3
	.word	16999
	.byte	8
	.word	16999
	.byte	3
	.word	17164
	.byte	27
	.byte	'Can_BaudrateConfigPtrType',0,35,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	17169
	.byte	4,2,35,0,0,23
	.byte	'Can_BaudrateConfigPtrType',0,35,204,4,3
	.word	17174
	.byte	27
	.byte	'Can_EventHandlingType',0,35,226,4,16,4,11
	.byte	'CanEventType',0
	.word	16814
	.byte	4,2,35,0,0,23
	.byte	'Can_EventHandlingType',0,35,229,4,3
	.word	17274
	.byte	23
	.byte	'Rte_TransformerErrorCode',0,36,130,1,15
	.word	294
	.byte	23
	.byte	'Rte_TransformerClass',0,36,131,1,15
	.word	294
	.byte	10,36,168,1,9,12,11
	.byte	'in',0
	.word	13114
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	13114
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	1314
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	294
	.byte	1,2,35,10,0,23
	.byte	'Rte_QDynType',0,36,173,1,3
	.word	17420
	.byte	24,36,175,1,9,4,25
	.byte	'RTE_DRA',0,0,25
	.byte	'RTE_WOWP',0,1,25
	.byte	'RTE_TASK',0,2,25
	.byte	'RTE_ARE',0,3,25
	.byte	'RTE_EV',0,4,25
	.byte	'RTE_MSI',0,5,0,23
	.byte	'Rte_NotificationType',0,36,182,1,3
	.word	17507
	.byte	14,128,8
	.word	294
	.byte	15,255,7,0,23
	.byte	'Impl_NVM_DstPtrType_1024',0,37,50,15
	.word	17605
	.byte	23
	.byte	'CanIf_u32_impl',0,37,69,16
	.word	143
	.byte	23
	.byte	'CanIf_u16_impl',0,37,71,16
	.word	1314
	.byte	23
	.byte	'CanIf_u8_impl',0,37,73,15
	.word	294
	.byte	23
	.byte	'CanIf_ControllerModeType_Enum_impl',0,37,88,15
	.word	294
	.byte	23
	.byte	'CanIf_PduModeType_Enum_impl',0,37,90,15
	.word	294
	.byte	10,37,92,9,2,11
	.byte	'DeviceMode',0
	.word	294
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	294
	.byte	1,2,35,1,0,23
	.byte	'CanIf_ControllerStateType_struct_impl',0,37,95,3
	.word	17796
	.byte	23
	.byte	'CanIf_NotifStatusType_Enum_impl',0,37,100,15
	.word	294
	.byte	23
	.byte	'CanSM_boolean_Impl',0,37,120,15
	.word	294
	.byte	23
	.byte	'CanSM_u8_Impl',0,37,123,15
	.word	294
	.byte	23
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,37,128,1,15
	.word	294
	.byte	23
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,37,132,1,15
	.word	294
	.byte	23
	.byte	'CanSM_u16_Impl',0,37,136,1,16
	.word	1314
	.byte	23
	.byte	'CanSM_TimerStateType_Enum_impl',0,37,138,1,15
	.word	294
	.byte	10,37,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	1314
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	294
	.byte	1,2,35,2,0,23
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,37,143,1,3
	.word	18137
	.byte	23
	.byte	'Com_impl_u16',0,37,154,1,16
	.word	1314
	.byte	23
	.byte	'Com_impl_u8',0,37,157,1,15
	.word	294
	.byte	23
	.byte	'ComM_uint32_Impl',0,37,173,1,16
	.word	143
	.byte	23
	.byte	'ComM_uint16_Impl',0,37,175,1,16
	.word	1314
	.byte	23
	.byte	'ComM_uint8_Impl',0,37,177,1,15
	.word	294
	.byte	23
	.byte	'ComM_bool_Impl',0,37,179,1,15
	.word	294
	.byte	10,37,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	143
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	1314
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	294
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	294
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	294
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	294
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	294
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	294
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	294
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	294
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	294
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	294
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	294
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	294
	.byte	1,2,35,21,0,23
	.byte	'ComM_ChannelStruct_Impl',0,37,197,1,3
	.word	18369
	.byte	10,37,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	1314
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	1314
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	294
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	294
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	294
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	294
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	294
	.byte	1,2,35,8,0,23
	.byte	'ComM_UserStruct_Impl',0,37,214,1,3
	.word	18873
	.byte	23
	.byte	'Dcm_IOOperationResponseType',0,37,252,1,15
	.word	294
	.byte	23
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	37,138,2,15
	.word	294
	.byte	23
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,37,146,2,15
	.word	294
	.byte	23
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,37,150,2,15
	.word	294
	.byte	23
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,37,154,2,15
	.word	294
	.byte	23
	.byte	'Dem_DTCFormatType',0,37,160,2,15
	.word	294
	.byte	23
	.byte	'Dem_DTCOriginType',0,37,162,2,15
	.word	294
	.byte	23
	.byte	'Dem_EventIdType',0,37,168,2,16
	.word	1314
	.byte	23
	.byte	'Dem_EventStatusType',0,37,170,2,15
	.word	294
	.byte	23
	.byte	'Dem_InitMonitorReasonType',0,37,176,2,15
	.word	294
	.byte	23
	.byte	'Dem_OperationCycleIdType',0,37,179,2,15
	.word	294
	.byte	23
	.byte	'NvM_BlockIdType',0,37,215,2,16
	.word	1314
	.byte	23
	.byte	'NvM_RequestResultType',0,37,225,2,15
	.word	294
	.byte	23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,37,243,3,34
	.word	17616
	.byte	14,128,8
	.word	294
	.byte	15,255,7,0,23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,37,246,3,34
	.word	17616
	.byte	23
	.byte	'Dem_DTCGroupIdType',0,38,49,15
	.word	294
	.byte	23
	.byte	'Dem_DtcIdType',0,38,50,16
	.word	1314
	.byte	23
	.byte	'Dem_ClientIdType',0,38,53,15
	.word	294
	.byte	23
	.byte	'Dem_DtcCodeType',0,38,55,16
	.word	143
	.byte	23
	.byte	'Dem_boolean_least',0,38,60,17
	.word	294
	.byte	23
	.byte	'Dem_EventCategoryType',0,38,62,15
	.word	294
	.byte	23
	.byte	'Dem_ReturnSetFilterType',0,38,193,1,15
	.word	294
	.byte	23
	.byte	'Dem_FilterWithSeverityType',0,38,203,1,15
	.word	294
	.byte	23
	.byte	'Dem_DTCSeverityType',0,38,217,1,15
	.word	294
	.byte	23
	.byte	'Dem_FilterForFDCType',0,38,229,1,15
	.word	294
	.byte	23
	.byte	'Dem_ReturnGetNumberOfFilteredDTCType',0,38,145,2,15
	.word	294
	.byte	23
	.byte	'Dem_DebugDataType',0,38,131,3,16
	.word	143
	.byte	23
	.byte	'Dem_DTCKindType',0,38,145,3,16
	.word	294
	.byte	23
	.byte	'Dem_TriggerType',0,38,167,3,15
	.word	294
	.byte	23
	.byte	'Dem_ReturnGetNextFilteredDTCType',0,38,186,3,15
	.word	294
	.byte	23
	.byte	'Dem_EvtStateType',0,39,151,1,15
	.word	294
	.byte	23
	.byte	'Dem_DtcStateType',0,40,47,15
	.word	294
	.byte	23
	.byte	'rba_BswSrv_uint64',0,3,66,28
	.word	11670
	.byte	10,5,47,9,12,11
	.byte	'DtcCode',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'Severity',0
	.word	294
	.byte	1,2,35,4,11
	.byte	'Kind',0
	.word	294
	.byte	1,2,35,5,11
	.byte	'DtcCode_Is_Index',0
	.word	294
	.byte	1,2,35,6,11
	.byte	'Func_Unit',0
	.word	294
	.byte	1,2,35,7,11
	.byte	'Nv_Storage',0
	.word	294
	.byte	1,2,35,8,0,23
	.byte	'Dem_Cfg_DtcType',0,5,55,3
	.word	20448
	.byte	14,60
	.word	20448
	.byte	15,4,0,8
	.word	20592
	.byte	33
	.byte	'Dem_Cfg_Dtc',0,5,59,30
	.word	20601
	.byte	1,1,23
	.byte	'Dem_EventIdIterator',0,6,27,22
	.word	1944
	.byte	23
	.byte	'Dem_MapDtcIdToEventIdType',0,6,126,25
	.word	1314
	.byte	14,10
	.word	1314
	.byte	15,4,0,8
	.word	20690
	.byte	33
	.byte	'Dem_MapDtcIdToEventId',0,6,139,1,41
	.word	20699
	.byte	1,1,23
	.byte	'Dem_DtcIdIterator',0,6,197,1,22
	.word	1944
	.byte	23
	.byte	'Dem_DtcGroupIdIterator',0,6,230,1,21
	.word	1944
	.byte	23
	.byte	'Dem_EventIdListIterator',0,6,174,2,3
	.word	2285
	.byte	10,6,213,2,9,4,11
	.byte	'it',0
	.word	1314
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	1314
	.byte	2,2,35,2,0,23
	.byte	'Dem_DtcIdListIterator',0,6,216,2,3
	.word	20829
	.byte	23
	.byte	'Dem_EnCoList',0,41,31,15
	.word	294
	.byte	23
	.byte	'Dem_OperationCycleList',0,42,23,15
	.word	294
	.byte	23
	.byte	'Dem_StoCoList',0,43,32,15
	.word	294
	.byte	24,44,31,9,4,25
	.byte	'MEMIF_JOB_OK',0,0,25
	.byte	'MEMIF_JOB_FAILED',0,1,25
	.byte	'MEMIF_JOB_PENDING',0,2,25
	.byte	'MEMIF_JOB_CANCELED',0,3,25
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,25
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,23
	.byte	'MemIf_JobResultType',0,44,39,2
	.word	20966
	.byte	24,45,49,9,4,25
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,25
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,25
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,25
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,25
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,25
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,25
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,23
	.byte	'NvM_Prv_Activities_ten',0,45,58,3
	.word	21124
	.byte	24,45,104,9,4,25
	.byte	'NvM_Prv_idJob_Idle_e',0,0,25
	.byte	'NvM_Prv_idJob_Read_e',0,1,25
	.byte	'NvM_Prv_idJob_Write_e',0,2,25
	.byte	'NvM_Prv_idJob_Erase_e',0,3,25
	.byte	'NvM_Prv_idJob_Restore_e',0,4,25
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,25
	.byte	'NvM_Prv_idJob_Validate_e',0,6,25
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,25
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,25
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,25
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,25
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,25
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,25
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,23
	.byte	'NvM_Prv_idJob_ten',0,45,115,3
	.word	21365
	.byte	23
	.byte	'NvM_Prv_ServiceBit_tuo',0,45,168,1,16
	.word	1314
	.byte	23
	.byte	'NvM_Prv_idService_tuo',0,45,173,1,15
	.word	294
	.byte	23
	.byte	'NvM_Prv_idQueue_tuo',0,45,206,1,15
	.word	294
	.byte	10,45,210,1,9,12,11
	.byte	'idService_uo',0
	.word	294
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	1314
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	1314
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	13114
	.byte	4,2,35,8,0,23
	.byte	'NvM_Prv_QueueEntry_tst',0,45,225,1,3
	.word	21922
	.byte	10,45,227,1,9,20,11
	.byte	'idJob_en',0
	.word	21365
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	1314
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	556
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	294
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	20966
	.byte	4,2,35,16,0,23
	.byte	'NvM_Prv_JobData_tst',0,45,240,1,3
	.word	22048
	.byte	23
	.byte	'Dem_EvMemOccurrenceCounterType',0,19,90,21
	.word	294
	.byte	23
	.byte	'Dem_EvMemAgingCounterType',0,19,99,21
	.word	294
	.byte	23
	.byte	'Dem_EvMemHdrType',0,19,141,1,4
	.word	5694
	.byte	23
	.byte	'Dem_EvMemEventMemoryType',0,19,213,1,4
	.word	5724
	.byte	14,5
	.word	294
	.byte	15,4,0,14,10
	.word	1314
	.byte	15,4,0,10,46,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	294
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	294
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	22319
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	22328
	.byte	10,2,35,8,0,23
	.byte	'Dem_GenericNvDataType',0,46,24,4
	.word	22337
	.byte	23
	.byte	'Dem_NvmBlockIdType',0,47,14,34
	.word	294
	.byte	13,47,16,9,20,11
	.byte	'evMemData',0
	.word	5724
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	22337
	.byte	18,2,35,0,0,23
	.byte	'Dem_NvMStorageBufferData',0,47,37,3
	.word	22513
	.byte	23
	.byte	'Dem_NvmBlockStatusType',0,47,59,15
	.word	294
	.byte	23
	.byte	'Dem_NvmResultType',0,47,78,31
	.word	294
	.byte	3
	.word	294
	.byte	34
	.word	294
	.byte	1,1,30
	.word	22651
	.byte	0,3
	.word	22656
	.byte	23
	.byte	'Dem_EvtClearAllowedFncType',0,12,12,26
	.word	22669
	.byte	10,12,31,9,2,11
	.byte	'dataDataContainer_2',0
	.word	1314
	.byte	2,2,35,0,0,23
	.byte	'Dem_EvtParam_16Type',0,12,34,3
	.word	22709
	.byte	14,12
	.word	22709
	.byte	15,5,0,8
	.word	22772
	.byte	33
	.byte	'Dem_EvtParam_16',0,12,38,34
	.word	22781
	.byte	1,1,34
	.word	294
	.byte	1,1,30
	.word	294
	.byte	0,3
	.word	22812
	.byte	23
	.byte	'Dem_InitMForEAllowedFncType',0,13,38,27
	.word	22825
	.byte	8
	.word	13108
	.byte	3
	.word	22866
	.byte	34
	.word	1944
	.byte	1,1,30
	.word	1314
	.byte	30
	.word	22651
	.byte	30
	.word	22871
	.byte	30
	.word	1314
	.byte	0,3
	.word	22876
	.byte	23
	.byte	'Dem_DebFilter',0,48,12,23
	.word	22904
	.byte	2
	.byte	'long int',0,4,5,3
	.word	22931
	.byte	29,1,1,30
	.word	22871
	.byte	30
	.word	1314
	.byte	30
	.word	22943
	.byte	30
	.word	22943
	.byte	0,3
	.word	22948
	.byte	23
	.byte	'Dem_DebGetLimits',0,48,13,23
	.word	22972
	.byte	29,1,1,30
	.word	1314
	.byte	30
	.word	22871
	.byte	30
	.word	1314
	.byte	0,3
	.word	23002
	.byte	23
	.byte	'Dem_DebCyclic',0,48,14,16
	.word	23021
	.byte	23
	.byte	'Dem_DebouncedActionType',0,48,35,21
	.word	1944
	.byte	13,49,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	143
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	16814
	.byte	4,2,35,0,0,23
	.byte	'Dem_EvBuffEnvDataAlignedType',0,49,47,3
	.word	23080
	.byte	10,49,49,9,16,11
	.byte	'envData',0
	.word	23080
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	294
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	1314
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	143
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	143
	.byte	4,2,35,12,0,23
	.byte	'Dem_EvBuffEvent',0,49,75,2
	.word	23165
	.byte	10,23,29,9,1,11
	.byte	'state',0
	.word	294
	.byte	1,2,35,0,0,23
	.byte	'Dem_DtcState',0,23,31,3
	.word	23280
	.byte	14,5
	.word	23280
	.byte	15,4,0,33
	.byte	'Dem_AllDTCsState',0,23,92,5
	.word	23322
	.byte	1,1
.L529:
	.byte	10,50,11,9,20,11
	.byte	'isNewFilterCriteria',0
	.word	294
	.byte	1,2,35,0,11
	.byte	'DTCStatusMask',0
	.word	294
	.byte	1,2,35,1,11
	.byte	'DTCKind',0
	.word	294
	.byte	1,2,35,2,11
	.byte	'DTCFormat',0
	.word	294
	.byte	1,2,35,3,11
	.byte	'DTCOrigin',0
	.word	294
	.byte	1,2,35,4,11
	.byte	'FilterWithSeverity',0
	.word	294
	.byte	1,2,35,5,11
	.byte	'DTCSeverityMask',0
	.word	294
	.byte	1,2,35,6,11
	.byte	'FilterForFaultDetectionCounter',0
	.word	294
	.byte	1,2,35,7,11
	.byte	'numberOfMatchingDTCs',0
	.word	1314
	.byte	2,2,35,8,11
	.byte	'searchIt',0
	.word	1944
	.byte	4,2,35,12,11
	.byte	'retrieveIt',0
	.word	1944
	.byte	4,2,35,16,0,23
	.byte	'Dem_DTCFilterState',0,50,26,3
	.word	23358
.L530:
	.byte	14,4
	.word	143
	.byte	15,0,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L171:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,38
	.byte	0,73,19,0,0,9,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,21,11,1,49,19,0,0,22,21,0,54,15,0,0,23,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,24,4,1,58,15,59,15,57,15,11,15,0,0,25,40,0,3,8,28,13,0,0,26,21,0,54
	.byte	15,39,12,0,0,27,19,1,3,8,58,15,59,15,57,15,11,15,0,0,28,59,0,3,8,0,0,29,21,1,54,15,39,12,0,0,30,5,0,73
	.byte	19,0,0,31,4,1,3,8,58,15,59,15,57,15,11,15,0,0,32,21,0,73,19,54,15,39,12,0,0,33,52,0,3,8,58,15,59,15,57
	.byte	15,73,19,63,12,60,12,0,0,34,21,1,73,19,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L172:
	.word	.L608-.L607
.L607:
	.half	3
	.word	.L610-.L609
.L609:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.h',0,0,0,0,0
.L610:
.L608:
	.sdecl	'.debug_info',debug,cluster('Dem_SetDTCFilter')
	.sect	'.debug_info'
.L173:
	.word	454
	.half	3
	.word	.L174
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L176,.L175
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_SetDTCFilter',0,1,124,25
	.word	.L247
	.byte	1,1,1
	.word	.L146,.L248,.L145
	.byte	4
	.byte	'DTCStatusMask',0,1,124,48
	.word	.L247,.L249
	.byte	4
	.byte	'DTCKind',0,1,125,59
	.word	.L247,.L250
	.byte	4
	.byte	'DTCFormat',0,1,126,61
	.word	.L247,.L251
	.byte	4
	.byte	'DTCOrigin',0,1,127,61
	.word	.L247,.L252
	.byte	4
	.byte	'FilterWithSeverity',0,1,128,1,70
	.word	.L247,.L253
	.byte	4
	.byte	'DTCSeverityMask',0,1,129,1,63
	.word	.L247,.L254
	.byte	4
	.byte	'FilterForFaultDetectionCounter',0,1,130,1,64
	.word	.L247,.L255
	.byte	5
	.word	.L146,.L248
	.byte	6
	.byte	'returnVal',0,1,132,1,29
	.word	.L247,.L256
	.byte	7
	.word	.L257,.L258,.L6
	.byte	8
	.word	.L259,.L260
	.byte	9
	.word	.L261,.L258,.L6
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetDTCFilter')
	.sect	'.debug_abbrev'
.L174:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetDTCFilter')
	.sect	'.debug_line'
.L175:
	.word	.L612-.L611
.L611:
	.half	3
	.word	.L614-.L613
.L613:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0,0
.L614:
	.byte	5,25,7,0,5,2
	.word	.L146
	.byte	3,251,0,1,5,39,9
	.half	.L537-.L146
	.byte	3,8,1,5,22,9
	.half	.L538-.L537
	.byte	3,5,1,5,38,9
	.half	.L533-.L538
	.byte	3,4,1,4,2,5,8,9
	.half	.L258-.L533
	.byte	3,170,127,1,5,5,9
	.half	.L615-.L258
	.byte	1,5,22,7,9
	.half	.L616-.L615
	.byte	3,2,1,5,20,9
	.half	.L617-.L616
	.byte	1,5,17,9
	.half	.L5-.L617
	.byte	3,3,1,5,28,9
	.half	.L618-.L5
	.byte	1,5,5,9
	.half	.L619-.L618
	.byte	3,127,1,4,1,5,10,9
	.half	.L6-.L619
	.byte	3,210,0,1,5,9,7,9
	.half	.L620-.L6
	.byte	3,6,1,5,19,9
	.half	.L621-.L620
	.byte	3,1,1,5,9,9
	.half	.L7-.L621
	.byte	3,4,1,5,59,7,9
	.half	.L622-.L7
	.byte	1,5,19,9
	.half	.L623-.L622
	.byte	3,2,1,5,5,9
	.half	.L8-.L623
	.byte	3,3,1,5,9,7,9
	.half	.L624-.L8
	.byte	3,2,1,5,37,9
	.half	.L539-.L624
	.byte	1,5,31,9
	.half	.L540-.L539
	.byte	3,1,1,5,33,9
	.half	.L541-.L540
	.byte	3,1,1,5,35,9
	.half	.L625-.L541
	.byte	3,1,1,5,33,9
	.half	.L626-.L625
	.byte	1,5,42,9
	.half	.L627-.L626
	.byte	3,1,1,5,39,9
	.half	.L628-.L627
	.byte	3,1,1,5,54,9
	.half	.L629-.L628
	.byte	3,1,1,5,46,9
	.half	.L630-.L629
	.byte	3,2,1,5,44,9
	.half	.L631-.L630
	.byte	1,5,9,9
	.half	.L632-.L631
	.byte	3,4,1,5,99,7,9
	.half	.L633-.L632
	.byte	3,116,1,5,46,9
	.half	.L11-.L633
	.byte	3,24,1,5,5,9
	.half	.L10-.L11
	.byte	3,7,1,5,1,9
	.half	.L13-.L10
	.byte	3,1,1,7,9
	.half	.L177-.L13
	.byte	0,1,1
.L612:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetDTCFilter')
	.sect	'.debug_ranges'
.L176:
	.word	-1,.L146,0,.L177-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNumberOfFilteredDTC')
	.sect	'.debug_info'
.L178:
	.word	300
	.half	3
	.word	.L179
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L181,.L180
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_GetNumberOfFilteredDTC',0,1,214,3,38
	.word	.L247
	.byte	1,1,1
	.word	.L168,.L262,.L167
	.byte	4
	.byte	'NumberOfFilteredDTC',0,1,214,3,73
	.word	.L263,.L264
	.byte	5
	.word	.L168,.L262
	.byte	6
	.byte	'retVal',0,1,216,3,42
	.word	.L247,.L265
	.byte	7
	.word	.L266,.L267,.L268
	.byte	8
	.word	.L269,.L270
	.byte	9
	.word	.L271,.L267,.L268
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNumberOfFilteredDTC')
	.sect	'.debug_abbrev'
.L179:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNumberOfFilteredDTC')
	.sect	'.debug_line'
.L180:
	.word	.L635-.L634
.L634:
	.half	3
	.word	.L637-.L636
.L636:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L637:
	.byte	5,35,7,0,5,2
	.word	.L168
	.byte	3,217,3,1,5,48,9
	.half	.L638-.L168
	.byte	1,4,2,5,23,9
	.half	.L267-.L638
	.byte	3,247,125,1,5,18,9
	.half	.L639-.L267
	.byte	1,5,12,9
	.half	.L640-.L639
	.byte	1,5,31,7,9
	.half	.L641-.L640
	.byte	1,5,23,9
	.half	.L642-.L641
	.byte	1,5,4,9
	.half	.L135-.L642
	.byte	1,4,1,5,5,9
	.half	.L137-.L135
	.byte	3,137,2,1,5,16,7,9
	.half	.L268-.L137
	.byte	3,2,1,5,9,9
	.half	.L643-.L268
	.byte	1,5,53,9
	.half	.L138-.L643
	.byte	3,11,1,5,5,9
	.half	.L605-.L138
	.byte	3,3,1,5,1,9
	.half	.L139-.L605
	.byte	3,1,1,7,9
	.half	.L182-.L139
	.byte	0,1,1
.L635:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNumberOfFilteredDTC')
	.sect	'.debug_ranges'
.L181:
	.word	-1,.L168,0,.L182-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNextFilteredDTC')
	.sect	'.debug_info'
.L183:
	.word	322
	.half	3
	.word	.L184
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L186,.L185
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_GetNextFilteredDTC',0,1,158,3,34
	.word	.L247
	.byte	1,1,1
	.word	.L160,.L272,.L159
	.byte	4
	.byte	'DTC',0,1,158,3,65
	.word	.L273,.L274
	.byte	4
	.byte	'DTCStatus',0,1,158,3,77
	.word	.L275,.L276
	.byte	5
	.word	.L160,.L272
	.byte	6
	.byte	'dtcId',0,1,160,3,19
	.word	.L277,.L278
	.byte	6
	.byte	'retVal',0,1,161,3,38
	.word	.L247,.L279
	.byte	7
	.word	.L266,.L280,.L281
	.byte	8
	.word	.L269,.L282
	.byte	9
	.word	.L271,.L280,.L281
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNextFilteredDTC')
	.sect	'.debug_abbrev'
.L184:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNextFilteredDTC')
	.sect	'.debug_line'
.L185:
	.word	.L645-.L644
.L644:
	.half	3
	.word	.L647-.L646
.L646:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L647:
	.byte	5,34,7,0,5,2
	.word	.L160
	.byte	3,157,3,1,5,45,9
	.half	.L587-.L160
	.byte	3,3,1,5,35,9
	.half	.L588-.L587
	.byte	3,5,1,5,48,9
	.half	.L648-.L588
	.byte	1,4,2,5,23,9
	.half	.L280-.L648
	.byte	3,171,126,1,5,18,9
	.half	.L649-.L280
	.byte	1,5,12,9
	.half	.L650-.L649
	.byte	1,5,31,7,9
	.half	.L651-.L650
	.byte	1,5,23,9
	.half	.L652-.L651
	.byte	1,5,4,9
	.half	.L119-.L652
	.byte	1,4,1,5,5,9
	.half	.L121-.L119
	.byte	3,213,1,1,5,45,7,9
	.half	.L281-.L121
	.byte	3,3,1,5,68,9
	.half	.L584-.L281
	.byte	1,5,5,9
	.half	.L122-.L584
	.byte	3,9,1,5,1,9
	.half	.L123-.L122
	.byte	3,1,1,7,9
	.half	.L187-.L123
	.byte	0,1,1
.L645:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNextFilteredDTC')
	.sect	'.debug_ranges'
.L186:
	.word	-1,.L160,0,.L187-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNextFilteredDTCAndFDC')
	.sect	'.debug_info'
.L188:
	.word	307
	.half	3
	.word	.L189
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L191,.L190
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_GetNextFilteredDTCAndFDC',0,1,181,3,34
	.word	.L247
	.byte	1,1,1
	.word	.L162,.L283,.L161
	.byte	4
	.byte	'DTC',0,1,181,3,71
	.word	.L273,.L284
	.byte	4
	.byte	'DTCFaultDetectionCounter',0,1,181,3,83
	.word	.L285,.L286
	.byte	5
	.word	.L162,.L283
	.byte	6
	.byte	'dtcId',0,1,183,3,16
	.word	.L277,.L287
	.byte	6
	.byte	'retVal',0,1,184,3,35
	.word	.L247,.L288
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNextFilteredDTCAndFDC')
	.sect	'.debug_abbrev'
.L189:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNextFilteredDTCAndFDC')
	.sect	'.debug_line'
.L190:
	.word	.L654-.L653
.L653:
	.half	3
	.word	.L656-.L655
.L655:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0,0
.L656:
	.byte	5,34,7,0,5,2
	.word	.L162
	.byte	3,180,3,1,5,2,9
	.half	.L124-.L162
	.byte	3,5,1,7,9
	.half	.L657-.L124
	.byte	1,7,9
	.half	.L125-.L657
	.byte	1,5,38,9
	.half	.L126-.L125
	.byte	3,2,1,5,50,9
	.half	.L658-.L126
	.byte	1,5,60,9
	.half	.L659-.L658
	.byte	1,5,2,9
	.half	.L592-.L659
	.byte	3,2,1,5,1,9
	.half	.L127-.L592
	.byte	3,1,1,7,9
	.half	.L192-.L127
	.byte	0,1,1
.L654:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNextFilteredDTCAndFDC')
	.sect	'.debug_ranges'
.L191:
	.word	-1,.L162,0,.L192-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNextFilteredDTCAndSeverity')
	.sect	'.debug_info'
.L193:
	.word	426
	.half	3
	.word	.L194
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L196,.L195
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_GetNextFilteredDTCAndSeverity',0,1,194,3,34
	.word	.L247
	.byte	1,1,1
	.word	.L164,.L289,.L163
	.byte	4
	.byte	'DTC',0,1,194,3,77
	.word	.L273,.L290
	.byte	4
	.byte	'DTCStatus',0,1,194,3,89
	.word	.L275,.L291
	.byte	4
	.byte	'DTCSeverity',0,1,194,3,121
	.word	.L292,.L293
	.byte	4
	.byte	'DTCFunctionalUnit',0,1,194,3,141,1
	.word	.L275,.L294
	.byte	5
	.word	.L164,.L289
	.byte	6
	.byte	'dtcId',0,1,196,3,16
	.word	.L277,.L295
	.byte	6
	.byte	'retVal',0,1,197,3,35
	.word	.L247,.L296
	.byte	7
	.word	.L297,.L129,.L130
	.byte	8
	.word	.L298,.L299
	.byte	9
	.word	.L300,.L129,.L130
	.byte	0,7
	.word	.L301,.L131,.L132
	.byte	8
	.word	.L302,.L303
	.byte	9
	.word	.L304,.L131,.L132
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNextFilteredDTCAndSeverity')
	.sect	'.debug_abbrev'
.L194:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNextFilteredDTCAndSeverity')
	.sect	'.debug_line'
.L195:
	.word	.L661-.L660
.L660:
	.half	3
	.word	.L663-.L662
.L662:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0,0
.L663:
	.byte	5,34,7,0,5,2
	.word	.L164
	.byte	3,193,3,1,5,38,9
	.half	.L604-.L164
	.byte	3,5,1,5,61,9
	.half	.L595-.L604
	.byte	1,5,2,9
	.half	.L602-.L595
	.byte	3,1,1,5,42,7,9
	.half	.L664-.L602
	.byte	3,2,1,4,2,5,9,9
	.half	.L129-.L664
	.byte	3,253,124,1,5,20,9
	.half	.L665-.L129
	.byte	1,5,26,9
	.half	.L600-.L665
	.byte	1,5,2,9
	.half	.L666-.L600
	.byte	1,4,1,5,16,9
	.half	.L130-.L666
	.byte	3,131,3,1,5,49,9
	.half	.L667-.L130
	.byte	3,1,1,4,2,5,20,9
	.half	.L131-.L667
	.byte	3,136,125,1,5,26,9
	.half	.L668-.L131
	.byte	1,5,2,9
	.half	.L669-.L668
	.byte	1,4,1,5,22,9
	.half	.L132-.L669
	.byte	3,248,2,1,5,2,9
	.half	.L128-.L132
	.byte	3,2,1,5,1,9
	.half	.L133-.L128
	.byte	3,1,1,7,9
	.half	.L197-.L133
	.byte	0,1,1
.L661:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNextFilteredDTCAndSeverity')
	.sect	'.debug_ranges'
.L196:
	.word	-1,.L164,0,.L197-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNumberOfStandardFilteredDTC')
	.sect	'.debug_info'
.L198:
	.word	251
	.half	3
	.word	.L199
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L201,.L200
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_GetNumberOfStandardFilteredDTC',0,1,208,3,38
	.word	.L247
	.byte	1,1,1
	.word	.L166,.L305,.L165
	.byte	4
	.byte	'NumberOfFilteredDTC',0,1,208,3,81
	.word	.L263,.L306
	.byte	5
	.word	.L166,.L305
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNumberOfStandardFilteredDTC')
	.sect	'.debug_abbrev'
.L199:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNumberOfStandardFilteredDTC')
	.sect	'.debug_line'
.L200:
	.word	.L671-.L670
.L670:
	.half	3
	.word	.L673-.L672
.L672:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0,0
.L673:
	.byte	5,28,7,0,5,2
	.word	.L166
	.byte	3,209,3,1,5,41,9
	.half	.L674-.L166
	.byte	1,5,26,9
	.half	.L675-.L674
	.byte	1,5,12,9
	.half	.L676-.L675
	.byte	3,1,1,5,5,9
	.half	.L677-.L676
	.byte	1,5,1,9
	.half	.L134-.L677
	.byte	3,1,1,7,9
	.half	.L202-.L134
	.byte	0,1,1
.L671:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNumberOfStandardFilteredDTC')
	.sect	'.debug_ranges'
.L201:
	.word	-1,.L166,0,.L202-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNextFilteredStandardDTCID')
	.sect	'.debug_info'
.L203:
	.word	861
	.half	3
	.word	.L204
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L206,.L205
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_GetNextFilteredStandardDTCID',0,1,216,2,34
	.word	.L247
	.byte	1,1,1
	.word	.L156,.L307,.L155
	.byte	4
	.byte	'dtcId',0,1,216,2,82
	.word	.L308,.L309
	.byte	4
	.byte	'DTC',0,1,216,2,97
	.word	.L273,.L310
	.byte	4
	.byte	'DTCStatus',0,1,216,2,109
	.word	.L275,.L311
	.byte	4
	.byte	'DTCFaultDetectionCounter',0,1,216,2,127
	.word	.L285,.L312
	.byte	5
	.word	.L156,.L307
	.byte	6
	.byte	'i',0,1,218,2,18
	.word	.L313,.L314
	.byte	6
	.byte	'localDTCStatus',0,1,219,2,11
	.word	.L247,.L315
	.byte	6
	.byte	'FaultDetectionCounter',0,1,220,2,11
	.word	.L316,.L317
	.byte	7
	.word	.L266,.L318,.L319
	.byte	8
	.word	.L269,.L320
	.byte	9
	.word	.L271,.L318,.L319
	.byte	0,7
	.word	.L321,.L93,.L95
	.byte	8
	.word	.L322,.L323
	.byte	9
	.word	.L324,.L93,.L95
	.byte	0,7
	.word	.L325,.L326,.L96
	.byte	8
	.word	.L327,.L328
	.byte	8
	.word	.L329,.L330
	.byte	10
	.word	.L331,.L326,.L96
	.byte	6
	.byte	'element_pos',0,2,78,18
	.word	.L332,.L333
	.byte	6
	.byte	'local_bitpos',0,2,79,18
	.word	.L334,.L335
	.byte	6
	.byte	'mask',0,2,80,18
	.word	.L336,.L337
	.byte	0,0,7
	.word	.L338,.L339,.L98
	.byte	8
	.word	.L340,.L341
	.byte	8
	.word	.L342,.L343
	.byte	8
	.word	.L344,.L345
	.byte	9
	.word	.L346,.L339,.L98
	.byte	0,7
	.word	.L347,.L348,.L349
	.byte	8
	.word	.L350,.L351
	.byte	8
	.word	.L352,.L353
	.byte	10
	.word	.L354,.L348,.L349
	.byte	6
	.byte	'matches',0,1,196,1,23
	.word	.L247,.L355
	.byte	0,0,7
	.word	.L356,.L113,.L115
	.byte	8
	.word	.L357,.L358
	.byte	11
	.word	.L359,.L360
	.byte	7
	.word	.L363,.L113,.L114
	.byte	8
	.word	.L364,.L365
	.byte	9
	.word	.L366,.L113,.L114
	.byte	0,0,0,7
	.word	.L356,.L361,.L362
	.byte	8
	.word	.L357,.L358
	.byte	0,7
	.word	.L367,.L362,.L368
	.byte	8
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L362,.L368
	.byte	0,7
	.word	.L367,.L372,.L86
	.byte	8
	.word	.L369,.L370
	.byte	9
	.word	.L371,.L372,.L86
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNextFilteredStandardDTCID')
	.sect	'.debug_abbrev'
.L204:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNextFilteredStandardDTCID')
	.sect	'.debug_line'
.L205:
	.word	.L679-.L678
.L678:
	.half	3
	.word	.L681-.L680
.L680:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0,0
.L681:
	.byte	5,34,7,0,5,2
	.word	.L156
	.byte	3,215,2,1,5,20,9
	.half	.L569-.L156
	.byte	3,2,1,5,33,9
	.half	.L570-.L569
	.byte	3,2,1,5,18,9
	.half	.L571-.L570
	.byte	3,2,1,5,40,9
	.half	.L87-.L571
	.byte	3,2,1,5,53,9
	.half	.L682-.L87
	.byte	1,4,3,5,23,9
	.half	.L318-.L682
	.byte	3,241,126,1,5,18,9
	.half	.L683-.L318
	.byte	1,5,12,9
	.half	.L684-.L683
	.byte	1,5,31,7,9
	.half	.L685-.L684
	.byte	1,5,23,9
	.half	.L686-.L685
	.byte	1,5,4,9
	.half	.L88-.L686
	.byte	1,4,1,5,14,9
	.half	.L90-.L88
	.byte	3,143,1,1,5,20,7,9
	.half	.L319-.L90
	.byte	3,2,1,5,13,9
	.half	.L687-.L319
	.byte	1,5,26,9
	.half	.L91-.L687
	.byte	3,3,1,5,54,9
	.half	.L688-.L91
	.byte	1,5,9,9
	.half	.L689-.L688
	.byte	1,5,20,7,9
	.half	.L690-.L689
	.byte	3,2,1,5,13,9
	.half	.L691-.L690
	.byte	1,4,3,5,27,9
	.half	.L93-.L691
	.byte	3,244,126,1,5,11,9
	.half	.L692-.L93
	.byte	1,5,4,9
	.half	.L693-.L692
	.byte	1,4,1,5,16,9
	.half	.L95-.L693
	.byte	3,143,1,1,5,34,9
	.half	.L694-.L95
	.byte	3,2,1,4,2,5,42,9
	.half	.L326-.L694
	.byte	3,226,125,1,5,43,9
	.half	.L573-.L326
	.byte	3,1,1,5,14,9
	.half	.L575-.L573
	.byte	3,2,1,5,26,9
	.half	.L695-.L575
	.byte	1,5,19,9
	.half	.L577-.L695
	.byte	3,5,1,5,33,9
	.half	.L576-.L577
	.byte	1,5,41,9
	.half	.L696-.L576
	.byte	1,5,5,9
	.half	.L697-.L696
	.byte	1,4,1,5,9,9
	.half	.L96-.L697
	.byte	3,150,2,1,5,86,7,9
	.half	.L698-.L96
	.byte	3,2,1,5,41,9
	.half	.L339-.L698
	.byte	3,229,125,1,5,13,9
	.half	.L574-.L339
	.byte	1,5,2,9
	.half	.L699-.L574
	.byte	3,1,1,5,18,9
	.half	.L98-.L699
	.byte	3,154,2,1,5,24,7,9
	.half	.L700-.L98
	.byte	3,2,1,5,17,9
	.half	.L701-.L700
	.byte	1,5,30,9
	.half	.L99-.L701
	.byte	3,3,1,5,13,9
	.half	.L702-.L99
	.byte	1,5,71,7,9
	.half	.L703-.L702
	.byte	3,2,1,5,39,9
	.half	.L572-.L703
	.byte	1,5,43,9
	.half	.L101-.L572
	.byte	3,3,1,5,31,9
	.half	.L348-.L101
	.byte	3,204,126,1,5,22,9
	.half	.L578-.L348
	.byte	3,2,1,5,5,9
	.half	.L704-.L578
	.byte	1,5,27,7,9
	.half	.L705-.L704
	.byte	3,2,1,5,19,9
	.half	.L706-.L705
	.byte	1,5,60,7,9
	.half	.L707-.L706
	.byte	1,5,27,9
	.half	.L708-.L707
	.byte	1,5,17,9
	.half	.L103-.L708
	.byte	1,5,22,9
	.half	.L102-.L103
	.byte	3,3,1,5,5,9
	.half	.L709-.L102
	.byte	1,5,27,7,9
	.half	.L710-.L709
	.byte	3,2,1,5,19,9
	.half	.L711-.L710
	.byte	1,5,31,7,9
	.half	.L712-.L711
	.byte	1,5,87,7,9
	.half	.L713-.L712
	.byte	1,5,85,9
	.half	.L714-.L713
	.byte	1,5,27,9
	.half	.L715-.L714
	.byte	1,5,17,9
	.half	.L107-.L715
	.byte	1,5,5,9
	.half	.L105-.L107
	.byte	3,3,1,5,13,9
	.half	.L109-.L105
	.byte	3,168,1,1,5,17,7,9
	.half	.L349-.L109
	.byte	3,2,1,5,43,9
	.half	.L716-.L349
	.byte	3,2,1,5,32,9
	.half	.L717-.L716
	.byte	1,5,17,9
	.half	.L111-.L717
	.byte	3,3,1,5,47,9
	.half	.L718-.L111
	.byte	3,2,1,5,39,9
	.half	.L112-.L718
	.byte	3,3,1,4,4,5,20,9
	.half	.L113-.L112
	.byte	3,226,125,1,5,9,9
	.half	.L719-.L113
	.byte	1,5,20,9
	.half	.L720-.L719
	.byte	1,5,26,9
	.half	.L721-.L720
	.byte	1,5,2,9
	.half	.L722-.L721
	.byte	1,4,5,5,9,9
	.half	.L114-.L722
	.byte	3,138,1,1,4,1,5,22,9
	.half	.L115-.L114
	.byte	3,148,1,1,4,3,5,6,9
	.half	.L362-.L115
	.byte	3,210,126,1,5,9,9
	.half	.L723-.L362
	.byte	1,4,1,5,24,9
	.half	.L368-.L723
	.byte	3,177,1,1,5,17,9
	.half	.L724-.L368
	.byte	1,5,10,9
	.half	.L97-.L724
	.byte	3,3,1,4,3,5,6,9
	.half	.L372-.L97
	.byte	3,204,126,1,5,9,9
	.half	.L725-.L372
	.byte	1,4,1,5,18,9
	.half	.L86-.L725
	.byte	3,136,1,1,5,12,7,9
	.half	.L726-.L86
	.byte	3,47,1,5,5,9
	.half	.L727-.L726
	.byte	1,5,1,9
	.half	.L92-.L727
	.byte	3,1,1,7,9
	.half	.L207-.L92
	.byte	0,1,1
.L679:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNextFilteredStandardDTCID')
	.sect	'.debug_ranges'
.L206:
	.word	-1,.L156,0,.L207-.L156,0,0
.L360:
	.word	-1,.L156,.L113-.L156,.L115-.L156,.L361-.L156,.L362-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DTCFilterStandardMainFunction')
	.sect	'.debug_info'
.L208:
	.word	760
	.half	3
	.word	.L209
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L211,.L210
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_DTCFilterStandardMainFunction',0,1,253,1,6,1,1,1
	.word	.L150,.L373,.L149
	.byte	4
	.word	.L150,.L373
	.byte	5
	.byte	'epc',0,1,255,1,18
	.word	.L374,.L375
	.byte	5
	.byte	'i',0,1,128,2,12
	.word	.L376,.L377
	.byte	5
	.byte	'searchItCopy',0,1,129,2,23
	.word	.L313,.L378
	.byte	5
	.byte	'dtcId',0,1,130,2,19
	.word	.L277,.L379
	.byte	5
	.byte	'matches',0,1,131,2,23
	.word	.L247,.L380
	.byte	5
	.byte	'numberOfEvents',0,1,132,2,12
	.word	.L376,.L381
	.byte	6
	.word	.L266,.L382,.L383
	.byte	7
	.word	.L269,.L384
	.byte	8
	.word	.L271,.L382,.L383
	.byte	0,6
	.word	.L321,.L385,.L63
	.byte	7
	.word	.L322,.L386
	.byte	8
	.word	.L324,.L385,.L63
	.byte	0,6
	.word	.L387,.L63,.L388
	.byte	7
	.word	.L389,.L390
	.byte	8
	.word	.L391,.L63,.L388
	.byte	0,6
	.word	.L392,.L67,.L393
	.byte	7
	.word	.L394,.L395
	.byte	9
	.word	.L396,.L67,.L393
	.byte	6
	.word	.L397,.L398,.L70
	.byte	7
	.word	.L399,.L400
	.byte	7
	.word	.L401,.L402
	.byte	9
	.word	.L403,.L398,.L70
	.byte	6
	.word	.L404,.L398,.L69
	.byte	7
	.word	.L405,.L406
	.byte	7
	.word	.L407,.L408
	.byte	8
	.word	.L409,.L398,.L69
	.byte	0,0,0,0,0,6
	.word	.L410,.L393,.L73
	.byte	7
	.word	.L411,.L412
	.byte	8
	.word	.L413,.L393,.L73
	.byte	0,6
	.word	.L414,.L415,.L80
	.byte	7
	.word	.L416,.L417
	.byte	7
	.word	.L418,.L419
	.byte	9
	.word	.L420,.L415,.L80
	.byte	5
	.byte	'element_pos',0,2,36,18
	.word	.L421,.L422
	.byte	5
	.byte	'local_bitpos',0,2,37,18
	.word	.L423,.L424
	.byte	5
	.byte	'mask',0,2,38,18
	.word	.L425,.L426
	.byte	0,0,6
	.word	.L367,.L79,.L427
	.byte	7
	.word	.L369,.L428
	.byte	8
	.word	.L371,.L79,.L427
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DTCFilterStandardMainFunction')
	.sect	'.debug_abbrev'
.L209:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DTCFilterStandardMainFunction')
	.sect	'.debug_line'
.L210:
	.word	.L729-.L728
.L728:
	.half	3
	.word	.L731-.L730
.L730:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L731:
	.byte	5,6,7,0,5,2
	.word	.L150
	.byte	3,252,1,1,5,22,9
	.half	.L556-.L150
	.byte	3,2,1,5,14,9
	.half	.L557-.L556
	.byte	3,1,1,5,5,9
	.half	.L558-.L557
	.byte	3,7,1,5,41,9
	.half	.L732-.L558
	.byte	1,5,39,9
	.half	.L733-.L732
	.byte	1,5,33,9
	.half	.L734-.L733
	.byte	3,1,1,5,18,9
	.half	.L735-.L734
	.byte	1,5,35,9
	.half	.L736-.L735
	.byte	3,5,1,4,3,5,23,9
	.half	.L382-.L736
	.byte	3,68,1,5,18,9
	.half	.L737-.L382
	.byte	1,5,12,9
	.half	.L738-.L737
	.byte	1,5,31,7,9
	.half	.L739-.L738
	.byte	1,5,23,9
	.half	.L740-.L739
	.byte	1,5,4,9
	.half	.L57-.L740
	.byte	1,4,1,5,5,9
	.half	.L59-.L57
	.byte	3,60,1,5,19,7,9
	.half	.L383-.L59
	.byte	3,2,1,5,47,9
	.half	.L62-.L383
	.byte	3,3,1,4,3,5,27,9
	.half	.L385-.L62
	.byte	3,73,1,5,11,9
	.half	.L741-.L385
	.byte	1,5,4,9
	.half	.L559-.L741
	.byte	1,5,21,9
	.half	.L63-.L559
	.byte	3,191,127,1,5,12,9
	.half	.L742-.L63
	.byte	1,5,28,7,9
	.half	.L743-.L742
	.byte	1,5,21,9
	.half	.L744-.L743
	.byte	1,5,4,9
	.half	.L64-.L744
	.byte	1,4,1,5,18,9
	.half	.L66-.L64
	.byte	3,250,0,1,5,17,7,9
	.half	.L388-.L66
	.byte	3,2,1,4,4,5,35,9
	.half	.L67-.L388
	.byte	3,227,126,1,5,51,9
	.half	.L745-.L67
	.byte	1,5,58,9
	.half	.L746-.L745
	.byte	1,5,66,9
	.half	.L747-.L746
	.byte	1,4,5,5,28,9
	.half	.L398-.L747
	.byte	3,69,1,5,47,9
	.half	.L748-.L398
	.byte	1,5,5,9
	.half	.L749-.L748
	.byte	1,5,73,9
	.half	.L69-.L749
	.byte	3,4,1,5,5,9
	.half	.L750-.L69
	.byte	1,4,4,9
	.half	.L70-.L750
	.byte	3,55,1,4,1,5,18,9
	.half	.L71-.L70
	.byte	3,160,1,1,4,3,5,2,7,9
	.half	.L393-.L71
	.byte	3,162,127,1,4,1,5,21,9
	.half	.L73-.L393
	.byte	3,226,0,1,5,48,7,9
	.half	.L751-.L73
	.byte	1,5,21,7,9
	.half	.L752-.L751
	.byte	3,2,1,5,23,9
	.half	.L74-.L752
	.byte	3,2,1,5,48,9
	.half	.L753-.L74
	.byte	3,1,1,5,39,9
	.half	.L560-.L753
	.byte	3,127,1,5,23,9
	.half	.L72-.L560
	.byte	3,5,1,5,25,9
	.half	.L754-.L72
	.byte	3,1,1,5,31,9
	.half	.L77-.L754
	.byte	3,5,1,5,18,9
	.half	.L755-.L77
	.byte	1,5,17,7,9
	.half	.L756-.L755
	.byte	3,2,1,5,40,7,9
	.half	.L757-.L756
	.byte	3,2,1,4,2,5,42,9
	.half	.L415-.L757
	.byte	3,244,125,1,5,43,9
	.half	.L561-.L415
	.byte	3,1,1,5,14,9
	.half	.L562-.L561
	.byte	3,2,1,5,26,9
	.half	.L758-.L562
	.byte	1,5,11,9
	.half	.L564-.L758
	.byte	3,2,1,5,25,9
	.half	.L563-.L564
	.byte	1,5,5,9
	.half	.L759-.L563
	.byte	3,1,1,4,1,5,34,9
	.half	.L80-.L759
	.byte	3,135,2,1,5,55,9
	.half	.L760-.L80
	.byte	1,4,3,5,6,9
	.half	.L79-.L760
	.byte	3,165,127,1,5,9,9
	.half	.L761-.L79
	.byte	1,4,1,5,45,9
	.half	.L427-.L761
	.byte	3,224,0,1,5,30,9
	.half	.L762-.L427
	.byte	1,5,63,9
	.half	.L763-.L762
	.byte	3,127,1,5,19,9
	.half	.L78-.L763
	.byte	3,5,1,9
	.half	.L61-.L78
	.byte	3,85,1,5,1,7,9
	.half	.L68-.L61
	.byte	3,48,1,7,9
	.half	.L212-.L68
	.byte	0,1,1
.L729:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DTCFilterStandardMainFunction')
	.sect	'.debug_ranges'
.L211:
	.word	-1,.L150,0,.L212-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_SetDTCFilterstartIterator')
	.sect	'.debug_info'
.L213:
	.word	341
	.half	3
	.word	.L214
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L216,.L215
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_SetDTCFilterstartIterator',0,1,116,6,1,1,1
	.word	.L144,.L429,.L143
	.byte	4
	.word	.L144,.L429
	.byte	5
	.word	.L430,.L431,.L432
	.byte	6
	.word	.L433,.L434
	.byte	7
	.word	.L435,.L431,.L432
	.byte	0,5
	.word	.L430,.L436,.L437
	.byte	6
	.word	.L433,.L434
	.byte	7
	.word	.L435,.L436,.L437
	.byte	0,5
	.word	.L438,.L439,.L4
	.byte	6
	.word	.L440,.L441
	.byte	6
	.word	.L442,.L443
	.byte	8
	.word	.L444,.L439,.L4
	.byte	9
	.byte	'i',0,2,95,12
	.word	.L445,.L446
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetDTCFilterstartIterator')
	.sect	'.debug_abbrev'
.L214:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,5,0,49,16,2,6,0,0,7,11
	.byte	0,49,16,17,1,18,1,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetDTCFilterstartIterator')
	.sect	'.debug_line'
.L215:
	.word	.L765-.L764
.L764:
	.half	3
	.word	.L767-.L766
.L766:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L767:
	.byte	5,27,7,0,5,2
	.word	.L144
	.byte	3,245,0,1,5,40,9
	.half	.L768-.L144
	.byte	1,4,3,5,12,9
	.half	.L431-.L768
	.byte	3,214,0,1,5,10,9
	.half	.L769-.L431
	.byte	1,4,1,5,40,9
	.half	.L432-.L769
	.byte	3,171,127,1,4,3,5,12,9
	.half	.L436-.L432
	.byte	3,213,0,1,5,10,9
	.half	.L770-.L436
	.byte	1,4,1,5,26,9
	.half	.L437-.L770
	.byte	3,173,127,1,5,49,9
	.half	.L771-.L437
	.byte	1,4,2,5,12,9
	.half	.L439-.L771
	.byte	3,103,1,5,62,9
	.half	.L531-.L439
	.byte	1,5,15,9
	.half	.L3-.L531
	.byte	3,1,1,5,21,9
	.half	.L772-.L3
	.byte	1,5,19,9
	.half	.L773-.L772
	.byte	1,5,65,9
	.half	.L774-.L773
	.byte	3,127,1,5,21,9
	.half	.L2-.L774
	.byte	1,5,62,9
	.half	.L775-.L2
	.byte	1,5,5,7,9
	.half	.L776-.L775
	.byte	3,3,1,4,1,5,1,9
	.half	.L4-.L776
	.byte	3,23,1,7,9
	.half	.L217-.L4
	.byte	0,1,1
.L765:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetDTCFilterstartIterator')
	.sect	'.debug_ranges'
.L216:
	.word	-1,.L144,0,.L217-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_IsStandardFilterFinished')
	.sect	'.debug_info'
.L218:
	.word	265
	.half	3
	.word	.L219
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L221,.L220
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_IsStandardFilterFinished',0,1,193,2,9
	.word	.L247
	.byte	1,1,1
	.word	.L152,.L447,.L151
	.byte	4
	.byte	'it',0,1,193,2,63
	.word	.L448,.L449
	.byte	5
	.word	.L152,.L447
	.byte	6
	.word	.L266,.L152,.L450
	.byte	7
	.word	.L269,.L451
	.byte	8
	.word	.L271,.L152,.L450
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_IsStandardFilterFinished')
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_IsStandardFilterFinished')
	.sect	'.debug_line'
.L220:
	.word	.L778-.L777
.L777:
	.half	3
	.word	.L780-.L779
.L779:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L780:
	.byte	4,2,5,23,7,0,5,2
	.word	.L152
	.byte	3,208,1,1,5,18,9
	.half	.L781-.L152
	.byte	1,5,12,9
	.half	.L782-.L781
	.byte	1,5,31,7,9
	.half	.L783-.L782
	.byte	1,5,23,9
	.half	.L784-.L783
	.byte	1,5,4,9
	.half	.L82-.L784
	.byte	1,4,1,5,13,9
	.half	.L84-.L82
	.byte	3,242,0,1,5,5,9
	.half	.L450-.L84
	.byte	1,5,1,9
	.half	.L85-.L450
	.byte	3,1,1,7,9
	.half	.L222-.L85
	.byte	0,1,1
.L778:
	.sdecl	'.debug_ranges',debug,cluster('Dem_IsStandardFilterFinished')
	.sect	'.debug_ranges'
.L221:
	.word	-1,.L152,0,.L222-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcFilterInit')
	.sect	'.debug_info'
.L223:
	.word	269
	.half	3
	.word	.L224
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L226,.L225
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_DtcFilterInit',0,1,102,6,1,1,1
	.word	.L142,.L452,.L141
	.byte	4
	.word	.L142,.L452
	.byte	5
	.word	.L453,.L454,.L455
	.byte	6
	.word	.L456,.L457
	.byte	7
	.word	.L458,.L454,.L455
	.byte	0,5
	.word	.L453,.L459,.L460
	.byte	6
	.word	.L456,.L457
	.byte	7
	.word	.L458,.L459,.L460
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcFilterInit')
	.sect	'.debug_abbrev'
.L224:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,5,0,49,16,2,6,0,0,7,11
	.byte	0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DtcFilterInit')
	.sect	'.debug_line'
.L225:
	.word	.L786-.L785
.L785:
	.half	3
	.word	.L788-.L787
.L787:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L788:
	.byte	5,34,7,0,5,2
	.word	.L142
	.byte	3,238,0,1,5,47,9
	.half	.L789-.L142
	.byte	1,4,2,5,11,9
	.half	.L454-.L789
	.byte	3,241,0,1,5,10,9
	.half	.L790-.L454
	.byte	1,4,1,5,47,9
	.half	.L455-.L790
	.byte	3,144,127,1,4,2,5,11,9
	.half	.L459-.L455
	.byte	3,240,0,1,5,10,9
	.half	.L791-.L459
	.byte	1,4,1,5,41,9
	.half	.L460-.L791
	.byte	3,145,127,1,5,39,9
	.half	.L792-.L460
	.byte	1,5,1,9
	.half	.L793-.L792
	.byte	3,1,1,7,9
	.half	.L227-.L793
	.byte	0,1,1
.L786:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DtcFilterInit')
	.sect	'.debug_ranges'
.L226:
	.word	-1,.L142,0,.L227-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DTCFilterMainFunction')
	.sect	'.debug_info'
.L228:
	.word	205
	.half	3
	.word	.L229
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L231,.L230
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_DTCFilterMainFunction',0,1,198,2,6,1,1,1
	.word	.L154,.L461,.L153
	.byte	4
	.word	.L154,.L461
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DTCFilterMainFunction')
	.sect	'.debug_abbrev'
.L229:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DTCFilterMainFunction')
	.sect	'.debug_line'
.L230:
	.word	.L795-.L794
.L794:
	.half	3
	.word	.L797-.L796
.L796:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0,0
.L797:
	.byte	5,42,7,0,5,2
	.word	.L154
	.byte	3,207,2,1,5,1,9
	.half	.L798-.L154
	.byte	3,6,1,7,9
	.half	.L232-.L798
	.byte	0,1,1
.L795:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DTCFilterMainFunction')
	.sect	'.debug_ranges'
.L231:
	.word	-1,.L154,0,.L232-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DTCFilterMatches')
	.sect	'.debug_info'
.L233:
	.word	858
	.half	3
	.word	.L234
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L236,.L235
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_DTCFilterMatches',0,1,211,1,19
	.word	.L247
	.byte	1,1,1
	.word	.L148,.L462,.L147
	.byte	4
	.byte	'dtcId',0,1,211,1,54
	.word	.L277,.L463
	.byte	5
	.word	.L148,.L462
	.byte	6
	.byte	'DtcStatus',0,1,213,1,11
	.word	.L247,.L464
	.byte	6
	.byte	'matches',0,1,214,1,23
	.word	.L247,.L465
	.byte	6
	.byte	'FaultDetectionCounter',0,1,215,1,11
	.word	.L316,.L466
	.byte	6
	.byte	'DtcStatusIsValid',0,1,217,1,13
	.word	.L247,.L467
	.byte	7
	.word	.L468,.L17,.L18
	.byte	8
	.word	.L469,.L470
	.byte	9
	.word	.L471,.L17,.L18
	.byte	0,7
	.word	.L472,.L473,.L39
	.byte	8
	.word	.L474,.L475
	.byte	8
	.word	.L476,.L477
	.byte	10
	.word	.L478,.L473,.L39
	.byte	6
	.byte	'eventId',0,2,156,2,21
	.word	.L277,.L479
	.byte	7
	.word	.L480,.L473,.L21
	.byte	8
	.word	.L481,.L482
	.byte	10
	.word	.L483,.L473,.L21
	.byte	7
	.word	.L484,.L473,.L20
	.byte	8
	.word	.L485,.L486
	.byte	9
	.word	.L487,.L473,.L20
	.byte	0,0,0,7
	.word	.L488,.L21,.L36
	.byte	8
	.word	.L489,.L490
	.byte	8
	.word	.L491,.L492
	.byte	10
	.word	.L493,.L21,.L36
	.byte	7
	.word	.L494,.L23,.L22
	.byte	8
	.word	.L495,.L496
	.byte	10
	.word	.L497,.L23,.L22
	.byte	7
	.word	.L498,.L499,.L25
	.byte	8
	.word	.L500,.L501
	.byte	8
	.word	.L502,.L503
	.byte	10
	.word	.L504,.L499,.L25
	.byte	7
	.word	.L505,.L499,.L24
	.byte	8
	.word	.L506,.L507
	.byte	8
	.word	.L508,.L509
	.byte	9
	.word	.L510,.L499,.L24
	.byte	0,0,0,0,0,7
	.word	.L511,.L29,.L30
	.byte	8
	.word	.L512,.L513
	.byte	9
	.word	.L514,.L29,.L30
	.byte	0,7
	.word	.L515,.L33,.L34
	.byte	8
	.word	.L516,.L517
	.byte	9
	.word	.L518,.L33,.L34
	.byte	0,0,0,0,0,7
	.word	.L297,.L42,.L43
	.byte	8
	.word	.L298,.L519
	.byte	9
	.word	.L300,.L42,.L43
	.byte	0,7
	.word	.L347,.L520,.L54
	.byte	8
	.word	.L350,.L521
	.byte	8
	.word	.L352,.L522
	.byte	10
	.word	.L354,.L520,.L54
	.byte	6
	.byte	'matches',0,1,196,1,23
	.word	.L247,.L523
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DTCFilterMatches')
	.sect	'.debug_abbrev'
.L234:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DTCFilterMatches')
	.sect	'.debug_line'
.L235:
	.word	.L800-.L799
.L799:
	.half	3
	.word	.L802-.L801
.L801:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0,0
.L802:
	.byte	5,19,7,0,5,2
	.word	.L148
	.byte	3,210,1,1,5,21,9
	.half	.L545-.L148
	.byte	3,2,1,5,31,9
	.half	.L546-.L545
	.byte	3,1,1,5,33,9
	.half	.L547-.L546
	.byte	3,1,1,5,9,9
	.half	.L548-.L547
	.byte	3,4,1,5,22,9
	.half	.L803-.L548
	.byte	1,5,5,9
	.half	.L804-.L803
	.byte	1,5,77,7,9
	.half	.L805-.L804
	.byte	3,2,1,5,90,9
	.half	.L806-.L805
	.byte	1,5,19,9
	.half	.L544-.L806
	.byte	1,5,22,9
	.half	.L14-.L544
	.byte	3,3,1,5,5,9
	.half	.L807-.L14
	.byte	1,5,27,7,9
	.half	.L808-.L807
	.byte	3,2,1,5,19,9
	.half	.L809-.L808
	.byte	1,4,3,5,20,7,9
	.half	.L17-.L809
	.byte	3,223,126,1,5,9,9
	.half	.L810-.L17
	.byte	1,5,20,9
	.half	.L811-.L810
	.byte	1,5,26,9
	.half	.L812-.L811
	.byte	1,5,2,9
	.half	.L813-.L812
	.byte	1,4,1,5,58,9
	.half	.L18-.L813
	.byte	3,161,1,1,5,27,9
	.half	.L814-.L18
	.byte	1,5,17,9
	.half	.L16-.L814
	.byte	1,5,48,9
	.half	.L15-.L16
	.byte	3,3,1,4,4,5,11,9
	.half	.L473-.L15
	.byte	3,67,1,5,32,9
	.half	.L815-.L473
	.byte	1,5,4,9
	.half	.L551-.L815
	.byte	1,9
	.half	.L20-.L551
	.byte	3,9,1,4,2,5,10,9
	.half	.L21-.L20
	.byte	3,218,0,1,4,5,5,32,7,9
	.half	.L23-.L21
	.byte	3,195,126,1,5,47,9
	.half	.L816-.L23
	.byte	1,5,53,9
	.half	.L817-.L816
	.byte	1,5,75,9
	.half	.L552-.L817
	.byte	1,4,6,5,29,9
	.half	.L499-.L552
	.byte	3,112,1,5,46,9
	.half	.L818-.L499
	.byte	1,5,5,9
	.half	.L819-.L818
	.byte	1,5,74,9
	.half	.L24-.L819
	.byte	3,5,1,5,5,9
	.half	.L820-.L24
	.byte	1,4,5,5,2,9
	.half	.L25-.L820
	.byte	3,11,1,4,2,5,93,9
	.half	.L26-.L25
	.byte	3,189,1,1,5,8,7,9
	.half	.L22-.L26
	.byte	3,1,1,4,5,5,2,7,9
	.half	.L29-.L22
	.byte	3,201,126,1,4,2,5,95,9
	.half	.L30-.L29
	.byte	3,183,1,1,5,8,7,9
	.half	.L28-.L30
	.byte	3,1,1,4,5,5,2,7,9
	.half	.L33-.L28
	.byte	3,207,126,1,4,2,5,89,9
	.half	.L34-.L33
	.byte	3,177,1,1,5,3,7,9
	.half	.L27-.L34
	.byte	3,8,1,5,2,9
	.half	.L32-.L27
	.byte	3,2,1,5,5,9
	.half	.L36-.L32
	.byte	3,6,1,4,1,5,17,9
	.half	.L38-.L36
	.byte	3,74,1,5,22,9
	.half	.L39-.L38
	.byte	3,3,1,5,5,9
	.half	.L821-.L39
	.byte	1,5,27,7,9
	.half	.L822-.L821
	.byte	3,2,1,5,19,9
	.half	.L823-.L822
	.byte	1,4,3,5,20,7,9
	.half	.L42-.L823
	.byte	3,219,126,1,5,9,9
	.half	.L824-.L42
	.byte	1,5,20,9
	.half	.L825-.L824
	.byte	1,5,26,9
	.half	.L826-.L825
	.byte	1,5,2,9
	.half	.L827-.L826
	.byte	1,4,1,5,78,9
	.half	.L43-.L827
	.byte	3,165,1,1,5,63,9
	.half	.L828-.L43
	.byte	1,5,27,9
	.half	.L829-.L828
	.byte	1,5,17,9
	.half	.L41-.L829
	.byte	1,5,22,9
	.half	.L40-.L41
	.byte	3,3,1,5,5,9
	.half	.L830-.L40
	.byte	1,5,63,7,9
	.half	.L831-.L830
	.byte	3,2,1,5,31,9
	.half	.L549-.L831
	.byte	1,5,23,9
	.half	.L45-.L549
	.byte	3,3,1,5,15,9
	.half	.L832-.L45
	.byte	1,5,31,7,9
	.half	.L520-.L832
	.byte	3,80,1,5,22,9
	.half	.L554-.L520
	.byte	3,2,1,5,5,9
	.half	.L833-.L554
	.byte	1,5,27,7,9
	.half	.L834-.L833
	.byte	3,2,1,5,19,9
	.half	.L835-.L834
	.byte	1,5,60,7,9
	.half	.L836-.L835
	.byte	1,5,27,9
	.half	.L550-.L836
	.byte	1,5,17,9
	.half	.L48-.L550
	.byte	1,5,22,9
	.half	.L47-.L48
	.byte	3,3,1,5,5,9
	.half	.L837-.L47
	.byte	1,5,27,7,9
	.half	.L838-.L837
	.byte	3,2,1,5,19,9
	.half	.L839-.L838
	.byte	1,5,31,7,9
	.half	.L840-.L839
	.byte	1,5,87,7,9
	.half	.L841-.L840
	.byte	1,5,85,9
	.half	.L555-.L841
	.byte	1,5,27,9
	.half	.L842-.L555
	.byte	1,5,17,9
	.half	.L52-.L842
	.byte	1,5,5,9
	.half	.L50-.L52
	.byte	3,3,1,5,23,9
	.half	.L54-.L50
	.byte	3,36,1,5,5,9
	.half	.L46-.L54
	.byte	3,6,1,5,1,9
	.half	.L56-.L46
	.byte	3,1,1,7,9
	.half	.L237-.L56
	.byte	0,1,1
.L800:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DTCFilterMatches')
	.sect	'.debug_ranges'
.L236:
	.word	-1,.L148,0,.L237-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetNextFilteredDTCID')
	.sect	'.debug_info'
.L238:
	.word	304
	.half	3
	.word	.L239
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L241,.L240
	.byte	2
	.word	.L169
	.byte	3
	.byte	'Dem_GetNextFilteredDTCID',0,1,144,3,41
	.word	.L247
	.byte	1,1
	.word	.L158,.L524,.L157
	.byte	4
	.byte	'dtcId',0,1,144,3,81
	.word	.L308,.L525
	.byte	4
	.byte	'DTC',0,1,144,3,96
	.word	.L273,.L526
	.byte	4
	.byte	'DTCStatus',0,1,144,3,108
	.word	.L275,.L527
	.byte	4
	.byte	'DTCFaultDetectionCounter',0,1,144,3,126
	.word	.L285,.L528
	.byte	5
	.word	.L158,.L524
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetNextFilteredDTCID')
	.sect	'.debug_abbrev'
.L239:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetNextFilteredDTCID')
	.sect	'.debug_line'
.L240:
	.word	.L844-.L843
.L843:
	.half	3
	.word	.L846-.L845
.L845:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0,0,0,0,0
.L846:
	.byte	5,72,7,0,5,2
	.word	.L158
	.byte	3,153,3,1,5,9,9
	.half	.L582-.L158
	.byte	1,5,1,9
	.half	.L118-.L582
	.byte	3,2,1,7,9
	.half	.L242-.L118
	.byte	0,1,1
.L844:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetNextFilteredDTCID')
	.sect	'.debug_ranges'
.L241:
	.word	-1,.L158,0,.L242-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DTCFilter')
	.sect	'.debug_info'
.L243:
	.word	170
	.half	3
	.word	.L244
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L169
	.byte	3
	.byte	'Dem_DTCFilter',0,24,31,21
	.word	.L529
	.byte	1,5,3
	.word	Dem_DTCFilter
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DTCFilter')
	.sect	'.debug_abbrev'
.L244:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DTCFilterMatching')
	.sect	'.debug_info'
.L245:
	.word	178
	.half	3
	.word	.L246
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCFilter.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L169
	.byte	3
	.byte	'Dem_DTCFilterMatching',0,24,30,2
	.word	.L530
	.byte	1,5,3
	.word	Dem_DTCFilterMatching
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DTCFilterMatching')
	.sect	'.debug_abbrev'
.L246:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DTCFilterMainFunction')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L461-.L154
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DTCFilterMatches')
	.sect	'.debug_loc'
.L147:
	.word	-1,.L148,0,.L543-.L148
	.half	2
	.byte	138,0
	.word	.L543-.L148,.L462-.L148
	.half	2
	.byte	138,8
	.word	.L462-.L148,.L462-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L521:
	.word	0,0
.L464:
	.word	-1,.L148,.L546-.L148,.L544-.L148
	.half	1
	.byte	89
	.word	.L544-.L148,.L14-.L148
	.half	1
	.byte	82
	.word	.L14-.L148,.L550-.L148
	.half	1
	.byte	89
	.word	0,0
.L467:
	.word	-1,.L148,0,.L462-.L148
	.half	2
	.byte	145,120
	.word	0,0
.L522:
	.word	0,0
.L466:
	.word	-1,.L148,.L548-.L148,.L549-.L148
	.half	1
	.byte	90
	.word	.L549-.L148,.L45-.L148
	.half	1
	.byte	82
	.word	.L45-.L148,.L462-.L148
	.half	1
	.byte	90
	.word	0,0
.L509:
	.word	0,0
.L503:
	.word	0,0
.L463:
	.word	-1,.L148,0,.L544-.L148
	.half	1
	.byte	84
	.word	.L545-.L148,.L462-.L148
	.half	1
	.byte	88
	.word	.L553-.L148,.L549-.L148
	.half	1
	.byte	84
	.word	0,0
.L475:
	.word	0,0
.L486:
	.word	0,0
.L482:
	.word	0,0
.L490:
	.word	0,0
.L479:
	.word	-1,.L148,.L551-.L148,.L552-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L470:
	.word	0,0
.L519:
	.word	0,0
.L496:
	.word	0,0
.L513:
	.word	0,0
.L517:
	.word	0,0
.L523:
	.word	-1,.L148,.L554-.L148,.L555-.L148
	.half	1
	.byte	95
	.word	.L50-.L148,.L46-.L148
	.half	1
	.byte	95
	.word	0,0
.L465:
	.word	-1,.L148,.L547-.L148,.L462-.L148
	.half	1
	.byte	91
	.word	0,0
.L492:
	.word	0,0
.L477:
	.word	0,0
.L507:
	.word	0,0
.L501:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DTCFilterStandardMainFunction')
	.sect	'.debug_loc'
.L149:
	.word	-1,.L150,0,.L556-.L150
	.half	2
	.byte	138,0
	.word	.L556-.L150,.L373-.L150
	.half	2
	.byte	138,8
	.word	.L373-.L150,.L373-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L419:
	.word	0,0
.L408:
	.word	0,0
.L402:
	.word	0,0
.L417:
	.word	0,0
.L395:
	.word	0,0
.L379:
	.word	-1,.L150,.L559-.L150,.L61-.L150
	.half	1
	.byte	90
	.word	0,0
.L412:
	.word	0,0
.L422:
	.word	-1,.L150,.L561-.L150,.L79-.L150
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L375:
	.word	-1,.L150,.L557-.L150,.L373-.L150
	.half	1
	.byte	88
	.word	0,0
.L377:
	.word	-1,.L150,.L558-.L150,.L373-.L150
	.half	1
	.byte	89
	.word	0,0
.L390:
	.word	0,0
.L384:
	.word	0,0
.L428:
	.word	0,0
.L386:
	.word	0,0
.L424:
	.word	-1,.L150,.L562-.L150,.L563-.L150
	.half	1
	.byte	95
	.word	0,0
.L426:
	.word	-1,.L150,.L564-.L150,.L79-.L150
	.half	1
	.byte	81
	.word	0,0
.L380:
	.word	-1,.L150,.L560-.L150,.L72-.L150
	.half	1
	.byte	82
	.word	.L77-.L150,.L61-.L150
	.half	1
	.byte	82
	.word	0,0
.L381:
	.word	0,0
.L378:
	.word	-1,.L150,0,.L373-.L150
	.half	2
	.byte	145,120
	.word	0,0
.L406:
	.word	0,0
.L400:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DtcFilterInit')
	.sect	'.debug_loc'
.L141:
	.word	-1,.L142,0,.L452-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L457:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNextFilteredDTC')
	.sect	'.debug_loc'
.L274:
	.word	-1,.L160,0,.L584-.L160
	.half	1
	.byte	100
	.word	.L586-.L160,.L272-.L160
	.half	1
	.byte	111
	.word	.L585-.L160,.L122-.L160
	.half	1
	.byte	101
	.word	0,0
.L276:
	.word	-1,.L160,0,.L585-.L160
	.half	1
	.byte	101
	.word	.L587-.L160,.L122-.L160
	.half	1
	.byte	102
	.word	0,0
.L159:
	.word	-1,.L160,0,.L583-.L160
	.half	2
	.byte	138,0
	.word	.L583-.L160,.L272-.L160
	.half	2
	.byte	138,8
	.word	.L272-.L160,.L272-.L160
	.half	2
	.byte	138,0
	.word	0,0
.L278:
	.word	-1,.L160,0,.L272-.L160
	.half	2
	.byte	145,120
	.word	0,0
.L282:
	.word	0,0
.L279:
	.word	-1,.L160,.L588-.L160,.L272-.L160
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNextFilteredDTCAndFDC')
	.sect	'.debug_loc'
.L284:
	.word	-1,.L162,0,.L126-.L162
	.half	1
	.byte	100
	.word	.L590-.L162,.L283-.L162
	.half	1
	.byte	111
	.word	.L591-.L162,.L592-.L162
	.half	1
	.byte	101
	.word	0,0
.L286:
	.word	-1,.L162,0,.L126-.L162
	.half	1
	.byte	101
	.word	.L124-.L162,.L283-.L162
	.half	1
	.byte	108
	.word	.L593-.L162,.L592-.L162
	.half	1
	.byte	103
	.word	0,0
.L161:
	.word	-1,.L162,0,.L589-.L162
	.half	2
	.byte	138,0
	.word	.L589-.L162,.L283-.L162
	.half	2
	.byte	138,8
	.word	.L283-.L162,.L283-.L162
	.half	2
	.byte	138,0
	.word	0,0
.L287:
	.word	-1,.L162,0,.L283-.L162
	.half	2
	.byte	145,120
	.word	0,0
.L288:
	.word	-1,.L162,.L592-.L162,.L283-.L162
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNextFilteredDTCAndSeverity')
	.sect	'.debug_loc'
.L290:
	.word	-1,.L164,0,.L595-.L164
	.half	1
	.byte	100
	.word	.L599-.L164,.L600-.L164
	.half	1
	.byte	111
	.word	.L598-.L164,.L602-.L164
	.half	1
	.byte	101
	.word	0,0
.L294:
	.word	-1,.L164,0,.L596-.L164
	.half	1
	.byte	103
	.word	.L604-.L164,.L289-.L164
	.half	1
	.byte	109
	.word	0,0
.L293:
	.word	-1,.L164,0,.L597-.L164
	.half	1
	.byte	102
	.word	.L603-.L164,.L289-.L164
	.half	1
	.byte	108
	.word	0,0
.L291:
	.word	-1,.L164,0,.L598-.L164
	.half	1
	.byte	101
	.word	.L601-.L164,.L602-.L164
	.half	1
	.byte	98
	.word	.L597-.L164,.L602-.L164
	.half	1
	.byte	102
	.word	0,0
.L163:
	.word	-1,.L164,0,.L594-.L164
	.half	2
	.byte	138,0
	.word	.L594-.L164,.L289-.L164
	.half	2
	.byte	138,8
	.word	.L289-.L164,.L289-.L164
	.half	2
	.byte	138,0
	.word	0,0
.L295:
	.word	-1,.L164,0,.L289-.L164
	.half	2
	.byte	145,120
	.word	0,0
.L299:
	.word	0,0
.L303:
	.word	0,0
.L296:
	.word	-1,.L164,.L602-.L164,.L289-.L164
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNextFilteredDTCID')
	.sect	'.debug_loc'
.L526:
	.word	-1,.L158,0,.L582-.L158
	.half	1
	.byte	101
	.word	0,0
.L528:
	.word	-1,.L158,0,.L582-.L158
	.half	1
	.byte	103
	.word	0,0
.L527:
	.word	-1,.L158,0,.L582-.L158
	.half	1
	.byte	102
	.word	0,0
.L157:
	.word	-1,.L158,0,.L524-.L158
	.half	2
	.byte	138,0
	.word	0,0
.L525:
	.word	-1,.L158,0,.L582-.L158
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNextFilteredStandardDTCID')
	.sect	'.debug_loc'
.L310:
	.word	-1,.L156,0,.L87-.L156
	.half	1
	.byte	101
	.word	.L567-.L156,.L307-.L156
	.half	2
	.byte	145,124
	.word	.L361-.L156,.L97-.L156
	.half	1
	.byte	111
	.word	0,0
.L312:
	.word	-1,.L156,0,.L87-.L156
	.half	1
	.byte	103
	.word	.L569-.L156,.L307-.L156
	.half	2
	.byte	145,120
	.word	.L580-.L156,.L581-.L156
	.half	1
	.byte	111
	.word	0,0
.L343:
	.word	0,0
.L345:
	.word	0,0
.L311:
	.word	-1,.L156,0,.L87-.L156
	.half	1
	.byte	102
	.word	.L568-.L156,.L307-.L156
	.half	2
	.byte	145,116
	.word	.L579-.L156,.L580-.L156
	.half	1
	.byte	111
	.word	0,0
.L155:
	.word	-1,.L156,0,.L565-.L156
	.half	2
	.byte	138,0
	.word	.L565-.L156,.L307-.L156
	.half	2
	.byte	138,16
	.word	.L307-.L156,.L307-.L156
	.half	2
	.byte	138,0
	.word	0,0
.L351:
	.word	0,0
.L353:
	.word	0,0
.L317:
	.word	-1,.L156,.L571-.L156,.L572-.L156
	.half	1
	.byte	89
	.word	.L572-.L156,.L101-.L156
	.half	1
	.byte	82
	.word	.L101-.L156,.L307-.L156
	.half	1
	.byte	89
	.word	0,0
.L330:
	.word	0,0
.L328:
	.word	0,0
.L341:
	.word	0,0
.L358:
	.word	0,0
.L309:
	.word	-1,.L156,0,.L87-.L156
	.half	1
	.byte	100
	.word	.L566-.L156,.L307-.L156
	.half	1
	.byte	108
	.word	0,0
.L333:
	.word	-1,.L156,.L573-.L156,.L574-.L156
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L314:
	.word	-1,.L156,.L570-.L156,.L307-.L156
	.half	1
	.byte	88
	.word	0,0
.L365:
	.word	0,0
.L320:
	.word	0,0
.L370:
	.word	0,0
.L323:
	.word	0,0
.L315:
	.word	-1,.L156,0,.L307-.L156
	.half	2
	.byte	145,112
	.word	0,0
.L335:
	.word	-1,.L156,.L575-.L156,.L576-.L156
	.half	1
	.byte	95
	.word	0,0
.L337:
	.word	-1,.L156,.L577-.L156,.L574-.L156
	.half	1
	.byte	81
	.word	0,0
.L355:
	.word	-1,.L156,.L578-.L156,.L97-.L156
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNumberOfFilteredDTC')
	.sect	'.debug_loc'
.L167:
	.word	-1,.L168,0,.L262-.L168
	.half	2
	.byte	138,0
	.word	0,0
.L264:
	.word	-1,.L168,0,.L605-.L168
	.half	1
	.byte	100
	.word	0,0
.L270:
	.word	0,0
.L265:
	.word	-1,.L168,.L605-.L168,.L139-.L168
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetNumberOfStandardFilteredDTC')
	.sect	'.debug_loc'
.L165:
	.word	-1,.L166,0,.L305-.L166
	.half	2
	.byte	138,0
	.word	0,0
.L306:
	.word	-1,.L166,0,.L305-.L166
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_IsStandardFilterFinished')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L447-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L451:
	.word	0,0
.L449:
	.word	-1,.L152,0,.L447-.L152
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetDTCFilter')
	.sect	'.debug_loc'
.L251:
	.word	-1,.L146,0,.L533-.L146
	.half	1
	.byte	86
	.word	.L534-.L146,.L248-.L146
	.half	1
	.byte	90
	.word	0,0
.L250:
	.word	-1,.L146,0,.L533-.L146
	.half	1
	.byte	85
	.word	.L540-.L146,.L541-.L146
	.half	1
	.byte	89
	.word	0,0
.L260:
	.word	0,0
.L252:
	.word	-1,.L146,0,.L533-.L146
	.half	1
	.byte	87
	.word	0,.L248-.L146
	.half	2
	.byte	145,120
	.word	0,0
.L254:
	.word	-1,.L146,0,.L248-.L146
	.half	2
	.byte	145,4
	.word	.L536-.L146,.L248-.L146
	.half	1
	.byte	92
	.word	0,0
.L249:
	.word	-1,.L146,0,.L533-.L146
	.half	1
	.byte	84
	.word	.L539-.L146,.L540-.L146
	.half	1
	.byte	88
	.word	0,0
.L145:
	.word	-1,.L146,0,.L532-.L146
	.half	2
	.byte	138,0
	.word	.L532-.L146,.L248-.L146
	.half	2
	.byte	138,8
	.word	.L248-.L146,.L248-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L255:
	.word	-1,.L146,0,.L248-.L146
	.half	2
	.byte	145,8
	.word	.L537-.L146,.L248-.L146
	.half	1
	.byte	93
	.word	0,0
.L253:
	.word	-1,.L146,0,.L248-.L146
	.half	2
	.byte	145,0
	.word	.L535-.L146,.L248-.L146
	.half	1
	.byte	91
	.word	0,0
.L256:
	.word	-1,.L146,.L538-.L146,.L248-.L146
	.half	1
	.byte	94
	.word	.L542-.L146,.L248-.L146
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetDTCFilterstartIterator')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L144,0,.L429-.L144
	.half	2
	.byte	138,0
	.word	0,0
.L441:
	.word	0,0
.L446:
	.word	-1,.L144,.L531-.L144,.L429-.L144
	.half	1
	.byte	81
	.word	0,0
.L434:
	.word	0,0
.L443:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L847:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_DtcFilterInit')
	.sect	'.debug_frame'
	.word	24
	.word	.L847,.L142,.L452-.L142
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_SetDTCFilterstartIterator')
	.sect	'.debug_frame'
	.word	24
	.word	.L847,.L144,.L429-.L144
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_SetDTCFilter')
	.sect	'.debug_frame'
	.word	36
	.word	.L847,.L146,.L248-.L146
	.byte	4
	.word	(.L532-.L146)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L248-.L532)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_DTCFilterMatches')
	.sect	'.debug_frame'
	.word	36
	.word	.L847,.L148,.L462-.L148
	.byte	4
	.word	(.L543-.L148)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L462-.L543)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_DTCFilterStandardMainFunction')
	.sect	'.debug_frame'
	.word	36
	.word	.L847,.L150,.L373-.L150
	.byte	4
	.word	(.L556-.L150)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L373-.L556)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_IsStandardFilterFinished')
	.sect	'.debug_frame'
	.word	24
	.word	.L847,.L152,.L447-.L152
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_DTCFilterMainFunction')
	.sect	'.debug_frame'
	.word	12
	.word	.L847,.L154,.L461-.L154
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNextFilteredStandardDTCID')
	.sect	'.debug_frame'
	.word	36
	.word	.L847,.L156,.L307-.L156
	.byte	4
	.word	(.L565-.L156)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L307-.L565)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNextFilteredDTCID')
	.sect	'.debug_frame'
	.word	12
	.word	.L847,.L158,.L524-.L158
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNextFilteredDTC')
	.sect	'.debug_frame'
	.word	36
	.word	.L847,.L160,.L272-.L160
	.byte	4
	.word	(.L583-.L160)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L272-.L583)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNextFilteredDTCAndFDC')
	.sect	'.debug_frame'
	.word	36
	.word	.L847,.L162,.L283-.L162
	.byte	4
	.word	(.L589-.L162)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L283-.L589)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNextFilteredDTCAndSeverity')
	.sect	'.debug_frame'
	.word	36
	.word	.L847,.L164,.L289-.L164
	.byte	4
	.word	(.L594-.L164)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L289-.L594)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNumberOfStandardFilteredDTC')
	.sect	'.debug_frame'
	.word	24
	.word	.L847,.L166,.L305-.L166
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetNumberOfFilteredDTC')
	.sect	'.debug_frame'
	.word	12
	.word	.L847,.L168,.L262-.L168

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   492  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCFilter.c	   493  #include "Dem_Cfg_MemMap.h"

	; Module end
