	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15728a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_DTCStatusByte.src BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c'

	
$TC16X
	
	.sdecl	'.text.Dem_DTCStatusByte.Dem_DtcStatusByteRetrieve',code,cluster('Dem_DtcStatusByteRetrieve')
	.sect	'.text.Dem_DTCStatusByte.Dem_DtcStatusByteRetrieve'
	.align	2
	
	.global	Dem_DtcStatusByteRetrieve

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     3  #include "Dem_Dcm.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     4  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     5  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     7  #include "Dem_Cfg_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	     9  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    10  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    11  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    12  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    13  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    14  #include "Dem_EventRecheck.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    15  #include "Dem_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    16  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    17  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    18  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    19  #include "Dem_DTCFilter.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    20  #include "Dem_Dependencies.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    21  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    22  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    23  #include "Dem_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    25  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    26  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    27  /*
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    28  Dem_boolean_least DiagnosticTroubleCodes__isDTCTestFailed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    29  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    30     Dem_boolean_least testFailed = Dem_DtcStatusByteInit_TestFailed(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    31     Dem_EventIdListIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    33     for (Dem_EventIdListIteratorFromDtcId_New (dtcId, &eventIt);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    34          Dem_EventIdListIteratorFromDtcId_IsValid (dtcId, &eventIt);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    35          Dem_EventIdListIteratorFromDtcId_Next(&eventIt))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    36     {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    37        if (Dem_DtcStatusByteFromEvent_TestFailed (*eventIt))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    38        {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    39           return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    40        }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    41     }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    42  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    43     return (FALSE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    44  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    45  */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    46  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    47  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    48  static Dem_EventIdType Dem_PendingClearEventId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    49  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    50  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    52  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    53  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    54  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    55  uint8 Dem_DtcStatusByteRetrieve (Dem_DtcIdType dtcId)
; Function Dem_DtcStatusByteRetrieve
.L167:
Dem_DtcStatusByteRetrieve:	.type	func
	sub.a	a10,#8
.L517:
	mov	d8,d4
.L519:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    56  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    57  	Dem_EventIdListIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    58  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    59  	uint8 isobyte_OR = 0, /*isoByte_AND = 0xFF,*/ isoByte = DEM_ISO14229BYTE_INITVALUE;
	mov	d9,#0
.L520:
	mov	d10,#80
.L521:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    60  	Dem_boolean_least isEventAssigned = FALSE;
	mov	d11,#0
.L326:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d0,#0
.L329:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L632:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d8,#0,.L2
.L633:
	ge.u	d15,d8,#5
.L634:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L3:
.L2:
	j	.L4

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L4:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d1,#0,.L5
.L330:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L635:
	addsc.a	a15,a15,d8,#0
.L636:
	ld.bu	d1,[a15]
.L637:
	mov	d15,#0
.L333:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d15,#0
	sha	d1,d1,d15
.L638:
	and	d15,d1,#1
.L639:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L6

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L6:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L640:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L7

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L7:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L8

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L8:
	cmovn	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L9:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L5:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L10

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L10:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    61  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    62  	if (Dem_DtcIsSupported(dtcId))
	jeq	d0,#0,.L11
.L327:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    63  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    64  		for (Dem_EventIdListIteratorNewFromDtcId(&eventIt, dtcId);
	lea	a12,[a10]0
.L339:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L641:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d8,#0,.L12
.L642:
	ge.u	d15,d8,#5
.L643:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L13:
.L12:
	j	.L14

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L14:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
	jne	d0,#0,.L15
.L346:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
	mov	d4,#54
.L518:
	mov	d5,#0
	mov	d6,#189
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
.L15:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L644:
	addsc.a	a15,a15,d8,#1
.L645:
	st.a	[a12],a15
.L646:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
	add.a	a15,#2
.L647:
	st.a	[a10]4,a15
.L340:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    65  				Dem_EventIdListIteratorIsValid(&eventIt);
	j	.L16

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    66  				Dem_EventIdListIteratorNext(&eventIt))
.L17:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    67  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    68  			eventId = Dem_EventIdListIteratorCurrent(&eventIt);
	lea	a15,[a10]0
.L348:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
	ld.a	a15,[a15]
.L648:
	ld.hu	d15,[a15]0
.L522:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }      (inlined)
.L18:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L649:
	addsc.a	a15,a15,d15,#2
.L650:
	ld.bu	d0,[a15]
.L651:
	mov	d1,#2
.L357:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L652:
	and	d0,d0,#1
.L653:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L19

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L19:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d0,d0,#0
.L654:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L20

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L20:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L21:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    69  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    70  			if (!Dem_EvtIsSuppressed(eventId))
	jne	d0,#0,.L22
.L353:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L655:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L523:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L23

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }      (inlined)
.L23:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    71  			{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    72  				//isoByte_AND &= Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    73  				isobyte_OR  |= Dem_EvtGetIsoByte4DtcCalculation(eventId);
	or	d9,d15
.L656:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    74  				isEventAssigned = TRUE;
	mov	d11,#1
.L22:
	lea	a15,[a10]0
.L363:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
	ld.a	a2,[a15]
.L657:
	add.a	a2,#2
	st.a	[a15],a2
.L16:
	lea	a15,[a10]0
.L368:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
	ld.a	a15,[a15]
.L658:
	ld.a	a2,[a10]4
.L659:
	lt.a	d15,a15,a2
.L660:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));      (inlined)
	j	.L24

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }      (inlined)
.L24:
	jne	d15,#0,.L17
.L661:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    75  			}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    76  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    77  		if (isEventAssigned) {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    78  			isoByte = (isobyte_OR );
	seln	d10,d11,d10,d9
.L25:
.L11:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    79  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    80  #if DEM_CFG_EVCOMB != DEM_CFG_EVCOMB_DISABLED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    81  			if (Dem_ISO14229ByteIsTestFailedTOC(isoByte))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    82  			{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    83  				Dem_ISO14229ByteSetTestCompleteTOC(&isoByte, TRUE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    84  			}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    85  			if (Dem_ISO14229ByteIsTestFailedSLC(isoByte))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    86  			{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    87  				Dem_ISO14229ByteSetTestCompleteSLC(&isoByte, TRUE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    88  			}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    89  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    90  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    91  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    92  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    94  	return isoByte;
	mov	d2,d10
.L524:
	j	.L26

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    95  }
.L26:
	ret
.L318:
	
__Dem_DtcStatusByteRetrieve_function_end:
	.size	Dem_DtcStatusByteRetrieve,__Dem_DtcStatusByteRetrieve_function_end-Dem_DtcStatusByteRetrieve
.L193:
	; End of function
	
	.sdecl	'.text.Dem_DTCStatusByte.Dem_DtcStatusByteRetrieveWithOrigin',code,cluster('Dem_DtcStatusByteRetrieveWithOrigin')
	.sect	'.text.Dem_DTCStatusByte.Dem_DtcStatusByteRetrieveWithOrigin'
	.align	2
	
	.global	Dem_DtcStatusByteRetrieveWithOrigin

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    97  uint8 Dem_DtcStatusByteRetrieveWithOrigin (Dem_DtcIdType dtcId, Dem_DTCOriginType DtcOrigin, boolean* DtcStatusIsValid)
; Function Dem_DtcStatusByteRetrieveWithOrigin
.L169:
Dem_DtcStatusByteRetrieveWithOrigin:	.type	func
	mov.aa	a15,a4
.L526:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    98  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	    99  	uint16_least  LocId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   100  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   101  	*DtcStatusIsValid = TRUE;
	mov	d15,#1
.L666:
	st.b	[a15],d15
.L667:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   102  	if( Dem_LibGetParamBool(DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED) )
	mov	d15,#0
.L380:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    43      return parameter;      (inlined)
	j	.L27

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    44  }      (inlined)
.L27:
	jeq	d15,#0,.L28
.L668:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   103  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   104  		if (DtcOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
	jne	d5,#2,.L29
.L385:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   195  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   196  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfDtcAndOrigin(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   197  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   198      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   199      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   200              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   201         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   202      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   203          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   204      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   206      return Dem_EvMemGetEventMemoryStatusOfDtc(DtcId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   207  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   208  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   209  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   210  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   211      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   212      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   213              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   214         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   215      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   216          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   217      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   219      return Dem_EvMemGetEventMemoryStatusOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   222  DEM_INLINE uint16_least Dem_EvMemGetMemIdForEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   225      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   227      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   228  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   229  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   230      if(Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   231      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   232          return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   233      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   234  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   235  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   238  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   239  DEM_INLINE uint16_least Dem_EvMemGetLocationOfEventFromEventMemory(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   240  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   241      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   242      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   243      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   244          return DEM_EVMEM_INVALID_LOCID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   245      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   247      return Dem_EvMemGetEventMemoryLocIdOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   249  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   251  DEM_INLINE Std_ReturnType Dem_EvMemGetReaderCopyOfEventFromEventMemory(
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   252          Dem_EvMemEventMemoryType* ReaderCopy,
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   253          Dem_EventIdType EventId
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   254  )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   256      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   258      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   260      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   263  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   265  DEM_INLINE boolean Dem_GetEvMemLockInternal(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   266  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   267      return Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   268  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   269  DEM_INLINE uint16_least Dem_EvMemGetMemoryLocIdOfDtcAndOrigin(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   270  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   271      /* do not report deleted DTCs */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   272      return Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(DtcId,DTCOrigin,FALSE);
	mov	d6,#0
	call	Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility
.L525:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   272      return Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(DtcId,DTCOrigin,FALSE);      (inlined)
	j	.L30

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   273  }      (inlined)
.L30:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
	lt.u	d15,d2,#5
.L669:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);      (inlined)
	j	.L31

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }      (inlined)
.L31:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   105  		{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   106  			LocId = Dem_EvMemGetMemoryLocIdOfDtcAndOrigin(dtcId, DtcOrigin);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   107  			if (Dem_EvMemIsEventMemLocIdValid(LocId))
	jeq	d15,#0,.L32
.L396:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;      (inlined)
	j	.L33

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }      (inlined)
.L33:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
	mov	d2,#0
.L527:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);      (inlined)
	j	.L34

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }      (inlined)
.L34:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   108  			{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   109  				return Dem_EvMemGetEventMemDtcStatus(LocId);
	j	.L35
.L32:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   110  			}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   111  			else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   112  			{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   113  				*DtcStatusIsValid = FALSE;
	mov	d15,#0
.L670:
	st.b	[a15],d15
.L671:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   114  				return 0;
	mov	d2,#0
.L528:
	j	.L36
.L29:
.L28:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   115  			}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   116  		}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   117  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   118  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   119  	return Dem_DtcStatusByteRetrieve(dtcId);
	call	Dem_DtcStatusByteRetrieve
.L529:
	j	.L37

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   120  }
.L37:
.L36:
.L35:
	ret
.L372:
	
__Dem_DtcStatusByteRetrieveWithOrigin_function_end:
	.size	Dem_DtcStatusByteRetrieveWithOrigin,__Dem_DtcStatusByteRetrieveWithOrigin_function_end-Dem_DtcStatusByteRetrieveWithOrigin
.L198:
	; End of function
	
	.sdecl	'.text.Dem_DTCStatusByte.Dem_ClearDTCsEvents',code,cluster('Dem_ClearDTCsEvents')
	.sect	'.text.Dem_DTCStatusByte.Dem_ClearDTCsEvents'
	.align	2
	
	.global	Dem_ClearDTCsEvents

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   121  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   122  /***************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   123  /* clearing data                                   */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   124  /***************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   125  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   126  void Dem_ClearDTCsEvents(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr)
; Function Dem_ClearDTCsEvents
.L171:
Dem_ClearDTCsEvents:	.type	func
	mov	e8,d5,d4
	mov.aa	a15,a4
.L531:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   127  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   128      if (Dem_EvtClearEventAllowed(EventId))
	mov	d4,d8
.L533:
	call	Dem_EvtClearEventAllowed
.L530:
	jeq	d2,#0,.L38
.L409:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
	jne	d9,#1,.L39

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L40:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a2,#@his(Dem_EvtParam_16)
	lea	a2,[a2]@los(Dem_EvtParam_16)
.L534:
	addsc.a	a2,a2,d8,#1
.L535:
	ld.hu	d0,[a2]0
.L676:
	mov	d1,#0
.L413:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L677:
	and	d15,d0,#1
.L678:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L41

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L41:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L679:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L42

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L42:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L43:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
	jne	d15,#0,.L44
.L39:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))      (inlined)
	jne	d9,#4,.L45

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L46:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79   is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;      (inlined)
	j	.L47

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }      (inlined)
.L47:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))      (inlined)
	jne	d15,#0,.L48
.L45:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
	jne	d9,#2,.L49

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L50:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;      (inlined)
	j	.L51

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }      (inlined)
.L51:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
	jeq	d15,#0,.L52
.L48:
.L44:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
	mov	d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;      (inlined)
	j	.L53

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
.L52:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
.L49:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;      (inlined)
	j	.L54

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }      (inlined)
.L54:
.L53:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   129      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   130          if ((Dem_EventUsesOrigin(EventId, DTCOrigin))
	jne	d15,#0,.L55
.L421:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
	movh.a	a2,#@his(Dem_MapEventIdToDtcId)
	lea	a2,[a2]@los(Dem_MapEventIdToDtcId)
.L536:
	addsc.a	a2,a2,d8,#1
.L537:
	ld.hu	d15,[a2]0
.L680:
	ne	d15,d15,#0
.L681:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);      (inlined)
	j	.L56

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }      (inlined)
.L56:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   131                  || (!Dem_EventIdIsDtcAssigned(EventId) && (DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)))
	jne	d15,#0,.L57
.L538:
	jne	d9,#1,.L58
.L55:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   132          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   133              if (Dem_ClientClearMachinePtr->NumberOfEventsProcessed < DEM_CFG_CLEAR_MAX_NO_OF_EVENTS_PER_CYCLE)
	ld.hu	d15,[a15]4
.L682:
	jge.u	d15,#5,.L59
.L683:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   134              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   135                  Dem_ClientClearMachinePtr->NumberOfEventsProcessed++;
	add	d15,#1
	st.h	[a15]4,d15
.L684:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   136  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   137                  Dem_PendingClearEventId = EventId;
	movh.a	a15,#@his(Dem_PendingClearEventId)
.L532:
	lea	a15,[a15]@los(Dem_PendingClearEventId)
.L539:
	st.h	[a15],d8
.L685:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   138                  /* ClearEventBuffer */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   139                  Dem_EvBuffClear(EventId);
	mov	d4,d8
.L540:
	call	Dem_EvBuffClear
.L426:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
	mov	d15,#1
.L541:
	jeq	d15,d9,.L60
.L542:
	j	.L61

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:      (inlined)
.L60:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
	mov	d5,#0
.L543:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;      (inlined)
	j	.L62

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:      (inlined)
.L61:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
	mov.u	d5,#65535
.L544:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;      (inlined)
	j	.L63

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }      (inlined)
.L63:
.L62:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
	eq	d15,d5,#0
.L686:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);      (inlined)
	j	.L64

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }      (inlined)
.L64:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
	jne	d15,#0,.L65
.L687:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;      (inlined)
	j	.L66

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
.L65:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
	mov	d4,d8
.L545:
	call	Dem_EvMemClearEvent

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }      (inlined)
.L66:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   140                  /* ClearEventMemory */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   141                  Dem_EvMemClearEventAndOrigin(EventId, DTCOrigin);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   142                  Dem_ClearEvent(EventId, TRUE);
	mov	d5,#1
.L546:
	mov	d4,d8
.L547:
	call	Dem_ClearEvent
.L548:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   143                  Dem_PendingClearEventId = DEM_EVENTID_INVALID;
	mov	d15,#0
.L688:
	st.h	[a15],d15
.L689:
	j	.L67
.L59:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   144              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   145              else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   146              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   147                  Dem_ClientClearMachinePtr->IsClearInterrupted = TRUE;
	mov	d15,#1
.L690:
	st.b	[a15]3,d15
.L67:
.L58:
.L57:
	j	.L68
.L38:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   231  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L69:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   173  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   174  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   175  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThresholdForTFSLC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   176  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   177  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   178  	return 0u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   179  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   180  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   181  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   182  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureConfirmationThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   183  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   184  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   185  	return 1u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   186  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   187  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   188  LOCAL_INLINE uint8 Dem_EvtParam_GetEventPriority(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   189  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   190  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   191  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 7, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   192  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   193  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   194  LOCAL_INLINE uint8 Dem_EvtParam_GetMaxNumberFreezeFrameRecords(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   195  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   198  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   199  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   200  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   201  LOCAL_INLINE Dem_StoCoList Dem_EvtParam_GetStorageConditions(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   202  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   203  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   204  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   205  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   206  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   207  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   208  LOCAL_INLINE Dem_EnCoList Dem_EvtParam_GetEnableConditions(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   209  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   210  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   211  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   212  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   213  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   214  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   215  LOCAL_INLINE uint8 Dem_EvtParam_GetCallbackEventStatusChangedIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   216  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   217  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   218  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   219  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   220  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   221  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   222  LOCAL_INLINE Dem_EvtClearAllowedFncType Dem_EvtParam_GetCallbackClearAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   223  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   224  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   225  	return NULL_PTR; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   226  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   227  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   228  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   229  LOCAL_INLINE uint8 Dem_EvtParam_GetClearAllowedBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   230  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   231  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   232  	return DEM_NO_STATUS_BYTE_CHANGE; /* feature deactivated */
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   232  	return DEM_NO_STATUS_BYTE_CHANGE; /* feature deactivated */      (inlined)
	j	.L70

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   233  }      (inlined)
.L70:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   148              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   149          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   150      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   151      else if (Dem_EvtParam_GetClearAllowedBehavior(EventId) == DEM_ONLY_THIS_CYCLE_AND_READINESS)
	jne	d15,#1,.L71
.L691:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   152      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   153          Dem_ClearEvent(EventId, FALSE);
	mov	d5,#0
.L549:
	mov	d4,d8
.L550:
	call	Dem_ClearEvent
.L551:
	j	.L72
.L71:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   154      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   155      else
.L72:
.L68:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   156      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   157          /* If Allowed parameter returned is False and ClearAllowedBehavior is set to NO_STATUS_BYTE_CHANGE */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   158          /* Do nothing */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   159      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   160  }
	ret
.L404:
	
__Dem_ClearDTCsEvents_function_end:
	.size	Dem_ClearDTCsEvents,__Dem_ClearDTCsEvents_function_end-Dem_ClearDTCsEvents
.L203:
	; End of function
	
	.sdecl	'.text.Dem_DTCStatusByte.Dem_ClearAllDTCs',code,cluster('Dem_ClearAllDTCs')
	.sect	'.text.Dem_DTCStatusByte.Dem_ClearAllDTCs'
	.align	2
	
	.global	Dem_ClearAllDTCs

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   161  void Dem_ClearAllDTCs(Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr)
; Function Dem_ClearAllDTCs
.L173:
Dem_ClearAllDTCs:	.type	func
	mov	d8,d4
.L552:
	mov.aa	a15,a4
.L553:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   162  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   163      Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   164  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   165      /* Check whether the Clear is requested newly */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   166      if (Dem_ClientClearMachinePtr->IsNewClearRequest)
	ld.bu	d15,[a15]2
.L696:
	jeq	d15,#0,.L73
.L697:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   167      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   168          Dem_EventIdIteratorNew(&(Dem_ClientClearMachinePtr->EvtIt));
	lea	a2,[a15]12
.L450:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
	mov	d15,#1
.L698:
	st.w	[a2],d15
.L73:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   169      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   170  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   171      if (DTCOrigin != DEM_DTC_ORIGIN_MIRROR_MEMORY)
	jeq	d8,#2,.L74
.L699:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   172      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   173          while (Dem_EventIdIteratorIsValid(&(Dem_ClientClearMachinePtr->EvtIt)))
	j	.L75
.L76:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   174          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   175              eventId = Dem_EventIdIteratorCurrent(&(Dem_ClientClearMachinePtr->EvtIt));
	lea	a2,[a15]12
.L455:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
	ld.w	d15,[a2]
.L700:
	extr.u	d4,d15,#0,#16
.L701:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);      (inlined)
	j	.L77

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }      (inlined)
.L77:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   176              Dem_ClearDTCsEvents(eventId, DTCOrigin, Dem_ClientClearMachinePtr);
	mov	d5,d8
.L555:
	mov.aa	a4,a15
.L557:
	call	Dem_ClearDTCsEvents
.L556:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   177              if (!Dem_ClientClearMachinePtr->IsClearInterrupted)
	ld.bu	d15,[a15]3
.L702:
	jne	d15,#0,.L78
.L703:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   178              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   179                  Dem_EventIdIteratorNext(&(Dem_ClientClearMachinePtr->EvtIt));
	lea	a2,[a15]12
.L460:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
	ld.w	d15,[a2]
.L704:
	add	d15,#1
	st.w	[a2],d15
.L461:
	j	.L79
.L78:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   180              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   181              else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   182              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   183                  return;
	j	.L80
.L79:
.L75:
	lea	a2,[a15]12
.L466:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
	ld.w	d15,[a2]
.L705:
	mov	d0,#5
.L706:
	ge.u	d15,d0,d15
.L707:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);      (inlined)
	j	.L81

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }      (inlined)
.L81:
	jne	d15,#0,.L76
.L708:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   184              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   185          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   186          Dem_NvMClearBlockByWrite(DEM_NVM_ID_EVT_STATUSBYTE);
	mov	d15,#6
.L471:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
.L554:
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L709:
	mul	d15,d15,#5
	addsc.a	a15,a15,d15,#0
.L710:
	mov	d15,#8
.L711:
	st.b	[a15]3,d15
.L472:
	j	.L82
.L74:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   187  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   188          Dem_NvMClearBlockByWrite(DEM_NVM_ID_INDICATOR_ATTRIBUTES);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   189  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   190          Dem_NodeRecheckOnClear();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   191      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   192      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   193      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   194          while (Dem_EventIdIteratorIsValid(&(Dem_ClientClearMachinePtr->EvtIt)))
	j	.L83
.L84:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   195          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   196              eventId = Dem_EventIdIteratorCurrent(&(Dem_ClientClearMachinePtr->EvtIt));
	lea	a2,[a15]12
.L476:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
	ld.w	d15,[a2]
.L712:
	extr.u	d4,d15,#0,#16
.L558:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);      (inlined)
	j	.L85

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }      (inlined)
.L85:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   197              Dem_EvMemClearEventAndOrigin(eventId, DTCOrigin);
	mov	d15,#2
.L477:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
	mov	d0,#1
	jeq	d15,d0,.L86
	j	.L87

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:      (inlined)
.L86:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
	mov	d5,#0
.L559:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;      (inlined)
	j	.L88

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:      (inlined)
.L87:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
	mov.u	d5,#65535
.L560:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;      (inlined)
	j	.L89

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }      (inlined)
.L89:
.L88:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
	eq	d15,d5,#0
.L713:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);      (inlined)
	j	.L90

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }      (inlined)
.L90:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
	jne	d15,#0,.L91
.L714:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;      (inlined)
	j	.L92

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
.L91:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
	call	Dem_EvMemClearEvent

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }      (inlined)
.L92:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   198              Dem_EventIdIteratorNext(&(Dem_ClientClearMachinePtr->EvtIt));
	lea	a2,[a15]12
.L483:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
	ld.w	d15,[a2]
.L715:
	add	d15,#1
	st.w	[a2],d15
.L83:
	lea	a2,[a15]12
.L484:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
	ld.w	d15,[a2]
.L716:
	mov	d0,#5
.L717:
	ge.u	d15,d0,d15
.L718:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);      (inlined)
	j	.L93

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }      (inlined)
.L93:
	jne	d15,#0,.L84
.L82:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   199          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   200      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   201  }
.L80:
	ret
.L445:
	
__Dem_ClearAllDTCs_function_end:
	.size	Dem_ClearAllDTCs,__Dem_ClearAllDTCs_function_end-Dem_ClearAllDTCs
.L208:
	; End of function
	
	.sdecl	'.text.Dem_DTCStatusByte.Dem_ClearSingleDTC',code,cluster('Dem_ClearSingleDTC')
	.sect	'.text.Dem_DTCStatusByte.Dem_ClearSingleDTC'
	.align	2
	
	.global	Dem_ClearSingleDTC

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   202  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   203  void Dem_ClearSingleDTC(Dem_DtcIdType dtcId, Dem_DTCOriginType DTCOrigin, Dem_ClientClearMachineType *Dem_ClientClearMachinePtr)
; Function Dem_ClearSingleDTC
.L175:
Dem_ClearSingleDTC:	.type	func
	mov	e8,d5,d4
	mov.aa	a15,a4
.L564:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   204  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   205      Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   206  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   207      /* Check whether the Clear is requested newly */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   208      if ((Dem_ClientClearMachinePtr->IsNewClearRequest) || (!Dem_EventIdListIteratorIsValid(&(Dem_ClientClearMachinePtr->EvtListIt))))
	ld.bu	d15,[a15]2
.L723:
	jne	d15,#0,.L94
.L724:
	lea	a2,[a15]16
.L490:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
	ld.a	a2,[a2]
.L725:
	ld.a	a4,[a15]20
.L562:
	lt.a	d15,a2,a4
.L726:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));      (inlined)
	j	.L95

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }      (inlined)
.L95:
	jne	d15,#0,.L96
.L94:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   209      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   210          Dem_EventIdListIteratorNewFromDtcId(&(Dem_ClientClearMachinePtr->EvtListIt), dtcId);
	lea	a12,[a15]16
.L492:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L566:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d8,#0,.L97
.L727:
	ge.u	d15,d8,#5
.L567:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L98:
.L97:
	j	.L99

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L99:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
	jne	d0,#0,.L100
.L495:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
	mov	d4,#54
.L563:
	mov	d5,#0
.L561:
	mov	d6,#189
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
.L100:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
	movh.a	a2,#@his(Dem_MapDtcIdToEventId)
	lea	a2,[a2]@los(Dem_MapDtcIdToEventId)
.L568:
	addsc.a	a2,a2,d8,#1
.L569:
	st.a	[a12],a2
.L728:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
	add.a	a2,#2
.L729:
	st.a	[a15]20,a2
.L96:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   211      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   212  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   213      if (DTCOrigin != DEM_DTC_ORIGIN_MIRROR_MEMORY)
	jeq	d9,#2,.L101
.L570:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   214      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   215          while (Dem_EventIdListIteratorIsValid(&(Dem_ClientClearMachinePtr->EvtListIt)))
	j	.L102
.L103:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   216          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   217              eventId = Dem_EventIdListIteratorCurrent(&(Dem_ClientClearMachinePtr->EvtListIt));
	lea	a2,[a15]16
.L497:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
	ld.a	a2,[a2]
.L730:
	ld.hu	d4,[a2]0
.L731:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));      (inlined)
	j	.L104

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }      (inlined)
.L104:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   218              Dem_ClearDTCsEvents(eventId, DTCOrigin, Dem_ClientClearMachinePtr);
	mov	d5,d9
.L571:
	mov.aa	a4,a15
.L573:
	call	Dem_ClearDTCsEvents
.L572:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   219              if (!Dem_ClientClearMachinePtr->IsClearInterrupted)
	ld.bu	d15,[a15]3
.L732:
	jne	d15,#0,.L105
.L733:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   220              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   221                  Dem_EventIdListIteratorNext(&(Dem_ClientClearMachinePtr->EvtListIt));
	lea	a2,[a15]16
.L499:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
	ld.a	a4,[a2]
.L734:
	add.a	a4,#2
	st.a	[a2],a4
.L500:
	j	.L106
.L105:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   222              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   223              else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   224              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   225                  return;
	j	.L107
.L106:
.L102:
	lea	a2,[a15]16
.L502:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
	ld.a	a2,[a2]
.L735:
	ld.a	a4,[a15]20
.L736:
	lt.a	d15,a2,a4
.L737:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));      (inlined)
	j	.L108

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }      (inlined)
.L108:
	jne	d15,#0,.L103
.L738:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   226              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   227          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   228          Dem_NvMClearBlockByWrite(DEM_NVM_ID_EVT_STATUSBYTE);
	mov	d15,#6
.L503:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
.L565:
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L739:
	mul	d15,d15,#5
	addsc.a	a15,a15,d15,#0
.L740:
	mov	d15,#8
.L741:
	st.b	[a15]3,d15
.L504:
	j	.L109
.L101:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   229  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   230          Dem_NvMClearBlockByWrite(DEM_NVM_ID_INDICATOR_ATTRIBUTES);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   231  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   232          Dem_NodeRecheckOnClear();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   233      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   234      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   235      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   236          while (Dem_EventIdListIteratorIsValid(&(Dem_ClientClearMachinePtr->EvtListIt)))
	j	.L110
.L111:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   237          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   238              eventId = Dem_EventIdListIteratorCurrent(&(Dem_ClientClearMachinePtr->EvtListIt));
	lea	a2,[a15]16
.L506:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
	ld.a	a2,[a2]
.L742:
	ld.hu	d4,[a2]0
.L574:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));      (inlined)
	j	.L112

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }      (inlined)
.L112:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   239              Dem_EvMemClearEventAndOrigin(eventId, DTCOrigin);
	mov	d15,#2
.L507:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
	mov	d0,#1
	jeq	d15,d0,.L113
	j	.L114

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:      (inlined)
.L113:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
	mov	d5,#0
.L575:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;      (inlined)
	j	.L115

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:      (inlined)
.L114:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
	mov.u	d5,#65535
.L576:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;      (inlined)
	j	.L116

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }      (inlined)
.L116:
.L115:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
	eq	d15,d5,#0
.L743:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);      (inlined)
	j	.L117

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }      (inlined)
.L117:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
	jne	d15,#0,.L118
.L744:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;      (inlined)
	j	.L119

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
.L118:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
	call	Dem_EvMemClearEvent

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }      (inlined)
.L119:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   240              Dem_EventIdListIteratorNext(&(Dem_ClientClearMachinePtr->EvtListIt));
	lea	a2,[a15]16
.L513:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
	ld.a	a4,[a2]
.L745:
	add.a	a4,#2
	st.a	[a2],a4
.L110:
	lea	a2,[a15]16
.L514:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
	ld.a	a2,[a2]
.L746:
	ld.a	a4,[a15]20
.L747:
	lt.a	d15,a2,a4
.L748:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));      (inlined)
	j	.L120

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }      (inlined)
.L120:
	jne	d15,#0,.L111
.L109:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   241          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   242      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   243  }
.L107:
	ret
.L485:
	
__Dem_ClearSingleDTC_function_end:
	.size	Dem_ClearSingleDTC,__Dem_ClearSingleDTC_function_end-Dem_ClearSingleDTC
.L213:
	; End of function
	
	.sdecl	'.text.Dem_DTCStatusByte.Dem_IsPendingClearEvent',code,cluster('Dem_IsPendingClearEvent')
	.sect	'.text.Dem_DTCStatusByte.Dem_IsPendingClearEvent'
	.align	2
	
	.global	Dem_IsPendingClearEvent

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   244  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   245  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   246  boolean Dem_IsPendingClearEvent(Dem_EventIdType EventId)
; Function Dem_IsPendingClearEvent
.L177:
Dem_IsPendingClearEvent:	.type	func

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   247  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   248      return (EventId == Dem_PendingClearEventId);
	movh.a	a15,#@his(Dem_PendingClearEventId)
	lea	a15,[a15]@los(Dem_PendingClearEventId)
	ld.hu	d15,[a15]0
.L753:
	eq	d2,d4,d15
.L754:
	j	.L121

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   249  }
.L121:
	ret
.L515:
	
__Dem_IsPendingClearEvent_function_end:
	.size	Dem_IsPendingClearEvent,__Dem_IsPendingClearEvent_function_end-Dem_IsPendingClearEvent
.L218:
	; End of function
	
	.sdecl	'.text.Dem_DTCStatusByte.Dem_GetStatusOfDTC',code,cluster('Dem_GetStatusOfDTC')
	.sect	'.text.Dem_DTCStatusByte.Dem_GetStatusOfDTC'
	.align	2
	
	.global	Dem_GetStatusOfDTC

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   250  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   251  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   252  Dem_ReturnGetStatusOfDTCType Dem_GetStatusOfDTC(uint32 DTC,
; Function Dem_GetStatusOfDTC
.L179:
Dem_GetStatusOfDTC:	.type	func
	sub.a	a10,#8
.L577:
	mov	d8,d5
.L578:
	st.b	[a10],d6
	mov.aa	a12,a4
.L579:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   253  		Dem_DTCKindType DTCKind,
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   254  		Dem_DTCOriginType DTCOrigin,
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   255  		uint8* DTCStatus)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   256  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   257  	boolean DtcStatusIsValid;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   258  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   259  	Dem_DtcIdType dtcId = Dem_DtcIdFromDtcCode (DTC);
	call	Dem_DtcIdFromDtcCode
.L233:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
	mov	d0,#0
.L239:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d1,#0
.L597:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d2,#0,.L122
.L598:
	ge.u	d15,d2,#5
.L599:
	cmovn	d1,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L123:
.L122:
	j	.L124

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L124:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	jeq	d1,#0,.L125
.L240:
	movh.a	a15,#@his(Dem_AllDTCsState)
	lea	a15,[a15]@los(Dem_AllDTCsState)
.L600:
	addsc.a	a15,a15,d2,#0
.L601:
	ld.bu	d1,[a15]
.L602:
	mov	d3,#0
.L249:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d3,#0
	sha	d1,d1,d3
.L603:
	and	d15,d1,#1
.L604:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L126

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L126:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L605:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L127

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L127:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);      (inlined)
	j	.L128

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }      (inlined)
.L128:
	cmovn	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))      (inlined)
.L129:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );      (inlined)
.L125:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)      (inlined)
	j	.L130

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }      (inlined)
.L130:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   260  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   261  	/* parameter checks */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   262  	if (!Dem_DtcIsSupported(dtcId))
	jne	d0,#0,.L131
.L234:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   263  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   264  		return DEM_STATUS_WRONG_DTC;
	mov	d2,#1
.L580:
	j	.L132
.L131:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   265  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   266  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   267      if (!Dem_EvMemIsDtcOriginValid (&DTCOrigin))
	lea	a15,[a10]0
.L262:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     4  #ifndef DEM_EVMEMAPI_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     5  #define DEM_EVMEMAPI_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     8  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    10  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    11     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    12     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    13  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    15  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    16  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    17    /* DEM API write */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    18    Dem_DtcIdType            DtcId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    19    Dem_DTCOriginType        DTCOrigin;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    20    uint8                    ReqCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    21    /* DEM Main write */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    22    uint8                    DemCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    23    boolean                  IsValid;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    24    Dem_EvMemEventMemoryType EventMemory;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    25  } Dem_EvMemDTCRecordType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    29  extern Dem_EvMemDTCRecordType Dem_EvMemDTCRecord;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    30  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    31  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    32  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    33  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    35  /* Read Events From EvMem */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    37  void Dem_EvMemApiMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    39  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    42  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    43     Inline Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    44     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    45  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    47  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcKindValid (Dem_DTCKindType DTCKind)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    48  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    49      return (DTCKind == DEM_DTC_KIND_ALL_DTCS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    53  DEM_INLINE Dem_boolean_least Dem_EvMemIsDtcOriginValid (Dem_DTCOriginType  *DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)
	ld.bu	d15,[a15]
.L606:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
	jne	d15,#0,.L133
.L607:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    56      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    57          *DTCOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
	mov	d15,#4
.L608:
	st.b	[a15],d15

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    55      if(*DTCOrigin == DEM_DTC_ORIGIN_USERDEFINED_MEMORY)      (inlined)
.L133:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    58      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    60                 (*DTCOrigin == DEM_DTC_ORIGIN_PRIMARY_MEMORY)
	ld.bu	d15,[a15]
.L609:
	eq	d15,d15,#1
.L610:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    59      return (      (inlined)
	j	.L134

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemApi.h	    68  }      (inlined)
.L134:
	jne	d15,#0,.L135
.L611:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   268      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   269          return DEM_STATUS_WRONG_DTCORIGIN;
	mov	d2,#2
.L581:
	j	.L136
.L135:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   270      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   271  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   272  	if (!Dem_DtcUsesOrigin(dtcId,DTCOrigin))
	ld.bu	d15,[a10]
.L267:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L612:
	addsc.a	a15,a15,d2,#1
	ld.hu	d0,[a15]0
.L583:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];      (inlined)
	j	.L137

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }      (inlined)
.L137:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);      (inlined)
	j	.L138

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }      (inlined)
.L138:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
	jne	d15,#1,.L139

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L140:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L613:
	addsc.a	a15,a15,d0,#1
.L614:
	ld.hu	d0,[a15]0
.L584:
	mov	d1,#0
.L294:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L615:
	and	d0,d0,#1
.L616:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L141

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L141:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d0,d0,#0
.L617:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L142

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L142:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L143

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L143:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
	jne	d0,#0,.L144
.L139:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))      (inlined)
	jne	d15,#4,.L145

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L146:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79   is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  
	mov	d0,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;      (inlined)
	j	.L147

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }      (inlined)
.L147:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))      (inlined)
	jne	d0,#0,.L148
.L145:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
	jne	d15,#2,.L149

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L150:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;      (inlined)
	j	.L151

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }      (inlined)
.L151:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
	jeq	d15,#0,.L152
.L148:
.L144:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
	mov	d15,#1

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;      (inlined)
	j	.L153

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))      (inlined)
.L152:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))      (inlined)
.L149:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
	mov	d15,#0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;      (inlined)
	j	.L154

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }      (inlined)
.L154:
.L153:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   285      return Dem_EventUsesOrigin(eventId, origin);      (inlined)
	j	.L155

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   286  }      (inlined)
.L155:
	jne	d15,#0,.L156
.L268:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   273  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   274  		return DEM_STATUS_WRONG_DTC;
	mov	d2,#1
.L582:
	j	.L157
.L156:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   275  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   276  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   277  	if ((DTCKind != DEM_DTC_KIND_ALL_DTCS) && (DTCKind != Dem_Cfg_Dtc_GetKind (dtcId)))
	jeq	d8,#1,.L158

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));      (inlined)
.L159:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     2  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     3  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     4  /* TOOL-GENERATED SOURCECODE, DO NOT CHANGE                                                                         */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     5  /*                                                                                                                  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     6  /********************************************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     7  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     8  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	     9  #ifndef DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    10  #define DEM_CFG_DTC_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    12  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    13  #include "Dem_Cfg_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    14  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    15  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    17  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    18  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    19  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    20  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    21  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    22  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    23  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    24  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    26  #include "Dem_Lib.h"  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    27  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    28  /*
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    29  #define DEM_CFG_STOREWAITINGFORMONITORINGEVENT  FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    30  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF  STD_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    31  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING_ON   STD_ON
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    32  #define DEM_CFG_DTCFILTER_EXTERNALPROCESSING      DEM_CFG_DTCFILTER_EXTERNALPROCESSING_OFF
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    33  #define DEM_CFG_DTCSTATUS_AVAILABILITYMASK     0xFFu
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    34  #define DEM_CFG_DTC_TRANSLATION_TYPE           DEM_DTC_TRANSLATION_SAEJ1939_73
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    35  #define DEM_CFG_DTCSTATEMANGER_DTCS_PER_CYCLE   5u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    36  #define DEM_DTC_BP_STATE_SUPPRESSED             0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    37  #define DEM_DTC_BP_GROUP_DTCSETTING_DISABLED    1u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    38  #define DEM_DTC_GROUP_DemGroupOfDTC_0_DTCS           0xFA0u
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    39  #define DEM_DTC_GROUP_DemGroupOfDTC_1_DTCS           0x1388u  */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    40  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    41  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    42  /* DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED    */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    43  /* --------------------------------------------------- */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    44  // #define DEM_CFG_REPORT_CHRONOLOGICAL_ORDER_HOOKS_ENABLED   FALSE
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    45  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    47  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    48  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    49  	Dem_DtcCodeType DtcCode;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    50  	Dem_DTCSeverityType Severity;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    51  	Dem_DTCKindType Kind;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    52  	boolean DtcCode_Is_Index;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    53  	uint8 Func_Unit;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    54  	boolean Nv_Storage;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    55  } Dem_Cfg_DtcType;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    56  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    57  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    58  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    59  extern const Dem_Cfg_DtcType Dem_Cfg_Dtc[5];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    62  LOCAL_INLINE Dem_DTCKindType Dem_Cfg_Dtc_GetKind(Dem_DtcIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 5));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;
	mul	d15,d2,#12
.L618:
	movh.a	a15,#@his(Dem_Cfg_Dtc)
	lea	a15,[a15]@los(Dem_Cfg_Dtc)
.L619:
	addsc.a	a15,a15,d15,#0
.L620:
	ld.bu	d15,[a15]5
.L621:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    65  	return Dem_Cfg_Dtc[indx].Kind;      (inlined)
	j	.L160

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_DTC_DataStructures.h	    66  }      (inlined)
.L160:
	jeq	d15,d8,.L161
.L622:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   278  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   279  		return DEM_STATUS_WRONG_DTCKIND;
	mov	d2,#3
.L585:
	j	.L162
.L161:
.L158:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   280  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   281  
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   282  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   283  	/* TODO: DEM_STATUS_FAILED: when should this be returned?? */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   284  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   285  	*DTCStatus =Dem_DtcStatusByteRetrieveWithOrigin(dtcId, DTCOrigin, &DtcStatusIsValid) & ((uint8)DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
	ld.bu	d5,[a10]
.L623:
	lea	a4,[a10]1
	mov	d4,d2
.L587:
	call	Dem_DtcStatusByteRetrieveWithOrigin
.L586:
	st.b	[a12],d2
.L624:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   286  	if (!DtcStatusIsValid )
	ld.bu	d15,[a10]1
	jne	d15,#0,.L163
.L625:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   287  	{
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   288  		return DEM_STATUS_FAILED;
	mov	d2,#4
.L626:
	j	.L164
.L163:

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   289  	}
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   290  	return DEM_STATUS_OK;
	mov	d2,#0
.L627:
	j	.L165

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   291  }
.L165:
.L164:
.L162:
.L157:
.L136:
.L132:
	ret
.L222:
	
__Dem_GetStatusOfDTC_function_end:
	.size	Dem_GetStatusOfDTC,__Dem_GetStatusOfDTC_function_end-Dem_GetStatusOfDTC
.L188:
	; End of function
	
	.sdecl	'.bss.Dem_DTCStatusByte.Dem_PendingClearEventId',data,cluster('Dem_PendingClearEventId')
	.sect	'.bss.Dem_DTCStatusByte.Dem_PendingClearEventId'
	.align	2
Dem_PendingClearEventId:	.type	object
	.size	Dem_PendingClearEventId,2
	.space	2
	.calls	'Dem_DtcStatusByteRetrieve','Det_ReportError'
	.calls	'Dem_DtcStatusByteRetrieveWithOrigin','Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility'
	.calls	'Dem_DtcStatusByteRetrieveWithOrigin','Dem_DtcStatusByteRetrieve'
	.calls	'Dem_ClearDTCsEvents','Dem_EvtClearEventAllowed'
	.calls	'Dem_ClearDTCsEvents','Dem_EvBuffClear'
	.calls	'Dem_ClearDTCsEvents','Dem_EvMemClearEvent'
	.calls	'Dem_ClearDTCsEvents','Dem_ClearEvent'
	.calls	'Dem_ClearAllDTCs','Dem_ClearDTCsEvents'
	.calls	'Dem_ClearAllDTCs','Dem_EvMemClearEvent'
	.calls	'Dem_ClearSingleDTC','Det_ReportError'
	.calls	'Dem_ClearSingleDTC','Dem_ClearDTCsEvents'
	.calls	'Dem_ClearSingleDTC','Dem_EvMemClearEvent'
	.calls	'Dem_GetStatusOfDTC','Dem_DtcIdFromDtcCode'
	.calls	'Dem_GetStatusOfDTC','Dem_DtcStatusByteRetrieveWithOrigin'
	.calls	'Dem_DtcStatusByteRetrieve','',8
	.calls	'Dem_DtcStatusByteRetrieveWithOrigin','',0
	.calls	'Dem_ClearDTCsEvents','',0
	.calls	'Dem_ClearAllDTCs','',0
	.calls	'Dem_ClearSingleDTC','',0
	.calls	'Dem_IsPendingClearEvent','',0
	.extern	Det_ReportError
	.extern	Dem_MapDtcIdToEventId
	.extern	Dem_MapEventIdToDtcId
	.extern	Dem_Cfg_Dtc
	.extern	Dem_NvMBlockStatusDoubleBuffer
	.extern	Dem_EvtParam_16
	.extern	Dem_AllEventsState
	.extern	Dem_EvtClearEventAllowed
	.extern	Dem_EvBuffClear
	.extern	Dem_EvMemEventMemory
	.extern	Dem_EvMemClearEvent
	.extern	Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility
	.extern	Dem_AllDTCsState
	.extern	Dem_DtcIdFromDtcCode
	.extern	Dem_AllEventsStatusByte
	.extern	Dem_ClearEvent
	.calls	'Dem_GetStatusOfDTC','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L181:
	.word	26220
	.half	3
	.word	.L182
	.byte	4
.L180:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L183
.L223:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,1,125,21
	.word	147
	.byte	1,1,4
	.byte	'Input_u32',0,1,125,55
	.word	147
	.byte	5,0
.L230:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,1,150,1,21
	.word	221
	.byte	1,1,4
	.byte	'Input_u16',0,1,150,1,55
	.word	221
	.byte	5,0
.L221:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.byte	'Dem_LibGetParamUI8',0,3,2,36,18
	.word	303
	.byte	1,1,4
	.byte	'parameter',0,2,36,44
	.word	303
	.byte	5,0
.L379:
	.byte	3
	.byte	'Dem_LibGetParamBool',0,3,2,41,20
	.word	303
	.byte	1,1
.L381:
	.byte	4
	.byte	'parameter',0,2,41,49
	.word	303
.L383:
	.byte	5,0,6
	.word	221
	.byte	7
	.word	421
	.byte	8
	.byte	'Dem_ClientResultType_setResult',0,3,3,27,17,1,1,4
	.byte	'result',0,3,27,79
	.word	426
	.byte	4
	.byte	'request',0,3,27,109
	.word	221
	.byte	4
	.byte	'newResult',0,3,27,133,1
	.word	303
	.byte	5,0,6
	.word	221
	.byte	7
	.word	521
	.byte	8
	.byte	'Dem_ClientRequestType_setRequest',0,3,3,65,17,1,1,4
	.byte	'request',0,3,65,82
	.word	526
	.byte	4
	.byte	'newRequest',0,3,65,97
	.word	303
	.byte	5,0,7
	.word	147
	.byte	8
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,3,151,1,17,1,1,4
	.byte	'selection',0,3,151,1,93
	.word	608
	.byte	5,0,3
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,3,168,1,18
	.word	303
	.byte	1,1,4
	.byte	'selection',0,3,168,1,86
	.word	147
	.byte	5,0
.L377:
	.byte	2
	.byte	'unsigned long int',0,4,7,7
	.word	768
.L449:
	.byte	8
	.byte	'Dem_EventIdIteratorNew',0,3,4,31,17,1,1
.L451:
	.byte	4
	.byte	'it',0,4,31,61
	.word	789
.L453:
	.byte	5,0,9
	.word	768
	.byte	7
	.word	837
.L465:
	.byte	3
	.byte	'Dem_EventIdIteratorIsValid',0,3,4,36,30
	.word	303
	.byte	1,1
.L467:
	.byte	4
	.byte	'it',0,4,36,84
	.word	842
.L469:
	.byte	5,0
.L459:
	.byte	8
	.byte	'Dem_EventIdIteratorNext',0,3,4,41,17,1,1
.L462:
	.byte	4
	.byte	'it',0,4,41,62
	.word	789
.L464:
	.byte	5,0
.L454:
	.byte	3
	.byte	'Dem_EventIdIteratorCurrent',0,3,4,46,28
	.word	221
	.byte	1,1
.L456:
	.byte	4
	.byte	'it',0,4,46,82
	.word	842
.L458:
	.byte	5,0
.L420:
	.byte	3
	.byte	'Dem_EventIdIsDtcAssigned',0,3,4,146,1,30
	.word	303
	.byte	1,1
.L422:
	.byte	4
	.byte	'id',0,4,146,1,72
	.word	221
.L424:
	.byte	5,0
.L238:
	.byte	3
	.byte	'Dem_isDtcIdValid',0,3,4,152,1,30
	.word	303
	.byte	1,1
.L241:
	.byte	4
	.byte	'id',0,4,152,1,62
	.word	221
.L243:
	.byte	5,0,3
	.byte	'Dem_DtcIdFromEventId',0,3,4,158,1,27
	.word	221
	.byte	1,1,4
	.byte	'id',0,4,158,1,65
	.word	221
	.byte	5,0
.L279:
	.byte	3
	.byte	'Dem_DtcIdGetEventId',0,3,4,166,1,28
	.word	221
	.byte	1,1
.L280:
	.byte	4
	.byte	'dtcid',0,4,166,1,63
	.word	221
.L282:
	.byte	5,0
.L275:
	.byte	3
	.byte	'Dem_DtcIdGetFirstEventId',0,3,4,174,1,28
	.word	221
	.byte	1,1
.L276:
	.byte	4
	.byte	'dtcid',0,4,174,1,68
	.word	221
.L278:
	.byte	10,5,0,0,3
	.byte	'Dem_DtcGroupIdIsValid',0,3,4,252,1,30
	.word	303
	.byte	1,1,4
	.byte	'dtcGroupID',0,4,252,1,72
	.word	303
	.byte	5,0,9
	.word	221
	.byte	7
	.word	1295
.L320:
	.byte	11,4,171,2,9,8,12
	.byte	'it',0
	.word	1300
	.byte	4,2,35,0,12
	.byte	'end',0
	.word	1300
	.byte	4,2,35,4,0,7
	.word	1305
.L338:
	.byte	8
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,4,177,2,17,1,1
.L341:
	.byte	4
	.byte	'it',0,4,177,2,78
	.word	1337
.L343:
	.byte	4
	.byte	'dtcid',0,4,177,2,96
	.word	221
.L345:
	.byte	10,5,0,0,9
	.word	1305
	.byte	7
	.word	1417
.L367:
	.byte	3
	.byte	'Dem_EventIdListIteratorIsValid',0,3,4,193,2,30
	.word	303
	.byte	1,1
.L369:
	.byte	4
	.byte	'it',0,4,193,2,92
	.word	1422
.L371:
	.byte	5,0
.L362:
	.byte	8
	.byte	'Dem_EventIdListIteratorNext',0,3,4,198,2,17,1,1
.L364:
	.byte	4
	.byte	'it',0,4,198,2,70
	.word	1337
.L366:
	.byte	5,0
.L347:
	.byte	3
	.byte	'Dem_EventIdListIteratorCurrent',0,3,4,203,2,28
	.word	221
	.byte	1,1
.L349:
	.byte	4
	.byte	'it',0,4,203,2,90
	.word	1422
.L351:
	.byte	5,0
.L314:
	.byte	3
	.byte	'Dem_Cfg_Dtc_GetKind',0,3,5,62,30
	.word	303
	.byte	1,1
.L315:
	.byte	4
	.byte	'indx',0,5,62,64
	.word	221
.L317:
	.byte	5,0,3
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,5,99,30
	.word	147
	.byte	1,1,4
	.byte	'indx',0,5,99,67
	.word	221
	.byte	5,0
.L227:
	.byte	7
	.word	303
	.byte	8
	.byte	'rba_DiagLib_Bit8SetBit',0,3,6,36,19,1,1,4
	.byte	'buffer',0,6,36,49
	.word	1686
	.byte	4
	.byte	'bit_position',0,6,36,63
	.word	303
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,6,42,19,1,1,4
	.byte	'buffer',0,6,42,51
	.word	1686
	.byte	4
	.byte	'bit_position',0,6,42,65
	.word	303
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,6,48,19,1,1,4
	.byte	'buffer',0,6,48,55
	.word	1686
	.byte	4
	.byte	'bit_position',0,6,48,69
	.word	303
	.byte	4
	.byte	'will_bit_be_set',0,6,48,91
	.word	303
	.byte	10,5,5,0,0
.L255:
	.byte	3
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,6,60,20
	.word	303
	.byte	1,1
.L256:
	.byte	4
	.byte	'value',0,6,60,55
	.word	303
.L258:
	.byte	4
	.byte	'bit_position',0,6,60,68
	.word	303
.L260:
	.byte	5,0
.L248:
	.byte	3
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,6,64,22
	.word	303
	.byte	1,1
.L250:
	.byte	4
	.byte	'value',0,6,64,53
	.word	303
.L252:
	.byte	4
	.byte	'bit_position',0,6,64,66
	.word	303
.L254:
	.byte	10,5,0,0,3
	.byte	'rba_DiagLib_Bit8GetBits',0,3,6,69,20
	.word	303
	.byte	1,1,4
	.byte	'value',0,6,69,50
	.word	303
	.byte	4
	.byte	'bit_position',0,6,69,63
	.word	303
	.byte	4
	.byte	'number_of_bits',0,6,69,83
	.word	303
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,6,77,19,1,1,4
	.byte	'value',0,6,77,52
	.word	1686
	.byte	4
	.byte	'bit_position',0,6,77,65
	.word	303
	.byte	4
	.byte	'number_of_bits',0,6,77,85
	.word	303
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,6,83,19,1,1,4
	.byte	'value',0,6,83,56
	.word	1686
	.byte	4
	.byte	'bit_position',0,6,83,69
	.word	303
	.byte	4
	.byte	'number_of_bits',0,6,83,89
	.word	303
	.byte	4
	.byte	'newValue',0,6,83,111
	.word	303
	.byte	10,5,0,0,7
	.word	221
	.byte	8
	.byte	'rba_DiagLib_Bit16SetBit',0,3,7,36,19,1,1,4
	.byte	'buffer',0,7,36,51
	.word	2386
	.byte	4
	.byte	'bit_position',0,7,36,65
	.word	303
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,7,42,19,1,1,4
	.byte	'buffer',0,7,42,53
	.word	2386
	.byte	4
	.byte	'bit_position',0,7,42,67
	.word	303
	.byte	5,0
.L300:
	.byte	3
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,7,60,21
	.word	221
	.byte	1,1
.L301:
	.byte	4
	.byte	'value',0,7,60,58
	.word	221
.L303:
	.byte	4
	.byte	'bit_position',0,7,60,71
	.word	303
.L305:
	.byte	5,0
.L293:
	.byte	3
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,7,65,22
	.word	303
	.byte	1,1
.L295:
	.byte	4
	.byte	'value',0,7,65,55
	.word	221
.L297:
	.byte	4
	.byte	'bit_position',0,7,65,68
	.word	303
.L299:
	.byte	10,5,0,0,3
	.byte	'rba_DiagLib_Bit16GetBits',0,3,7,70,21
	.word	221
	.byte	1,1,4
	.byte	'value',0,7,70,53
	.word	221
	.byte	4
	.byte	'bit_position',0,7,70,66
	.word	303
	.byte	4
	.byte	'number_of_bits',0,7,70,86
	.word	303
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,7,78,19,1,1,4
	.byte	'value',0,7,78,54
	.word	2386
	.byte	4
	.byte	'bit_position',0,7,78,67
	.word	303
	.byte	4
	.byte	'number_of_bits',0,7,78,87
	.word	303
	.byte	5,0,7
	.word	147
	.byte	8
	.byte	'rba_DiagLib_Bit32SetBit',0,3,8,36,19,1,1,4
	.byte	'buffer',0,8,36,51
	.word	2875
	.byte	4
	.byte	'bit_position',0,8,36,65
	.word	303
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,8,42,19,1,1,4
	.byte	'buffer',0,8,42,53
	.word	2875
	.byte	4
	.byte	'bit_position',0,8,42,67
	.word	303
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,8,60,21
	.word	147
	.byte	1,1,4
	.byte	'value',0,8,60,58
	.word	147
	.byte	4
	.byte	'bit_position',0,8,60,71
	.word	303
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,8,65,22
	.word	303
	.byte	1,1,4
	.byte	'value',0,8,65,55
	.word	147
	.byte	4
	.byte	'bit_position',0,8,65,68
	.word	303
	.byte	10,5,0,0,8
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,8,78,19,1,1,4
	.byte	'value',0,8,78,54
	.word	2875
	.byte	4
	.byte	'bit_position',0,8,78,67
	.word	303
	.byte	4
	.byte	'number_of_bits',0,8,78,87
	.word	303
	.byte	5,0,3
	.byte	'Dem_NvMGetNvMBlocKId',0,3,9,49,28
	.word	221
	.byte	1,1,4
	.byte	'id',0,9,49,68
	.word	303
	.byte	5,0
.L470:
	.byte	8
	.byte	'Dem_NvMClearBlockByWrite',0,3,9,102,17,1,1
.L473:
	.byte	4
	.byte	'id',0,9,102,61
	.word	303
.L475:
	.byte	5,0,8
	.byte	'Dem_NvMStartClear',0,3,9,138,1,17,1,1,5,0,8
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,10,53,17,1,1,4
	.byte	'ClientId',0,10,53,80
	.word	303
	.byte	5,0,8
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,10,68,17,1,1,4
	.byte	'state',0,10,68,62
	.word	303
	.byte	5,0,3
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,10,78,20
	.word	303
	.byte	1,1,4
	.byte	'ClientId',0,10,78,91
	.word	303
	.byte	10,5,5,5,5,0,0,8
	.byte	'Dem_BitArraySetBit',0,3,11,33,17,1,1,4
	.byte	'buffer',0,11,33,36
	.word	2875
	.byte	4
	.byte	'bit_position',0,11,33,75
	.word	147
	.byte	5,0,8
	.byte	'Dem_BitArrayClearBit',0,3,11,46,17,1,1,4
	.byte	'buffer',0,11,46,38
	.word	2875
	.byte	4
	.byte	'bit_position',0,11,46,77
	.word	147
	.byte	5,0,8
	.byte	'Dem_BitArrayOverwriteBit',0,3,11,61,17,1,1,4
	.byte	'buffer',0,11,61,42
	.word	2875
	.byte	4
	.byte	'bit_position',0,11,62,25
	.word	147
	.byte	4
	.byte	'will_bit_be_set',0,11,62,57
	.word	303
	.byte	10,5,5,0,0,9
	.word	147
	.byte	7
	.word	3836
	.byte	3
	.byte	'Dem_BitArrayIsBitSet',0,3,11,75,30
	.word	303
	.byte	1,1,4
	.byte	'buffer',0,11,75,51
	.word	3841
	.byte	4
	.byte	'bit_position',0,11,75,95
	.word	147
	.byte	5,0,3
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,12,122,30
	.word	303
	.byte	1,1,4
	.byte	'self',0,12,122,66
	.word	303
	.byte	10,5,0,0,3
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,12,129,1,30
	.word	303
	.byte	1,1,4
	.byte	'self',0,12,129,1,69
	.word	303
	.byte	10,5,0,0,3
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,12,157,1,30
	.word	303
	.byte	1,1,4
	.byte	'self',0,12,157,1,71
	.word	303
	.byte	10,5,0,0,3
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,12,164,1,30
	.word	303
	.byte	1,1,4
	.byte	'self',0,12,164,1,66
	.word	303
	.byte	10,5,0,0,3
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,12,177,1,30
	.word	303
	.byte	1,1,4
	.byte	'self',0,12,177,1,81
	.word	303
	.byte	10,5,0,0,8
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,12,186,1,17,1,1,4
	.byte	'self',0,12,186,1,55
	.word	1686
	.byte	4
	.byte	'setOrReset',0,12,186,1,79
	.word	303
	.byte	10,5,0,0,8
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,12,193,1,17,1,1,4
	.byte	'self',0,12,193,1,58
	.word	1686
	.byte	4
	.byte	'setOrReset',0,12,193,1,82
	.word	303
	.byte	10,5,0,0,8
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,12,200,1,17,1,1,4
	.byte	'self',0,12,200,1,58
	.word	1686
	.byte	4
	.byte	'setOrReset',0,12,200,1,82
	.word	303
	.byte	10,5,0,0,8
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,12,214,1,17,1,1,4
	.byte	'self',0,12,214,1,60
	.word	1686
	.byte	4
	.byte	'setOrReset',0,12,214,1,84
	.word	303
	.byte	10,5,0,0,8
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,12,221,1,17,1,1,4
	.byte	'self',0,12,221,1,60
	.word	1686
	.byte	4
	.byte	'setOrReset',0,12,221,1,84
	.word	303
	.byte	10,5,0,0,8
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,12,228,1,17,1,1,4
	.byte	'self',0,12,228,1,55
	.word	1686
	.byte	4
	.byte	'setOrReset',0,12,228,1,79
	.word	303
	.byte	10,5,0,0,8
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,12,235,1,17,1,1,4
	.byte	'self',0,12,235,1,57
	.word	1686
	.byte	4
	.byte	'setOrReset',0,12,235,1,81
	.word	303
	.byte	10,5,0,0,8
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,12,242,1,17,1,1,4
	.byte	'self',0,12,242,1,70
	.word	1686
	.byte	4
	.byte	'setOrReset',0,12,242,1,94
	.word	303
	.byte	10,5,0,0,3
	.byte	'Dem_EnCoAreAllFulfilled',0,3,13,32,30
	.word	303
	.byte	1,1,4
	.byte	'enableConditionList',0,13,32,68
	.word	303
	.byte	5,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,14,36,21
	.word	221
	.byte	1,1,4
	.byte	'val',0,14,36,70
	.word	221
	.byte	10,5,0,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,14,41,21
	.word	147
	.byte	1,1,4
	.byte	'val',0,14,41,70
	.word	147
	.byte	10,5,0,0,3
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,15,55,22
	.word	303
	.byte	1,1,4
	.byte	'indx',0,15,55,78
	.word	221
	.byte	5,0
.L289:
	.byte	3
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,15,75,22
	.word	303
	.byte	1,1
.L290:
	.byte	4
	.byte	'indx',0,15,75,77
	.word	221
.L292:
	.byte	10,5,0,0
.L306:
	.byte	3
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,15,82,22
	.word	303
	.byte	1,1
.L307:
	.byte	4
	.byte	'indx',0,15,82,79
	.word	221
.L309:
	.byte	5,0
.L310:
	.byte	3
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,15,89,22
	.word	303
	.byte	1,1
.L311:
	.byte	4
	.byte	'indx',0,15,89,76
	.word	221
.L313:
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,15,95,22
	.word	303
	.byte	1,1,4
	.byte	'indx',0,15,95,67
	.word	221
	.byte	10,5,0,0,3
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,15,122,20
	.word	303
	.byte	1,1,4
	.byte	'indx',0,15,122,69
	.word	221
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,15,129,1,20
	.word	303
	.byte	1,1,4
	.byte	'indx',0,15,129,1,65
	.word	221
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,15,136,1,20
	.word	303
	.byte	1,1,4
	.byte	'indx',0,15,136,1,67
	.word	221
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,15,149,1,20
	.word	303
	.byte	1,1,4
	.byte	'indx',0,15,149,1,72
	.word	221
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,15,155,1,21
	.word	221
	.byte	1,1,4
	.byte	'indx',0,15,155,1,79
	.word	221
	.byte	10,5,0,0,3
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,15,168,1,20
	.word	303
	.byte	1,1,4
	.byte	'indx',0,15,168,1,67
	.word	221
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,15,208,1,27
	.word	303
	.byte	1,1,4
	.byte	'indx',0,15,208,1,76
	.word	221
	.byte	5,0
.L441:
	.byte	3
	.byte	'Dem_EvtParam_GetClearAllowedBehavior',0,3,15,229,1,20
	.word	303
	.byte	1,1
.L442:
	.byte	4
	.byte	'indx',0,15,229,1,73
	.word	221
.L444:
	.byte	5,0,2
	.byte	'short int',0,2,5,3
	.byte	'Dem_EvtGetDebounceLevel',0,3,16,193,1,19
	.word	5893
	.byte	1,1,4
	.byte	'EventId',0,16,193,1,60
	.word	221
	.byte	5,0,3
	.byte	'Dem_EvtGetLastReportedEvent',0,3,16,219,1,32
	.word	303
	.byte	1,1,4
	.byte	'EventId',0,16,219,1,77
	.word	221
	.byte	5,0,8
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,16,227,3,17,1,1,5,0,8
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,16,233,3,17,1,1,4
	.byte	'reason',0,16,233,3,72
	.word	303
	.byte	10,5,0,0
.L352:
	.byte	3
	.byte	'Dem_EvtIsSuppressed',0,3,16,244,4,30
	.word	303
	.byte	1,1
.L354:
	.byte	4
	.byte	'EventId',0,16,244,4,67
	.word	221
.L356:
	.byte	10,5,0,0,7
	.word	303
	.byte	8
	.byte	'Dem_EnvSetTrigger',0,3,17,17,17,1,1,4
	.byte	'trigger',0,17,17,52
	.word	6182
	.byte	4
	.byte	'trigger2set',0,17,17,77
	.word	303
	.byte	5,0,3
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,17,22,30
	.word	303
	.byte	1,1,4
	.byte	'trigger2test',0,17,22,69
	.word	303
	.byte	5,0,3
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,18,101,30
	.word	303
	.byte	1,1,4
	.byte	'EventId',0,18,101,87
	.word	221
	.byte	4
	.byte	'debAction',0,18,101,120
	.word	768
	.byte	5,0
.L437:
	.byte	3
	.byte	'Dem_EvMemIsMemIdValid',0,3,19,103,30
	.word	303
	.byte	1,1
.L438:
	.byte	4
	.byte	'MemId',0,19,103,65
	.word	768
.L440:
	.byte	5,0
.L391:
	.byte	3
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,19,112,30
	.word	303
	.byte	1,1
.L392:
	.byte	4
	.byte	'LocId',0,19,112,73
	.word	768
.L394:
	.byte	5,0,11,20,133,1,3,4,12
	.byte	'Status',0
	.word	221
	.byte	2,2,35,0,12
	.byte	'EventId',0
	.word	221
	.byte	2,2,35,2,0,13,20,131,1,9,4,12
	.byte	'Data',0
	.word	6501
	.byte	4,2,35,0,0,14,7
	.word	303
	.byte	15,6,0,11,20,144,1,9,20,12
	.byte	'Hdr',0
	.word	6541
	.byte	4,2,35,0,12
	.byte	'Data',0
	.word	6562
	.byte	7,2,35,4,12
	.byte	'FailureCounter',0
	.word	303
	.byte	1,2,35,11,12
	.byte	'FreezeFrameCounter',0
	.word	303
	.byte	1,2,35,12,12
	.byte	'AgingCounter',0
	.word	303
	.byte	1,2,35,13,12
	.byte	'OccurrenceCounter',0
	.word	303
	.byte	1,2,35,14,12
	.byte	'Trigger',0
	.word	303
	.byte	1,2,35,15,12
	.byte	'TimeId',0
	.word	147
	.byte	4,2,35,16,0,9
	.word	6571
	.byte	7
	.word	6739
	.byte	3
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,19,134,1,25
	.word	768
	.byte	1,1,4
	.byte	'EventMemory',0,19,134,1,89
	.word	6744
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemStatus',0,3,19,139,1,25
	.word	768
	.byte	1,1,4
	.byte	'LocId',0,19,139,1,65
	.word	768
	.byte	10,5,0,0,3
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,19,152,1,28
	.word	221
	.byte	1,1,4
	.byte	'EventMemory',0,19,152,1,93
	.word	6744
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,19,170,1,19
	.word	147
	.byte	1,1,4
	.byte	'EventMemory',0,19,170,1,83
	.word	6744
	.byte	5,0
.L400:
	.byte	3
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,19,188,1,18
	.word	303
	.byte	1,1
.L401:
	.byte	4
	.byte	'EventMemory',0,19,188,1,85
	.word	6744
.L403:
	.byte	5,0
.L395:
	.byte	3
	.byte	'Dem_EvMemGetEventMemDtcStatus',0,3,19,199,1,18
	.word	303
	.byte	1,1
.L397:
	.byte	4
	.byte	'LocId',0,19,199,1,61
	.word	768
.L399:
	.byte	10,5,0,0,3
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,19,216,1,24
	.word	768
	.byte	1,1,4
	.byte	'EventMemory',0,19,216,1,96
	.word	6744
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,19,233,1,25
	.word	768
	.byte	1,1,4
	.byte	'EventMemory',0,19,233,1,100
	.word	6744
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,19,133,2,25
	.word	768
	.byte	1,1,4
	.byte	'EventMemory',0,19,133,2,95
	.word	6744
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,19,144,2,25
	.word	768
	.byte	1,1,4
	.byte	'LocId',0,19,144,2,71
	.word	768
	.byte	10,5,0,0,8
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,19,150,2,17,1,1,4
	.byte	'LocId',0,19,150,2,63
	.word	768
	.byte	4
	.byte	'AgingCounter',0,19,150,2,83
	.word	768
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,19,161,2,25
	.word	768
	.byte	1,1,4
	.byte	'EventMemory',0,19,161,2,103
	.word	6744
	.byte	5,0,2
	.byte	'char',0,1,6,3
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,19,213,2,18
	.word	7591
	.byte	1,1,4
	.byte	'EventMemory',0,19,213,2,92
	.word	6744
	.byte	5,0,3
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,19,224,2,18
	.word	7591
	.byte	1,1,4
	.byte	'EventMemory',0,19,224,2,88
	.word	6744
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,19,238,3,25
	.word	768
	.byte	1,1,4
	.byte	'EventMemory',0,19,238,3,101
	.word	6744
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,19,141,4,28
	.word	303
	.byte	1,1,4
	.byte	'EventMemory',0,19,141,4,93
	.word	6744
	.byte	5,0,7
	.word	6571
	.byte	3
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,19,170,4,19
	.word	1686
	.byte	1,1,4
	.byte	'EventMemory',0,19,170,4,75
	.word	7896
	.byte	5,0,3
	.byte	'Dem_EvMemIsStored',0,3,19,206,4,30
	.word	303
	.byte	1,1,4
	.byte	'Status',0,19,206,4,61
	.word	768
	.byte	5,0,3
	.byte	'Dem_EvMemIsEmpty',0,3,19,211,4,30
	.word	303
	.byte	1,1,4
	.byte	'Status',0,19,211,4,60
	.word	768
	.byte	5,0,3
	.byte	'Dem_EvMemSetToEmpty',0,3,19,226,4,25
	.word	768
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetShadowVisibility',0,3,19,242,4,30
	.word	303
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,19,131,5,25
	.word	768
	.byte	1,1,4
	.byte	'MemId',0,19,131,5,69
	.word	768
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,19,143,5,25
	.word	768
	.byte	1,1,4
	.byte	'MemId',0,19,143,5,67
	.word	768
	.byte	5,0,7
	.word	768
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,19,179,5,17,1,1,4
	.byte	'MemId',0,19,179,5,63
	.word	8256
	.byte	5,0,9
	.word	768
	.byte	7
	.word	8318
	.byte	3
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,19,184,5,30
	.word	303
	.byte	1,1,4
	.byte	'MemId',0,19,184,5,86
	.word	8323
	.byte	5,0,8
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,19,189,5,17,1,1,4
	.byte	'MemId',0,19,189,5,64
	.word	8256
	.byte	5,0,3
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,19,247,5,30
	.word	303
	.byte	1,1,4
	.byte	'StatusOld',0,19,247,5,66
	.word	768
	.byte	4
	.byte	'StatusNew',0,19,247,5,90
	.word	768
	.byte	4
	.byte	'Trigger',0,19,247,5,114
	.word	768
	.byte	5,0,3
	.byte	'Dem_EvMemGetRamStsMask',0,3,19,154,7,25
	.word	768
	.byte	1,1,4
	.byte	'EventId',0,19,154,7,64
	.word	221
	.byte	10,5,0,0,7
	.word	303
.L261:
	.byte	3
	.byte	'Dem_EvMemIsDtcOriginValid',0,3,21,53,30
	.word	303
	.byte	1,1
.L263:
	.byte	4
	.byte	'DTCOrigin',0,21,53,77
	.word	8599
.L265:
	.byte	5,0,3
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,22,20,25
	.word	768
	.byte	1,1,4
	.byte	'EventId',0,22,20,81
	.word	221
	.byte	5,0,3
	.byte	'Dem_EvMemIsAged',0,3,22,61,30
	.word	303
	.byte	1,1,4
	.byte	'EventId',0,22,61,62
	.word	221
	.byte	4
	.byte	'LocId',0,22,61,84
	.word	768
	.byte	4
	.byte	'StatusNew',0,22,61,104
	.word	768
	.byte	5,0
.L433:
	.byte	3
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,23,150,1,25
	.word	768
	.byte	1,1
.L434:
	.byte	4
	.byte	'DTCOrigin',0,23,150,1,73
	.word	303
.L436:
	.byte	5,0
.L425:
	.byte	8
	.byte	'Dem_EvMemClearEventAndOrigin',0,3,23,175,1,17,1,1
.L427:
	.byte	4
	.byte	'EventId',0,23,175,1,62
	.word	221
.L429:
	.byte	4
	.byte	'DTCOrigin',0,23,175,1,89
	.word	303
.L431:
	.byte	10,5,5,0,0,3
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,23,222,1,25
	.word	768
	.byte	1,1,4
	.byte	'EventId',0,23,222,1,67
	.word	221
	.byte	10,5,0,0
.L384:
	.byte	3
	.byte	'Dem_EvMemGetMemoryLocIdOfDtcAndOrigin',0,3,23,141,2,25
	.word	768
	.byte	1,1
.L386:
	.byte	4
	.byte	'DtcId',0,23,141,2,77
	.word	221
.L388:
	.byte	4
	.byte	'DTCOrigin',0,23,141,2,102
	.word	303
.L390:
	.byte	5,0
.L244:
	.byte	3
	.byte	'Dem_DtcIsSuppressed',0,3,24,118,30
	.word	303
	.byte	1,1
.L245:
	.byte	4
	.byte	'dtcId',0,24,118,65
	.word	221
.L247:
	.byte	10,5,0,0,3
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,24,128,1,30
	.word	303
	.byte	1,1,4
	.byte	'dtcId',0,24,128,1,73
	.word	221
	.byte	5,0
.L232:
	.byte	3
	.byte	'Dem_DtcIsSupported',0,3,24,138,1,30
	.word	303
	.byte	1,1
.L235:
	.byte	4
	.byte	'dtcID',0,24,138,1,64
	.word	221
.L237:
	.byte	10,5,5,0,0
.L283:
	.byte	3
	.byte	'Dem_EventUsesOrigin',0,3,24,137,2,30
	.word	303
	.byte	1,1
.L284:
	.byte	4
	.byte	'eventId',0,24,137,2,67
	.word	221
.L286:
	.byte	4
	.byte	'origin',0,24,137,2,94
	.word	303
.L288:
	.byte	10,5,5,5,0,0
.L266:
	.byte	3
	.byte	'Dem_DtcUsesOrigin',0,3,24,154,2,30
	.word	303
	.byte	1,1
.L269:
	.byte	4
	.byte	'dtcId',0,24,154,2,63
	.word	221
.L271:
	.byte	4
	.byte	'origin',0,24,154,2,88
	.word	303
.L273:
	.byte	10,5,5,0,0,3
	.byte	'Dem_EvtGetIsoByte',0,3,25,42,34
	.word	303
	.byte	1,1,4
	.byte	'EventId',0,25,42,69
	.word	221
	.byte	5,0
.L358:
	.byte	3
	.byte	'Dem_EvtGetIsoByte4DtcCalculation',0,3,25,109,34
	.word	303
	.byte	1,1
.L359:
	.byte	4
	.byte	'EventId',0,25,109,84
	.word	221
.L361:
	.byte	5,0,16
	.byte	'Det_ReportError',0,26,112,16
	.word	303
	.byte	1,1,1,1,4
	.byte	'ModuleId',0,26,112,39
	.word	221
	.byte	4
	.byte	'InstanceId',0,26,112,55
	.word	303
	.byte	4
	.byte	'ApiId',0,26,112,73
	.word	303
	.byte	4
	.byte	'ErrorId',0,26,112,86
	.word	303
	.byte	0,17
	.word	163
	.byte	18
	.word	201
	.byte	5,0,17
	.word	243
	.byte	18
	.word	282
	.byte	5,0,17
	.word	320
	.byte	18
	.word	350
	.byte	5,0,17
	.word	370
	.byte	18
	.word	401
	.byte	5,0,17
	.word	431
	.byte	18
	.word	469
	.byte	18
	.word	484
	.byte	18
	.word	500
	.byte	5,0,17
	.word	531
	.byte	18
	.word	571
	.byte	18
	.word	587
	.byte	5,0,17
	.word	613
	.byte	18
	.word	671
	.byte	5,0,17
	.word	692
	.byte	18
	.word	747
	.byte	5,0,17
	.word	794
	.byte	18
	.word	824
	.byte	5,0,17
	.word	847
	.byte	18
	.word	885
	.byte	5,0,17
	.word	898
	.byte	18
	.word	929
	.byte	5,0,17
	.word	942
	.byte	18
	.word	980
	.byte	5,0,17
	.word	993
	.byte	18
	.word	1030
	.byte	5,0,17
	.word	1044
	.byte	18
	.word	1073
	.byte	5,0,17
	.word	1087
	.byte	18
	.word	1120
	.byte	5,0,17
	.word	1134
	.byte	18
	.word	1166
	.byte	5,0,17
	.word	1183
	.byte	18
	.word	1220
	.byte	10,19
	.word	1134
	.byte	18
	.word	1166
	.byte	20
	.word	1181
	.byte	0,5,0,0,17
	.word	1239
	.byte	18
	.word	1273
	.byte	5,0,17
	.word	1342
	.byte	18
	.word	1386
	.byte	18
	.word	1398
	.byte	10,19
	.word	1044
	.byte	18
	.word	1073
	.byte	20
	.word	1085
	.byte	0,5,0,0,17
	.word	1427
	.byte	18
	.word	1470
	.byte	5,0,17
	.word	1484
	.byte	18
	.word	1520
	.byte	5,0,17
	.word	1534
	.byte	18
	.word	1577
	.byte	5,0,17
	.word	1591
	.byte	18
	.word	1622
	.byte	5,0,17
	.word	1637
	.byte	18
	.word	1671
	.byte	5,0,17
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	5,0,17
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	5,0,17
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	10,19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,5,19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,5,0,0,17
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	5,0,17
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	10,19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,5,0,0,17
	.word	2082
	.byte	18
	.word	2117
	.byte	18
	.word	2131
	.byte	18
	.word	2152
	.byte	5,0,17
	.word	2177
	.byte	18
	.word	2210
	.byte	18
	.word	2224
	.byte	18
	.word	2245
	.byte	5,0,17
	.word	2270
	.byte	18
	.word	2307
	.byte	18
	.word	2321
	.byte	18
	.word	2342
	.byte	18
	.word	2365
	.byte	10,19
	.word	2177
	.byte	18
	.word	2210
	.byte	18
	.word	2224
	.byte	18
	.word	2245
	.byte	20
	.word	2268
	.byte	0,5,0,0,17
	.word	2391
	.byte	18
	.word	2422
	.byte	18
	.word	2437
	.byte	5,0,17
	.word	2460
	.byte	18
	.word	2493
	.byte	18
	.word	2508
	.byte	5,0,17
	.word	2531
	.byte	18
	.word	2572
	.byte	18
	.word	2586
	.byte	5,0,17
	.word	2609
	.byte	18
	.word	2646
	.byte	18
	.word	2660
	.byte	10,19
	.word	2531
	.byte	18
	.word	2572
	.byte	18
	.word	2586
	.byte	20
	.word	2607
	.byte	0,5,0,0,17
	.word	2685
	.byte	18
	.word	2721
	.byte	18
	.word	2735
	.byte	18
	.word	2756
	.byte	5,0,17
	.word	2781
	.byte	18
	.word	2815
	.byte	18
	.word	2829
	.byte	18
	.word	2850
	.byte	5,0,17
	.word	2880
	.byte	18
	.word	2911
	.byte	18
	.word	2926
	.byte	5,0,17
	.word	2949
	.byte	18
	.word	2982
	.byte	18
	.word	2997
	.byte	5,0,17
	.word	3020
	.byte	18
	.word	3061
	.byte	18
	.word	3075
	.byte	5,0,17
	.word	3098
	.byte	18
	.word	3135
	.byte	18
	.word	3149
	.byte	10,19
	.word	3020
	.byte	18
	.word	3061
	.byte	18
	.word	3075
	.byte	20
	.word	3096
	.byte	0,5,0,0,17
	.word	3174
	.byte	18
	.word	3208
	.byte	18
	.word	3222
	.byte	18
	.word	3243
	.byte	5,0,17
	.word	3268
	.byte	18
	.word	3300
	.byte	5,0,17
	.word	3313
	.byte	18
	.word	3345
	.byte	5,0,17
	.word	3358
	.byte	5,0,17
	.word	3386
	.byte	18
	.word	3439
	.byte	5,0,17
	.word	3458
	.byte	18
	.word	3504
	.byte	5,0,17
	.word	3520
	.byte	18
	.word	3585
	.byte	10,19
	.word	320
	.byte	18
	.word	350
	.byte	20
	.word	368
	.byte	0,5,19
	.word	320
	.byte	18
	.word	350
	.byte	20
	.word	368
	.byte	0,5,19
	.word	692
	.byte	18
	.word	747
	.byte	20
	.word	766
	.byte	0,5,19
	.word	431
	.byte	18
	.word	469
	.byte	18
	.word	484
	.byte	18
	.word	500
	.byte	20
	.word	519
	.byte	0,5,0,0
.L375:
	.byte	7
	.word	303
	.byte	11,4,213,2,9,4,12
	.byte	'it',0
	.word	221
	.byte	2,2,35,0,12
	.byte	'end',0
	.word	221
	.byte	2,2,35,2,0,11,10,20,9,24,12
	.byte	'activeClient',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'machine_state',0
	.word	303
	.byte	1,2,35,1,12
	.byte	'IsNewClearRequest',0
	.word	303
	.byte	1,2,35,2,12
	.byte	'IsClearInterrupted',0
	.word	303
	.byte	1,2,35,3,12
	.byte	'NumberOfEventsProcessed',0
	.word	221
	.byte	2,2,35,4,12
	.byte	'DtcIt',0
	.word	10591
	.byte	4,2,35,6,12
	.byte	'EvtIt',0
	.word	768
	.byte	4,2,35,12,12
	.byte	'EvtListIt',0
	.word	1305
	.byte	8,2,35,16,0
.L407:
	.byte	7
	.word	10623
	.byte	17
	.word	3609
	.byte	18
	.word	3635
	.byte	18
	.word	3650
	.byte	5,0,17
	.word	3673
	.byte	18
	.word	3701
	.byte	18
	.word	3716
	.byte	5,0,17
	.word	3739
	.byte	18
	.word	3771
	.byte	18
	.word	3786
	.byte	18
	.word	3807
	.byte	10,19
	.word	3609
	.byte	18
	.word	3635
	.byte	18
	.word	3650
	.byte	20
	.word	3671
	.byte	0,5,19
	.word	3673
	.byte	18
	.word	3701
	.byte	18
	.word	3716
	.byte	20
	.word	3737
	.byte	0,5,0,0,17
	.word	3846
	.byte	18
	.word	3878
	.byte	18
	.word	3893
	.byte	5,0,17
	.word	3916
	.byte	18
	.word	3956
	.byte	10,19
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	21
	.word	2078
	.byte	19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,20
	.word	2079
	.byte	0,0,5,0,0,17
	.word	3973
	.byte	18
	.word	4017
	.byte	10,19
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	21
	.word	2078
	.byte	19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,20
	.word	2079
	.byte	0,0,5,0,0,17
	.word	4035
	.byte	18
	.word	4081
	.byte	10,19
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	21
	.word	2078
	.byte	19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,20
	.word	2079
	.byte	0,0,5,0,0,17
	.word	4099
	.byte	18
	.word	4140
	.byte	10,19
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	21
	.word	2078
	.byte	19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,20
	.word	2079
	.byte	0,0,5,0,0,17
	.word	4158
	.byte	18
	.word	4214
	.byte	10,19
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	21
	.word	2078
	.byte	19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,20
	.word	2079
	.byte	0,0,5,0,0,17
	.word	4232
	.byte	18
	.word	4270
	.byte	18
	.word	4284
	.byte	10,19
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	21
	.word	1925
	.byte	19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,20
	.word	1926
	.byte	19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,20
	.word	1927
	.byte	0,0,5,0,0,17
	.word	4308
	.byte	18
	.word	4349
	.byte	18
	.word	4363
	.byte	10,19
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	21
	.word	1925
	.byte	19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,20
	.word	1926
	.byte	19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,20
	.word	1927
	.byte	0,0,5,0,0,17
	.word	4387
	.byte	18
	.word	4428
	.byte	18
	.word	4442
	.byte	10,19
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	21
	.word	1925
	.byte	19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,20
	.word	1926
	.byte	19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,20
	.word	1927
	.byte	0,0,5,0,0,17
	.word	4466
	.byte	18
	.word	4509
	.byte	18
	.word	4523
	.byte	10,19
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	21
	.word	1925
	.byte	19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,20
	.word	1926
	.byte	19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,20
	.word	1927
	.byte	0,0,5,0,0,17
	.word	4547
	.byte	18
	.word	4590
	.byte	18
	.word	4604
	.byte	10,19
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	21
	.word	1925
	.byte	19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,20
	.word	1926
	.byte	19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,20
	.word	1927
	.byte	0,0,5,0,0,17
	.word	4628
	.byte	18
	.word	4666
	.byte	18
	.word	4680
	.byte	10,19
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	21
	.word	1925
	.byte	19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,20
	.word	1926
	.byte	19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,20
	.word	1927
	.byte	0,0,5,0,0,17
	.word	4704
	.byte	18
	.word	4744
	.byte	18
	.word	4758
	.byte	10,19
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	21
	.word	1925
	.byte	19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,20
	.word	1926
	.byte	19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,20
	.word	1927
	.byte	0,0,5,0,0,17
	.word	4782
	.byte	18
	.word	4835
	.byte	18
	.word	4849
	.byte	10,19
	.word	1829
	.byte	18
	.word	1865
	.byte	18
	.word	1880
	.byte	18
	.word	1901
	.byte	21
	.word	1925
	.byte	19
	.word	1691
	.byte	18
	.word	1721
	.byte	18
	.word	1736
	.byte	20
	.word	1757
	.byte	0,20
	.word	1926
	.byte	19
	.word	1759
	.byte	18
	.word	1791
	.byte	18
	.word	1806
	.byte	20
	.word	1827
	.byte	0,20
	.word	1927
	.byte	0,0,5,0,0,17
	.word	4873
	.byte	18
	.word	4908
	.byte	5,0,17
	.word	4938
	.byte	18
	.word	4991
	.byte	10,19
	.word	243
	.byte	18
	.word	282
	.byte	20
	.word	301
	.byte	0,5,0,0,17
	.word	5007
	.byte	18
	.word	5060
	.byte	10,19
	.word	163
	.byte	18
	.word	201
	.byte	20
	.word	219
	.byte	0,5,0,0,17
	.word	5076
	.byte	18
	.word	5127
	.byte	5,0,17
	.word	5142
	.byte	18
	.word	5192
	.byte	10,19
	.word	2609
	.byte	18
	.word	2646
	.byte	18
	.word	2660
	.byte	21
	.word	2681
	.byte	19
	.word	2531
	.byte	18
	.word	2572
	.byte	18
	.word	2586
	.byte	20
	.word	2607
	.byte	0,20
	.word	2682
	.byte	0,0,5,0,0,17
	.word	5209
	.byte	18
	.word	5261
	.byte	5,0,17
	.word	5276
	.byte	18
	.word	5325
	.byte	5,0,17
	.word	5340
	.byte	18
	.word	5380
	.byte	10,19
	.word	2609
	.byte	18
	.word	2646
	.byte	18
	.word	2660
	.byte	21
	.word	2681
	.byte	19
	.word	2531
	.byte	18
	.word	2572
	.byte	18
	.word	2586
	.byte	20
	.word	2607
	.byte	0,20
	.word	2682
	.byte	0,0,5,0,0,17
	.word	5397
	.byte	18
	.word	5441
	.byte	5,0,17
	.word	5456
	.byte	18
	.word	5497
	.byte	5,0,17
	.word	5513
	.byte	18
	.word	5556
	.byte	5,0,17
	.word	5572
	.byte	18
	.word	5620
	.byte	5,0,17
	.word	5636
	.byte	18
	.word	5690
	.byte	10,19
	.word	2685
	.byte	18
	.word	2721
	.byte	18
	.word	2735
	.byte	18
	.word	2756
	.byte	20
	.word	2779
	.byte	0,5,0,0,17
	.word	5708
	.byte	18
	.word	5751
	.byte	5,0,17
	.word	5767
	.byte	18
	.word	5812
	.byte	5,0,17
	.word	5828
	.byte	18
	.word	5877
	.byte	5,0,17
	.word	5906
	.byte	18
	.word	5942
	.byte	5,0,17
	.word	5961
	.byte	18
	.word	6001
	.byte	5,0,16
	.byte	'Dem_EvtClearEventAllowed',0,16,154,2,9
	.word	303
	.byte	1,1,1,1,4
	.byte	'eventId',0,16,154,2,52
	.word	221
	.byte	0,17
	.word	6020
	.byte	5,0,17
	.word	6073
	.byte	18
	.word	6109
	.byte	10,19
	.word	2880
	.byte	18
	.word	2911
	.byte	18
	.word	2926
	.byte	20
	.word	2947
	.byte	0,5,0,0,17
	.word	6129
	.byte	18
	.word	6161
	.byte	10,19
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	21
	.word	2078
	.byte	19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,20
	.word	2079
	.byte	0,0,5,0,0,17
	.word	6187
	.byte	18
	.word	6212
	.byte	18
	.word	6228
	.byte	5,0,17
	.word	6250
	.byte	18
	.word	6284
	.byte	5,0,22
	.byte	'Dem_EvBuffClear',0,27,82,6,1,1,1,1,4
	.byte	'EventId',0,27,82,39
	.word	221
	.byte	0,17
	.word	6307
	.byte	18
	.word	6359
	.byte	18
	.word	6375
	.byte	5,0,17
	.word	6395
	.byte	18
	.word	6428
	.byte	5,0,17
	.word	6444
	.byte	18
	.word	6485
	.byte	5,0,17
	.word	6749
	.byte	18
	.word	6793
	.byte	5,0,17
	.word	6816
	.byte	18
	.word	6855
	.byte	10,19
	.word	6749
	.byte	18
	.word	6793
	.byte	20
	.word	6814
	.byte	0,5,0,0,17
	.word	6874
	.byte	18
	.word	6919
	.byte	5,0,17
	.word	6942
	.byte	18
	.word	6986
	.byte	5,0,17
	.word	7009
	.byte	18
	.word	7056
	.byte	5,0,17
	.word	7079
	.byte	18
	.word	7121
	.byte	10,19
	.word	7009
	.byte	18
	.word	7056
	.byte	20
	.word	7077
	.byte	0,5,0,0,17
	.word	7140
	.byte	18
	.word	7192
	.byte	5,0,17
	.word	7215
	.byte	18
	.word	7270
	.byte	5,0,17
	.word	7293
	.byte	18
	.word	7343
	.byte	5,0,17
	.word	7366
	.byte	18
	.word	7411
	.byte	10,19
	.word	7293
	.byte	18
	.word	7343
	.byte	20
	.word	7364
	.byte	0,5,0,0,17
	.word	7430
	.byte	18
	.word	7471
	.byte	18
	.word	7486
	.byte	5,0,17
	.word	7510
	.byte	18
	.word	7568
	.byte	5,0,17
	.word	7599
	.byte	18
	.word	7653
	.byte	5,0,17
	.word	7676
	.byte	18
	.word	7726
	.byte	5,0,17
	.word	7749
	.byte	18
	.word	7805
	.byte	5,0,17
	.word	7828
	.byte	18
	.word	7873
	.byte	5,0,17
	.word	7901
	.byte	18
	.word	7943
	.byte	5,0,17
	.word	7966
	.byte	18
	.word	7996
	.byte	5,0,17
	.word	8014
	.byte	18
	.word	8043
	.byte	5,0,17
	.word	8061
	.byte	5,0,17
	.word	8095
	.byte	5,0,17
	.word	8138
	.byte	18
	.word	8181
	.byte	5,0,17
	.word	8198
	.byte	18
	.word	8239
	.byte	5,0,17
	.word	8261
	.byte	18
	.word	8301
	.byte	5,0,17
	.word	8328
	.byte	18
	.word	8376
	.byte	5,0,17
	.word	8393
	.byte	18
	.word	8434
	.byte	5,0,17
	.word	8451
	.byte	18
	.word	8486
	.byte	18
	.word	8505
	.byte	18
	.word	8524
	.byte	5,0,17
	.word	8543
	.byte	18
	.word	8578
	.byte	10,19
	.word	5076
	.byte	18
	.word	5127
	.byte	20
	.word	5140
	.byte	0,5,0,0,17
	.word	8604
	.byte	18
	.word	8641
	.byte	5,0,17
	.word	8661
	.byte	18
	.word	8712
	.byte	5,0,17
	.word	8730
	.byte	18
	.word	8757
	.byte	18
	.word	8773
	.byte	18
	.word	8787
	.byte	5,0,22
	.byte	'Dem_EvMemClearEvent',0,23,56,15,1,1,1,1,4
	.byte	'EventId',0,23,56,51
	.word	221
	.byte	4
	.byte	'MemId',0,23,56,73
	.word	768
	.byte	0,16
	.byte	'Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility',0,23,76,15
	.word	768
	.byte	1,1,1,1,4
	.byte	'DtcId',0,23,76,81
	.word	221
	.byte	4
	.byte	'DTCOrigin',0,23,76,106
	.word	303
	.byte	4
	.byte	'ShadowEntriesVisible',0,23,76,135,1
	.word	303
	.byte	0,17
	.word	8807
	.byte	18
	.word	8849
	.byte	5,0,17
	.word	8870
	.byte	18
	.word	8907
	.byte	18
	.word	8924
	.byte	10,19
	.word	6395
	.byte	18
	.word	6428
	.byte	20
	.word	6442
	.byte	0,5,19
	.word	8807
	.byte	18
	.word	8849
	.byte	20
	.word	8868
	.byte	0,5,0,0,17
	.word	8948
	.byte	18
	.word	8986
	.byte	10,19
	.word	5142
	.byte	18
	.word	5192
	.byte	21
	.word	5205
	.byte	19
	.word	2609
	.byte	18
	.word	2646
	.byte	18
	.word	2660
	.byte	21
	.word	2681
	.byte	19
	.word	2531
	.byte	18
	.word	2572
	.byte	18
	.word	2586
	.byte	20
	.word	2607
	.byte	0,20
	.word	2682
	.byte	0,0,20
	.word	5206
	.byte	0,0,5,0,0,17
	.word	9007
	.byte	18
	.word	9057
	.byte	18
	.word	9072
	.byte	5,0,17
	.word	9093
	.byte	18
	.word	9124
	.byte	10,19
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	21
	.word	2078
	.byte	19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,20
	.word	2079
	.byte	0,0,5,0,0,17
	.word	9142
	.byte	18
	.word	9182
	.byte	5,0,17
	.word	9199
	.byte	18
	.word	9230
	.byte	10,19
	.word	9093
	.byte	18
	.word	9124
	.byte	21
	.word	9138
	.byte	19
	.word	2007
	.byte	18
	.word	2043
	.byte	18
	.word	2057
	.byte	21
	.word	2078
	.byte	19
	.word	1930
	.byte	18
	.word	1970
	.byte	18
	.word	1984
	.byte	20
	.word	2005
	.byte	0,20
	.word	2079
	.byte	0,0,20
	.word	9139
	.byte	0,0,5,19
	.word	1044
	.byte	18
	.word	1073
	.byte	20
	.word	1085
	.byte	0,5,0,0,16
	.byte	'Dem_DtcIdFromDtcCode',0,24,128,2,15
	.word	221
	.byte	1,1,1,1,4
	.byte	'dtcCode',0,24,128,2,53
	.word	147
	.byte	0,17
	.word	9250
	.byte	18
	.word	9282
	.byte	18
	.word	9299
	.byte	10,19
	.word	5209
	.byte	18
	.word	5261
	.byte	20
	.word	5274
	.byte	0,5,19
	.word	5276
	.byte	18
	.word	5325
	.byte	20
	.word	5338
	.byte	0,5,19
	.word	5142
	.byte	18
	.word	5192
	.byte	21
	.word	5205
	.byte	19
	.word	2609
	.byte	18
	.word	2646
	.byte	18
	.word	2660
	.byte	21
	.word	2681
	.byte	19
	.word	2531
	.byte	18
	.word	2572
	.byte	18
	.word	2586
	.byte	20
	.word	2607
	.byte	0,20
	.word	2682
	.byte	0,0,20
	.word	5206
	.byte	0,0,5,0,0,17
	.word	9321
	.byte	18
	.word	9351
	.byte	18
	.word	9366
	.byte	10,19
	.word	1183
	.byte	18
	.word	1220
	.byte	21
	.word	1235
	.byte	19
	.word	1134
	.byte	18
	.word	1166
	.byte	20
	.word	1181
	.byte	0,20
	.word	1236
	.byte	0,0,5,19
	.word	9250
	.byte	18
	.word	9282
	.byte	18
	.word	9299
	.byte	21
	.word	9315
	.byte	19
	.word	5209
	.byte	18
	.word	5261
	.byte	20
	.word	5274
	.byte	0,20
	.word	9316
	.byte	19
	.word	5276
	.byte	18
	.word	5325
	.byte	20
	.word	5338
	.byte	0,20
	.word	9317
	.byte	19
	.word	5142
	.byte	18
	.word	5192
	.byte	21
	.word	5205
	.byte	19
	.word	2609
	.byte	18
	.word	2646
	.byte	18
	.word	2660
	.byte	21
	.word	2681
	.byte	19
	.word	2531
	.byte	18
	.word	2572
	.byte	18
	.word	2586
	.byte	20
	.word	2607
	.byte	0,20
	.word	2682
	.byte	0,0,20
	.word	5206
	.byte	0,0,20
	.word	9318
	.byte	0,0,5,0,0,17
	.word	9387
	.byte	18
	.word	9416
	.byte	5,0,22
	.byte	'Dem_ClearEvent',0,25,76,6,1,1,1,1,4
	.byte	'eventId',0,25,76,37
	.word	221
	.byte	4
	.byte	'ClearFully',0,25,76,54
	.word	303
	.byte	0,17
	.word	9434
	.byte	18
	.word	9478
	.byte	5,0,23,1,7
	.word	14119
	.byte	24
	.byte	'__codeptr',0,28,1,1
	.word	14121
	.byte	24
	.byte	'sint8',0,29,76,25
	.word	7591
	.byte	24
	.byte	'uint8',0,29,81,25
	.word	303
	.byte	24
	.byte	'sint16',0,29,86,25
	.word	5893
	.byte	24
	.byte	'uint16',0,29,91,25
	.word	221
	.byte	2
	.byte	'int',0,4,5,24
	.byte	'sint32',0,29,96,24
	.word	14202
	.byte	24
	.byte	'uint32',0,29,106,24
	.word	147
	.byte	2
	.byte	'unsigned long long int',0,8,7,24
	.byte	'uint64',0,29,111,30
	.word	14239
	.byte	24
	.byte	'boolean',0,29,127,25
	.word	303
	.byte	24
	.byte	'uint8_least',0,29,137,1,25
	.word	768
	.byte	24
	.byte	'uint16_least',0,29,147,1,25
	.word	768
	.byte	24
	.byte	'StatusType',0,30,191,1,27
	.word	303
	.byte	24
	.byte	'Std_ReturnType',0,30,199,1,15
	.word	303
	.byte	11,30,206,1,9,8,12
	.byte	'vendorID',0
	.word	221
	.byte	2,2,35,0,12
	.byte	'moduleID',0
	.word	221
	.byte	2,2,35,2,12
	.byte	'sw_major_version',0
	.word	303
	.byte	1,2,35,4,12
	.byte	'sw_minor_version',0
	.word	303
	.byte	1,2,35,5,12
	.byte	'sw_patch_version',0
	.word	303
	.byte	1,2,35,6,0,24
	.byte	'Std_VersionInfoType',0,30,213,1,3
	.word	14383
	.byte	24
	.byte	'Dem_ClientRequestType',0,31,46,16
	.word	221
	.byte	24
	.byte	'Dem_ClientResultType',0,31,47,16
	.word	221
	.byte	24
	.byte	'Dem_ClientSelectionType',0,31,48,16
	.word	147
	.byte	24
	.byte	'Dem_ClientPriorityType',0,31,50,15
	.word	303
	.byte	24
	.byte	'Dem_ComponentIdType',0,32,20,15
	.word	303
	.byte	24
	.byte	'PduIdType',0,33,22,19
	.word	221
	.byte	24
	.byte	'PduLengthType',0,33,26,19
	.word	221
	.byte	25,34,113,9,4,26
	.byte	'TP_DATACONF',0,0,26
	.byte	'TP_DATARETRY',0,1,26
	.byte	'TP_CONFPENDING',0,2,0,24
	.byte	'TpDataStateType',0,34,118,3
	.word	14723
	.byte	24
	.byte	'Can_IdType',0,35,32,16
	.word	147
	.byte	24
	.byte	'Can_HwHandleType',0,35,43,16
	.word	221
	.byte	11,36,93,9,8,12
	.byte	'Class',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'TIN',0
	.word	303
	.byte	1,2,35,1,12
	.byte	'ReturnAddress',0
	.word	147
	.byte	4,2,35,4,0,24
	.byte	'OsTrapInfoType',0,36,97,3
	.word	14843
	.byte	14,68
	.word	147
	.byte	15,16,0,11,36,154,1,9,68,12
	.byte	'store',0
	.word	14923
	.byte	68,2,35,0,0,14,68
	.word	14932
	.byte	15,0,0,24
	.byte	'Os_JumpBufType',0,36,156,1,3
	.word	14954
	.byte	24
	.byte	'Os_StackTraceType',0,36,174,1,18
	.word	147
	.byte	11,36,175,1,9,8,12
	.byte	'sp',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'ctx',0
	.word	147
	.byte	4,2,35,4,0,24
	.byte	'Os_StackValueType',0,36,175,1,63
	.word	15014
	.byte	24
	.byte	'Os_StackSizeType',0,36,176,1,27
	.word	15014
	.byte	27,1,1,7
	.word	15099
	.byte	24
	.byte	'Os_VoidVoidFunctionType',0,36,179,1,16
	.word	15102
	.byte	24
	.byte	'ApplicationType',0,36,193,1,23
	.word	303
	.byte	28
	.byte	'Os_ApplicationConfigurationType_s',0,36,198,1,16,2,12
	.byte	'app_id',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'access',0
	.word	303
	.byte	1,2,35,1,0,24
	.byte	'Os_ApplicationConfigurationType',0,36,201,1,3
	.word	15165
	.byte	24
	.byte	'Os_CoreStateType',0,36,203,1,16
	.word	147
	.byte	24
	.byte	'AreaIdType',0,36,204,1,16
	.word	221
	.byte	24
	.byte	'Os_PeripheralAddressType',0,36,212,1,22
	.word	147
	.byte	24
	.byte	'TickType',0,36,221,1,22
	.word	147
	.byte	24
	.byte	'Os_StopwatchTickType',0,36,225,1,22
	.word	147
	.byte	24
	.byte	'Os_Lockable',0,36,234,1,18
	.word	2875
	.byte	24
	.byte	'CoreIdType',0,36,236,1,16
	.word	221
	.byte	24
	.byte	'SpinlockIdType',0,36,237,1,16
	.word	221
	.byte	25,36,239,1,9,4,26
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,26
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,24
	.byte	'TryToGetSpinlockType',0,36,239,1,74
	.word	15472
	.byte	25,36,174,2,9,4,26
	.byte	'APPLICATION_ACCESSIBLE',0,0,26
	.byte	'APPLICATION_RESTARTING',0,1,26
	.byte	'APPLICATION_TERMINATED',0,2,0,24
	.byte	'ApplicationStateType',0,36,174,2,92
	.word	15565
	.byte	29
	.byte	'void',0,7
	.word	15677
	.byte	30,1,1,31
	.word	303
	.byte	31
	.word	15683
	.byte	0,7
	.word	15688
	.byte	24
	.byte	'Os_FunctionEntryType',0,36,183,2,16
	.word	15702
	.byte	28
	.byte	'Os_MeterInfoType_s',0,36,193,2,16,48,12
	.byte	'elapsed',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'previous',0
	.word	147
	.byte	4,2,35,4,12
	.byte	'max',0
	.word	147
	.byte	4,2,35,8,12
	.byte	'cumulative',0
	.word	147
	.byte	4,2,35,12,12
	.byte	'stackbase',0
	.word	15014
	.byte	8,2,35,16,12
	.byte	'stackusage',0
	.word	15014
	.byte	8,2,35,24,12
	.byte	'stackmax',0
	.word	15014
	.byte	8,2,35,32,12
	.byte	'stackbudget',0
	.word	15014
	.byte	8,2,35,40,0,24
	.byte	'Os_MeterInfoType',0,36,202,2,3
	.word	15737
	.byte	7
	.word	15737
	.byte	24
	.byte	'Os_MeterInfoRefType',0,36,203,2,50
	.word	15935
	.byte	24
	.byte	'EventMaskType',0,36,206,2,15
	.word	303
	.byte	24
	.byte	'Os_imaskType',0,36,211,2,16
	.word	147
	.byte	28
	.byte	'Os_ISRDynType_s',0,36,213,2,16,48,12
	.byte	'meter',0
	.word	15737
	.byte	48,2,35,0,0,24
	.byte	'Os_ISRDynType',0,36,215,2,3
	.word	16014
	.byte	7
	.word	16014
	.byte	9
	.word	16075
	.byte	28
	.byte	'Os_ISRType_s',0,36,216,2,16,24,12
	.byte	'entry_function',0
	.word	15107
	.byte	4,2,35,0,12
	.byte	'dynamic',0
	.word	16080
	.byte	4,2,35,4,12
	.byte	'imask',0
	.word	147
	.byte	4,2,35,8,12
	.byte	'stackbudget',0
	.word	15014
	.byte	8,2,35,12,12
	.byte	'access',0
	.word	303
	.byte	1,2,35,20,12
	.byte	'application',0
	.word	303
	.byte	1,2,35,21,0,24
	.byte	'Os_ISRType',0,36,223,2,3
	.word	16085
	.byte	7
	.word	15099
	.byte	9
	.word	16085
	.byte	7
	.word	16244
	.byte	24
	.byte	'ISRType',0,36,224,2,46
	.word	16249
	.byte	24
	.byte	'Os_bitmask',0,36,239,2,22
	.word	147
	.byte	24
	.byte	'Os_pset0Type',0,36,240,2,20
	.word	147
	.byte	24
	.byte	'Os_pset1Type',0,36,241,2,20
	.word	147
	.byte	24
	.byte	'Os_pset2Type',0,36,242,2,20
	.word	147
	.byte	13,36,243,2,9,4,12
	.byte	'p0',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'p1',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'p2',0
	.word	147
	.byte	4,2,35,0,0,24
	.byte	'Os_psetType',0,36,247,2,3
	.word	16357
	.byte	13,36,249,2,9,4,12
	.byte	't0',0
	.word	147
	.byte	4,2,35,0,12
	.byte	't1',0
	.word	147
	.byte	4,2,35,0,12
	.byte	't2',0
	.word	147
	.byte	4,2,35,0,0,24
	.byte	'Os_tpmaskType',0,36,253,2,3
	.word	16421
	.byte	24
	.byte	'Os_ActivationCountType',0,36,254,2,23
	.word	303
	.byte	28
	.byte	'Os_TaskDynType_s',0,36,128,3,16,120,12
	.byte	'terminate_jump_buf',0
	.word	14963
	.byte	68,2,35,0,12
	.byte	'meter',0
	.word	15737
	.byte	48,2,35,68,12
	.byte	'activation_count',0
	.word	303
	.byte	1,2,35,116,0,24
	.byte	'Os_TaskDynType',0,36,132,3,3
	.word	16519
	.byte	14,68
	.word	14932
	.byte	15,0,0,7
	.word	16519
	.byte	9
	.word	16645
	.byte	28
	.byte	'Os_TaskType_s',0,36,134,3,16,40,12
	.byte	'dynamic',0
	.word	16650
	.byte	4,2,35,0,12
	.byte	'entry_function',0
	.word	15107
	.byte	4,2,35,4,12
	.byte	'pset',0
	.word	16357
	.byte	4,2,35,8,12
	.byte	'base_tpmask',0
	.word	16421
	.byte	4,2,35,12,12
	.byte	'tpmask',0
	.word	16421
	.byte	4,2,35,16,12
	.byte	'core_id',0
	.word	221
	.byte	2,2,35,20,12
	.byte	'index',0
	.word	147
	.byte	4,2,35,24,12
	.byte	'stackbudget',0
	.word	15014
	.byte	8,2,35,28,12
	.byte	'activation_count',0
	.word	303
	.byte	1,2,35,36,12
	.byte	'access',0
	.word	303
	.byte	1,2,35,37,12
	.byte	'application',0
	.word	303
	.byte	1,2,35,38,0,24
	.byte	'Os_TaskType',0,36,146,3,3
	.word	16655
	.byte	9
	.word	16655
	.byte	7
	.word	16905
	.byte	24
	.byte	'TaskType',0,36,147,3,47
	.word	16910
	.byte	32
	.byte	'Os_TaskStateType',0,36,155,3,6,4,26
	.byte	'SUSPENDED',0,0,26
	.byte	'READY',0,1,26
	.byte	'WAITING',0,2,26
	.byte	'RUNNING',0,3,0,24
	.byte	'TaskStateType',0,36,156,3,31
	.word	16933
	.byte	13,36,167,3,3,4,12
	.byte	'tpmask',0
	.word	16421
	.byte	4,2,35,0,0,28
	.byte	'Os_ResourceDynType_s',0,36,166,3,16,4,12
	.byte	'saved_priority',0
	.word	17020
	.byte	4,2,35,0,0,24
	.byte	'Os_ResourceDynType',0,36,170,3,3
	.word	17043
	.byte	7
	.word	17043
	.byte	9
	.word	17123
	.byte	28
	.byte	'Os_ResourceType_s',0,36,171,3,16,12,12
	.byte	'dynamic',0
	.word	17128
	.byte	4,2,35,0,12
	.byte	'tpmask',0
	.word	16421
	.byte	4,2,35,4,12
	.byte	'access',0
	.word	303
	.byte	1,2,35,8,0,24
	.byte	'Os_ResourceType',0,36,175,3,3
	.word	17133
	.byte	11,36,181,3,9,12,12
	.byte	'maxallowedvalue',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'ticksperbase',0
	.word	147
	.byte	4,2,35,4,12
	.byte	'mincycle',0
	.word	147
	.byte	4,2,35,8,0,24
	.byte	'AlarmBaseType',0,36,185,3,3
	.word	17232
	.byte	11,36,206,3,9,8,12
	.byte	'Running',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'Pending',0
	.word	303
	.byte	1,2,35,1,12
	.byte	'Delay',0
	.word	147
	.byte	4,2,35,4,0,24
	.byte	'Os_CounterStatusType',0,36,210,3,3
	.word	17327
	.byte	33
	.word	303
	.byte	1,1,7
	.word	17413
	.byte	24
	.byte	'Os_CounterIncrAdvType',0,36,217,3,22
	.word	17420
	.byte	28
	.byte	's_swd',0,36,222,3,12,4,12
	.byte	'count',0
	.word	147
	.byte	4,2,35,0,0,13,36,221,3,3,4,12
	.byte	'sw',0
	.word	17456
	.byte	4,2,35,0,0,28
	.byte	'Os_CounterDynType_s',0,36,220,3,16,4,12
	.byte	'type_dependent',0
	.word	17484
	.byte	4,2,35,0,0,24
	.byte	'Os_CounterDynType',0,36,226,3,3
	.word	17503
	.byte	7
	.word	17503
	.byte	9
	.word	17581
	.byte	28
	.byte	'Os_CounterType_s',0,36,227,3,16,28,12
	.byte	'dynamic',0
	.word	17586
	.byte	4,2,35,0,12
	.byte	'advincr',0
	.word	17425
	.byte	4,2,35,4,12
	.byte	'base',0
	.word	17232
	.byte	12,2,35,8,12
	.byte	'core',0
	.word	15683
	.byte	4,2,35,20,12
	.byte	'access',0
	.word	303
	.byte	1,2,35,24,12
	.byte	'application',0
	.word	303
	.byte	1,2,35,25,0,24
	.byte	'Os_CounterType',0,36,234,3,3
	.word	17591
	.byte	7
	.word	17413
	.byte	9
	.word	17591
	.byte	7
	.word	17743
	.byte	24
	.byte	'CounterType',0,36,235,3,52
	.word	17748
	.byte	32
	.byte	'Os_ScheduleTableStatusType',0,36,240,3,6,4,26
	.byte	'SCHEDULETABLE_STOPPED',0,0,26
	.byte	'SCHEDULETABLE_NEXT',0,1,26
	.byte	'SCHEDULETABLE_WAITING',0,2,26
	.byte	'SCHEDULETABLE_RUNNING',0,3,26
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,24
	.byte	'ScheduleTableStatusType',0,36,241,3,41
	.word	17774
	.byte	9
	.word	.L588-.L181
	.byte	7
	.word	17974
	.byte	24
	.byte	'ScheduleTableType',0,36,128,4,58
	.word	17979
	.byte	28
	.byte	'Os_ScheduleTableDynType_s',0,36,130,4,16,16,12
	.byte	'match',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'next',0
	.word	17984
	.byte	4,2,35,4,12
	.byte	'state',0
	.word	17774
	.byte	4,2,35,8,12
	.byte	'config',0
	.word	221
	.byte	2,2,35,12,0,7
	.word	18011
	.byte	9
	.word	18104
.L588:
	.byte	28
	.byte	'Os_ScheduleTableType_s',0,36,247,3,16,16,12
	.byte	'dynamic',0
	.word	18109
	.byte	4,2,35,0,12
	.byte	'counter',0
	.word	17753
	.byte	4,2,35,4,12
	.byte	'repeat',0
	.word	303
	.byte	1,2,35,8,12
	.byte	'config',0
	.word	221
	.byte	2,2,35,10,12
	.byte	'initial',0
	.word	303
	.byte	1,2,35,12,12
	.byte	'access',0
	.word	303
	.byte	1,2,35,13,12
	.byte	'application',0
	.word	303
	.byte	1,2,35,14,0,24
	.byte	'Os_ScheduleTableType',0,36,255,3,3
	.word	18114
	.byte	9
	.word	18114
	.byte	7
	.word	18294
	.byte	9
	.word	17591
	.byte	7
	.word	18304
	.byte	6
	.word	15407
	.byte	6
	.word	16357
	.byte	6
	.word	16254
	.byte	6
	.word	16915
	.byte	6
	.word	16421
	.byte	6
	.word	303
	.byte	6
	.word	16915
	.byte	28
	.byte	'Os_ControlledCoreType_s',0,36,251,6,16,112,12
	.byte	'TrapInfo',0
	.word	14843
	.byte	8,2,35,0,12
	.byte	'lock_taskaccess',0
	.word	18314
	.byte	4,2,35,8,12
	.byte	'ReadyTasks',0
	.word	18319
	.byte	4,2,35,12,12
	.byte	'RunningISR',0
	.word	18324
	.byte	4,2,35,16,12
	.byte	'RunningTask',0
	.word	18329
	.byte	4,2,35,20,12
	.byte	'RunningTPMask',0
	.word	18334
	.byte	4,2,35,24,12
	.byte	'CurrentMeteredObject',0
	.word	15940
	.byte	4,2,35,28,12
	.byte	'IdleMeter',0
	.word	15737
	.byte	48,2,35,32,12
	.byte	'AppAccess',0
	.word	303
	.byte	1,2,35,80,12
	.byte	'AppOverride',0
	.word	18339
	.byte	1,2,35,81,12
	.byte	'GetStackValueAdjust',0
	.word	15014
	.byte	8,2,35,84,12
	.byte	'InErrorHook',0
	.word	303
	.byte	1,2,35,92,12
	.byte	'ChainTaskRef',0
	.word	18344
	.byte	4,2,35,96,12
	.byte	'GetStackUsageAdjust',0
	.word	15014
	.byte	8,2,35,100,12
	.byte	'InProtectionHook',0
	.word	303
	.byte	1,2,35,108,12
	.byte	'CoreIsActive',0
	.word	303
	.byte	1,2,35,109,12
	.byte	'InShutdownHook',0
	.word	303
	.byte	1,2,35,110,0,24
	.byte	'Os_ControlledCoreType',0,36,141,7,3
	.word	18349
	.byte	7
	.word	147
	.byte	9
	.word	16085
	.byte	7
	.word	18805
	.byte	9
	.word	16655
	.byte	7
	.word	18815
	.byte	7
	.word	15737
	.byte	28
	.byte	'Os_AnyCoreType_s',0,36,151,7,16,96,12
	.byte	'DisableAllImask',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'SuspendAllImask',0
	.word	147
	.byte	4,2,35,4,12
	.byte	'SuspendOSImask',0
	.word	147
	.byte	4,2,35,8,12
	.byte	'DisableAllCount',0
	.word	147
	.byte	4,2,35,12,12
	.byte	'SuspendAllCount',0
	.word	147
	.byte	4,2,35,16,12
	.byte	'SuspendOSCount',0
	.word	147
	.byte	4,2,35,20,12
	.byte	'RestartJumpBuf',0
	.word	14963
	.byte	68,2,35,24,12
	.byte	'Restartable',0
	.word	303
	.byte	1,2,35,92,0,24
	.byte	'Os_AnyCoreType',0,36,160,7,3
	.word	18830
	.byte	24
	.byte	'Can_TxObjPriorityClassType',0,37,219,3,16
	.word	147
	.byte	28
	.byte	'Can_TxHwObjectConfigType',0,37,231,3,16,8,12
	.byte	'MsgObjId',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'HwControllerId',0
	.word	303
	.byte	1,2,35,1,12
	.byte	'TxObjPriorityClass',0
	.word	147
	.byte	4,2,35,4,0,24
	.byte	'Can_TxHwObjectConfigType',0,37,252,3,3
	.word	19107
	.byte	28
	.byte	'Can_RxHwObjectConfigType',0,37,129,4,16,12,12
	.byte	'MaskRef',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'MsgId',0
	.word	147
	.byte	4,2,35,4,12
	.byte	'MsgObjId',0
	.word	303
	.byte	1,2,35,8,12
	.byte	'HwControllerId',0
	.word	303
	.byte	1,2,35,9,0,24
	.byte	'Can_RxHwObjectConfigType',0,37,147,4,3
	.word	19243
	.byte	14,4
	.word	303
	.byte	15,3,0,28
	.byte	'Can_ControllerMOMapConfigType',0,37,181,4,16,4,12
	.byte	'ControllerMOMap',0
	.word	19383
	.byte	4,2,35,0,0,24
	.byte	'Can_ControllerMOMapConfigType',0,37,184,4,3
	.word	19392
	.byte	28
	.byte	'Can_NPCRValueType',0,37,188,4,16,2,12
	.byte	'Can_NPCRValue',0
	.word	221
	.byte	2,2,35,0,0,24
	.byte	'Can_NPCRValueType',0,37,191,4,3
	.word	19493
	.byte	28
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,37,194,4,16,8,12
	.byte	'CanControllerBaudrate',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'CanControllerBaudrateCfg',0
	.word	221
	.byte	2,2,35,4,0,24
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,37,198,4,3
	.word	19568
	.byte	9
	.word	19568
	.byte	7
	.word	19733
	.byte	28
	.byte	'Can_BaudrateConfigPtrType',0,37,201,4,16,4,12
	.byte	'Can_kBaudrateConfigPtr',0
	.word	19738
	.byte	4,2,35,0,0,24
	.byte	'Can_BaudrateConfigPtrType',0,37,204,4,3
	.word	19743
	.byte	28
	.byte	'Can_EventHandlingType',0,37,226,4,16,4,12
	.byte	'CanEventType',0
	.word	19383
	.byte	4,2,35,0,0,24
	.byte	'Can_EventHandlingType',0,37,229,4,3
	.word	19843
	.byte	24
	.byte	'Rte_TransformerErrorCode',0,38,130,1,15
	.word	303
	.byte	24
	.byte	'Rte_TransformerClass',0,38,131,1,15
	.word	303
	.byte	11,38,168,1,9,12,12
	.byte	'in',0
	.word	15683
	.byte	4,2,35,0,12
	.byte	'out',0
	.word	15683
	.byte	4,2,35,4,12
	.byte	'used',0
	.word	221
	.byte	2,2,35,8,12
	.byte	'lost_data',0
	.word	303
	.byte	1,2,35,10,0,24
	.byte	'Rte_QDynType',0,38,173,1,3
	.word	19989
	.byte	25,38,175,1,9,4,26
	.byte	'RTE_DRA',0,0,26
	.byte	'RTE_WOWP',0,1,26
	.byte	'RTE_TASK',0,2,26
	.byte	'RTE_ARE',0,3,26
	.byte	'RTE_EV',0,4,26
	.byte	'RTE_MSI',0,5,0,24
	.byte	'Rte_NotificationType',0,38,182,1,3
	.word	20076
	.byte	14,128,8
	.word	303
	.byte	15,255,7,0,24
	.byte	'Impl_NVM_DstPtrType_1024',0,39,50,15
	.word	20174
	.byte	24
	.byte	'CanIf_u32_impl',0,39,69,16
	.word	147
	.byte	24
	.byte	'CanIf_u16_impl',0,39,71,16
	.word	221
	.byte	24
	.byte	'CanIf_u8_impl',0,39,73,15
	.word	303
	.byte	24
	.byte	'CanIf_ControllerModeType_Enum_impl',0,39,88,15
	.word	303
	.byte	24
	.byte	'CanIf_PduModeType_Enum_impl',0,39,90,15
	.word	303
	.byte	11,39,92,9,2,12
	.byte	'DeviceMode',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'ChannelMode',0
	.word	303
	.byte	1,2,35,1,0,24
	.byte	'CanIf_ControllerStateType_struct_impl',0,39,95,3
	.word	20365
	.byte	24
	.byte	'CanIf_NotifStatusType_Enum_impl',0,39,100,15
	.word	303
	.byte	24
	.byte	'CanSM_boolean_Impl',0,39,120,15
	.word	303
	.byte	24
	.byte	'CanSM_u8_Impl',0,39,123,15
	.word	303
	.byte	24
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,39,128,1,15
	.word	303
	.byte	24
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,39,132,1,15
	.word	303
	.byte	24
	.byte	'CanSM_u16_Impl',0,39,136,1,16
	.word	221
	.byte	24
	.byte	'CanSM_TimerStateType_Enum_impl',0,39,138,1,15
	.word	303
	.byte	11,39,140,1,9,4,12
	.byte	'cntTick_u16',0
	.word	221
	.byte	2,2,35,0,12
	.byte	'stTimer',0
	.word	303
	.byte	1,2,35,2,0,24
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,39,143,1,3
	.word	20706
	.byte	24
	.byte	'Com_impl_u16',0,39,154,1,16
	.word	221
	.byte	24
	.byte	'Com_impl_u8',0,39,157,1,15
	.word	303
	.byte	24
	.byte	'ComM_uint32_Impl',0,39,173,1,16
	.word	147
	.byte	24
	.byte	'ComM_uint16_Impl',0,39,175,1,16
	.word	221
	.byte	24
	.byte	'ComM_uint8_Impl',0,39,177,1,15
	.word	303
	.byte	24
	.byte	'ComM_bool_Impl',0,39,179,1,15
	.word	303
	.byte	11,39,181,1,9,24,12
	.byte	'ChannelState_e',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'LightTimeoutCtr_u32',0
	.word	147
	.byte	4,2,35,4,12
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	221
	.byte	2,2,35,8,12
	.byte	'ChannelMode_u8',0
	.word	303
	.byte	1,2,35,10,12
	.byte	'BusSmMode_u8',0
	.word	303
	.byte	1,2,35,11,12
	.byte	'UserRequestCtr_u8',0
	.word	303
	.byte	1,2,35,12,12
	.byte	'PassiveRequestState_u8',0
	.word	303
	.byte	1,2,35,13,12
	.byte	'PncRequestCtr_u8',0
	.word	303
	.byte	1,2,35,14,12
	.byte	'InhibitionReqStatus_u8',0
	.word	303
	.byte	1,2,35,15,12
	.byte	'NmNetworkRequestStatus_b',0
	.word	303
	.byte	1,2,35,16,12
	.byte	'DiagnosticRequestState_b',0
	.word	303
	.byte	1,2,35,17,12
	.byte	'CommunicationAllowed_b',0
	.word	303
	.byte	1,2,35,18,12
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	303
	.byte	1,2,35,19,12
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	303
	.byte	1,2,35,20,12
	.byte	'NmNetworkModeStatus_b',0
	.word	303
	.byte	1,2,35,21,0,24
	.byte	'ComM_ChannelStruct_Impl',0,39,197,1,3
	.word	20938
	.byte	11,39,206,1,9,10,12
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	221
	.byte	2,2,35,0,12
	.byte	'LimitToNoComCtr_u16',0
	.word	221
	.byte	2,2,35,2,12
	.byte	'RequestedUserMode_t',0
	.word	303
	.byte	1,2,35,4,12
	.byte	'IndicatedUserMode_t',0
	.word	303
	.byte	1,2,35,5,12
	.byte	'numChannelsInFullCom_u8',0
	.word	303
	.byte	1,2,35,6,12
	.byte	'numChannelsInSilentCom_u8',0
	.word	303
	.byte	1,2,35,7,12
	.byte	'numChannelsInNoCom_u8',0
	.word	303
	.byte	1,2,35,8,0,24
	.byte	'ComM_UserStruct_Impl',0,39,214,1,3
	.word	21442
	.byte	24
	.byte	'Dcm_IOOperationResponseType',0,39,252,1,15
	.word	303
	.byte	24
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	39,138,2,15
	.word	303
	.byte	24
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,39,146,2,15
	.word	303
	.byte	24
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,39,150,2,15
	.word	303
	.byte	24
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,39,154,2,15
	.word	303
	.byte	24
	.byte	'Dem_DTCFormatType',0,39,160,2,15
	.word	303
	.byte	24
	.byte	'Dem_DTCOriginType',0,39,162,2,15
	.word	303
	.byte	24
	.byte	'Dem_EventIdType',0,39,168,2,16
	.word	221
	.byte	24
	.byte	'Dem_EventStatusType',0,39,170,2,15
	.word	303
	.byte	24
	.byte	'Dem_InitMonitorReasonType',0,39,176,2,15
	.word	303
	.byte	24
	.byte	'Dem_OperationCycleIdType',0,39,179,2,15
	.word	303
	.byte	24
	.byte	'Dem_UdsStatusByteType',0,39,185,2,15
	.word	303
	.byte	24
	.byte	'NvM_BlockIdType',0,39,215,2,16
	.word	221
	.byte	24
	.byte	'NvM_RequestResultType',0,39,225,2,15
	.word	303
	.byte	24
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,39,243,3,34
	.word	20185
	.byte	14,128,8
	.word	303
	.byte	15,255,7,0,24
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,39,246,3,34
	.word	20185
	.byte	24
	.byte	'Dem_DTCGroupIdType',0,40,49,15
	.word	303
	.byte	24
	.byte	'Dem_DtcIdType',0,40,50,16
	.word	221
	.byte	24
	.byte	'Dem_ClientIdType',0,40,53,15
	.word	303
	.byte	24
	.byte	'Dem_DtcCodeType',0,40,55,16
	.word	147
	.byte	24
	.byte	'Dem_boolean_least',0,40,60,17
	.word	303
	.byte	24
	.byte	'Dem_EventCategoryType',0,40,62,15
	.word	303
	.byte	24
	.byte	'Dem_FilterWithSeverityType',0,40,203,1,15
	.word	303
	.byte	24
	.byte	'Dem_DTCSeverityType',0,40,217,1,15
	.word	303
	.byte	24
	.byte	'Dem_FilterForFDCType',0,40,229,1,15
	.word	303
	.byte	24
	.byte	'Dem_ReturnGetStatusOfDTCType',0,40,246,1,15
	.word	303
	.byte	24
	.byte	'Dem_DebugDataType',0,40,131,3,16
	.word	147
	.byte	24
	.byte	'Dem_DTCKindType',0,40,145,3,16
	.word	303
	.byte	24
	.byte	'Dem_TriggerType',0,40,167,3,15
	.word	303
	.byte	24
	.byte	'rba_BswSrv_uint64',0,1,66,28
	.word	14239
	.byte	24
	.byte	'Dem_EventIdIterator',0,4,27,22
	.word	768
	.byte	24
	.byte	'Dem_MapDtcIdToEventIdType',0,4,126,25
	.word	221
	.byte	14,10
	.word	221
	.byte	15,4,0,9
	.word	22976
	.byte	34
	.byte	'Dem_MapDtcIdToEventId',0,4,139,1,41
	.word	22985
	.byte	1,1,14,12
	.word	221
	.byte	15,5,0,9
	.word	23023
	.byte	34
	.byte	'Dem_MapEventIdToDtcId',0,4,140,1,41
	.word	23032
	.byte	1,1,24
	.byte	'Dem_DtcIdIterator',0,4,197,1,22
	.word	768
	.byte	24
	.byte	'Dem_DtcGroupIdIterator',0,4,230,1,21
	.word	768
	.byte	24
	.byte	'Dem_EventIdListIterator',0,4,174,2,3
	.word	1305
	.byte	24
	.byte	'Dem_DtcIdListIterator',0,4,216,2,3
	.word	10591
	.byte	25,41,31,9,4,26
	.byte	'MEMIF_JOB_OK',0,0,26
	.byte	'MEMIF_JOB_FAILED',0,1,26
	.byte	'MEMIF_JOB_PENDING',0,2,26
	.byte	'MEMIF_JOB_CANCELED',0,3,26
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,26
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,24
	.byte	'MemIf_JobResultType',0,41,39,2
	.word	23193
	.byte	25,42,49,9,4,26
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,26
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,26
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,26
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,26
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,26
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,26
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,24
	.byte	'NvM_Prv_Activities_ten',0,42,58,3
	.word	23351
	.byte	25,42,104,9,4,26
	.byte	'NvM_Prv_idJob_Idle_e',0,0,26
	.byte	'NvM_Prv_idJob_Read_e',0,1,26
	.byte	'NvM_Prv_idJob_Write_e',0,2,26
	.byte	'NvM_Prv_idJob_Erase_e',0,3,26
	.byte	'NvM_Prv_idJob_Restore_e',0,4,26
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,26
	.byte	'NvM_Prv_idJob_Validate_e',0,6,26
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,26
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,26
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,26
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,26
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,26
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,26
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,24
	.byte	'NvM_Prv_idJob_ten',0,42,115,3
	.word	23592
	.byte	24
	.byte	'NvM_Prv_ServiceBit_tuo',0,42,168,1,16
	.word	221
	.byte	24
	.byte	'NvM_Prv_idService_tuo',0,42,173,1,15
	.word	303
	.byte	24
	.byte	'NvM_Prv_idQueue_tuo',0,42,206,1,15
	.word	303
	.byte	11,42,210,1,9,12,12
	.byte	'idService_uo',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'idBlock_uo',0
	.word	221
	.byte	2,2,35,2,12
	.byte	'ServiceBit_uo',0
	.word	221
	.byte	2,2,35,4,12
	.byte	'BlockData_pv',0
	.word	15683
	.byte	4,2,35,8,0,24
	.byte	'NvM_Prv_QueueEntry_tst',0,42,225,1,3
	.word	24149
	.byte	11,42,227,1,9,20,12
	.byte	'idJob_en',0
	.word	23592
	.byte	4,2,35,0,12
	.byte	'idBlock_uo',0
	.word	221
	.byte	2,2,35,4,12
	.byte	'RamBlock_pu8',0
	.word	1686
	.byte	4,2,35,8,12
	.byte	'idxDataset_u8',0
	.word	303
	.byte	1,2,35,12,12
	.byte	'Result_en',0
	.word	23193
	.byte	4,2,35,16,0,24
	.byte	'NvM_Prv_JobData_tst',0,42,240,1,3
	.word	24275
	.byte	24
	.byte	'Dem_EvtStateType',0,43,151,1,15
	.word	303
	.byte	24
	.byte	'Dem_DtcStateType',0,44,47,15
	.word	303
	.byte	11,5,47,9,12,12
	.byte	'DtcCode',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'Severity',0
	.word	303
	.byte	1,2,35,4,12
	.byte	'Kind',0
	.word	303
	.byte	1,2,35,5,12
	.byte	'DtcCode_Is_Index',0
	.word	303
	.byte	1,2,35,6,12
	.byte	'Func_Unit',0
	.word	303
	.byte	1,2,35,7,12
	.byte	'Nv_Storage',0
	.word	303
	.byte	1,2,35,8,0,24
	.byte	'Dem_Cfg_DtcType',0,5,55,3
	.word	24464
	.byte	14,60
	.word	24464
	.byte	15,4,0,9
	.word	24608
	.byte	34
	.byte	'Dem_Cfg_Dtc',0,5,59,30
	.word	24617
	.byte	1,1,24
	.byte	'Dem_EvMemOccurrenceCounterType',0,20,90,21
	.word	303
	.byte	24
	.byte	'Dem_EvMemAgingCounterType',0,20,99,21
	.word	303
	.byte	24
	.byte	'Dem_EvMemHdrType',0,20,141,1,4
	.word	6541
	.byte	24
	.byte	'Dem_EvMemEventMemoryType',0,20,213,1,4
	.word	6571
	.byte	24
	.byte	'Dem_OperationCycleList',0,45,23,15
	.word	303
	.byte	14,5
	.word	303
	.byte	15,4,0,14,10
	.word	221
	.byte	15,4,0,11,46,9,9,18,12
	.byte	'OperationCycleStates',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'OperationCycleQualified',0
	.word	303
	.byte	1,2,35,1,12
	.byte	'Overflow',0
	.word	24808
	.byte	5,2,35,2,12
	.byte	'DtcIdsByOccurrenceTime',0
	.word	24817
	.byte	10,2,35,8,0,24
	.byte	'Dem_GenericNvDataType',0,46,24,4
	.word	24826
	.byte	24
	.byte	'Dem_NvmBlockIdType',0,47,14,34
	.word	303
	.byte	13,47,16,9,20,12
	.byte	'evMemData',0
	.word	6571
	.byte	20,2,35,0,12
	.byte	'genericNvData',0
	.word	24826
	.byte	18,2,35,0,0,24
	.byte	'Dem_NvMStorageBufferData',0,47,37,3
	.word	25002
	.byte	24
	.byte	'Dem_NvmBlockStatusType',0,47,59,15
	.word	303
	.byte	14,5
	.word	303
	.byte	15,4,0,24
	.byte	'Dem_NvMBlockStatusDoubleBufferType',0,47,70,32
	.word	25114
	.byte	24
	.byte	'Dem_NvmResultType',0,47,78,31
	.word	303
	.byte	14,35
	.word	25123
	.byte	15,6,0,34
	.byte	'Dem_NvMBlockStatusDoubleBuffer',0,9,19,1
	.word	25192
	.byte	1,1,14,5
	.word	303
	.byte	15,4,0,24
	.byte	'Dem_ClientClearMachineType',0,10,37,3
	.word	10623
	.byte	24
	.byte	'Dem_EnCoList',0,48,31,15
	.word	303
	.byte	24
	.byte	'Dem_StoCoList',0,49,32,15
	.word	303
	.byte	7
	.word	303
	.byte	35
	.word	303
	.byte	1,1,31
	.word	25329
	.byte	0,7
	.word	25334
	.byte	24
	.byte	'Dem_EvtClearAllowedFncType',0,15,12,26
	.word	25347
	.byte	11,15,31,9,2,12
	.byte	'dataDataContainer_2',0
	.word	221
	.byte	2,2,35,0,0,24
	.byte	'Dem_EvtParam_16Type',0,15,34,3
	.word	25387
	.byte	14,12
	.word	25387
	.byte	15,5,0,9
	.word	25450
	.byte	34
	.byte	'Dem_EvtParam_16',0,15,38,34
	.word	25459
	.byte	1,1,35
	.word	303
	.byte	1,1,31
	.word	303
	.byte	0,7
	.word	25490
	.byte	24
	.byte	'Dem_InitMForEAllowedFncType',0,16,38,27
	.word	25503
	.byte	11,16,46,9,4,12
	.byte	'state',0
	.word	303
	.byte	1,2,35,0,12
	.byte	'debounceLevel',0
	.word	5893
	.byte	2,2,35,2,0,24
	.byte	'Dem_EvtState',0,16,50,3
	.word	25544
	.byte	14,24
	.word	25544
	.byte	15,5,0,34
	.byte	'Dem_AllEventsState',0,16,152,1,1
	.word	25609
	.byte	1,1,9
	.word	15677
	.byte	7
	.word	25648
	.byte	35
	.word	768
	.byte	1,1,31
	.word	221
	.byte	31
	.word	25329
	.byte	31
	.word	25653
	.byte	31
	.word	221
	.byte	0,7
	.word	25658
	.byte	24
	.byte	'Dem_DebFilter',0,50,12,23
	.word	25686
	.byte	2
	.byte	'long int',0,4,5,7
	.word	25713
	.byte	30,1,1,31
	.word	25653
	.byte	31
	.word	221
	.byte	31
	.word	25725
	.byte	31
	.word	25725
	.byte	0,7
	.word	25730
	.byte	24
	.byte	'Dem_DebGetLimits',0,50,13,23
	.word	25754
	.byte	30,1,1,31
	.word	221
	.byte	31
	.word	25653
	.byte	31
	.word	221
	.byte	0,7
	.word	25784
	.byte	24
	.byte	'Dem_DebCyclic',0,50,14,16
	.word	25803
	.byte	24
	.byte	'Dem_DebouncedActionType',0,50,35,21
	.word	768
	.byte	13,51,37,9,4,12
	.byte	'EnforceAlignment',0
	.word	147
	.byte	4,2,35,0,12
	.byte	'Buffer',0
	.word	19383
	.byte	4,2,35,0,0,24
	.byte	'Dem_EvBuffEnvDataAlignedType',0,51,47,3
	.word	25862
	.byte	11,51,49,9,16,12
	.byte	'envData',0
	.word	25862
	.byte	4,2,35,0,12
	.byte	'eventType',0
	.word	303
	.byte	1,2,35,4,12
	.byte	'eventId',0
	.word	221
	.byte	2,2,35,6,12
	.byte	'debug0',0
	.word	147
	.byte	4,2,35,8,12
	.byte	'debug1',0
	.word	147
	.byte	4,2,35,12,0,24
	.byte	'Dem_EvBuffEvent',0,51,75,2
	.word	25947
	.byte	14,100
	.word	6571
	.byte	15,4,0,34
	.byte	'Dem_EvMemEventMemory',0,19,87,1
	.word	26062
	.byte	1,1,11,24,29,9,1,12
	.byte	'state',0
	.word	303
	.byte	1,2,35,0,0,24
	.byte	'Dem_DtcState',0,24,31,3
	.word	26102
	.byte	14,5
	.word	26102
	.byte	15,4,0,34
	.byte	'Dem_AllDTCsState',0,24,92,5
	.word	26144
	.byte	1,1,14,6
	.word	303
	.byte	15,5,0,34
	.byte	'Dem_AllEventsStatusByte',0,25,22,1
	.word	26180
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L182:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,53,0,73,19,0,0,7,15,0,73
	.byte	19,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,9,38,0,73,19,0,0,10,11,1,0,0,11,19,1,58,15,59
	.byte	15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56,9,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15,73
	.byte	19,0,0,15,33,0,47,15,0,0,16,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,17,46,1,49,19
	.byte	0,0,18,5,0,49,19,0,0,19,29,1,49,19,0,0,20,11,0,49,19,0,0,21,11,1,49,19,0,0,22,46,1,3,8,58,15,59,15,57
	.byte	15,54,15,39,12,63,12,60,12,0,0,23,21,0,54,15,0,0,24,22,0,3,8,58,15,59,15,57,15,73,19,0,0,25,4,1,58,15
	.byte	59,15,57,15,11,15,0,0,26,40,0,3,8,28,13,0,0,27,21,0,54,15,39,12,0,0,28,19,1,3,8,58,15,59,15,57,15,11,15
	.byte	0,0,29,59,0,3,8,0,0,30,21,1,54,15,39,12,0,0,31,5,0,73,19,0,0,32,4,1,3,8,58,15,59,15,57,15,11,15,0,0,33
	.byte	21,0,73,19,54,15,39,12,0,0,34,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,35,21,1,73,19,54,15,39
	.byte	12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L183:
	.word	.L590-.L589
.L589:
	.half	3
	.word	.L592-.L591
.L591:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L592:
.L590:
	.sdecl	'.debug_info',debug,cluster('Dem_GetStatusOfDTC')
	.sect	'.debug_info'
.L184:
	.word	999
	.half	3
	.word	.L185
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L187,.L186
	.byte	2
	.word	.L180
	.byte	3
	.byte	'Dem_GetStatusOfDTC',0,1,252,1,30
	.word	.L221
	.byte	1,1,1
	.word	.L179,.L222,.L178
	.byte	4
	.byte	'DTC',0,1,252,1,56
	.word	.L223,.L224
	.byte	4
	.byte	'DTCKind',0,1,253,1,19
	.word	.L221,.L225
	.byte	4
	.byte	'DTCOrigin',0,1,254,1,21
	.word	.L221,.L226
	.byte	4
	.byte	'DTCStatus',0,1,255,1,10
	.word	.L227,.L228
	.byte	5
	.word	.L179,.L222
	.byte	6
	.byte	'DtcStatusIsValid',0,1,129,2,10
	.word	.L221,.L229
	.byte	6
	.byte	'dtcId',0,1,131,2,16
	.word	.L230,.L231
	.byte	7
	.word	.L232,.L233,.L234
	.byte	8
	.word	.L235,.L236
	.byte	9
	.word	.L237,.L233,.L234
	.byte	7
	.word	.L238,.L239,.L240
	.byte	8
	.word	.L241,.L242
	.byte	10
	.word	.L243,.L239,.L240
	.byte	0,7
	.word	.L244,.L240,.L125
	.byte	8
	.word	.L245,.L246
	.byte	9
	.word	.L247,.L240,.L125
	.byte	7
	.word	.L248,.L249,.L127
	.byte	8
	.word	.L250,.L251
	.byte	8
	.word	.L252,.L253
	.byte	9
	.word	.L254,.L249,.L127
	.byte	7
	.word	.L255,.L249,.L126
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	10
	.word	.L260,.L249,.L126
	.byte	0,0,0,0,0,0,0,7
	.word	.L261,.L262,.L134
	.byte	8
	.word	.L263,.L264
	.byte	10
	.word	.L265,.L262,.L134
	.byte	0,7
	.word	.L266,.L267,.L268
	.byte	8
	.word	.L269,.L270
	.byte	8
	.word	.L271,.L272
	.byte	9
	.word	.L273,.L267,.L268
	.byte	6
	.byte	'eventId',0,2,156,2,21
	.word	.L230,.L274
	.byte	7
	.word	.L275,.L267,.L138
	.byte	8
	.word	.L276,.L277
	.byte	9
	.word	.L278,.L267,.L138
	.byte	7
	.word	.L279,.L267,.L137
	.byte	8
	.word	.L280,.L281
	.byte	10
	.word	.L282,.L267,.L137
	.byte	0,0,0,7
	.word	.L283,.L138,.L153
	.byte	8
	.word	.L284,.L285
	.byte	8
	.word	.L286,.L287
	.byte	9
	.word	.L288,.L138,.L153
	.byte	7
	.word	.L289,.L140,.L139
	.byte	8
	.word	.L290,.L291
	.byte	9
	.word	.L292,.L140,.L139
	.byte	7
	.word	.L293,.L294,.L142
	.byte	8
	.word	.L295,.L296
	.byte	8
	.word	.L297,.L298
	.byte	9
	.word	.L299,.L294,.L142
	.byte	7
	.word	.L300,.L294,.L141
	.byte	8
	.word	.L301,.L302
	.byte	8
	.word	.L303,.L304
	.byte	10
	.word	.L305,.L294,.L141
	.byte	0,0,0,0,0,7
	.word	.L306,.L146,.L147
	.byte	8
	.word	.L307,.L308
	.byte	10
	.word	.L309,.L146,.L147
	.byte	0,7
	.word	.L310,.L150,.L151
	.byte	8
	.word	.L311,.L312
	.byte	10
	.word	.L313,.L150,.L151
	.byte	0,0,0,0,0,7
	.word	.L314,.L159,.L160
	.byte	8
	.word	.L315,.L316
	.byte	10
	.word	.L317,.L159,.L160
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetStatusOfDTC')
	.sect	'.debug_abbrev'
.L185:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetStatusOfDTC')
	.sect	'.debug_line'
.L186:
	.word	.L594-.L593
.L593:
	.half	3
	.word	.L596-.L595
.L595:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemApi.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0,0
.L596:
	.byte	5,30,7,0,5,2
	.word	.L179
	.byte	3,251,1,1,5,46,9
	.half	.L579-.L179
	.byte	3,7,1,4,2,5,13,9
	.half	.L233-.L579
	.byte	3,138,127,1,4,3,5,21,9
	.half	.L239-.L233
	.byte	3,13,1,5,12,9
	.half	.L597-.L239
	.byte	1,5,28,7,9
	.half	.L598-.L597
	.byte	1,5,21,9
	.half	.L599-.L598
	.byte	1,5,4,9
	.half	.L122-.L599
	.byte	1,4,2,5,13,9
	.half	.L124-.L122
	.byte	3,114,1,5,35,7,9
	.half	.L240-.L124
	.byte	3,109,1,5,51,9
	.half	.L600-.L240
	.byte	1,5,58,9
	.half	.L601-.L600
	.byte	1,5,66,9
	.half	.L602-.L601
	.byte	1,4,4,5,28,9
	.half	.L249-.L602
	.byte	3,69,1,5,47,9
	.half	.L603-.L249
	.byte	1,5,5,9
	.half	.L604-.L603
	.byte	1,5,73,9
	.half	.L126-.L604
	.byte	3,4,1,5,5,9
	.half	.L605-.L126
	.byte	1,4,2,9
	.half	.L127-.L605
	.byte	3,55,1,5,13,9
	.half	.L128-.L127
	.byte	3,20,1,5,5,9
	.half	.L125-.L128
	.byte	3,127,1,4,1,5,7,9
	.half	.L130-.L125
	.byte	3,250,0,1,5,10,7,9
	.half	.L234-.L130
	.byte	3,2,1,5,3,9
	.half	.L580-.L234
	.byte	1,5,38,9
	.half	.L131-.L580
	.byte	3,3,1,4,5,5,8,9
	.half	.L262-.L131
	.byte	3,172,126,1,5,5,9
	.half	.L606-.L262
	.byte	1,5,22,7,9
	.half	.L607-.L606
	.byte	3,2,1,5,20,9
	.half	.L608-.L607
	.byte	1,5,17,9
	.half	.L133-.L608
	.byte	3,3,1,5,28,9
	.half	.L609-.L133
	.byte	1,5,5,9
	.half	.L610-.L609
	.byte	3,127,1,4,1,5,10,9
	.half	.L134-.L610
	.byte	3,208,1,1,5,16,7,9
	.half	.L611-.L134
	.byte	3,2,1,5,9,9
	.half	.L581-.L611
	.byte	1,5,31,9
	.half	.L135-.L581
	.byte	3,3,1,4,3,5,11,9
	.half	.L267-.L135
	.byte	3,152,127,1,5,32,9
	.half	.L612-.L267
	.byte	1,5,4,9
	.half	.L583-.L612
	.byte	1,9
	.half	.L137-.L583
	.byte	3,9,1,4,2,5,10,9
	.half	.L138-.L137
	.byte	3,218,0,1,4,6,5,32,7,9
	.half	.L140-.L138
	.byte	3,195,126,1,5,47,9
	.half	.L613-.L140
	.byte	1,5,53,9
	.half	.L614-.L613
	.byte	1,5,75,9
	.half	.L584-.L614
	.byte	1,4,7,5,29,9
	.half	.L294-.L584
	.byte	3,112,1,5,46,9
	.half	.L615-.L294
	.byte	1,5,5,9
	.half	.L616-.L615
	.byte	1,5,74,9
	.half	.L141-.L616
	.byte	3,5,1,5,5,9
	.half	.L617-.L141
	.byte	1,4,6,5,2,9
	.half	.L142-.L617
	.byte	3,11,1,4,2,5,93,9
	.half	.L143-.L142
	.byte	3,189,1,1,5,8,7,9
	.half	.L139-.L143
	.byte	3,1,1,4,6,5,2,7,9
	.half	.L146-.L139
	.byte	3,201,126,1,4,2,5,95,9
	.half	.L147-.L146
	.byte	3,183,1,1,5,8,7,9
	.half	.L145-.L147
	.byte	3,1,1,4,6,5,2,7,9
	.half	.L150-.L145
	.byte	3,207,126,1,4,2,5,89,9
	.half	.L151-.L150
	.byte	3,177,1,1,5,3,7,9
	.half	.L144-.L151
	.byte	3,8,1,5,2,9
	.half	.L149-.L144
	.byte	3,2,1,5,5,9
	.half	.L153-.L149
	.byte	3,6,1,4,1,5,7,9
	.half	.L155-.L153
	.byte	3,115,1,5,10,7,9
	.half	.L268-.L155
	.byte	3,2,1,5,3,9
	.half	.L582-.L268
	.byte	1,5,6,9
	.half	.L156-.L582
	.byte	3,3,1,4,8,5,20,7,9
	.half	.L159-.L156
	.byte	3,172,126,1,5,9,9
	.half	.L618-.L159
	.byte	1,5,20,9
	.half	.L619-.L618
	.byte	1,5,26,9
	.half	.L620-.L619
	.byte	1,5,2,9
	.half	.L621-.L620
	.byte	1,4,1,5,53,9
	.half	.L160-.L621
	.byte	3,212,1,1,5,10,7,9
	.half	.L622-.L160
	.byte	3,2,1,5,3,9
	.half	.L585-.L622
	.byte	1,5,57,9
	.half	.L158-.L585
	.byte	3,6,1,5,69,9
	.half	.L623-.L158
	.byte	1,5,13,9
	.half	.L586-.L623
	.byte	1,5,7,9
	.half	.L624-.L586
	.byte	3,1,1,5,10,9
	.half	.L625-.L624
	.byte	3,2,1,5,3,9
	.half	.L626-.L625
	.byte	1,5,9,9
	.half	.L163-.L626
	.byte	3,2,1,5,2,9
	.half	.L627-.L163
	.byte	1,5,1,9
	.half	.L132-.L627
	.byte	3,1,1,7,9
	.half	.L188-.L132
	.byte	0,1,1
.L594:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetStatusOfDTC')
	.sect	'.debug_ranges'
.L187:
	.word	-1,.L179,0,.L188-.L179,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcStatusByteRetrieve')
	.sect	'.debug_info'
.L189:
	.word	897
	.half	3
	.word	.L190
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L192,.L191
	.byte	2
	.word	.L180
	.byte	3
	.byte	'Dem_DtcStatusByteRetrieve',0,1,55,7
	.word	.L221
	.byte	1,1,1
	.word	.L167,.L318,.L166
	.byte	4
	.byte	'dtcId',0,1,55,48
	.word	.L230,.L319
	.byte	5
	.word	.L167,.L318
	.byte	6
	.byte	'eventIt',0,1,57,26
	.word	.L320,.L321
	.byte	6
	.byte	'eventId',0,1,58,18
	.word	.L230,.L322
	.byte	6
	.byte	'isobyte_OR',0,1,59,8
	.word	.L221,.L323
	.byte	6
	.byte	'isoByte',0,1,59,48
	.word	.L221,.L324
	.byte	6
	.byte	'isEventAssigned',0,1,60,20
	.word	.L221,.L325
	.byte	7
	.word	.L232,.L326,.L327
	.byte	8
	.word	.L235,.L328
	.byte	9
	.word	.L237,.L326,.L327
	.byte	7
	.word	.L238,.L329,.L330
	.byte	8
	.word	.L241,.L331
	.byte	10
	.word	.L243,.L329,.L330
	.byte	0,7
	.word	.L244,.L330,.L5
	.byte	8
	.word	.L245,.L332
	.byte	9
	.word	.L247,.L330,.L5
	.byte	7
	.word	.L248,.L333,.L7
	.byte	8
	.word	.L250,.L334
	.byte	8
	.word	.L252,.L335
	.byte	9
	.word	.L254,.L333,.L7
	.byte	7
	.word	.L255,.L333,.L6
	.byte	8
	.word	.L256,.L336
	.byte	8
	.word	.L258,.L337
	.byte	10
	.word	.L260,.L333,.L6
	.byte	0,0,0,0,0,0,0,7
	.word	.L338,.L339,.L340
	.byte	8
	.word	.L341,.L342
	.byte	8
	.word	.L343,.L344
	.byte	9
	.word	.L345,.L339,.L340
	.byte	7
	.word	.L238,.L339,.L346
	.byte	8
	.word	.L241,.L331
	.byte	10
	.word	.L243,.L339,.L346
	.byte	0,0,0,7
	.word	.L347,.L348,.L18
	.byte	8
	.word	.L349,.L350
	.byte	10
	.word	.L351,.L348,.L18
	.byte	0,7
	.word	.L352,.L18,.L353
	.byte	8
	.word	.L354,.L355
	.byte	9
	.word	.L356,.L18,.L353
	.byte	7
	.word	.L248,.L357,.L20
	.byte	8
	.word	.L250,.L334
	.byte	8
	.word	.L252,.L335
	.byte	9
	.word	.L254,.L357,.L20
	.byte	7
	.word	.L255,.L357,.L19
	.byte	8
	.word	.L256,.L336
	.byte	8
	.word	.L258,.L337
	.byte	10
	.word	.L260,.L357,.L19
	.byte	0,0,0,0,0,7
	.word	.L358,.L353,.L23
	.byte	8
	.word	.L359,.L360
	.byte	10
	.word	.L361,.L353,.L23
	.byte	0,7
	.word	.L362,.L363,.L16
	.byte	8
	.word	.L364,.L365
	.byte	10
	.word	.L366,.L363,.L16
	.byte	0,7
	.word	.L367,.L368,.L24
	.byte	8
	.word	.L369,.L370
	.byte	10
	.word	.L371,.L368,.L24
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcStatusByteRetrieve')
	.sect	'.debug_abbrev'
.L190:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17
	.byte	1,18,1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DtcStatusByteRetrieve')
	.sect	'.debug_line'
.L191:
	.word	.L629-.L628
.L628:
	.half	3
	.word	.L631-.L630
.L630:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0,0
.L631:
	.byte	5,7,7,0,5,2
	.word	.L167
	.byte	3,54,1,5,19,9
	.half	.L519-.L167
	.byte	3,4,1,5,56,9
	.half	.L520-.L519
	.byte	1,5,36,9
	.half	.L521-.L520
	.byte	3,1,1,4,2,5,13,9
	.half	.L326-.L521
	.byte	3,209,0,1,4,3,5,21,9
	.half	.L329-.L326
	.byte	3,13,1,5,12,9
	.half	.L632-.L329
	.byte	1,5,28,7,9
	.half	.L633-.L632
	.byte	1,5,21,9
	.half	.L634-.L633
	.byte	1,5,4,9
	.half	.L2-.L634
	.byte	1,4,2,5,13,9
	.half	.L4-.L2
	.byte	3,114,1,5,35,7,9
	.half	.L330-.L4
	.byte	3,109,1,5,51,9
	.half	.L635-.L330
	.byte	1,5,58,9
	.half	.L636-.L635
	.byte	1,5,66,9
	.half	.L637-.L636
	.byte	1,4,4,5,28,9
	.half	.L333-.L637
	.byte	3,69,1,5,47,9
	.half	.L638-.L333
	.byte	1,5,5,9
	.half	.L639-.L638
	.byte	1,5,73,9
	.half	.L6-.L639
	.byte	3,4,1,5,5,9
	.half	.L640-.L6
	.byte	1,4,2,9
	.half	.L7-.L640
	.byte	3,55,1,5,13,9
	.half	.L8-.L7
	.byte	3,20,1,5,5,9
	.half	.L5-.L8
	.byte	3,127,1,4,1,5,2,9
	.half	.L10-.L5
	.byte	3,178,127,1,5,45,7,9
	.half	.L327-.L10
	.byte	3,2,1,4,3,5,21,9
	.half	.L339-.L327
	.byte	3,218,0,1,5,12,9
	.half	.L641-.L339
	.byte	1,5,28,7,9
	.half	.L642-.L641
	.byte	1,5,21,9
	.half	.L643-.L642
	.byte	1,5,4,9
	.half	.L12-.L643
	.byte	1,5,9,9
	.half	.L14-.L12
	.byte	3,154,1,1,5,5,7,9
	.half	.L346-.L14
	.byte	3,2,1,5,14,9
	.half	.L15-.L346
	.byte	3,3,1,5,35,9
	.half	.L644-.L15
	.byte	1,5,11,9
	.half	.L645-.L644
	.byte	1,5,44,9
	.half	.L646-.L645
	.byte	3,1,1,5,12,9
	.half	.L647-.L646
	.byte	1,4,1,5,45,9
	.half	.L340-.L647
	.byte	3,135,126,1,5,46,9
	.half	.L17-.L340
	.byte	3,3,1,4,3,5,33,9
	.half	.L348-.L17
	.byte	3,137,2,1,5,29,9
	.half	.L648-.L348
	.byte	1,5,4,9
	.half	.L522-.L648
	.byte	1,4,5,5,33,9
	.half	.L18-.L522
	.byte	3,169,2,1,5,51,9
	.half	.L649-.L18
	.byte	1,5,60,9
	.half	.L650-.L649
	.byte	1,5,68,9
	.half	.L651-.L650
	.byte	1,4,4,5,28,9
	.half	.L357-.L651
	.byte	3,200,123,1,5,47,9
	.half	.L652-.L357
	.byte	1,5,5,9
	.half	.L653-.L652
	.byte	1,5,73,9
	.half	.L19-.L653
	.byte	3,4,1,5,5,9
	.half	.L654-.L19
	.byte	1,4,5,5,3,9
	.half	.L20-.L654
	.byte	3,180,4,1,4,1,5,9,9
	.half	.L21-.L20
	.byte	3,208,123,1,4,6,5,12,7,9
	.half	.L353-.L21
	.byte	3,42,1,5,35,9
	.half	.L655-.L353
	.byte	1,5,5,9
	.half	.L523-.L655
	.byte	1,4,1,5,17,9
	.half	.L23-.L523
	.byte	3,89,1,5,21,9
	.half	.L656-.L23
	.byte	3,1,1,5,34,9
	.half	.L22-.L656
	.byte	3,120,1,4,3,5,7,9
	.half	.L363-.L22
	.byte	3,134,2,1,5,12,9
	.half	.L657-.L363
	.byte	1,4,1,5,37,9
	.half	.L16-.L657
	.byte	3,249,125,1,4,3,5,34,9
	.half	.L368-.L16
	.byte	3,130,2,1,5,43,9
	.half	.L658-.L368
	.byte	1,5,39,9
	.half	.L659-.L658
	.byte	1,5,4,9
	.half	.L660-.L659
	.byte	1,4,1,5,45,9
	.half	.L24-.L660
	.byte	3,254,125,1,5,12,7,9
	.half	.L661-.L24
	.byte	3,13,1,5,2,9
	.half	.L11-.L661
	.byte	3,16,1,5,1,9
	.half	.L26-.L11
	.byte	3,1,1,7,9
	.half	.L193-.L26
	.byte	0,1,1
.L629:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DtcStatusByteRetrieve')
	.sect	'.debug_ranges'
.L192:
	.word	-1,.L167,0,.L193-.L167,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DtcStatusByteRetrieveWithOrigin')
	.sect	'.debug_info'
.L194:
	.word	500
	.half	3
	.word	.L195
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L197,.L196
	.byte	2
	.word	.L180
	.byte	3
	.byte	'Dem_DtcStatusByteRetrieveWithOrigin',0,1,97,7
	.word	.L221
	.byte	1,1,1
	.word	.L169,.L372,.L168
	.byte	4
	.byte	'dtcId',0,1,97,58
	.word	.L230,.L373
	.byte	4
	.byte	'DtcOrigin',0,1,97,83
	.word	.L221,.L374
	.byte	4
	.byte	'DtcStatusIsValid',0,1,97,103
	.word	.L375,.L376
	.byte	5
	.word	.L169,.L372
	.byte	6
	.byte	'LocId',0,1,99,16
	.word	.L377,.L378
	.byte	7
	.word	.L379,.L380,.L27
	.byte	8
	.word	.L381,.L382
	.byte	9
	.word	.L383,.L380,.L27
	.byte	0,7
	.word	.L384,.L385,.L30
	.byte	8
	.word	.L386,.L387
	.byte	8
	.word	.L388,.L389
	.byte	9
	.word	.L390,.L385,.L30
	.byte	0,7
	.word	.L391,.L30,.L31
	.byte	8
	.word	.L392,.L393
	.byte	9
	.word	.L394,.L30,.L31
	.byte	0,7
	.word	.L395,.L396,.L34
	.byte	8
	.word	.L397,.L398
	.byte	10
	.word	.L399,.L396,.L34
	.byte	7
	.word	.L400,.L396,.L33
	.byte	8
	.word	.L401,.L402
	.byte	9
	.word	.L403,.L396,.L33
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DtcStatusByteRetrieveWithOrigin')
	.sect	'.debug_abbrev'
.L195:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DtcStatusByteRetrieveWithOrigin')
	.sect	'.debug_line'
.L196:
	.word	.L663-.L662
.L662:
	.half	3
	.word	.L665-.L664
.L664:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L665:
	.byte	5,7,7,0,5,2
	.word	.L169
	.byte	3,224,0,1,5,22,9
	.half	.L526-.L169
	.byte	3,4,1,5,20,9
	.half	.L666-.L526
	.byte	1,5,26,9
	.half	.L667-.L666
	.byte	3,1,1,4,2,5,5,9
	.half	.L380-.L667
	.byte	3,69,1,4,1,5,2,9
	.half	.L27-.L380
	.byte	3,59,1,5,3,7,9
	.half	.L668-.L27
	.byte	3,2,1,4,3,5,80,7,9
	.half	.L385-.L668
	.byte	3,168,1,1,5,5,9
	.half	.L525-.L385
	.byte	1,4,4,5,38,9
	.half	.L30-.L525
	.byte	3,226,126,1,5,5,9
	.half	.L669-.L30
	.byte	1,4,1,5,4,9
	.half	.L31-.L669
	.byte	3,121,1,4,4,5,5,7,9
	.half	.L396-.L31
	.byte	3,216,0,1,9
	.half	.L33-.L396
	.byte	3,6,1,4,1,9
	.half	.L34-.L33
	.byte	3,164,127,1,5,25,9
	.half	.L32-.L34
	.byte	3,4,1,5,23,9
	.half	.L670-.L32
	.byte	1,5,12,9
	.half	.L671-.L670
	.byte	3,1,1,5,5,9
	.half	.L528-.L671
	.byte	1,5,35,9
	.half	.L28-.L528
	.byte	3,5,1,5,2,9
	.half	.L529-.L28
	.byte	1,5,1,9
	.half	.L35-.L529
	.byte	3,1,1,7,9
	.half	.L198-.L35
	.byte	0,1,1
.L663:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DtcStatusByteRetrieveWithOrigin')
	.sect	'.debug_ranges'
.L197:
	.word	-1,.L169,0,.L198-.L169,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearDTCsEvents')
	.sect	'.debug_info'
.L199:
	.word	738
	.half	3
	.word	.L200
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L202,.L201
	.byte	2
	.word	.L180
	.byte	3
	.byte	'Dem_ClearDTCsEvents',0,1,126,6,1,1,1
	.word	.L171,.L404,.L170
	.byte	4
	.byte	'EventId',0,1,126,42
	.word	.L230,.L405
	.byte	4
	.byte	'DTCOrigin',0,1,126,69
	.word	.L221,.L406
	.byte	4
	.byte	'Dem_ClientClearMachinePtr',0,1,126,108
	.word	.L407,.L408
	.byte	5
	.word	.L171,.L404
	.byte	6
	.word	.L283,.L409,.L53
	.byte	7
	.word	.L284,.L410
	.byte	7
	.word	.L286,.L411
	.byte	8
	.word	.L288,.L409,.L53
	.byte	6
	.word	.L289,.L40,.L39
	.byte	7
	.word	.L290,.L412
	.byte	8
	.word	.L292,.L40,.L39
	.byte	6
	.word	.L293,.L413,.L42
	.byte	7
	.word	.L295,.L414
	.byte	7
	.word	.L297,.L415
	.byte	8
	.word	.L299,.L413,.L42
	.byte	6
	.word	.L300,.L413,.L41
	.byte	7
	.word	.L301,.L416
	.byte	7
	.word	.L303,.L417
	.byte	9
	.word	.L305,.L413,.L41
	.byte	0,0,0,0,0,6
	.word	.L306,.L46,.L47
	.byte	7
	.word	.L307,.L418
	.byte	9
	.word	.L309,.L46,.L47
	.byte	0,6
	.word	.L310,.L50,.L51
	.byte	7
	.word	.L311,.L419
	.byte	9
	.word	.L313,.L50,.L51
	.byte	0,0,0,6
	.word	.L420,.L421,.L56
	.byte	7
	.word	.L422,.L423
	.byte	9
	.word	.L424,.L421,.L56
	.byte	0,6
	.word	.L425,.L426,.L66
	.byte	7
	.word	.L427,.L428
	.byte	7
	.word	.L429,.L430
	.byte	8
	.word	.L431,.L426,.L66
	.byte	10
	.byte	'MemId',0,2,177,1,18
	.word	.L377,.L432
	.byte	6
	.word	.L433,.L426,.L62
	.byte	7
	.word	.L434,.L435
	.byte	9
	.word	.L436,.L426,.L62
	.byte	0,6
	.word	.L437,.L62,.L64
	.byte	7
	.word	.L438,.L439
	.byte	9
	.word	.L440,.L62,.L64
	.byte	0,0,0,6
	.word	.L441,.L69,.L70
	.byte	7
	.word	.L442,.L443
	.byte	9
	.word	.L444,.L69,.L70
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearDTCsEvents')
	.sect	'.debug_abbrev'
.L200:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,10,52,0,3,8
	.byte	58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearDTCsEvents')
	.sect	'.debug_line'
.L201:
	.word	.L673-.L672
.L672:
	.half	3
	.word	.L675-.L674
.L674:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L675:
	.byte	5,6,7,0,5,2
	.word	.L171
	.byte	3,253,0,1,5,34,9
	.half	.L531-.L171
	.byte	3,2,1,5,5,9
	.half	.L530-.L531
	.byte	1,4,3,5,10,7,9
	.half	.L409-.L530
	.byte	3,139,1,1,4,4,5,32,7,9
	.half	.L40-.L409
	.byte	3,195,126,1,5,47,9
	.half	.L534-.L40
	.byte	1,5,53,9
	.half	.L535-.L534
	.byte	1,5,75,9
	.half	.L676-.L535
	.byte	1,4,5,5,29,9
	.half	.L413-.L676
	.byte	3,112,1,5,46,9
	.half	.L677-.L413
	.byte	1,5,5,9
	.half	.L678-.L677
	.byte	1,5,74,9
	.half	.L41-.L678
	.byte	3,5,1,5,5,9
	.half	.L679-.L41
	.byte	1,4,4,5,2,9
	.half	.L42-.L679
	.byte	3,11,1,4,3,5,93,9
	.half	.L43-.L42
	.byte	3,189,1,1,5,8,7,9
	.half	.L39-.L43
	.byte	3,1,1,4,4,5,2,7,9
	.half	.L46-.L39
	.byte	3,201,126,1,4,3,5,95,9
	.half	.L47-.L46
	.byte	3,183,1,1,5,8,7,9
	.half	.L45-.L47
	.byte	3,1,1,4,4,5,2,7,9
	.half	.L50-.L45
	.byte	3,207,126,1,4,3,5,89,9
	.half	.L51-.L50
	.byte	3,177,1,1,5,3,7,9
	.half	.L44-.L51
	.byte	3,8,1,5,2,9
	.half	.L49-.L44
	.byte	3,2,1,4,1,5,13,9
	.half	.L53-.L49
	.byte	3,235,126,1,4,6,5,12,7,9
	.half	.L421-.L53
	.byte	3,18,1,5,33,9
	.half	.L536-.L421
	.byte	1,5,38,9
	.half	.L680-.L536
	.byte	1,5,4,9
	.half	.L681-.L680
	.byte	1,4,1,5,22,9
	.half	.L56-.L681
	.byte	3,111,1,5,70,7,9
	.half	.L538-.L56
	.byte	1,5,42,7,9
	.half	.L55-.L538
	.byte	3,2,1,5,13,9
	.half	.L682-.L55
	.byte	1,5,67,7,9
	.half	.L683-.L682
	.byte	3,2,1,5,17,9
	.half	.L684-.L683
	.byte	3,2,1,5,41,9
	.half	.L539-.L684
	.byte	1,5,33,9
	.half	.L685-.L539
	.byte	3,2,1,4,2,5,14,9
	.half	.L426-.L685
	.byte	3,15,1,5,13,9
	.half	.L60-.L426
	.byte	3,1,1,9
	.half	.L61-.L60
	.byte	3,16,1,4,7,5,38,9
	.half	.L62-.L61
	.byte	3,190,127,1,5,5,9
	.half	.L686-.L62
	.byte	1,4,2,5,10,9
	.half	.L64-.L686
	.byte	3,201,0,1,5,9,7,9
	.half	.L687-.L64
	.byte	3,2,1,5,34,9
	.half	.L65-.L687
	.byte	3,11,1,4,1,5,41,9
	.half	.L66-.L65
	.byte	3,79,1,5,43,9
	.half	.L548-.L66
	.byte	3,1,1,5,41,9
	.half	.L688-.L548
	.byte	1,5,69,9
	.half	.L689-.L688
	.byte	3,120,1,5,65,9
	.half	.L59-.L689
	.byte	3,12,1,5,63,9
	.half	.L690-.L59
	.byte	1,5,103,9
	.half	.L57-.L690
	.byte	3,112,1,4,4,5,2,9
	.half	.L69-.L57
	.byte	3,229,0,1,4,1,5,10,9
	.half	.L70-.L69
	.byte	3,175,127,1,5,33,7,9
	.half	.L691-.L70
	.byte	3,2,1,5,39,9
	.half	.L551-.L691
	.byte	1,5,1,9
	.half	.L68-.L551
	.byte	3,7,1,7,9
	.half	.L203-.L68
	.byte	0,1,1
.L673:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearDTCsEvents')
	.sect	'.debug_ranges'
.L202:
	.word	-1,.L171,0,.L203-.L171,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearAllDTCs')
	.sect	'.debug_info'
.L204:
	.word	709
	.half	3
	.word	.L205
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L207,.L206
	.byte	2
	.word	.L180
	.byte	3
	.byte	'Dem_ClearAllDTCs',0,1,161,1,6,1,1,1
	.word	.L173,.L445,.L172
	.byte	4
	.byte	'DTCOrigin',0,1,161,1,41
	.word	.L221,.L446
	.byte	4
	.byte	'Dem_ClientClearMachinePtr',0,1,161,1,80
	.word	.L407,.L447
	.byte	5
	.word	.L173,.L445
	.byte	6
	.byte	'eventId',0,1,163,1,21
	.word	.L230,.L448
	.byte	7
	.word	.L449,.L450,.L73
	.byte	8
	.word	.L451,.L452
	.byte	9
	.word	.L453,.L450,.L73
	.byte	0,7
	.word	.L454,.L455,.L77
	.byte	8
	.word	.L456,.L457
	.byte	9
	.word	.L458,.L455,.L77
	.byte	0,7
	.word	.L459,.L460,.L461
	.byte	8
	.word	.L462,.L463
	.byte	9
	.word	.L464,.L460,.L461
	.byte	0,7
	.word	.L465,.L466,.L81
	.byte	8
	.word	.L467,.L468
	.byte	9
	.word	.L469,.L466,.L81
	.byte	0,7
	.word	.L470,.L471,.L472
	.byte	8
	.word	.L473,.L474
	.byte	9
	.word	.L475,.L471,.L472
	.byte	0,7
	.word	.L454,.L476,.L85
	.byte	8
	.word	.L456,.L457
	.byte	9
	.word	.L458,.L476,.L85
	.byte	0,7
	.word	.L425,.L477,.L92
	.byte	8
	.word	.L427,.L478
	.byte	8
	.word	.L429,.L479
	.byte	10
	.word	.L431,.L477,.L92
	.byte	6
	.byte	'MemId',0,2,177,1,18
	.word	.L377,.L480
	.byte	7
	.word	.L433,.L477,.L88
	.byte	8
	.word	.L434,.L481
	.byte	9
	.word	.L436,.L477,.L88
	.byte	0,7
	.word	.L437,.L88,.L90
	.byte	8
	.word	.L438,.L482
	.byte	9
	.word	.L440,.L88,.L90
	.byte	0,0,0,7
	.word	.L459,.L483,.L83
	.byte	8
	.word	.L462,.L463
	.byte	9
	.word	.L464,.L483,.L83
	.byte	0,7
	.word	.L465,.L484,.L93
	.byte	8
	.word	.L467,.L468
	.byte	9
	.word	.L469,.L484,.L93
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearAllDTCs')
	.sect	'.debug_abbrev'
.L205:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearAllDTCs')
	.sect	'.debug_line'
.L206:
	.word	.L693-.L692
.L692:
	.half	3
	.word	.L695-.L694
.L694:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L695:
	.byte	5,6,7,0,5,2
	.word	.L173
	.byte	3,160,1,1,5,34,9
	.half	.L553-.L173
	.byte	3,5,1,5,5,9
	.half	.L696-.L553
	.byte	1,5,59,7,9
	.half	.L697-.L696
	.byte	3,2,1,4,3,5,12,9
	.half	.L450-.L697
	.byte	3,249,126,1,5,10,9
	.half	.L698-.L450
	.byte	1,4,1,5,5,9
	.half	.L73-.L698
	.byte	3,138,1,1,5,79,7,9
	.half	.L699-.L73
	.byte	3,2,1,5,77,9
	.half	.L76-.L699
	.byte	3,2,1,4,3,5,29,9
	.half	.L455-.L76
	.byte	3,129,127,1,5,11,9
	.half	.L700-.L455
	.byte	1,5,4,9
	.half	.L701-.L700
	.byte	1,4,1,5,53,9
	.half	.L77-.L701
	.byte	3,128,1,1,5,43,9
	.half	.L556-.L77
	.byte	3,1,1,5,18,9
	.half	.L702-.L556
	.byte	1,5,68,7,9
	.half	.L703-.L702
	.byte	3,2,1,4,3,5,6,9
	.half	.L460-.L703
	.byte	3,248,126,1,5,9,9
	.half	.L704-.L460
	.byte	1,4,1,5,77,9
	.half	.L461-.L704
	.byte	3,136,1,1,5,17,9
	.half	.L78-.L461
	.byte	3,4,1,5,70,9
	.half	.L75-.L78
	.byte	3,118,1,4,3,5,12,9
	.half	.L466-.L75
	.byte	3,249,126,1,5,19,9
	.half	.L705-.L466
	.byte	1,5,16,9
	.half	.L706-.L705
	.byte	1,5,4,9
	.half	.L707-.L706
	.byte	1,4,1,5,79,9
	.half	.L81-.L707
	.byte	3,135,1,1,5,34,7,9
	.half	.L708-.L81
	.byte	3,13,1,4,4,5,5,9
	.half	.L471-.L708
	.byte	3,174,127,1,5,35,9
	.half	.L709-.L471
	.byte	1,5,69,9
	.half	.L710-.L709
	.byte	1,5,67,9
	.half	.L711-.L710
	.byte	1,4,1,5,60,9
	.half	.L472-.L711
	.byte	3,210,0,1,5,79,9
	.half	.L74-.L472
	.byte	3,8,1,5,77,9
	.half	.L84-.L74
	.byte	3,2,1,4,3,5,29,9
	.half	.L476-.L84
	.byte	3,236,126,1,5,11,9
	.half	.L712-.L476
	.byte	1,5,4,9
	.half	.L558-.L712
	.byte	1,4,1,5,51,9
	.half	.L85-.L558
	.byte	3,149,1,1,4,2,5,14,9
	.half	.L477-.L85
	.byte	3,85,1,5,13,9
	.half	.L86-.L477
	.byte	3,1,1,9
	.half	.L87-.L86
	.byte	3,16,1,4,5,5,38,9
	.half	.L88-.L87
	.byte	3,190,127,1,5,5,9
	.half	.L713-.L88
	.byte	1,4,2,5,10,9
	.half	.L90-.L713
	.byte	3,201,0,1,5,9,7,9
	.half	.L714-.L90
	.byte	3,2,1,5,34,9
	.half	.L91-.L714
	.byte	3,11,1,4,1,5,64,9
	.half	.L92-.L91
	.byte	3,7,1,4,3,5,6,9
	.half	.L483-.L92
	.byte	3,229,126,1,5,9,9
	.half	.L715-.L483
	.byte	1,4,1,5,70,9
	.half	.L83-.L715
	.byte	3,151,1,1,4,3,5,12,9
	.half	.L484-.L83
	.byte	3,228,126,1,5,19,9
	.half	.L716-.L484
	.byte	1,5,16,9
	.half	.L717-.L716
	.byte	1,5,4,9
	.half	.L718-.L717
	.byte	1,4,1,5,79,9
	.half	.L93-.L718
	.byte	3,156,1,1,5,1,7,9
	.half	.L80-.L93
	.byte	3,7,1,7,9
	.half	.L208-.L80
	.byte	0,1,1
.L693:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearAllDTCs')
	.sect	'.debug_ranges'
.L207:
	.word	-1,.L173,0,.L208-.L173,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearSingleDTC')
	.sect	'.debug_info'
.L209:
	.word	812
	.half	3
	.word	.L210
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L212,.L211
	.byte	2
	.word	.L180
	.byte	3
	.byte	'Dem_ClearSingleDTC',0,1,203,1,6,1,1,1
	.word	.L175,.L485,.L174
	.byte	4
	.byte	'dtcId',0,1,203,1,39
	.word	.L230,.L486
	.byte	4
	.byte	'DTCOrigin',0,1,203,1,64
	.word	.L221,.L487
	.byte	4
	.byte	'Dem_ClientClearMachinePtr',0,1,203,1,103
	.word	.L407,.L488
	.byte	5
	.word	.L175,.L485
	.byte	6
	.byte	'eventId',0,1,205,1,21
	.word	.L230,.L489
	.byte	7
	.word	.L367,.L490,.L95
	.byte	8
	.word	.L369,.L491
	.byte	9
	.word	.L371,.L490,.L95
	.byte	0,7
	.word	.L338,.L492,.L96
	.byte	8
	.word	.L341,.L493
	.byte	8
	.word	.L343,.L494
	.byte	10
	.word	.L345,.L492,.L96
	.byte	7
	.word	.L238,.L492,.L495
	.byte	8
	.word	.L241,.L496
	.byte	9
	.word	.L243,.L492,.L495
	.byte	0,0,0,7
	.word	.L347,.L497,.L104
	.byte	8
	.word	.L349,.L498
	.byte	9
	.word	.L351,.L497,.L104
	.byte	0,7
	.word	.L362,.L499,.L500
	.byte	8
	.word	.L364,.L501
	.byte	9
	.word	.L366,.L499,.L500
	.byte	0,7
	.word	.L367,.L502,.L108
	.byte	8
	.word	.L369,.L491
	.byte	9
	.word	.L371,.L502,.L108
	.byte	0,7
	.word	.L470,.L503,.L504
	.byte	8
	.word	.L473,.L505
	.byte	9
	.word	.L475,.L503,.L504
	.byte	0,7
	.word	.L347,.L506,.L112
	.byte	8
	.word	.L349,.L498
	.byte	9
	.word	.L351,.L506,.L112
	.byte	0,7
	.word	.L425,.L507,.L119
	.byte	8
	.word	.L427,.L508
	.byte	8
	.word	.L429,.L509
	.byte	10
	.word	.L431,.L507,.L119
	.byte	6
	.byte	'MemId',0,2,177,1,18
	.word	.L377,.L510
	.byte	7
	.word	.L433,.L507,.L115
	.byte	8
	.word	.L434,.L511
	.byte	9
	.word	.L436,.L507,.L115
	.byte	0,7
	.word	.L437,.L115,.L117
	.byte	8
	.word	.L438,.L512
	.byte	9
	.word	.L440,.L115,.L117
	.byte	0,0,0,7
	.word	.L362,.L513,.L110
	.byte	8
	.word	.L364,.L501
	.byte	9
	.word	.L366,.L513,.L110
	.byte	0,7
	.word	.L367,.L514,.L120
	.byte	8
	.word	.L369,.L491
	.byte	9
	.word	.L371,.L514,.L120
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearSingleDTC')
	.sect	'.debug_abbrev'
.L210:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearSingleDTC')
	.sect	'.debug_line'
.L211:
	.word	.L720-.L719
.L719:
	.half	3
	.word	.L722-.L721
.L721:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L722:
	.byte	5,6,7,0,5,2
	.word	.L175
	.byte	3,202,1,1,5,35,9
	.half	.L564-.L175
	.byte	3,5,1,5,9,9
	.half	.L723-.L564
	.byte	1,5,119,7,9
	.half	.L724-.L723
	.byte	1,4,3,5,34,9
	.half	.L490-.L724
	.byte	3,243,0,1,5,43,9
	.half	.L725-.L490
	.byte	1,5,39,9
	.half	.L562-.L725
	.byte	1,5,4,9
	.half	.L726-.L562
	.byte	1,4,1,5,61,9
	.half	.L95-.L726
	.byte	3,141,127,1,5,72,7,9
	.half	.L94-.L95
	.byte	3,2,1,4,3,5,21,9
	.half	.L492-.L94
	.byte	3,72,1,5,12,9
	.half	.L566-.L492
	.byte	1,5,28,7,9
	.half	.L727-.L566
	.byte	1,5,21,9
	.half	.L567-.L727
	.byte	1,5,4,9
	.half	.L97-.L567
	.byte	1,5,9,9
	.half	.L99-.L97
	.byte	3,154,1,1,5,5,7,9
	.half	.L495-.L99
	.byte	3,2,1,5,14,9
	.half	.L100-.L495
	.byte	3,3,1,5,35,9
	.half	.L568-.L100
	.byte	1,5,11,9
	.half	.L569-.L568
	.byte	1,5,44,9
	.half	.L728-.L569
	.byte	3,1,1,5,12,9
	.half	.L729-.L728
	.byte	1,4,1,5,5,9
	.half	.L96-.L729
	.byte	3,155,127,1,5,87,7,9
	.half	.L570-.L96
	.byte	3,2,1,5,81,9
	.half	.L103-.L570
	.byte	3,2,1,4,3,5,33,9
	.half	.L497-.L103
	.byte	3,244,0,1,5,29,9
	.half	.L730-.L497
	.byte	1,5,4,9
	.half	.L731-.L730
	.byte	1,4,1,5,53,9
	.half	.L104-.L731
	.byte	3,141,127,1,5,43,9
	.half	.L572-.L104
	.byte	3,1,1,5,18,9
	.half	.L732-.L572
	.byte	1,5,72,7,9
	.half	.L733-.L732
	.byte	3,2,1,4,3,5,7,9
	.half	.L499-.L733
	.byte	3,235,0,1,5,12,9
	.half	.L734-.L499
	.byte	1,4,1,5,85,9
	.half	.L500-.L734
	.byte	3,149,127,1,5,17,9
	.half	.L105-.L500
	.byte	3,4,1,5,74,9
	.half	.L102-.L105
	.byte	3,118,1,4,3,5,34,9
	.half	.L502-.L102
	.byte	3,236,0,1,5,43,9
	.half	.L735-.L502
	.byte	1,5,39,9
	.half	.L736-.L735
	.byte	1,5,4,9
	.half	.L737-.L736
	.byte	1,4,1,5,87,9
	.half	.L108-.L737
	.byte	3,148,127,1,5,34,7,9
	.half	.L738-.L108
	.byte	3,13,1,4,4,5,5,9
	.half	.L503-.L738
	.byte	3,132,127,1,5,35,9
	.half	.L739-.L503
	.byte	1,5,69,9
	.half	.L740-.L739
	.byte	1,5,67,9
	.half	.L741-.L740
	.byte	1,4,1,5,60,9
	.half	.L504-.L741
	.byte	3,252,0,1,5,87,9
	.half	.L101-.L504
	.byte	3,8,1,5,81,9
	.half	.L111-.L101
	.byte	3,2,1,4,3,5,33,9
	.half	.L506-.L111
	.byte	3,223,0,1,5,29,9
	.half	.L742-.L506
	.byte	1,5,4,9
	.half	.L574-.L742
	.byte	1,4,1,5,51,9
	.half	.L112-.L574
	.byte	3,162,127,1,4,2,5,14,9
	.half	.L507-.L112
	.byte	3,171,127,1,5,13,9
	.half	.L113-.L507
	.byte	3,1,1,9
	.half	.L114-.L113
	.byte	3,16,1,4,5,5,38,9
	.half	.L115-.L114
	.byte	3,190,127,1,5,5,9
	.half	.L743-.L115
	.byte	1,4,2,5,10,9
	.half	.L117-.L743
	.byte	3,201,0,1,5,9,7,9
	.half	.L744-.L117
	.byte	3,2,1,5,34,9
	.half	.L118-.L744
	.byte	3,11,1,4,1,5,68,9
	.half	.L119-.L118
	.byte	3,49,1,4,3,5,7,9
	.half	.L513-.L119
	.byte	3,216,0,1,5,12,9
	.half	.L745-.L513
	.byte	1,4,1,5,74,9
	.half	.L110-.L745
	.byte	3,164,127,1,4,3,5,34,9
	.half	.L514-.L110
	.byte	3,215,0,1,5,43,9
	.half	.L746-.L514
	.byte	1,5,39,9
	.half	.L747-.L746
	.byte	1,5,4,9
	.half	.L748-.L747
	.byte	1,4,1,5,87,9
	.half	.L120-.L748
	.byte	3,169,127,1,5,1,7,9
	.half	.L107-.L120
	.byte	3,7,1,7,9
	.half	.L213-.L107
	.byte	0,1,1
.L720:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearSingleDTC')
	.sect	'.debug_ranges'
.L212:
	.word	-1,.L175,0,.L213-.L175,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_IsPendingClearEvent')
	.sect	'.debug_info'
.L214:
	.word	232
	.half	3
	.word	.L215
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L217,.L216
	.byte	2
	.word	.L180
	.byte	3
	.byte	'Dem_IsPendingClearEvent',0,1,246,1,9
	.word	.L221
	.byte	1,1,1
	.word	.L177,.L515,.L176
	.byte	4
	.byte	'EventId',0,1,246,1,49
	.word	.L230,.L516
	.byte	5
	.word	.L177,.L515
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_IsPendingClearEvent')
	.sect	'.debug_abbrev'
.L215:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_IsPendingClearEvent')
	.sect	'.debug_line'
.L216:
	.word	.L750-.L749
.L749:
	.half	3
	.word	.L752-.L751
.L751:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0,0,0,0,0
.L752:
	.byte	5,24,7,0,5,2
	.word	.L177
	.byte	3,247,1,1,5,21,9
	.half	.L753-.L177
	.byte	1,5,5,9
	.half	.L754-.L753
	.byte	1,5,1,9
	.half	.L121-.L754
	.byte	3,1,1,7,9
	.half	.L218-.L121
	.byte	0,1,1
.L750:
	.sdecl	'.debug_ranges',debug,cluster('Dem_IsPendingClearEvent')
	.sect	'.debug_ranges'
.L217:
	.word	-1,.L177,0,.L218-.L177,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_PendingClearEventId')
	.sect	'.debug_info'
.L219:
	.word	183
	.half	3
	.word	.L220
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L180
	.byte	3
	.byte	'Dem_PendingClearEventId',0,28,48,24
	.word	.L230
	.byte	5,3
	.word	Dem_PendingClearEventId
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_PendingClearEventId')
	.sect	'.debug_abbrev'
.L220:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearAllDTCs')
	.sect	'.debug_loc'
.L481:
	.word	0,0
.L446:
	.word	-1,.L173,0,.L76-.L173
	.half	1
	.byte	84
	.word	.L552-.L173,.L445-.L173
	.half	1
	.byte	88
	.word	.L555-.L173,.L556-.L173
	.half	1
	.byte	85
	.word	.L74-.L173,.L84-.L173
	.half	1
	.byte	84
	.word	0,0
.L479:
	.word	0,0
.L172:
	.word	-1,.L173,0,.L445-.L173
	.half	2
	.byte	138,0
	.word	0,0
.L447:
	.word	-1,.L173,0,.L76-.L173
	.half	1
	.byte	100
	.word	.L553-.L173,.L554-.L173
	.half	1
	.byte	111
	.word	.L557-.L173,.L556-.L173
	.half	1
	.byte	100
	.word	.L74-.L173,.L80-.L173
	.half	1
	.byte	111
	.word	.L74-.L173,.L84-.L173
	.half	1
	.byte	100
	.word	0,0
.L478:
	.word	0,0
.L482:
	.word	0,0
.L480:
	.word	-1,.L173,.L559-.L173,.L87-.L173
	.half	1
	.byte	85
	.word	.L560-.L173,.L92-.L173
	.half	1
	.byte	85
	.word	0,0
.L448:
	.word	-1,.L173,.L558-.L173,.L92-.L173
	.half	1
	.byte	84
	.word	0,0
.L474:
	.word	0,0
.L452:
	.word	0,0
.L468:
	.word	0,0
.L463:
	.word	0,0
.L457:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearDTCsEvents')
	.sect	'.debug_loc'
.L406:
	.word	-1,.L171,0,.L530-.L171
	.half	1
	.byte	85
	.word	.L409-.L171,.L40-.L171
	.half	1
	.byte	89
	.word	.L39-.L171,.L46-.L171
	.half	1
	.byte	89
	.word	.L45-.L171,.L50-.L171
	.half	1
	.byte	89
	.word	.L538-.L171,.L55-.L171
	.half	1
	.byte	89
	.word	.L541-.L171,.L542-.L171
	.half	1
	.byte	89
	.word	0,0
.L435:
	.word	0,0
.L430:
	.word	0,0
.L170:
	.word	-1,.L171,0,.L404-.L171
	.half	2
	.byte	138,0
	.word	0,0
.L408:
	.word	-1,.L171,0,.L530-.L171
	.half	1
	.byte	100
	.word	.L531-.L171,.L532-.L171
	.half	1
	.byte	111
	.word	.L59-.L171,.L57-.L171
	.half	1
	.byte	111
	.word	.L69-.L171,.L68-.L171
	.half	1
	.byte	111
	.word	0,0
.L405:
	.word	-1,.L171,0,.L530-.L171
	.half	1
	.byte	84
	.word	.L531-.L171,.L533-.L171
	.half	1
	.byte	88
	.word	.L534-.L171,.L535-.L171
	.half	1
	.byte	88
	.word	.L536-.L171,.L537-.L171
	.half	1
	.byte	88
	.word	.L539-.L171,.L540-.L171
	.half	1
	.byte	88
	.word	.L540-.L171,.L426-.L171
	.half	1
	.byte	84
	.word	.L65-.L171,.L545-.L171
	.half	1
	.byte	88
	.word	.L545-.L171,.L66-.L171
	.half	1
	.byte	84
	.word	.L546-.L171,.L547-.L171
	.half	1
	.byte	88
	.word	.L547-.L171,.L548-.L171
	.half	1
	.byte	84
	.word	.L549-.L171,.L550-.L171
	.half	1
	.byte	88
	.word	.L550-.L171,.L551-.L171
	.half	1
	.byte	84
	.word	0,0
.L428:
	.word	0,0
.L439:
	.word	0,0
.L432:
	.word	-1,.L171,.L543-.L171,.L61-.L171
	.half	1
	.byte	85
	.word	.L544-.L171,.L66-.L171
	.half	1
	.byte	85
	.word	0,0
.L417:
	.word	0,0
.L415:
	.word	0,0
.L410:
	.word	0,0
.L423:
	.word	0,0
.L412:
	.word	0,0
.L418:
	.word	0,0
.L419:
	.word	0,0
.L443:
	.word	0,0
.L411:
	.word	0,0
.L416:
	.word	0,0
.L414:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearSingleDTC')
	.sect	'.debug_loc'
.L511:
	.word	0,0
.L509:
	.word	0,0
.L487:
	.word	-1,.L175,0,.L561-.L175
	.half	1
	.byte	85
	.word	.L96-.L175,.L570-.L175
	.half	1
	.byte	89
	.word	.L104-.L175,.L571-.L175
	.half	1
	.byte	89
	.word	.L571-.L175,.L572-.L175
	.half	1
	.byte	85
	.word	0,0
.L174:
	.word	-1,.L175,0,.L485-.L175
	.half	2
	.byte	138,0
	.word	0,0
.L488:
	.word	-1,.L175,0,.L562-.L175
	.half	1
	.byte	100
	.word	.L564-.L175,.L565-.L175
	.half	1
	.byte	111
	.word	.L573-.L175,.L572-.L175
	.half	1
	.byte	100
	.word	.L101-.L175,.L107-.L175
	.half	1
	.byte	111
	.word	0,0
.L508:
	.word	0,0
.L512:
	.word	0,0
.L510:
	.word	-1,.L175,.L575-.L175,.L114-.L175
	.half	1
	.byte	85
	.word	.L576-.L175,.L119-.L175
	.half	1
	.byte	85
	.word	0,0
.L486:
	.word	-1,.L175,0,.L563-.L175
	.half	1
	.byte	84
	.word	.L566-.L175,.L567-.L175
	.half	1
	.byte	88
	.word	.L568-.L175,.L569-.L175
	.half	1
	.byte	88
	.word	0,0
.L494:
	.word	0,0
.L489:
	.word	-1,.L175,.L574-.L175,.L119-.L175
	.half	1
	.byte	84
	.word	0,0
.L505:
	.word	0,0
.L496:
	.word	0,0
.L493:
	.word	0,0
.L491:
	.word	0,0
.L501:
	.word	0,0
.L498:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DtcStatusByteRetrieve')
	.sect	'.debug_loc'
.L166:
	.word	-1,.L167,0,.L517-.L167
	.half	2
	.byte	138,0
	.word	.L517-.L167,.L318-.L167
	.half	2
	.byte	138,8
	.word	.L318-.L167,.L318-.L167
	.half	2
	.byte	138,0
	.word	0,0
.L360:
	.word	0,0
.L355:
	.word	0,0
.L337:
	.word	0,0
.L335:
	.word	0,0
.L328:
	.word	0,0
.L319:
	.word	-1,.L167,0,.L518-.L167
	.half	1
	.byte	84
	.word	.L519-.L167,.L318-.L167
	.half	1
	.byte	88
	.word	0,0
.L332:
	.word	0,0
.L344:
	.word	0,0
.L322:
	.word	-1,.L167,.L522-.L167,.L523-.L167
	.half	1
	.byte	95
	.word	0,0
.L321:
	.word	-1,.L167,0,.L318-.L167
	.half	2
	.byte	145,120
	.word	0,0
.L331:
	.word	0,0
.L325:
	.word	-1,.L167,.L326-.L167,.L318-.L167
	.half	1
	.byte	91
	.word	0,0
.L324:
	.word	-1,.L167,.L521-.L167,.L318-.L167
	.half	1
	.byte	90
	.word	.L524-.L167,.L318-.L167
	.half	1
	.byte	82
	.word	0,0
.L323:
	.word	-1,.L167,.L520-.L167,.L318-.L167
	.half	1
	.byte	89
	.word	0,0
.L342:
	.word	0,0
.L370:
	.word	0,0
.L365:
	.word	0,0
.L350:
	.word	0,0
.L336:
	.word	0,0
.L334:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DtcStatusByteRetrieveWithOrigin')
	.sect	'.debug_loc'
.L389:
	.word	0,0
.L168:
	.word	-1,.L169,0,.L372-.L169
	.half	2
	.byte	138,0
	.word	0,0
.L387:
	.word	0,0
.L374:
	.word	-1,.L169,0,.L525-.L169
	.half	1
	.byte	85
	.word	.L28-.L169,.L529-.L169
	.half	1
	.byte	85
	.word	0,0
.L376:
	.word	-1,.L169,0,.L525-.L169
	.half	1
	.byte	100
	.word	.L526-.L169,.L372-.L169
	.half	1
	.byte	111
	.word	.L28-.L169,.L529-.L169
	.half	1
	.byte	100
	.word	0,0
.L402:
	.word	0,0
.L378:
	.word	-1,.L169,.L525-.L169,.L527-.L169
	.half	1
	.byte	82
	.word	.L32-.L169,.L528-.L169
	.half	1
	.byte	82
	.word	0,0
.L393:
	.word	0,0
.L398:
	.word	0,0
.L373:
	.word	-1,.L169,0,.L525-.L169
	.half	1
	.byte	84
	.word	.L28-.L169,.L529-.L169
	.half	1
	.byte	84
	.word	0,0
.L382:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetStatusOfDTC')
	.sect	'.debug_loc'
.L224:
	.word	-1,.L179,0,.L233-.L179
	.half	1
	.byte	84
	.word	0,0
.L225:
	.word	-1,.L179,0,.L233-.L179
	.half	1
	.byte	85
	.word	.L578-.L179,.L222-.L179
	.half	1
	.byte	88
	.word	0,0
.L264:
	.word	0,0
.L226:
	.word	-1,.L179,0,.L233-.L179
	.half	1
	.byte	86
	.word	0,.L222-.L179
	.half	2
	.byte	145,120
	.word	0,0
.L228:
	.word	-1,.L179,0,.L233-.L179
	.half	1
	.byte	100
	.word	.L579-.L179,.L222-.L179
	.half	1
	.byte	108
	.word	0,0
.L178:
	.word	-1,.L179,0,.L577-.L179
	.half	2
	.byte	138,0
	.word	.L577-.L179,.L222-.L179
	.half	2
	.byte	138,8
	.word	.L222-.L179,.L222-.L179
	.half	2
	.byte	138,0
	.word	0,0
.L229:
	.word	-1,.L179,0,.L222-.L179
	.half	2
	.byte	145,121
	.word	0,0
.L259:
	.word	0,0
.L304:
	.word	0,0
.L253:
	.word	0,0
.L298:
	.word	0,0
.L236:
	.word	0,0
.L246:
	.word	0,0
.L231:
	.word	-1,.L179,.L233-.L179,.L580-.L179
	.half	1
	.byte	82
	.word	.L131-.L179,.L581-.L179
	.half	1
	.byte	82
	.word	.L135-.L179,.L582-.L179
	.half	1
	.byte	82
	.word	.L156-.L179,.L585-.L179
	.half	1
	.byte	82
	.word	.L158-.L179,.L586-.L179
	.half	1
	.byte	82
	.word	.L587-.L179,.L586-.L179
	.half	1
	.byte	84
	.word	0,0
.L270:
	.word	0,0
.L281:
	.word	0,0
.L277:
	.word	0,0
.L285:
	.word	0,0
.L274:
	.word	-1,.L179,.L583-.L179,.L584-.L179
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L242:
	.word	0,0
.L316:
	.word	0,0
.L291:
	.word	0,0
.L308:
	.word	0,0
.L312:
	.word	0,0
.L287:
	.word	0,0
.L272:
	.word	0,0
.L257:
	.word	0,0
.L302:
	.word	0,0
.L251:
	.word	0,0
.L296:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_IsPendingClearEvent')
	.sect	'.debug_loc'
.L176:
	.word	-1,.L177,0,.L515-.L177
	.half	2
	.byte	138,0
	.word	0,0
.L516:
	.word	-1,.L177,0,.L515-.L177
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L755:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_DtcStatusByteRetrieve')
	.sect	'.debug_frame'
	.word	36
	.word	.L755,.L167,.L318-.L167
	.byte	4
	.word	(.L517-.L167)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L318-.L517)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_DtcStatusByteRetrieveWithOrigin')
	.sect	'.debug_frame'
	.word	12
	.word	.L755,.L169,.L372-.L169
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearDTCsEvents')
	.sect	'.debug_frame'
	.word	12
	.word	.L755,.L171,.L404-.L171
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearAllDTCs')
	.sect	'.debug_frame'
	.word	12
	.word	.L755,.L173,.L445-.L173
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearSingleDTC')
	.sect	'.debug_frame'
	.word	12
	.word	.L755,.L175,.L485-.L175
	.sdecl	'.debug_frame',debug,cluster('Dem_IsPendingClearEvent')
	.sect	'.debug_frame'
	.word	24
	.word	.L755,.L177,.L515-.L177
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_GetStatusOfDTC')
	.sect	'.debug_frame'
	.word	36
	.word	.L755,.L179,.L222-.L179
	.byte	4
	.word	(.L577-.L179)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L222-.L577)/2
	.byte	19,0,8,26,0,0

; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   292  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   293  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCStatusByte.c	   294  

	; Module end
