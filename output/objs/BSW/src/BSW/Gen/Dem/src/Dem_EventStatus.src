	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15472a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_EventStatus.src BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c'

	
$TC16X
	
	.sdecl	'.text.Dem_EventStatus.Dem_EventStatusInitCheckNvM',code,cluster('Dem_EventStatusInitCheckNvM')
	.sect	'.text.Dem_EventStatus.Dem_EventStatusInitCheckNvM'
	.align	2
	
	.global	Dem_EventStatusInitCheckNvM

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     4  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     6  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     8  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	     9  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    10  #include "Dem_Dependencies.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    11  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    12  #if(DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    13  #include "FiM.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    14  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    15  #include "Dem_Prv_CallEvtStChngdCbk.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    16  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    18  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    19  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    20  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    21  DEM_ARRAY_DEFINE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    22  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    23  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    24  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    25  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    26  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    27  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    28  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    29  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    30  DEM_ARRAY_DEFINE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    31  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    33  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    34  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    35  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    36  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    37  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    39  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    40  /* Called from Dem_Init to validate the Nv block */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    41  void Dem_EventStatusInitCheckNvM(void)
; Function Dem_EventStatusInitCheckNvM
.L141:
Dem_EventStatusInitCheckNvM:	.type	func
	sub.a	a10,#8
.L293:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   105  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   107  DEM_INLINE void Dem_NvMClearBlockByInvalidate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   108  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   109      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_INVALIDATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   112  DEM_INLINE void Dem_NvMExcludeBlockFromStatemachine(Dem_NvmBlockIdType id, boolean exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   114      if(exclude)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   115      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   116          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_EXCLUDE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   117      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   118      else
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   119      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   120          Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_EXCLUDE] = DEM_NVM_STATUSBITMASK_NONE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   121      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   122  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   124  void Dem_NvMInit(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   125  void Dem_NvMMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   126  void Dem_NvMShutdown(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   127  boolean Dem_NvMIsClearPending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   128  boolean Dem_NvMIsImmediatePending(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   129  boolean Dem_NvMIsBlockClearPending( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   130  boolean Dem_NvMIsBlockAllowedToBeExcluded(Dem_NvmBlockIdType id);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   131  boolean Dem_NvMIsBlockExcluded( Dem_NvmBlockIdType demNvMId);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   132  void Dem_NvMNormalMemCopy(void* Dest_pv, const void* Src_pcv, uint32 numBytes_s32);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   134  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED != DEM_CFG_ERASE_ALL_OFF)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   135  Dem_HashIdCheckResultType Dem_NvmIsHashIDChanged(void);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   136  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   138  DEM_INLINE void Dem_NvMStartClear(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   140      Dem_NvMAnyClearFailed = FALSE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   141  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   143  DEM_INLINE boolean Dem_NvMIsClearFailed(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   145      return Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   149  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   150  DEM_INLINE void Dem_NvMSetImmediateStorageRequested(boolean state)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   152      Dem_NvMImmediateStorageRequested = state;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   156  DEM_INLINE boolean Dem_NvMIsImmediateStorageRequested(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   157  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   158      return Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   159  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   162  DEM_INLINE uint8 Dem_NvMGetInvalidateAllNvMBlocksStatus(void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   163  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   164      return Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   165  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   166  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   167  DEM_INLINE Dem_boolean_least Dem_NvMIsInvalidateAllNVMBlocksRequested (void)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   168  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   169  #if(DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   170     return ((Dem_EraseAllNvMDataStatus == DEM_ERASE_ALL_STATUS_PENDING)||(Dem_EraseAllNvMDataStatus == DEM_ERASE_ALL_STATUS_HASHID_WRITE_PENDING));
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   171  #elif(DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITHOUT_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   172     return (Dem_EraseAllNvMDataStatus == DEM_ERASE_ALL_STATUS_PENDING);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   173  #else
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   174     return FALSE;
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   174     return FALSE;      (inlined)
	j	.L2

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   176  }      (inlined)
.L2:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    42  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    43      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    44  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    45      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
	jeq	d15,#0,.L3
.L807:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    46      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    47          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    48          DEM_MEMSET( &Dem_AllEventsStatusByte, (sint32)DEM_ISO14229BYTE_INITVALUE, DEM_SIZEOF_VAR(Dem_AllEventsStatusByte));
	movh.a	a4,#@his(Dem_AllEventsStatusByte)
	lea	a4,[a4]@los(Dem_AllEventsStatusByte)
	mov	d4,#80
	mov	d5,#6
.L296:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     3  #ifndef RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     4  #define RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     7  #include "rba_BswSrv.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     9  #define RBA_DIAGLIB_MEMCPY(xDest_p, xSrc_pc, numBytes_u32)                  rba_DiagLib_MemUtils_MemCpy((uint8*)(xDest_p),(const uint8*)(xSrc_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    10  #define RBA_DIAGLIB_MEMSET(xDest_p, xPattern_u32, numBytes_u32)             rba_DiagLib_MemUtils_MemSet((uint8*)(xDest_p),(sint32)(xPattern_u32),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    11  #define RBA_DIAGLIB_MEMCMP(xSrc1_pc, xSrc2_pc, numBytes_u32)                rba_DiagLib_MemUtils_MemCmp((const uint8*)(xSrc1_pc),(const uint8*)(xSrc2_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    12  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    13  #define RBA_DIAGLIB_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    14  #include "rba_DiagLib_MemMap.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    15  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    16  /**
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    17   * Utility functions for MEMCPY, MEMSET, MEMCOMP.
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    18   */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    19  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    20  LOCAL_INLINE void rba_DiagLib_MemUtils_MemCpy(uint8* xDest_p, const uint8* xSrc_pc, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    21  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    22      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemCopy converts argument 1 and 2 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    23      (void) rba_BswSrv_MemCopy(xDest_p, xSrc_pc, numBytes_s32);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    26  LOCAL_INLINE void rba_DiagLib_MemUtils_MemSet(uint8* xDest_pv, sint32 xPattern_u32, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    28      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemSet converts argument 1 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    29      (void) rba_BswSrv_MemSet(xDest_pv, xPattern_u32, numBytes_s32);
	call	rba_BswSrv_MemSet
.L297:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    49          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_EVT_STATUSBYTE);
	mov	d15,#6
.L306:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   102  DEM_INLINE void Dem_NvMClearBlockByWrite(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   104      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_CLEAR;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   105  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   107  DEM_INLINE void Dem_NvMClearBlockByInvalidate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   108  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	   109      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_CLEAR] = DEM_NVM_STATUSBITMASK_INVALIDATE;
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L808:
	mul	d15,d15,#5
	addsc.a	a15,a15,d15,#0
.L809:
	mov	d15,#16
.L810:
	st.b	[a15]3,d15
.L307:
	j	.L4
.L3:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    50      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    51      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    52      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    53          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    54          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_EVT_STATUSBYTE);
	mov	d15,#6
.L312:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
	movh.a	a15,#@his(Dem_NvMBlockMap2NvmId)
	lea	a15,[a15]@los(Dem_NvMBlockMap2NvmId)
.L811:
	addsc.a	a15,a15,d15,#1
	ld.hu	d4,[a15]0
.L812:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];      (inlined)
	j	.L5

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }      (inlined)
.L5:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
	lea	a4,[a10]0
	call	NvM_GetErrorStatus
.L813:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)      (inlined)
	jne	d2,#1,.L6
.L814:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;      (inlined)
	j	.L7

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)      (inlined)
.L6:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
	ld.bu	d15,[a10]
.L815:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
	mov	d0,#0
	jeq	d15,d0,.L8
.L816:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
	mov	d0,#2
	jeq	d15,d0,.L9
.L817:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
	mov	d0,#3
	jeq	d15,d0,.L10
.L818:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
	mov	d0,#4
	jeq	d15,d0,.L11
.L819:
	mov	d0,#5
	jeq	d15,d0,.L12
.L820:
	mov	d0,#6
	jeq	d15,d0,.L13
.L821:
	mov	d0,#7
	jeq	d15,d0,.L14
.L822:
	mov	d0,#8
	jeq	d15,d0,.L15
	j	.L16

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:      (inlined)
.L13:
	mov	d15,#6

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;      (inlined)
	j	.L17

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:      (inlined)
.L8:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */      (inlined)
.L14:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:      (inlined)
.L15:
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:      (inlined)
.L9:
	mov	d15,#2

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;      (inlined)
	j	.L19

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:      (inlined)
.L12:
	mov	d15,#5

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;      (inlined)
	j	.L20

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:      (inlined)
.L10:
	mov	d15,#3

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:      (inlined)
.L11:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
	mov	d15,#4

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available      (inlined)
	j	.L22

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:      (inlined)
.L16:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;      (inlined)
	j	.L23

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }      (inlined)
.L23:
.L22:
.L21:
.L20:
.L19:
.L18:
.L17:
.L7:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    56          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    57          if (NvmResult != DEM_NVM_SUCCESS)
	jeq	d15,#0,.L24
.L823:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    58          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    59              /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    60              DEM_MEMSET( &Dem_AllEventsStatusByte, (sint32)DEM_ISO14229BYTE_INITVALUE, DEM_SIZEOF_VAR(Dem_AllEventsStatusByte));
	movh.a	a4,#@his(Dem_AllEventsStatusByte)
	lea	a4,[a4]@los(Dem_AllEventsStatusByte)
	mov	d4,#80
	mov	d5,#6
.L321:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     3  #ifndef RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     4  #define RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     7  #include "rba_BswSrv.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     9  #define RBA_DIAGLIB_MEMCPY(xDest_p, xSrc_pc, numBytes_u32)                  rba_DiagLib_MemUtils_MemCpy((uint8*)(xDest_p),(const uint8*)(xSrc_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    10  #define RBA_DIAGLIB_MEMSET(xDest_p, xPattern_u32, numBytes_u32)             rba_DiagLib_MemUtils_MemSet((uint8*)(xDest_p),(sint32)(xPattern_u32),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    11  #define RBA_DIAGLIB_MEMCMP(xSrc1_pc, xSrc2_pc, numBytes_u32)                rba_DiagLib_MemUtils_MemCmp((const uint8*)(xSrc1_pc),(const uint8*)(xSrc2_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    12  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    13  #define RBA_DIAGLIB_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    14  #include "rba_DiagLib_MemMap.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    15  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    16  /**
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    17   * Utility functions for MEMCPY, MEMSET, MEMCOMP.
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    18   */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    19  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    20  LOCAL_INLINE void rba_DiagLib_MemUtils_MemCpy(uint8* xDest_p, const uint8* xSrc_pc, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    21  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    22      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemCopy converts argument 1 and 2 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    23      (void) rba_BswSrv_MemCopy(xDest_p, xSrc_pc, numBytes_s32);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    26  LOCAL_INLINE void rba_DiagLib_MemUtils_MemSet(uint8* xDest_pv, sint32 xPattern_u32, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    28      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemSet converts argument 1 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    29      (void) rba_BswSrv_MemSet(xDest_pv, xPattern_u32, numBytes_s32);
	call	rba_BswSrv_MemSet
.L322:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    62              //Set the Dirty flag
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    63              Dem_NvMWriteBlockImmediate(DEM_NVM_ID_EVT_STATUSBYTE);
	mov	d15,#6
.L324:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    95  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    97  DEM_INLINE void Dem_NvMWriteBlockImmediate(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    99      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_IMMEDIATE] = DEM_NVM_STATUSBITMASK_IMMEDIATE;
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L824:
	mul	d15,d15,#5
	addsc.a	a15,a15,d15,#0
.L825:
	mov	d15,#2
.L826:
	st.b	[a15]2,d15
.L24:
.L4:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    64          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    65      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    67  }
	ret
.L290:
	
__Dem_EventStatusInitCheckNvM_function_end:
	.size	Dem_EventStatusInitCheckNvM,__Dem_EventStatusInitCheckNvM_function_end-Dem_EventStatusInitCheckNvM
.L181:
	; End of function
	
	.sdecl	'.text.Dem_EventStatus.Dem_GetEventStatus',code,cluster('Dem_GetEventStatus')
	.sect	'.text.Dem_EventStatus.Dem_GetEventStatus'
	.align	2
	
	.global	Dem_GetEventStatus

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    68  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    69  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    70  Std_ReturnType Dem_GetEventStatus(Dem_EventIdType EventId,
; Function Dem_GetEventStatus
Dem_GetEventStatus:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    71          Dem_UdsStatusByteType* EventStatusExtended)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    72  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    73      DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_FIM_IS_IN_INIT_OR_OPMO_ALLFAILUREINFOLOCKED_EVTIDVALID_EVTAVAILABLE(EventId, DEM_DET_APIID_DEM_GETEVENTSTATUS , E_NOT_OK);
.L25:
.L26:
.L27:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L28
	movh.a	a15,#@his(Dem_FimState)
	lea	a15,[a15]@los(Dem_FimState)
	ld.bu	d15,[a15]
	jeq	d15,#1,.L29
	mov	d4,#54
.L679:
	mov	d5,#0
	mov	d6,#10
	mov	d7,#32
	call	Det_ReportError
.L680:
	mov	d2,#1
	j	.L30
.L29:
.L28:
.L31:
.L32:
.L33:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L761:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L34
.L762:
	ge.u	d0,d4,#6
.L763:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L35:
.L34:
	j	.L36

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L36:
	jne	d15,#0,.L37
.L201:
	mov	d4,#54
.L681:
	mov	d5,#0
	mov	d6,#10
	mov	d7,#16
	call	Det_ReportError
.L682:
	mov	d2,#1
	j	.L38
.L37:
.L39:
.L40:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L764:
	addsc.a	a15,a15,d4,#2
.L765:
	ld.bu	d15,[a15]
.L766:
	mov	d0,#2
.L211:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L767:
	and	d15,#1
.L768:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L41

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L41:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L769:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L42

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L42:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L43

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L43:
	jeq	d15,#0,.L44
.L206:
	mov	d2,#1
	j	.L45
.L44:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    74  	DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(EventStatusExtended,DEM_DET_APIID_DEM_GETEVENTSTATUS,E_NOT_OK);
.L46:
.L47:
	jnz.a	a4,.L48
.L770:
	mov	d4,#54
.L683:
	mov	d5,#0
	mov	d6,#10
	mov	d7,#17
	call	Det_ReportError
.L684:
	mov	d2,#1
	j	.L49
.L48:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L771:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L772:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L50

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L50:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    75  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    76      *EventStatusExtended = Dem_EvtGetIsoByte(EventId);
	st.b	[a4],d15
.L773:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    77      return E_OK;
	mov	d2,#0
.L774:
	j	.L51

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    78  }
.L51:
.L49:
.L45:
.L38:
.L30:
	ret
.L195:
	
__Dem_GetEventStatus_function_end:
	.size	Dem_GetEventStatus,__Dem_GetEventStatus_function_end-Dem_GetEventStatus
.L161:
	; End of function
	
	.sdecl	'.text.Dem_EventStatus.Dem_GetEventStatus_GeneralEvtInfo',code,cluster('Dem_GetEventStatus_GeneralEvtInfo')
	.sect	'.text.Dem_EventStatus.Dem_GetEventStatus_GeneralEvtInfo'
	.align	2
	
	.global	Dem_GetEventStatus_GeneralEvtInfo

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    80  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId,
; Function Dem_GetEventStatus_GeneralEvtInfo
.L144:
Dem_GetEventStatus_GeneralEvtInfo:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    81          Dem_UdsStatusByteType* EventStatusExtended)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    82  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    83      return Dem_GetEventStatus(EventId, EventStatusExtended);
	call	Dem_GetEventStatus
.L685:
	j	.L52

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    84  }
.L52:
	ret
.L287:
	
__Dem_GetEventStatus_GeneralEvtInfo_function_end:
	.size	Dem_GetEventStatus_GeneralEvtInfo,__Dem_GetEventStatus_GeneralEvtInfo_function_end-Dem_GetEventStatus_GeneralEvtInfo
.L176:
	; End of function
	
	.sdecl	'.text.Dem_EventStatus.Dem_EvtGetLastReportedEventStatus',code,cluster('Dem_EvtGetLastReportedEventStatus')
	.sect	'.text.Dem_EventStatus.Dem_EvtGetLastReportedEventStatus'
	.align	2
	
	.global	Dem_EvtGetLastReportedEventStatus

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    86  /* Function to query the Last Reported Event Status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    87  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    88  Dem_EventStatusType Dem_EvtGetLastReportedEventStatus (Dem_EventIdType EventId)
; Function Dem_EvtGetLastReportedEventStatus
.L146:
Dem_EvtGetLastReportedEventStatus:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
	movh.a	a15,#@his(Dem_AllEventsState8)
	lea	a15,[a15]@los(Dem_AllEventsState8)
.L779:
	addsc.a	a15,a15,d4,#0
.L780:
	ld.bu	d2,[a15]
.L781:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;      (inlined)
	j	.L53

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }      (inlined)
.L53:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    89  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    90      return Dem_EvtGetLastReportedEvent(EventId);
	j	.L54

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    91  }
.L54:
	ret
.L227:
	
__Dem_EvtGetLastReportedEventStatus_function_end:
	.size	Dem_EvtGetLastReportedEventStatus,__Dem_EvtGetLastReportedEventStatus_function_end-Dem_EvtGetLastReportedEventStatus
.L166:
	; End of function
	
	.sdecl	'.text.Dem_EventStatus.Dem_ClearEvent',code,cluster('Dem_ClearEvent')
	.sect	'.text.Dem_EventStatus.Dem_ClearEvent'
	.align	2
	
	.global	Dem_ClearEvent

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    92  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    93  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully)
; Function Dem_ClearEvent
.L148:
Dem_ClearEvent:	.type	func
	sub.a	a10,#8
.L686:
	mov	d8,d4
.L689:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    94  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    95      Dem_UdsStatusByteType statusOld, statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    96      Dem_UdsStatusByteType dtcStByteOld;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    98      statusOld = DEM_ISO14229BYTE_INITVALUE;
	mov	d15,#80
.L831:
	st.b	[a10],d15
.L832:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	    99      statusNew = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   100      dtcStByteOld = DEM_ISO14229BYTE_INITVALUE;
	mov	d15,#80
.L833:
	st.b	[a10]1,d15
.L334:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a12,#@his(Dem_AllEventsState)
	lea	a12,[a12]@los(Dem_AllEventsState)
.L834:
	addsc.a	a15,a12,d8,#2
.L835:
	ld.bu	d0,[a15]
.L836:
	mov	d1,#2
.L337:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L837:
	and	d15,d0,#1
.L838:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L55

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L55:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d0,d15,#0
.L839:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L56

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L56:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L57

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L57:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   101  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   102      if (!Dem_EvtIsSuppressed(eventId))
	jne	d0,#0,.L58
.L335:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   103      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   104          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   105          Dem_StatusChange_GetOldStatus(eventId, &statusOld, &dtcStByteOld);
	mov	d15,d8
.L840:
	lea	a15,[a10]0
.L841:
	lea	a2,[a10]1
.L343:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	movh.a	a4,#@his(Dem_AllEventsStatusByte)
	lea	a4,[a4]@los(Dem_AllEventsStatusByte)
.L842:
	addsc.a	a5,a4,d15,#0
	ld.bu	d15,[a5]
.L843:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L59

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L59:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     3  #ifndef DEM_PRV_CALLEVTSTCHNGDCBK_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     4  #define DEM_PRV_CALLEVTSTCHNGDCBK_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     6  #if(DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     7  #include "FiM.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     8  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     9  #if (DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    10  #include "Dlt.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    11  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    12  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    13  #include "Dem_Cfg_EventsCallback.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    14  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    17  DEM_INLINE void Dem_CallBackTriggerOnEventStatus (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    18  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    19  		Dem_UdsStatusByteType EventStatusOld,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    20  		Dem_UdsStatusByteType EventStatusNew,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    21  		Dem_UdsStatusByteType dtcStByteOld
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    22  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    23  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    24  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    25      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    26      Dem_UdsStatusByteType dtcStByteNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    27      Dem_DtcCodeType dtcCode;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    28  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    31      DEM_UNUSED_PARAM(dtcStByteOld);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    32      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    33      DEM_UNUSED_PARAM(EventStatusOld);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    34      DEM_UNUSED_PARAM(EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    35  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    36  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    37      Dem_CallEventStatusChangedCallBack(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    38  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    39  #if ( DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    40      Dlt_DemTriggerOnEventStatus(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    41  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    42  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    43      if ( Dem_EventIdIsDtcAssigned(EventId) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    44      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    45          dtcId = Dem_DtcIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    46          if ( Dem_DtcIsSupported(dtcId) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    47          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    48              dtcStByteNew = (uint8)(Dem_DtcStatusByteRetrieve (dtcId) & DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    49              if (dtcStByteNew != dtcStByteOld)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    50              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    51                  dtcCode = Dem_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    52                  Dem_CallbackDTCStatusChangedIndication( dtcCode, dtcStByteOld, dtcStByteNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    53              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    54          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    55      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    56  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    57  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    59  DEM_INLINE void Dem_StatusChange_GetOldStatus (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    60  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    61  		Dem_UdsStatusByteType *isoByteOld,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    62  		Dem_UdsStatusByteType *dtcStByteOld
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    63  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    64  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    65  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    66  	Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    67  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    68  	*(isoByteOld) = Dem_EvtGetIsoByte(EventId);
	st.b	[a15],d15
.L844:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    69      *dtcStByteOld = 0;
	mov	d15,#0
.L845:
	st.b	[a2],d15
.L344:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   106          if (ClearFully)
	jeq	d5,#0,.L60
.L354:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
	addsc.a	a15,a4,d8,#0
.L846:
	mov	d15,#80
.L847:
	st.b	[a15],d15
.L355:
	addsc.a	a15,a4,d8,#0
	ld.bu	d9,[a15]
.L690:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L61

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L61:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   107          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   108              Dem_EvtSt_HandleClear(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   110              statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   112              Dem_EvtSetCausal(eventId, FALSE);
	mov	d5,#0
.L687:
	mov	d4,d8
	call	Dem_EvtSetCausal
.L688:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   113              Dem_EvtSetInitMonitoring(eventId, DEM_INIT_MONITOR_CLEAR);
	mov	d4,#1
.L360:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
	addsc.a	a15,a12,d8,#2
.L848:
	ld.bu	d0,[a15]
.L369:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
	mov	d1,#1
.L691:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
	sha	d0,#-3
.L849:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
	sha	d1,#3
.L692:
	div.u	e0,d0,d1
.L850:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;      (inlined)
	j	.L62

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }      (inlined)
.L62:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();      (inlined)
.L63:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))      (inlined)
	jeq	d1,#0,.L64
.L851:
	jlt.u	d1,#2,.L65
.L64:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
	mov	d15,#3
.L852:
	mov	d1,#3
.L379:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    76  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    77  LOCAL_INLINE void rba_DiagLib_Bit8ClearBits(uint8 *value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    78  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    79      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    80      *value &= ((uint8) (~((uint8) ((((uint8) (bit2shift << number_of_bits)) - 1u) << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    81  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    82  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    83  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBits(uint8 *value, uint8 bit_position, uint8 number_of_bits, uint8 newValue)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    84  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    85      uint8 bit2shift = 1;
	mov	d0,#1
.L391:
	mov	d2,#1
.L694:
	ld.bu	d3,[a15]
.L853:
	sha	d2,d2,d1
.L695:
	add	d2,#-1
.L854:
	sh	d2,d2,d15
.L855:
	xor	d15,d2,#255
.L856:
	and	d3,d15
	st.b	[a15],d3
.L392:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    86      rba_DiagLib_Bit8ClearBits(value, bit_position, number_of_bits);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    87      *value |= ((uint8) ((newValue % ((uint8) (bit2shift << number_of_bits))) << bit_position));
	ld.bu	d15,[a15]
.L857:
	sha	d0,#3
.L693:
	div.u	e0,d4,d0
.L858:
	sha	d0,d1,#3
.L859:
	or	d15,d0
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))      (inlined)
.L65:
	movh.a	a15,#@his(Dem_GlobalInitMonitoringCounter)
	lea	a15,[a15]@los(Dem_GlobalInitMonitoringCounter)
	ld.hu	d15,[a15]0
.L860:
	add	d15,#1
	st.h	[a15],d15
.L402:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
	mov	d0,#1
.L405:
	movh.a	a15,#@his(Dem_EvtIsAnyInitMonitoringRequestedMask)
	lea	a15,[a15]@los(Dem_EvtIsAnyInitMonitoringRequestedMask)
.L410:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     3  #ifndef RBA_DIAGLIB_BITS32_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     4  #define RBA_DIAGLIB_BITS32_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     9  #define RBA_DIAGLIB_ISBITSET32       rba_DiagLib_Bit32IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT32   rba_DiagLib_Bit32GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    11  #define RBA_DIAGLIB_GETBITS32        rba_DiagLib_Bit32GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT32   rba_DiagLib_Bit32OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS32  rba_DiagLib_Bit32OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    15  LOCAL_INLINE uint32 rba_DiagLib_Bit32Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    17      uint32 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    21  LOCAL_INLINE void rba_DiagLib_Bit32SetBitMask(uint32 *buffer, uint32 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    26  LOCAL_INLINE void rba_DiagLib_Bit32ClearBitMask(uint32 *buffer, uint32 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    28      *buffer &= ((uint32) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    31  LOCAL_INLINE void rba_DiagLib_Bit32MergeBitmask(uint32 *buffer, uint32 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    36  LOCAL_INLINE void rba_DiagLib_Bit32SetBit(uint32 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    38      uint32 bit2shift = 1;
	mov	d15,#1
.L696:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    39      *buffer |= ((uint32) (bit2shift << bit_position));
	ld.w	d1,[a15]
.L861:
	sh	d15,d15,d0
.L697:
	or	d1,d15
	st.w	[a15],d1
.L361:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   114              Dem_EvtSetLastReportedEvent(eventId, DEM_EVENT_STATUS_INVALIDREPORT);
	mov	d15,#255
.L419:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
	movh.a	a15,#@his(Dem_AllEventsState8)
	lea	a15,[a15]@los(Dem_AllEventsState8)
.L862:
	addsc.a	a15,a15,d8,#0
.L863:
	st.b	[a15],d15
.L420:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   115              Dem_EvtRequestResetFailureFilter(eventId, TRUE);
	mov	d0,#1

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();      (inlined)
.L66:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
	movh.a	a15,#@his(Dem_AllEventsResetDebouncerRequested)
	lea	a15,[a15]@los(Dem_AllEventsResetDebouncerRequested)
.L864:
	mov	d15,d8
.L433:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
	jeq	d0,#0,.L67
.L442:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d15,#-5
.L698:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,#31
.L865:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L866:
	sh	d1,d1,d15
.L700:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L699:
	or	d15,d1
	st.w	[a15],d15
.L867:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;      (inlined)
	j	.L68

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }      (inlined)
.L68:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    65          Dem_BitArraySetBit(buffer, bit_position);      (inlined)
	j	.L69

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
.L67:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    46  DEM_INLINE void Dem_BitArrayClearBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    48      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    49      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d15,#-5
.L701:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    50      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,#31
.L868:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    51      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    52              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L869:
	sh	d1,d1,d15
.L704:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    54      buffer[element_pos] &= (uint32) ~ mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L703:
	mov	d0,#-1
.L702:
	xor	d1,d0
.L705:
	and	d15,d1
	st.w	[a15],d15
.L870:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    55      return;      (inlined)
	j	.L70

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    56  }      (inlined)
.L70:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    66      } else {      (inlined)
.L69:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    69      return;      (inlined)
	j	.L71

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    70  }      (inlined)
.L71:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   116  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   117              /*Reset FDC-Threshold_reached-flags whenever the event is cleared from the event memory*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   118             #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   119                 Dem_EvtSetFDCThresholdReachedTOC(eventId,FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   120             #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   121             #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   122                 Dem_EvtSetFDCThresholdReached(eventId,FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   123             #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   124  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   125              if (statusNew != statusOld)
	ld.bu	d15,[a10]
.L871:
	jeq	d15,d9,.L72

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   126              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   127                  Dem_ClearIndicatorAttributes(eventId,statusOld,statusNew);
.L73:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;      (inlined)
	j	.L74

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }      (inlined)
.L74:
.L72:
	j	.L75
.L60:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
	addsc.a	a15,a4,d8,#0
.L872:
	mov	d15,#0
.L475:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
	mov	d0,#1
.L481:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L76
.L485:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L706:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L873:
	sha	d15,d15,d0
.L707:
	or	d1,d15
	st.b	[a15],d1
.L486:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L77

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L76:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L708:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L874:
	sha	d15,d15,d0
.L709:
	xor	d15,d15,#255
.L875:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L77:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
	mov	d15,#0
.L494:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
	mov	d0,#5
.L500:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L78
.L501:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L710:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L876:
	sha	d15,d15,d0
.L711:
	or	d1,d15
	st.b	[a15],d1
.L502:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L79

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L78:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L712:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L877:
	sha	d15,d15,d0
.L713:
	xor	d15,d15,#255
.L878:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L79:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
	mov	d15,#0
.L506:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
	mov	d0,#6
.L879:
	eq	d15,d15,#0
.L512:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L80
.L513:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L714:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L880:
	sha	d15,d15,d0
.L715:
	or	d1,d15
	st.b	[a15],d1
.L514:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L81

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L80:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L716:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L881:
	sha	d15,d15,d0
.L717:
	xor	d15,d15,#255
.L882:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L81:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
	mov	d15,#0
.L518:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   217  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   221  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   223      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC, !setOrReset);
	mov	d0,#4
.L883:
	eq	d15,d15,#0
.L524:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L82
.L525:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L718:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L884:
	sha	d15,d15,d0
.L719:
	or	d1,d15
	st.b	[a15],d1
.L526:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L83

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L82:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L720:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L885:
	sha	d15,d15,d0
.L721:
	xor	d15,d15,#255
.L886:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L83:
	addsc.a	a15,a4,d8,#0
	ld.bu	d9,[a15]
.L722:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L84

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L84:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   128                  Dem_NodeSetRecheckOnClear(Dem_NodeIdFromEventId(eventId), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   129              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   130          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   131          else
.L75:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   132          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   133              Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   134              statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   135          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   136          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   137          Dem_TriggerOn_EventStatusChange(eventId,statusOld,statusNew,dtcStByteOld);
	ld.bu	d15,[a10]
.L530:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
	jeq	d15,d9,.L85

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();      (inlined)
.L86:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
.L85:
.L58:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   138      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   139  }
	ret
.L328:
	
__Dem_ClearEvent_function_end:
	.size	Dem_ClearEvent,__Dem_ClearEvent_function_end-Dem_ClearEvent
.L186:
	; End of function
	
	.sdecl	'.text.Dem_EventStatus.Dem_EvtAdvanceOperationCycle',code,cluster('Dem_EvtAdvanceOperationCycle')
	.sect	'.text.Dem_EventStatus.Dem_EvtAdvanceOperationCycle'
	.align	2
	
	.global	Dem_EvtAdvanceOperationCycle

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   141  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   142  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList)
; Function Dem_EvtAdvanceOperationCycle
.L150:
Dem_EvtAdvanceOperationCycle:	.type	func
	sub.a	a10,#88
.L723:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   143  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   144      Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   145      Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   146      Dem_UdsStatusByteType statusNew,statusOld;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   147      Dem_UdsStatusByteType dtcStByteOld;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   148      Dem_EventIdType CBeventId[DEM_CFG_ADVANCEOPERATIONCYCLE_EVENTSPERLOCK] = {0};
	movh.a	a15,#@his(.1.ini)
	lea	a15,[a15]@los(.1.ini)
	lea	a15,[a15]0
.L891:
	lea	a2,[a10]6
	lea	a4,31
.L87:
	ld.bu	d15,[a15+]
	st.b	[a2+],d15
	loop	a4,.L87
.L892:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   149      Dem_UdsStatusByteType CBStatusOld[DEM_CFG_ADVANCEOPERATIONCYCLE_EVENTSPERLOCK] = {0};
	movh.a	a15,#@his(.2.ini)
	lea	a15,[a15]@los(.2.ini)
	lea	a2,[a15]0
.L893:
	lea	a4,[a10]38
	mov.a	a5,#15
.L88:
	ld.bu	d15,[a2+]
	st.b	[a4+],d15
	loop	a5,.L88
.L894:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   150      Dem_UdsStatusByteType CBStatusNew[DEM_CFG_ADVANCEOPERATIONCYCLE_EVENTSPERLOCK] = {0};
	lea	a2,[a15]0
.L895:
	lea	a4,[a10]54
	mov.a	a5,#15
.L89:
	ld.bu	d15,[a2+]
	st.b	[a4+],d15
	loop	a5,.L89
.L896:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   151      Dem_UdsStatusByteType CBdtcStByteOld[DEM_CFG_ADVANCEOPERATIONCYCLE_EVENTSPERLOCK] = {0};
	lea	a15,[a15]0
.L897:
	lea	a2,[a10]70
	mov.a	a4,#15
.L90:
	ld.bu	d15,[a15+]
	st.b	[a2+],d15
	loop	a4,.L90
.L898:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   152      uint32 CBindex=0;
	mov	d2,#0
.L724:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   153      uint32 i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   154      uint32 eventsProcessed = 0;
	mov	d3,#0
.L725:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   155  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   156      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   157      for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
	lea	a15,[a10]0
.L558:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
	mov	d0,#1
.L899:
	st.w	[a15],d0
.L559:
	j	.L91
.L92:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   158      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   159          eventsProcessed++;
	add	d3,#1
.L900:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   160          eventId = Dem_EventIdIteratorCurrent(&eventIt);
	lea	a15,[a10]0
.L564:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
	ld.w	d0,[a15]
.L901:
	extr.u	d5,d0,#0,#16
.L726:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);      (inlined)
	j	.L93

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }      (inlined)
.L93:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L94:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;      (inlined)
	j	.L95

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }      (inlined)
.L95:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
	mov	d0,#1
.L902:
	sh	d0,#0
.L903:
	and	d0,d4
.L904:
	ne	d0,d0,#0
.L905:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);      (inlined)
	j	.L96

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }      (inlined)
.L96:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   161          if (Dem_isEventAffectedByOperationCycleList(eventId, operationCycleList))
	jeq	d0,#0,.L97
.L906:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   162          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   163              /* Set iso status-byte to next operation cycle */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   164              Dem_StatusChange_GetOldStatus(eventId, &statusOld, &dtcStByteOld);
	mov	d15,d5
.L907:
	lea	a15,[a10]4
.L908:
	lea	a2,[a10]5
.L578:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	movh.a	a4,#@his(Dem_AllEventsStatusByte)
	lea	a4,[a4]@los(Dem_AllEventsStatusByte)
.L909:
	addsc.a	a5,a4,d15,#0
	ld.bu	d0,[a5]
.L910:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L98

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L98:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     3  #ifndef DEM_PRV_CALLEVTSTCHNGDCBK_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     4  #define DEM_PRV_CALLEVTSTCHNGDCBK_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     6  #if(DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     7  #include "FiM.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     8  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     9  #if (DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    10  #include "Dlt.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    11  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    12  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    13  #include "Dem_Cfg_EventsCallback.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    14  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    17  DEM_INLINE void Dem_CallBackTriggerOnEventStatus (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    18  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    19  		Dem_UdsStatusByteType EventStatusOld,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    20  		Dem_UdsStatusByteType EventStatusNew,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    21  		Dem_UdsStatusByteType dtcStByteOld
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    22  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    23  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    24  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    25      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    26      Dem_UdsStatusByteType dtcStByteNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    27      Dem_DtcCodeType dtcCode;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    28  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    31      DEM_UNUSED_PARAM(dtcStByteOld);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    32      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    33      DEM_UNUSED_PARAM(EventStatusOld);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    34      DEM_UNUSED_PARAM(EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    35  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    36  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    37      Dem_CallEventStatusChangedCallBack(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    38  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    39  #if ( DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    40      Dlt_DemTriggerOnEventStatus(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    41  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    42  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    43      if ( Dem_EventIdIsDtcAssigned(EventId) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    44      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    45          dtcId = Dem_DtcIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    46          if ( Dem_DtcIsSupported(dtcId) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    47          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    48              dtcStByteNew = (uint8)(Dem_DtcStatusByteRetrieve (dtcId) & DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    49              if (dtcStByteNew != dtcStByteOld)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    50              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    51                  dtcCode = Dem_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    52                  Dem_CallbackDTCStatusChangedIndication( dtcCode, dtcStByteOld, dtcStByteNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    53              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    54          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    55      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    56  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    57  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    59  DEM_INLINE void Dem_StatusChange_GetOldStatus (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    60  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    61  		Dem_UdsStatusByteType *isoByteOld,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    62  		Dem_UdsStatusByteType *dtcStByteOld
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    63  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    64  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    65  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    66  	Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    67  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    68  	*(isoByteOld) = Dem_EvtGetIsoByte(EventId);
	st.b	[a15],d0
.L911:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    69      *dtcStByteOld = 0;
	mov	d0,#0
.L912:
	st.b	[a2],d0
.L579:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   165              Dem_EvtSt_HandleNewOperationCycle(eventId);
	mov	d15,d5
.L585:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L913:
	addsc.a	a2,a15,d15,#2
.L914:
	ld.bu	d0,[a2]
.L915:
	mov	d1,#2
.L591:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L916:
	and	d15,d0,#1
.L917:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L99

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L99:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L918:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L100

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L100:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L101

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L101:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))      (inlined)
	jne	d15,#0,.L102
.L589:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   247  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   248  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   249      Dem_EvtSt_CustomClear_OnlyThisCycleAndReadiness(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   250  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   251  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   252      /* Hint : As Events mapped to OBD DTCs are not allowed to configure ClearAllowedBehavior as ONLY_THIS_CYCLE_AND_READINESS,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   253       * no additional functions are called when DEM_CFG_OBD == DEM_CFG_OBD_ON */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   256  DEM_INLINE void Dem_EvtSt_HandleNewOperationCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   259      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   260          /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   261      if (Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]) && !Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   262      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   263          Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   264      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   265           */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   266          Dem_AllEventsStatusByte[EventId] &= (Dem_UdsStatusByteType)(~DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK);
	addsc.a	a2,a4,d5,#0
	ld.bu	d15,[a2]
.L919:
	and	d15,#253
	st.b	[a2],d15
.L920:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   267          Dem_AllEventsStatusByte[EventId] |= DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK;
	ld.bu	d15,[a2]
.L921:
	or	d15,#64
	st.b	[a2],d15

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))      (inlined)
.L102:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   166  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   167              Dem_SetIndicatorDeActivation_OnOperationCycleChange(eventId, statusOld, Dem_EvtGetIsoByte(eventId));
.L103:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	addsc.a	a2,a4,d5,#0
	ld.bu	d7,[a2]
.L922:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L104

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L104:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   168  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   169              /* Updated Status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   170              statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   171  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   172              //Reset FDC-Threshold_reached-flag whenever the operation cycle starts/restarts
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   173  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   174              Dem_EvtSetFDCThresholdReachedTOC(eventId,FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   175  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   176              Dem_EvtSetInitMonitoring(eventId, DEM_INIT_MONITOR_RESTART);
	mov	d8,#2
.L596:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
	addsc.a	a15,a15,d5,#2
.L923:
	ld.bu	d15,[a15]
.L601:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
	mov	d0,#1
.L727:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
	sha	d15,#-3
.L924:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
	sha	d0,#3
.L728:
	div.u	e0,d15,d0
.L925:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;      (inlined)
	j	.L105

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }      (inlined)
.L105:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();      (inlined)
.L106:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))      (inlined)
	jeq	d1,#0,.L107
.L926:
	jlt.u	d1,#3,.L108
.L107:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
	mov	d15,#3
.L927:
	mov	d1,#3
.L606:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    68  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    69  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetBits(uint8 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    70  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    71      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    72      value = value >> bit_position;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    73      value = value % ((uint8) (bit2shift << number_of_bits));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    74      return value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    75  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    76  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    77  LOCAL_INLINE void rba_DiagLib_Bit8ClearBits(uint8 *value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    78  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    79      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    80      *value &= ((uint8) (~((uint8) ((((uint8) (bit2shift << number_of_bits)) - 1u) << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    81  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    82  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    83  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBits(uint8 *value, uint8 bit_position, uint8 number_of_bits, uint8 newValue)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    84  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    85      uint8 bit2shift = 1;
	mov	d9,#1
.L612:
	mov	d0,#1
.L730:
	ld.bu	d6,[a15]
.L928:
	sha	d0,d0,d1
.L731:
	add	d0,#-1
.L929:
	sh	d0,d0,d15
.L930:
	xor	d15,d0,#255
.L931:
	and	d6,d15
	st.b	[a15],d6
.L613:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    86      rba_DiagLib_Bit8ClearBits(value, bit_position, number_of_bits);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    87      *value |= ((uint8) ((newValue % ((uint8) (bit2shift << number_of_bits))) << bit_position));
	ld.bu	d15,[a15]
.L932:
	sha	d9,#3
.L729:
	div.u	e0,d8,d9
.L933:
	sha	d0,d1,#3
.L934:
	or	d15,d0
	st.b	[a15],d15

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))      (inlined)
.L108:
	movh.a	a15,#@his(Dem_GlobalInitMonitoringCounter)
	lea	a15,[a15]@los(Dem_GlobalInitMonitoringCounter)
	ld.hu	d15,[a15]0
.L935:
	add	d15,#1
	st.h	[a15],d15
.L618:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
	mov	d0,#2
.L619:
	movh.a	a15,#@his(Dem_EvtIsAnyInitMonitoringRequestedMask)
	lea	a15,[a15]@los(Dem_EvtIsAnyInitMonitoringRequestedMask)
.L621:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     3  #ifndef RBA_DIAGLIB_BITS32_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     4  #define RBA_DIAGLIB_BITS32_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	     9  #define RBA_DIAGLIB_ISBITSET32       rba_DiagLib_Bit32IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT32   rba_DiagLib_Bit32GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    11  #define RBA_DIAGLIB_GETBITS32        rba_DiagLib_Bit32GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT32   rba_DiagLib_Bit32OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS32  rba_DiagLib_Bit32OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    15  LOCAL_INLINE uint32 rba_DiagLib_Bit32Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    17      uint32 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    21  LOCAL_INLINE void rba_DiagLib_Bit32SetBitMask(uint32 *buffer, uint32 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    26  LOCAL_INLINE void rba_DiagLib_Bit32ClearBitMask(uint32 *buffer, uint32 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    28      *buffer &= ((uint32) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    31  LOCAL_INLINE void rba_DiagLib_Bit32MergeBitmask(uint32 *buffer, uint32 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    36  LOCAL_INLINE void rba_DiagLib_Bit32SetBit(uint32 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    38      uint32 bit2shift = 1;
	mov	d15,#1
.L732:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits32.h	    39      *buffer |= ((uint32) (bit2shift << bit_position));
	ld.w	d1,[a15]
.L936:
	sh	d15,d15,d0
.L733:
	or	d1,d15
	st.w	[a15],d1
.L597:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   177              Dem_EvtRequestResetFailureFilter(eventId, TRUE);
	mov	d0,#1

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();      (inlined)
.L109:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
	movh.a	a15,#@his(Dem_AllEventsResetDebouncerRequested)
	lea	a15,[a15]@los(Dem_AllEventsResetDebouncerRequested)
.L937:
	mov	d15,d5
.L627:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
	jeq	d0,#0,.L110
.L631:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d15,#-5
.L734:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,#31
.L938:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L939:
	sh	d1,d1,d15
.L736:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L735:
	or	d15,d1
	st.w	[a15],d15
.L940:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;      (inlined)
	j	.L111

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }      (inlined)
.L111:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    65          Dem_BitArraySetBit(buffer, bit_position);      (inlined)
	j	.L112

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
.L110:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    46  DEM_INLINE void Dem_BitArrayClearBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    48      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    49      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d15,#-5
.L737:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    50      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,#31
.L941:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    51      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    52              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L942:
	sh	d1,d1,d15
.L740:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    54      buffer[element_pos] &= (uint32) ~ mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L739:
	mov	d0,#-1
.L738:
	xor	d1,d0
.L741:
	and	d15,d1
	st.w	[a15],d15
.L943:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    55      return;      (inlined)
	j	.L113

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    56  }      (inlined)
.L113:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    66      } else {      (inlined)
.L112:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    69      return;      (inlined)
	j	.L114

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    70  }      (inlined)
.L114:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   178              Dem_EvtSetLastReportedEvent(eventId,DEM_EVENT_STATUS_INVALIDREPORT);
	mov	d15,#255
.L648:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
	movh.a	a15,#@his(Dem_AllEventsState8)
	lea	a15,[a15]@los(Dem_AllEventsState8)
.L944:
	addsc.a	a15,a15,d5,#0
.L945:
	st.b	[a15],d15
.L649:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   179  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   180              CBeventId[CBindex]=eventId;
	addsc.a	a15,a10,d2,#1
.L946:
	st.h	[a15]6,d5
.L947:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   181              CBStatusOld[CBindex]=statusOld;
	addsc.a	a15,a10,d2,#0
.L948:
	ld.bu	d15,[a10]4
.L949:
	st.b	[a15]38,d15
.L950:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   182              CBStatusNew[CBindex]=statusNew;
	addsc.a	a15,a10,d2,#0
.L951:
	st.b	[a15]54,d7
.L952:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   183              CBdtcStByteOld[CBindex]=dtcStByteOld;
	addsc.a	a15,a10,d2,#0
.L953:
	ld.bu	d15,[a10]5
.L954:
	st.b	[a15]70,d15
.L955:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   184              CBindex++;
	add	d2,#1
.L97:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L115:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;      (inlined)
	j	.L116

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }      (inlined)
.L116:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
	mov	d15,#1
.L956:
	sh	d15,#0
.L957:
	and	d15,d4
.L958:
	ne	d15,d15,#0
.L959:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);      (inlined)
	j	.L117

; BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }      (inlined)
.L117:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   185  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   186          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   188          if (Dem_isEventAffectedByFailureCycleList(eventId, operationCycleList))
	jeq	d15,#0,.L118
.L118:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   189          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   190              Dem_EvtSt_HandleNewFailureCycle(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   191          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   193          if (eventsProcessed >= DEM_CFG_ADVANCEOPERATIONCYCLE_EVENTSPERLOCK)
	mov	d15,#16
.L960:
	jlt.u	d3,d15,.L119
.L961:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   194          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   195              eventsProcessed=0;
	mov	d3,#0
.L962:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   196              DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   197              for(i=0; i<CBindex; i++)
	mov	d15,#0
.L742:
	j	.L120
.L121:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   198              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   199                  Dem_TriggerOn_EventStatusChange(CBeventId[i],CBStatusOld[i],CBStatusNew[i],CBdtcStByteOld[i]);
	addsc.a	a15,a10,d15,#0
	ld.bu	d0,[a15]38
.L963:
	addsc.a	a15,a10,d15,#0
	ld.bu	d1,[a15]54
.L662:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
	jeq	d1,d0,.L122

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();      (inlined)
.L123:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
.L122:
	add	d15,#1
.L120:
	jlt.u	d15,d2,.L121
.L964:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   200              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   201              CBindex=0;
	mov	d2,#0
.L119:
	lea	a15,[a10]0
.L668:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
	ld.w	d15,[a15]
.L965:
	add	d15,#1
	st.w	[a15],d15
.L91:
	lea	a15,[a10]0
.L673:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
	ld.w	d15,[a15]
.L966:
	mov	d0,#5
.L967:
	ge.u	d15,d0,d15
.L968:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);      (inlined)
	j	.L124

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }      (inlined)
.L124:
	jne	d15,#0,.L92
.L969:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   202              DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   203          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   204      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   205      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   206      for(i=0; i<CBindex; i++)
	mov	d15,#0
.L743:
	j	.L125
.L126:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   207      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   208          Dem_TriggerOn_EventStatusChange(CBeventId[i],CBStatusOld[i],CBStatusNew[i],CBdtcStByteOld[i]);
	addsc.a	a15,a10,d15,#0
	ld.bu	d0,[a15]38
.L970:
	addsc.a	a15,a10,d15,#0
	ld.bu	d1,[a15]54
.L677:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
	jeq	d1,d0,.L127

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();      (inlined)
.L128:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
.L127:
	add	d15,#1
.L125:
	jlt.u	d15,d2,.L126
.L971:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   209      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   210  }
	ret
.L540:
	
__Dem_EvtAdvanceOperationCycle_function_end:
	.size	Dem_EvtAdvanceOperationCycle,__Dem_EvtAdvanceOperationCycle_function_end-Dem_EvtAdvanceOperationCycle
.L191:
	; End of function
	
	.sdecl	'.text.Dem_EventStatus.Dem_OverwriteWIRStatus',code,cluster('Dem_OverwriteWIRStatus')
	.sect	'.text.Dem_EventStatus.Dem_OverwriteWIRStatus'
	.align	2
	
	.global	Dem_OverwriteWIRStatus

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   211  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   212  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   214  Std_ReturnType Dem_OverwriteWIRStatus( Dem_EventIdType EventId, boolean WIRStatus )
; Function Dem_OverwriteWIRStatus
.L152:
Dem_OverwriteWIRStatus:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   216      Std_ReturnType ret_val = E_NOT_OK;
	mov	d2,#1
.L237:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L786:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L129
.L787:
	ge.u	d0,d4,#6
.L788:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L130:
.L129:
	j	.L131

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L131:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   217  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   218      if( Dem_isEventIdValid(EventId) )
	jeq	d15,#0,.L132
.L238:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   219      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   220          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   221  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   222          if (WIRStatus)
	jeq	d5,#0,.L133
.L241:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   247  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   248  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   249      Dem_EvtSt_CustomClear_OnlyThisCycleAndReadiness(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   250  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   251  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   252      /* Hint : As Events mapped to OBD DTCs are not allowed to configure ClearAllowedBehavior as ONLY_THIS_CYCLE_AND_READINESS,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   253       * no additional functions are called when DEM_CFG_OBD == DEM_CFG_OBD_ON */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   256  DEM_INLINE void Dem_EvtSt_HandleNewOperationCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   259      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   260          /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   261      if (Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]) && !Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   262      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   263          Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   264      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   265           */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   266          Dem_AllEventsStatusByte[EventId] &= (Dem_UdsStatusByteType)(~DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   267          Dem_AllEventsStatusByte[EventId] |= DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   268  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   269          Dem_EvtSt_CustomNewOperationCycle(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   270  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   271      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   272  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   273  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   274  DEM_INLINE void Dem_EvtSt_HandleNewFailureCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   275  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   276  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   277      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   278      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   279  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   280      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   281  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   282  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   283  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   284  DEM_INLINE void Dem_EvtSt_HandleIndicatorOn(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   285  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   286      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), TRUE);
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L789:
	addsc.a	a15,a15,d4,#0
.L790:
	mov	d15,#1
.L246:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   217  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   221  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   223      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   227  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   228  DEM_INLINE void Dem_ISO14229ByteSetPendingDTC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   229  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   230      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_PENDINGDTC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   231  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   233  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   235  DEM_INLINE void Dem_ISO14229ByteSetConfirmedDTC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   236  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   237      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_CONFIRMEDDTC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   238  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   240  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   242  DEM_INLINE void Dem_ISO14229ByteSetWarningIndicatorRequested (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   244      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_WARNINGINDICATOR, setOrReset);
	mov	d0,#7
.L253:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L134
.L262:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L744:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L791:
	sha	d15,d15,d0
.L745:
	or	d1,d15
	st.b	[a15],d1
.L263:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L135

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L134:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L746:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L792:
	sha	d15,d15,d0
.L747:
	xor	d15,d15,#255
.L793:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L135:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   223          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   224              Dem_EvtSt_HandleIndicatorOn(EventId);
	j	.L136
.L133:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   247  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   248  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   249      Dem_EvtSt_CustomClear_OnlyThisCycleAndReadiness(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   250  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   251  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   252      /* Hint : As Events mapped to OBD DTCs are not allowed to configure ClearAllowedBehavior as ONLY_THIS_CYCLE_AND_READINESS,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   253       * no additional functions are called when DEM_CFG_OBD == DEM_CFG_OBD_ON */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   256  DEM_INLINE void Dem_EvtSt_HandleNewOperationCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   259      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   260          /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   261      if (Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]) && !Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   262      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   263          Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   264      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   265           */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   266          Dem_AllEventsStatusByte[EventId] &= (Dem_UdsStatusByteType)(~DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   267          Dem_AllEventsStatusByte[EventId] |= DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   268  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   269          Dem_EvtSt_CustomNewOperationCycle(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   270  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   271      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   272  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   273  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   274  DEM_INLINE void Dem_EvtSt_HandleNewFailureCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   275  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   276  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   277      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   278      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   279  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   280      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   281  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   282  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   283  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   284  DEM_INLINE void Dem_EvtSt_HandleIndicatorOn(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   285  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   286      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   287  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   288      Dem_EvtSt_CustomIndicatorOn(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   289  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   290  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   292  DEM_INLINE void Dem_EvtSt_HandleIndicatorOff(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   293  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   294      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L794:
	addsc.a	a15,a15,d4,#0
.L795:
	mov	d15,#0
.L281:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   217  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   221  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   223      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   227  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   228  DEM_INLINE void Dem_ISO14229ByteSetPendingDTC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   229  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   230      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_PENDINGDTC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   231  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   233  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   235  DEM_INLINE void Dem_ISO14229ByteSetConfirmedDTC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   236  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   237      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_CONFIRMEDDTC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   238  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   240  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   242  DEM_INLINE void Dem_ISO14229ByteSetWarningIndicatorRequested (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   244      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_WARNINGINDICATOR, setOrReset);
	mov	d0,#7
.L282:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L137
.L283:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L748:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L796:
	sha	d15,d15,d0
.L749:
	or	d1,d15
	st.b	[a15],d1
.L284:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L138

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L137:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L750:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L797:
	sha	d15,d15,d0
.L751:
	xor	d15,d15,#255
.L798:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L138:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   225          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   226          else
.L136:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   227          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   228              Dem_EvtSt_HandleIndicatorOff(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   229          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   231          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   232          ret_val = E_OK;
	mov	d2,#0
.L132:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   233      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   234  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   235      return ret_val;
	j	.L139

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   236  }
.L139:
	ret
.L233:
	
__Dem_OverwriteWIRStatus_function_end:
	.size	Dem_OverwriteWIRStatus,__Dem_OverwriteWIRStatus_function_end-Dem_OverwriteWIRStatus
.L171:
	; End of function
	
	.sdecl	'.bss.Dem_EventStatus.Dem_AllEventsStatusByte',data,cluster('Dem_AllEventsStatusByte')
	.sect	'.bss.Dem_EventStatus.Dem_AllEventsStatusByte'
	.global	Dem_AllEventsStatusByte
Dem_AllEventsStatusByte:	.type	object
	.size	Dem_AllEventsStatusByte,6
	.space	6
	.sdecl	'.rodata.Dem_EventStatus..1.ini',data,rom
	.sect	'.rodata.Dem_EventStatus..1.ini'
	.align	2
.1.ini:	.type	object
	.size	.1.ini,32
	.space	32
	.sdecl	'.rodata.Dem_EventStatus..2.ini',data,rom
	.sect	'.rodata.Dem_EventStatus..2.ini'
.2.ini:	.type	object
	.size	.2.ini,16
	.space	16
	.calls	'Dem_EventStatusInitCheckNvM','rba_BswSrv_MemSet'
	.calls	'Dem_EventStatusInitCheckNvM','NvM_GetErrorStatus'
	.calls	'Dem_GetEventStatus','Det_ReportError'
	.calls	'Dem_GetEventStatus_GeneralEvtInfo','Dem_GetEventStatus'
	.calls	'Dem_ClearEvent','Dem_EvtSetCausal'
	.calls	'Dem_EventStatusInitCheckNvM','',8
	.calls	'Dem_GetEventStatus','',0
	.calls	'Dem_GetEventStatus_GeneralEvtInfo','',0
	.calls	'Dem_EvtGetLastReportedEventStatus','',0
	.calls	'Dem_ClearEvent','',8
	.calls	'Dem_EvtAdvanceOperationCycle','',88
	.extern	Dem_OpMoState
	.extern	Dem_FimState
	.extern	Det_ReportError
	.extern	rba_BswSrv_MemSet
	.extern	NvM_GetErrorStatus
	.extern	Dem_NvMBlockStatusDoubleBuffer
	.extern	Dem_NvMBlockMap2NvmId
	.extern	Dem_EvtIsAnyInitMonitoringRequestedMask
	.extern	Dem_AllEventsState
	.extern	Dem_AllEventsState8
	.extern	Dem_AllEventsResetDebouncerRequested
	.extern	Dem_GlobalInitMonitoringCounter
	.extern	Dem_EvtSetCausal
	.calls	'Dem_OverwriteWIRStatus','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L154:
	.word	28911
	.half	3
	.word	.L155
	.byte	4
.L153:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L156
.L194:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	147
.L261:
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1
.L264:
	.byte	5
	.byte	'buffer',0,1,36,49
	.word	164
.L266:
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	147
.L268:
	.byte	6,0
.L270:
	.byte	4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1
.L271:
	.byte	5
	.byte	'buffer',0,1,42,51
	.word	164
.L273:
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	147
.L275:
	.byte	6,0
.L252:
	.byte	4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1
.L254:
	.byte	5
	.byte	'buffer',0,1,48,55
	.word	164
.L256:
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	147
.L258:
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	147
.L260:
	.byte	7,6,6,0,0
.L217:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	147
	.byte	1,1
.L218:
	.byte	5
	.byte	'value',0,1,60,55
	.word	147
.L220:
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	147
.L222:
	.byte	6,0
.L210:
	.byte	8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	147
	.byte	1,1
.L212:
	.byte	5
	.byte	'value',0,1,64,53
	.word	147
.L214:
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	147
.L216:
	.byte	7,6,0,0
.L368:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	147
	.byte	1,1
.L370:
	.byte	5
	.byte	'value',0,1,69,50
	.word	147
.L372:
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	147
.L374:
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	147
.L376:
	.byte	6,0
.L390:
	.byte	4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1
.L393:
	.byte	5
	.byte	'value',0,1,77,52
	.word	164
.L395:
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	147
.L397:
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	147
.L399:
	.byte	6,0
.L378:
	.byte	4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1
.L380:
	.byte	5
	.byte	'value',0,1,83,56
	.word	164
.L382:
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	147
.L384:
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	147
.L386:
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	147
.L388:
	.byte	7,6,0,0
.L196:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	864
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	886
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	147
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	886
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	147
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	864
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	864
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	147
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	147
	.byte	1,1,5
	.byte	'value',0,2,65,55
	.word	864
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	147
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	864
	.byte	1,1,5
	.byte	'value',0,2,70,53
	.word	864
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	147
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	147
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	886
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	147
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	147
	.byte	6,0
.L416:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.word	1375
.L409:
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1
.L411:
	.byte	5
	.byte	'buffer',0,3,36,51
	.word	1391
.L413:
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	147
.L415:
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1391
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	147
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1375
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1375
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	147
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	147
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1375
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	147
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1391
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	147
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	147
	.byte	6,0,8
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,4,122,30
	.word	147
	.byte	1,1,5
	.byte	'self',0,4,122,66
	.word	147
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,4,129,1,30
	.word	147
	.byte	1,1,5
	.byte	'self',0,4,129,1,69
	.word	147
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,4,157,1,30
	.word	147
	.byte	1,1,5
	.byte	'self',0,4,157,1,71
	.word	147
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,4,164,1,30
	.word	147
	.byte	1,1,5
	.byte	'self',0,4,164,1,66
	.word	147
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,4,177,1,30
	.word	147
	.byte	1,1,5
	.byte	'self',0,4,177,1,81
	.word	147
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,4,186,1,17,1,1,5
	.byte	'self',0,4,186,1,55
	.word	164
	.byte	5
	.byte	'setOrReset',0,4,186,1,79
	.word	147
	.byte	7,6,0,0
.L474:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,4,193,1,17,1,1
.L476:
	.byte	5
	.byte	'self',0,4,193,1,58
	.word	164
.L478:
	.byte	5
	.byte	'setOrReset',0,4,193,1,82
	.word	147
.L480:
	.byte	7,6,0,0
.L493:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,4,200,1,17,1,1
.L495:
	.byte	5
	.byte	'self',0,4,200,1,58
	.word	164
.L497:
	.byte	5
	.byte	'setOrReset',0,4,200,1,82
	.word	147
.L499:
	.byte	7,6,0,0
.L505:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,4,214,1,17,1,1
.L507:
	.byte	5
	.byte	'self',0,4,214,1,60
	.word	164
.L509:
	.byte	5
	.byte	'setOrReset',0,4,214,1,84
	.word	147
.L511:
	.byte	7,6,0,0
.L517:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,4,221,1,17,1,1
.L519:
	.byte	5
	.byte	'self',0,4,221,1,60
	.word	164
.L521:
	.byte	5
	.byte	'setOrReset',0,4,221,1,84
	.word	147
.L523:
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,4,228,1,17,1,1,5
	.byte	'self',0,4,228,1,55
	.word	164
	.byte	5
	.byte	'setOrReset',0,4,228,1,79
	.word	147
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,4,235,1,17,1,1,5
	.byte	'self',0,4,235,1,57
	.word	164
	.byte	5
	.byte	'setOrReset',0,4,235,1,81
	.word	147
	.byte	7,6,0,0
.L245:
	.byte	4
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,4,242,1,17,1,1
.L247:
	.byte	5
	.byte	'self',0,4,242,1,70
	.word	164
.L249:
	.byte	5
	.byte	'setOrReset',0,4,242,1,94
	.word	147
.L251:
	.byte	7,6,0,0
.L441:
	.byte	4
	.byte	'Dem_BitArraySetBit',0,3,5,33,17,1,1
.L443:
	.byte	5
	.byte	'buffer',0,5,33,36
	.word	1391
.L445:
	.byte	5
	.byte	'bit_position',0,5,33,75
	.word	1375
.L447:
	.byte	6,0
.L454:
	.byte	4
	.byte	'Dem_BitArrayClearBit',0,3,5,46,17,1,1
.L455:
	.byte	5
	.byte	'buffer',0,5,46,38
	.word	1391
.L457:
	.byte	5
	.byte	'bit_position',0,5,46,77
	.word	1375
.L459:
	.byte	6,0
.L432:
	.byte	4
	.byte	'Dem_BitArrayOverwriteBit',0,3,5,61,17,1,1
.L434:
	.byte	5
	.byte	'buffer',0,5,61,42
	.word	1391
.L436:
	.byte	5
	.byte	'bit_position',0,5,62,25
	.word	1375
.L438:
	.byte	5
	.byte	'will_bit_be_set',0,5,62,57
	.word	147
.L440:
	.byte	7,6,6,0,0,9
	.word	1375
	.byte	3
	.word	2968
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,5,75,30
	.word	147
	.byte	1,1,5
	.byte	'buffer',0,5,75,51
	.word	2973
	.byte	5
	.byte	'bit_position',0,5,75,95
	.word	1375
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,6,125,21
	.word	1375
	.byte	1,1,5
	.byte	'Input_u32',0,6,125,55
	.word	1375
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,6,150,1,21
	.word	864
	.byte	1,1,5
	.byte	'Input_u16',0,6,150,1,55
	.word	864
	.byte	6,0,2
	.byte	'int',0,4,5
.L295:
	.byte	4
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,7,26,19,1,1
.L298:
	.byte	5
	.byte	'xDest_pv',0,7,26,54
	.word	164
.L300:
	.byte	5
	.byte	'xPattern_u32',0,7,26,71
	.word	3166
.L302:
	.byte	5
	.byte	'numBytes_s32',0,7,26,92
	.word	1375
.L304:
	.byte	6,0,8
	.byte	'Dem_LibGetParamUI8',0,3,8,36,18
	.word	147
	.byte	1,1,5
	.byte	'parameter',0,8,36,44
	.word	147
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,8,41,20
	.word	147
	.byte	1,1,5
	.byte	'parameter',0,8,41,49
	.word	147
	.byte	6,0
.L200:
	.byte	8
	.byte	'Dem_isEventIdValid',0,3,9,20,30
	.word	147
	.byte	1,1
.L202:
	.byte	5
	.byte	'checkID',0,9,20,65
	.word	864
.L204:
	.byte	6,0
.L542:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.word	3418
.L557:
	.byte	4
	.byte	'Dem_EventIdIteratorNew',0,3,9,31,17,1,1
.L560:
	.byte	5
	.byte	'it',0,9,31,61
	.word	3439
.L562:
	.byte	6,0,9
	.word	3418
	.byte	3
	.word	3487
.L672:
	.byte	8
	.byte	'Dem_EventIdIteratorIsValid',0,3,9,36,30
	.word	147
	.byte	1,1
.L674:
	.byte	5
	.byte	'it',0,9,36,84
	.word	3492
.L676:
	.byte	6,0
.L667:
	.byte	4
	.byte	'Dem_EventIdIteratorNext',0,3,9,41,17,1,1
.L669:
	.byte	5
	.byte	'it',0,9,41,62
	.word	3439
.L671:
	.byte	6,0
.L563:
	.byte	8
	.byte	'Dem_EventIdIteratorCurrent',0,3,9,46,28
	.word	864
	.byte	1,1
.L565:
	.byte	5
	.byte	'it',0,9,46,82
	.word	3492
.L567:
	.byte	6,0
.L466:
	.byte	8
	.byte	'Dem_NodeIdFromEventId',0,3,9,105,33
	.word	147
	.byte	1,1
.L467:
	.byte	5
	.byte	'id',0,9,105,72
	.word	864
.L469:
	.byte	6,0,8
	.byte	'Dem_isDtcIdValid',0,3,9,152,1,30
	.word	147
	.byte	1,1,5
	.byte	'id',0,9,152,1,62
	.word	864
	.byte	6,0,8
	.byte	'Dem_DtcIdFromEventId',0,3,9,158,1,27
	.word	864
	.byte	1,1,5
	.byte	'id',0,9,158,1,65
	.word	864
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,9,166,1,28
	.word	864
	.byte	1,1,5
	.byte	'dtcid',0,9,166,1,63
	.word	864
	.byte	6,0,8
	.byte	'Dem_DtcIdGetFirstEventId',0,3,9,174,1,28
	.word	864
	.byte	1,1,5
	.byte	'dtcid',0,9,174,1,68
	.word	864
	.byte	7,6,0,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,9,252,1,30
	.word	147
	.byte	1,1,5
	.byte	'dtcGroupID',0,9,252,1,72
	.word	147
	.byte	6,0,9
	.word	864
	.byte	3
	.word	3940
	.byte	10,9,171,2,9,8,11
	.byte	'it',0
	.word	3945
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	3945
	.byte	4,2,35,4,0,3
	.word	3950
	.byte	4
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,9,177,2,17,1,1,5
	.byte	'it',0,9,177,2,78
	.word	3982
	.byte	5
	.byte	'dtcid',0,9,177,2,96
	.word	864
	.byte	7,6,0,0,9
	.word	3950
	.byte	3
	.word	4062
	.byte	8
	.byte	'Dem_EventIdListIteratorIsValid',0,3,9,193,2,30
	.word	147
	.byte	1,1,5
	.byte	'it',0,9,193,2,92
	.word	4067
	.byte	6,0,4
	.byte	'Dem_EventIdListIteratorNext',0,3,9,198,2,17,1,1,5
	.byte	'it',0,9,198,2,70
	.word	3982
	.byte	6,0,8
	.byte	'Dem_EventIdListIteratorCurrent',0,3,9,203,2,28
	.word	864
	.byte	1,1,5
	.byte	'it',0,9,203,2,90
	.word	4067
	.byte	6,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,10,32,30
	.word	147
	.byte	1,1,5
	.byte	'enableConditionList',0,10,32,68
	.word	147
	.byte	6,0,8
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,11,99,30
	.word	1375
	.byte	1,1,5
	.byte	'indx',0,11,99,67
	.word	864
	.byte	6,0
.L317:
	.byte	8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,12,49,28
	.word	864
	.byte	1,1
.L318:
	.byte	5
	.byte	'id',0,12,49,68
	.word	147
.L320:
	.byte	6,0
.L311:
	.byte	8
	.byte	'Dem_NvmGetStatus',0,3,12,54,30
	.word	147
	.byte	1,1
.L313:
	.byte	5
	.byte	'id',0,12,54,67
	.word	147
.L315:
	.byte	7,6,0,0
.L323:
	.byte	4
	.byte	'Dem_NvMWriteBlockImmediate',0,3,12,97,17,1,1
.L325:
	.byte	5
	.byte	'id',0,12,97,63
	.word	147
.L327:
	.byte	6,0
.L305:
	.byte	4
	.byte	'Dem_NvMClearBlockByInvalidate',0,3,12,107,17,1,1
.L308:
	.byte	5
	.byte	'id',0,12,107,66
	.word	147
.L310:
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,12,138,1,17,1,1,6,0
.L292:
	.byte	8
	.byte	'Dem_NvMIsInvalidateAllNVMBlocksRequested',0,3,12,167,1,30
	.word	147
	.byte	1,1
.L294:
	.byte	6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,13,36,21
	.word	864
	.byte	1,1,5
	.byte	'val',0,13,36,70
	.word	864
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,13,41,21
	.word	1375
	.byte	1,1,5
	.byte	'val',0,13,41,70
	.word	1375
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,14,55,22
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,55,78
	.word	864
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,14,75,22
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,75,77
	.word	864
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,14,82,22
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,82,79
	.word	864
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,14,89,22
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,89,76
	.word	864
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,14,95,22
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,95,67
	.word	864
	.byte	7,6,0,0
.L574:
	.byte	8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,14,122,20
	.word	147
	.byte	1,1
.L575:
	.byte	5
	.byte	'indx',0,14,122,69
	.word	864
.L577:
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,14,129,1,20
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,129,1,65
	.word	864
	.byte	6,0
.L658:
	.byte	8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,14,136,1,20
	.word	147
	.byte	1,1
.L659:
	.byte	5
	.byte	'indx',0,14,136,1,67
	.word	864
.L661:
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,14,149,1,20
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,149,1,72
	.word	864
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,14,155,1,21
	.word	864
	.byte	1,1,5
	.byte	'indx',0,14,155,1,79
	.word	864
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,14,168,1,20
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,168,1,67
	.word	864
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,14,208,1,27
	.word	147
	.byte	1,1,5
	.byte	'indx',0,14,208,1,76
	.word	864
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,15,193,1,19
	.word	5508
	.byte	1,1,5
	.byte	'EventId',0,15,193,1,60
	.word	864
	.byte	6,0
.L229:
	.byte	8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,15,219,1,32
	.word	147
	.byte	1,1
.L230:
	.byte	5
	.byte	'EventId',0,15,219,1,77
	.word	864
.L232:
	.byte	6,0
.L418:
	.byte	4
	.byte	'Dem_EvtSetLastReportedEvent',0,3,15,225,1,17,1,1
.L421:
	.byte	5
	.byte	'EventId',0,15,225,1,62
	.word	864
.L423:
	.byte	5
	.byte	'EventStatus',0,15,225,1,91
	.word	147
.L425:
	.byte	6,0
.L426:
	.byte	4
	.byte	'Dem_EvtRequestResetFailureFilter',0,3,15,165,3,17,1,1
.L427:
	.byte	5
	.byte	'EventId',0,15,165,3,66
	.word	864
.L429:
	.byte	5
	.byte	'setBit',0,15,165,3,93
	.word	147
.L431:
	.byte	7,6,0,0
.L401:
	.byte	4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,15,227,3,17,1,1
.L403:
	.byte	6,0
.L404:
	.byte	4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,15,233,3,17,1,1
.L406:
	.byte	5
	.byte	'reason',0,15,233,3,72
	.word	147
.L408:
	.byte	7,6,0,0
.L359:
	.byte	4
	.byte	'Dem_EvtSetInitMonitoring',0,3,15,241,3,17,1,1
.L362:
	.byte	5
	.byte	'EventId',0,15,241,3,59
	.word	864
.L364:
	.byte	5
	.byte	'newReason',0,15,241,3,94
	.word	147
.L366:
	.byte	7,6,6,6,6,0,0
.L568:
	.byte	8
	.byte	'Dem_isEventAffectedByOperationCycleList',0,3,15,202,4,30
	.word	147
	.byte	1,1
.L569:
	.byte	5
	.byte	'EventId',0,15,202,4,87
	.word	864
.L571:
	.byte	5
	.byte	'operationCycleList',0,15,202,4,119
	.word	147
.L573:
	.byte	7,6,0,0
.L652:
	.byte	8
	.byte	'Dem_isEventAffectedByFailureCycleList',0,3,15,212,4,30
	.word	147
	.byte	1,1
.L653:
	.byte	5
	.byte	'EventId',0,15,212,4,85
	.word	864
.L655:
	.byte	5
	.byte	'failureCycleList',0,15,212,4,117
	.word	147
.L657:
	.byte	7,6,0,0
.L205:
	.byte	8
	.byte	'Dem_EvtIsSuppressed',0,3,15,244,4,30
	.word	147
	.byte	1,1
.L207:
	.byte	5
	.byte	'EventId',0,15,244,4,67
	.word	864
.L209:
	.byte	7,6,0,0
.L223:
	.byte	8
	.byte	'Dem_EvtGetIsoByte',0,3,16,42,34
	.word	147
	.byte	1,1
.L224:
	.byte	5
	.byte	'EventId',0,16,42,69
	.word	864
.L226:
	.byte	6,0
.L353:
	.byte	4
	.byte	'Dem_EvtSt_HandleClear',0,3,16,214,1,17,1,1
.L356:
	.byte	5
	.byte	'EventId',0,16,214,1,55
	.word	864
.L358:
	.byte	6,0
.L470:
	.byte	4
	.byte	'Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness',0,3,16,241,1,17,1,1
.L471:
	.byte	5
	.byte	'EventId',0,16,241,1,81
	.word	864
.L473:
	.byte	7,6,6,6,6,0,0
.L584:
	.byte	4
	.byte	'Dem_EvtSt_HandleNewOperationCycle',0,3,16,128,2,17,1,1
.L586:
	.byte	5
	.byte	'EventId',0,16,128,2,67
	.word	864
.L588:
	.byte	7,6,0,0
.L240:
	.byte	4
	.byte	'Dem_EvtSt_HandleIndicatorOn',0,3,16,156,2,17,1,1
.L242:
	.byte	5
	.byte	'EventId',0,16,156,2,61
	.word	864
.L244:
	.byte	7,6,0,0
.L277:
	.byte	4
	.byte	'Dem_EvtSt_HandleIndicatorOff',0,3,16,164,2,17,1,1
.L278:
	.byte	5
	.byte	'EventId',0,16,164,2,62
	.word	864
.L280:
	.byte	7,6,0,0,12
	.word	864
	.byte	3
	.word	6579
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,17,27,17,1,1,5
	.byte	'result',0,17,27,79
	.word	6584
	.byte	5
	.byte	'request',0,17,27,109
	.word	864
	.byte	5
	.byte	'newResult',0,17,27,133,1
	.word	147
	.byte	6,0,12
	.word	864
	.byte	3
	.word	6679
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,17,65,17,1,1,5
	.byte	'request',0,17,65,82
	.word	6684
	.byte	5
	.byte	'newRequest',0,17,65,97
	.word	147
	.byte	6,0,3
	.word	1375
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,17,151,1,17,1,1,5
	.byte	'selection',0,17,151,1,93
	.word	6766
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,17,168,1,18
	.word	147
	.byte	1,1,5
	.byte	'selection',0,17,168,1,86
	.word	1375
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,18,53,17,1,1,5
	.byte	'ClientId',0,18,53,80
	.word	147
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,18,68,17,1,1,5
	.byte	'state',0,18,68,62
	.word	147
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,18,78,20
	.word	147
	.byte	1,1,5
	.byte	'ClientId',0,18,78,91
	.word	147
	.byte	7,6,6,6,6,0,0,3
	.word	147
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,19,17,17,1,1,5
	.byte	'trigger',0,19,17,52
	.word	7149
	.byte	5
	.byte	'trigger2set',0,19,17,77
	.word	147
	.byte	6,0,8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,19,22,30
	.word	147
	.byte	1,1,5
	.byte	'trigger2test',0,19,22,69
	.word	147
	.byte	6,0,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,20,101,30
	.word	147
	.byte	1,1,5
	.byte	'EventId',0,20,101,87
	.word	864
	.byte	5
	.byte	'debAction',0,20,101,120
	.word	3418
	.byte	6,0,8
	.byte	'Dem_EvMemIsMemIdValid',0,3,21,103,30
	.word	147
	.byte	1,1,5
	.byte	'MemId',0,21,103,65
	.word	3418
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,21,112,30
	.word	147
	.byte	1,1,5
	.byte	'LocId',0,21,112,73
	.word	3418
	.byte	6,0,10,22,133,1,3,4,11
	.byte	'Status',0
	.word	864
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	864
	.byte	2,2,35,2,0,13,22,131,1,9,4,11
	.byte	'Data',0
	.word	7468
	.byte	4,2,35,0,0,14,7
	.word	147
	.byte	15,6,0,10,22,144,1,9,20,11
	.byte	'Hdr',0
	.word	7508
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	7529
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	147
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	147
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	147
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	147
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	147
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	1375
	.byte	4,2,35,16,0,9
	.word	7538
	.byte	3
	.word	7706
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,21,134,1,25
	.word	3418
	.byte	1,1,5
	.byte	'EventMemory',0,21,134,1,89
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,21,139,1,25
	.word	3418
	.byte	1,1,5
	.byte	'LocId',0,21,139,1,65
	.word	3418
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,21,152,1,28
	.word	864
	.byte	1,1,5
	.byte	'EventMemory',0,21,152,1,93
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,21,170,1,19
	.word	1375
	.byte	1,1,5
	.byte	'EventMemory',0,21,170,1,83
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,21,188,1,18
	.word	147
	.byte	1,1,5
	.byte	'EventMemory',0,21,188,1,85
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,21,216,1,24
	.word	3418
	.byte	1,1,5
	.byte	'EventMemory',0,21,216,1,96
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,21,233,1,25
	.word	3418
	.byte	1,1,5
	.byte	'EventMemory',0,21,233,1,100
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,21,133,2,25
	.word	3418
	.byte	1,1,5
	.byte	'EventMemory',0,21,133,2,95
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,21,144,2,25
	.word	3418
	.byte	1,1,5
	.byte	'LocId',0,21,144,2,71
	.word	3418
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,21,150,2,17,1,1,5
	.byte	'LocId',0,21,150,2,63
	.word	3418
	.byte	5
	.byte	'AgingCounter',0,21,150,2,83
	.word	3418
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,21,161,2,25
	.word	3418
	.byte	1,1,5
	.byte	'EventMemory',0,21,161,2,103
	.word	7711
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,21,213,2,18
	.word	8497
	.byte	1,1,5
	.byte	'EventMemory',0,21,213,2,92
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,21,224,2,18
	.word	8497
	.byte	1,1,5
	.byte	'EventMemory',0,21,224,2,88
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,21,238,3,25
	.word	3418
	.byte	1,1,5
	.byte	'EventMemory',0,21,238,3,101
	.word	7711
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,21,141,4,28
	.word	147
	.byte	1,1,5
	.byte	'EventMemory',0,21,141,4,93
	.word	7711
	.byte	6,0,3
	.word	7538
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,21,170,4,19
	.word	164
	.byte	1,1,5
	.byte	'EventMemory',0,21,170,4,75
	.word	8802
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,21,206,4,30
	.word	147
	.byte	1,1,5
	.byte	'Status',0,21,206,4,61
	.word	3418
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,21,211,4,30
	.word	147
	.byte	1,1,5
	.byte	'Status',0,21,211,4,60
	.word	3418
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,21,226,4,25
	.word	3418
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,21,242,4,30
	.word	147
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,21,131,5,25
	.word	3418
	.byte	1,1,5
	.byte	'MemId',0,21,131,5,69
	.word	3418
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,21,143,5,25
	.word	3418
	.byte	1,1,5
	.byte	'MemId',0,21,143,5,67
	.word	3418
	.byte	6,0,3
	.word	3418
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,21,179,5,17,1,1,5
	.byte	'MemId',0,21,179,5,63
	.word	9162
	.byte	6,0,9
	.word	3418
	.byte	3
	.word	9224
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,21,184,5,30
	.word	147
	.byte	1,1,5
	.byte	'MemId',0,21,184,5,86
	.word	9229
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,21,189,5,17,1,1,5
	.byte	'MemId',0,21,189,5,64
	.word	9162
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,21,247,5,30
	.word	147
	.byte	1,1,5
	.byte	'StatusOld',0,21,247,5,66
	.word	3418
	.byte	5
	.byte	'StatusNew',0,21,247,5,90
	.word	3418
	.byte	5
	.byte	'Trigger',0,21,247,5,114
	.word	3418
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,21,154,7,25
	.word	3418
	.byte	1,1,5
	.byte	'EventId',0,21,154,7,64
	.word	864
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,23,20,25
	.word	3418
	.byte	1,1,5
	.byte	'EventId',0,23,20,81
	.word	864
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,23,61,30
	.word	147
	.byte	1,1,5
	.byte	'EventId',0,23,61,62
	.word	864
	.byte	5
	.byte	'LocId',0,23,61,84
	.word	3418
	.byte	5
	.byte	'StatusNew',0,23,61,104
	.word	3418
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,24,150,1,25
	.word	3418
	.byte	1,1,5
	.byte	'DTCOrigin',0,24,150,1,73
	.word	147
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,24,222,1,25
	.word	3418
	.byte	1,1,5
	.byte	'EventId',0,24,222,1,67
	.word	864
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressed',0,3,25,118,30
	.word	147
	.byte	1,1,5
	.byte	'dtcId',0,25,118,65
	.word	864
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,25,128,1,30
	.word	147
	.byte	1,1,5
	.byte	'dtcId',0,25,128,1,73
	.word	864
	.byte	6,0,8
	.byte	'Dem_EventUsesOrigin',0,3,25,137,2,30
	.word	147
	.byte	1,1,5
	.byte	'eventId',0,25,137,2,67
	.word	864
	.byte	5
	.byte	'origin',0,25,137,2,94
	.word	147
	.byte	7,6,6,6,0,0,4
	.byte	'Dem_CallBackTriggerOnEventStatus',0,3,26,17,17,1,1,5
	.byte	'EventId',0,26,18,19
	.word	864
	.byte	5
	.byte	'EventStatusOld',0,26,19,25
	.word	147
	.byte	5
	.byte	'EventStatusNew',0,26,20,25
	.word	147
	.byte	5
	.byte	'dtcStByteOld',0,26,21,25
	.word	147
	.byte	6,0
.L198:
	.byte	3
	.word	147
.L342:
	.byte	4
	.byte	'Dem_StatusChange_GetOldStatus',0,3,26,59,17,1,1
.L345:
	.byte	5
	.byte	'EventId',0,26,60,19
	.word	864
.L347:
	.byte	5
	.byte	'isoByteOld',0,26,61,26
	.word	10075
.L349:
	.byte	5
	.byte	'dtcStByteOld',0,26,62,26
	.word	10075
.L351:
	.byte	7,6,0,0
.L529:
	.byte	4
	.byte	'Dem_TriggerOn_EventStatusChange',0,3,26,84,17,1,1
.L531:
	.byte	5
	.byte	'EventId',0,26,85,25
	.word	864
.L533:
	.byte	5
	.byte	'isoByteOld',0,26,86,31
	.word	147
.L535:
	.byte	5
	.byte	'isoByteNew',0,26,87,31
	.word	147
.L537:
	.byte	5
	.byte	'dtcStByteOld',0,26,88,31
	.word	147
.L539:
	.byte	7,6,0,0,16
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	6,0,16
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	6,0,16
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	7,18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,6,18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,6,0,0,16
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	6,0,16
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	7,18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,6,0,0,16
	.word	560
	.byte	17
	.word	595
	.byte	17
	.word	609
	.byte	17
	.word	630
	.byte	6,0,16
	.word	655
	.byte	17
	.word	688
	.byte	17
	.word	702
	.byte	17
	.word	723
	.byte	6,0,16
	.word	748
	.byte	17
	.word	785
	.byte	17
	.word	799
	.byte	17
	.word	820
	.byte	17
	.word	843
	.byte	7,18
	.word	655
	.byte	17
	.word	688
	.byte	17
	.word	702
	.byte	17
	.word	723
	.byte	19
	.word	746
	.byte	0,6,0,0,16
	.word	891
	.byte	17
	.word	922
	.byte	17
	.word	937
	.byte	6,0,16
	.word	960
	.byte	17
	.word	993
	.byte	17
	.word	1008
	.byte	6,0,16
	.word	1031
	.byte	17
	.word	1072
	.byte	17
	.word	1086
	.byte	6,0,16
	.word	1109
	.byte	17
	.word	1146
	.byte	17
	.word	1160
	.byte	7,18
	.word	1031
	.byte	17
	.word	1072
	.byte	17
	.word	1086
	.byte	19
	.word	1107
	.byte	0,6,0,0,16
	.word	1185
	.byte	17
	.word	1221
	.byte	17
	.word	1235
	.byte	17
	.word	1256
	.byte	6,0,16
	.word	1281
	.byte	17
	.word	1315
	.byte	17
	.word	1329
	.byte	17
	.word	1350
	.byte	6,0,16
	.word	1396
	.byte	17
	.word	1427
	.byte	17
	.word	1442
	.byte	6,0,16
	.word	1465
	.byte	17
	.word	1498
	.byte	17
	.word	1513
	.byte	6,0,16
	.word	1536
	.byte	17
	.word	1577
	.byte	17
	.word	1591
	.byte	6,0,16
	.word	1614
	.byte	17
	.word	1651
	.byte	17
	.word	1665
	.byte	7,18
	.word	1536
	.byte	17
	.word	1577
	.byte	17
	.word	1591
	.byte	19
	.word	1612
	.byte	0,6,0,0,16
	.word	1690
	.byte	17
	.word	1724
	.byte	17
	.word	1738
	.byte	17
	.word	1759
	.byte	6,0,16
	.word	1784
	.byte	17
	.word	1824
	.byte	7,18
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	20
	.word	556
	.byte	18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,19
	.word	557
	.byte	0,0,6,0,0,16
	.word	1841
	.byte	17
	.word	1885
	.byte	7,18
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	20
	.word	556
	.byte	18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,19
	.word	557
	.byte	0,0,6,0,0,16
	.word	1903
	.byte	17
	.word	1949
	.byte	7,18
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	20
	.word	556
	.byte	18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,19
	.word	557
	.byte	0,0,6,0,0,16
	.word	1967
	.byte	17
	.word	2008
	.byte	7,18
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	20
	.word	556
	.byte	18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,19
	.word	557
	.byte	0,0,6,0,0,16
	.word	2026
	.byte	17
	.word	2082
	.byte	7,18
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	20
	.word	556
	.byte	18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,19
	.word	557
	.byte	0,0,6,0,0,16
	.word	2100
	.byte	17
	.word	2138
	.byte	17
	.word	2152
	.byte	7,18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,6,0,0,16
	.word	2176
	.byte	17
	.word	2217
	.byte	17
	.word	2231
	.byte	7,18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,6,0,0,16
	.word	2255
	.byte	17
	.word	2296
	.byte	17
	.word	2310
	.byte	7,18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,6,0,0,16
	.word	2334
	.byte	17
	.word	2377
	.byte	17
	.word	2391
	.byte	7,18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,6,0,0,16
	.word	2415
	.byte	17
	.word	2458
	.byte	17
	.word	2472
	.byte	7,18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,6,0,0,16
	.word	2496
	.byte	17
	.word	2534
	.byte	17
	.word	2548
	.byte	7,18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,6,0,0,16
	.word	2572
	.byte	17
	.word	2612
	.byte	17
	.word	2626
	.byte	7,18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,6,0,0,16
	.word	2650
	.byte	17
	.word	2703
	.byte	17
	.word	2717
	.byte	7,18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,6,0,0,16
	.word	2741
	.byte	17
	.word	2767
	.byte	17
	.word	2782
	.byte	6,0,16
	.word	2805
	.byte	17
	.word	2833
	.byte	17
	.word	2848
	.byte	6,0,16
	.word	2871
	.byte	17
	.word	2903
	.byte	17
	.word	2918
	.byte	17
	.word	2939
	.byte	7,18
	.word	2741
	.byte	17
	.word	2767
	.byte	17
	.word	2782
	.byte	19
	.word	2803
	.byte	0,6,18
	.word	2805
	.byte	17
	.word	2833
	.byte	17
	.word	2848
	.byte	19
	.word	2869
	.byte	0,6,0,0,16
	.word	2978
	.byte	17
	.word	3010
	.byte	17
	.word	3025
	.byte	6,0,21
	.byte	'Det_ReportError',0,27,112,16
	.word	147
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,27,112,39
	.word	864
	.byte	5
	.byte	'InstanceId',0,27,112,55
	.word	147
	.byte	5
	.byte	'ApiId',0,27,112,73
	.word	147
	.byte	5
	.byte	'ErrorId',0,27,112,86
	.word	147
	.byte	0,22
	.byte	'void',0,3
	.word	12107
	.byte	21
	.byte	'rba_BswSrv_MemSet',0,6,84,14
	.word	12113
	.byte	1,1,1,1,5
	.byte	'xDest_pv',0,6,84,38
	.word	12113
	.byte	5
	.byte	'xPattern_u32',0,6,84,55
	.word	3166
	.byte	5
	.byte	'numBytes_u32',0,6,84,76
	.word	1375
	.byte	0,16
	.word	3048
	.byte	17
	.word	3086
	.byte	6,0,16
	.word	3106
	.byte	17
	.word	3145
	.byte	6,0,16
	.word	3173
	.byte	17
	.word	3208
	.byte	17
	.word	3225
	.byte	17
	.word	3246
	.byte	6,0,16
	.word	3269
	.byte	17
	.word	3299
	.byte	6,0,16
	.word	3319
	.byte	17
	.word	3350
	.byte	6,0,16
	.word	3370
	.byte	17
	.word	3400
	.byte	6,0,16
	.word	3444
	.byte	17
	.word	3474
	.byte	6,0,16
	.word	3497
	.byte	17
	.word	3535
	.byte	6,0,16
	.word	3548
	.byte	17
	.word	3579
	.byte	6,0,16
	.word	3592
	.byte	17
	.word	3630
	.byte	6,0,16
	.word	3643
	.byte	17
	.word	3676
	.byte	6,0,16
	.word	3689
	.byte	17
	.word	3718
	.byte	6,0,16
	.word	3732
	.byte	17
	.word	3765
	.byte	6,0,16
	.word	3779
	.byte	17
	.word	3811
	.byte	6,0,16
	.word	3828
	.byte	17
	.word	3865
	.byte	7,18
	.word	3779
	.byte	17
	.word	3811
	.byte	19
	.word	3826
	.byte	0,6,0,0,16
	.word	3884
	.byte	17
	.word	3918
	.byte	6,0,16
	.word	3987
	.byte	17
	.word	4031
	.byte	17
	.word	4043
	.byte	7,18
	.word	3689
	.byte	17
	.word	3718
	.byte	19
	.word	3730
	.byte	0,6,0,0,16
	.word	4072
	.byte	17
	.word	4115
	.byte	6,0,16
	.word	4129
	.byte	17
	.word	4165
	.byte	6,0,16
	.word	4179
	.byte	17
	.word	4222
	.byte	6,0,16
	.word	4236
	.byte	17
	.word	4271
	.byte	6,0,3
	.word	147
	.byte	21
	.byte	'NvM_GetErrorStatus',0,28,235,1,23
	.word	147
	.byte	1,1,1,1,5
	.byte	'BlockId',0,28,235,1,58
	.word	864
	.byte	5
	.byte	'RequestResultPtr',0,28,235,1,90
	.word	12511
	.byte	0,16
	.word	4301
	.byte	17
	.word	4335
	.byte	6,0,16
	.word	4350
	.byte	17
	.word	4382
	.byte	6,0,16
	.word	4395
	.byte	17
	.word	4423
	.byte	7,18
	.word	4350
	.byte	17
	.word	4382
	.byte	19
	.word	4393
	.byte	0,6,0,0,16
	.word	4438
	.byte	17
	.word	4472
	.byte	6,0,16
	.word	4485
	.byte	17
	.word	4522
	.byte	6,0,16
	.word	4535
	.byte	6,0,16
	.word	4563
	.byte	6,0,16
	.word	4618
	.byte	17
	.word	4671
	.byte	7,18
	.word	3106
	.byte	17
	.word	3145
	.byte	19
	.word	3164
	.byte	0,6,0,0,16
	.word	4687
	.byte	17
	.word	4740
	.byte	7,18
	.word	3048
	.byte	17
	.word	3086
	.byte	19
	.word	3104
	.byte	0,6,0,0,16
	.word	4756
	.byte	17
	.word	4807
	.byte	6,0,16
	.word	4822
	.byte	17
	.word	4872
	.byte	7,18
	.word	1109
	.byte	17
	.word	1146
	.byte	17
	.word	1160
	.byte	20
	.word	1181
	.byte	18
	.word	1031
	.byte	17
	.word	1072
	.byte	17
	.word	1086
	.byte	19
	.word	1107
	.byte	0,19
	.word	1182
	.byte	0,0,6,0,0,16
	.word	4889
	.byte	17
	.word	4941
	.byte	6,0,16
	.word	4956
	.byte	17
	.word	5005
	.byte	6,0,16
	.word	5020
	.byte	17
	.word	5060
	.byte	7,18
	.word	1109
	.byte	17
	.word	1146
	.byte	17
	.word	1160
	.byte	20
	.word	1181
	.byte	18
	.word	1031
	.byte	17
	.word	1072
	.byte	17
	.word	1086
	.byte	19
	.word	1107
	.byte	0,19
	.word	1182
	.byte	0,0,6,0,0,16
	.word	5077
	.byte	17
	.word	5121
	.byte	6,0,16
	.word	5136
	.byte	17
	.word	5177
	.byte	6,0,16
	.word	5193
	.byte	17
	.word	5236
	.byte	6,0,16
	.word	5252
	.byte	17
	.word	5300
	.byte	6,0,16
	.word	5316
	.byte	17
	.word	5370
	.byte	7,18
	.word	1185
	.byte	17
	.word	1221
	.byte	17
	.word	1235
	.byte	17
	.word	1256
	.byte	19
	.word	1279
	.byte	0,6,0,0,16
	.word	5388
	.byte	17
	.word	5431
	.byte	6,0,16
	.word	5447
	.byte	17
	.word	5492
	.byte	6,0,16
	.word	5521
	.byte	17
	.word	5557
	.byte	6,0,16
	.word	5576
	.byte	17
	.word	5616
	.byte	6,0,16
	.word	5635
	.byte	17
	.word	5671
	.byte	17
	.word	5688
	.byte	6,0,23
	.byte	'Dem_EvtSetCausal',0,15,155,2,6,1,1,1,1,5
	.byte	'EventId',0,15,155,2,40
	.word	864
	.byte	5
	.byte	'causal',0,15,155,2,67
	.word	147
	.byte	0,16
	.word	5711
	.byte	17
	.word	5752
	.byte	17
	.word	5769
	.byte	7,18
	.word	2871
	.byte	17
	.word	2903
	.byte	17
	.word	2918
	.byte	17
	.word	2939
	.byte	20
	.word	2963
	.byte	18
	.word	2741
	.byte	17
	.word	2767
	.byte	17
	.word	2782
	.byte	19
	.word	2803
	.byte	0,19
	.word	2964
	.byte	18
	.word	2805
	.byte	17
	.word	2833
	.byte	17
	.word	2848
	.byte	19
	.word	2869
	.byte	0,19
	.word	2965
	.byte	0,0,6,0,0,16
	.word	5789
	.byte	6,0,16
	.word	5842
	.byte	17
	.word	5878
	.byte	7,18
	.word	1396
	.byte	17
	.word	1427
	.byte	17
	.word	1442
	.byte	19
	.word	1463
	.byte	0,6,0,0,16
	.word	5898
	.byte	17
	.word	5931
	.byte	17
	.word	5948
	.byte	7,18
	.word	5789
	.byte	19
	.word	5840
	.byte	0,6,18
	.word	5842
	.byte	17
	.word	5878
	.byte	20
	.word	5894
	.byte	18
	.word	1396
	.byte	17
	.word	1427
	.byte	17
	.word	1442
	.byte	19
	.word	1463
	.byte	0,19
	.word	5895
	.byte	0,0,6,18
	.word	560
	.byte	17
	.word	595
	.byte	17
	.word	609
	.byte	17
	.word	630
	.byte	19
	.word	653
	.byte	0,6,18
	.word	748
	.byte	17
	.word	785
	.byte	17
	.word	799
	.byte	17
	.word	820
	.byte	17
	.word	843
	.byte	20
	.word	860
	.byte	18
	.word	655
	.byte	17
	.word	688
	.byte	17
	.word	702
	.byte	17
	.word	723
	.byte	19
	.word	746
	.byte	0,19
	.word	861
	.byte	0,0,6,0,0,16
	.word	5974
	.byte	17
	.word	6026
	.byte	17
	.word	6043
	.byte	7,18
	.word	5077
	.byte	17
	.word	5121
	.byte	19
	.word	5134
	.byte	0,6,0,0,16
	.word	6075
	.byte	17
	.word	6125
	.byte	17
	.word	6142
	.byte	7,18
	.word	5193
	.byte	17
	.word	5236
	.byte	19
	.word	5250
	.byte	0,6,0,0,16
	.word	6172
	.byte	17
	.word	6204
	.byte	7,18
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	20
	.word	556
	.byte	18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,19
	.word	557
	.byte	0,0,6,0,0,16
	.word	6225
	.byte	17
	.word	6254
	.byte	6,0
.L448:
	.byte	9
	.word	1375
.L450:
	.byte	9
	.word	1375
.L452:
	.byte	9
	.word	1375
.L460:
	.byte	9
	.word	1375
.L462:
	.byte	9
	.word	1375
.L464:
	.byte	9
	.word	1375
.L548:
	.byte	14,32
	.word	864
	.byte	15,15,0
.L550:
	.byte	14,16
	.word	147
	.byte	15,15,0
.L634:
	.byte	9
	.word	1375
.L636:
	.byte	9
	.word	1375
.L638:
	.byte	9
	.word	1375
.L642:
	.byte	9
	.word	1375
.L644:
	.byte	9
	.word	1375
.L646:
	.byte	9
	.word	1375
	.byte	16
	.word	6272
	.byte	17
	.word	6302
	.byte	6,0,16
	.word	6321
	.byte	17
	.word	6377
	.byte	7,18
	.word	2176
	.byte	17
	.word	2217
	.byte	17
	.word	2231
	.byte	20
	.word	2251
	.byte	18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,19
	.word	2252
	.byte	0,0,6,18
	.word	2255
	.byte	17
	.word	2296
	.byte	17
	.word	2310
	.byte	20
	.word	2330
	.byte	18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,19
	.word	2331
	.byte	0,0,6,18
	.word	2334
	.byte	17
	.word	2377
	.byte	17
	.word	2391
	.byte	20
	.word	2411
	.byte	18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,19
	.word	2412
	.byte	0,0,6,18
	.word	2415
	.byte	17
	.word	2458
	.byte	17
	.word	2472
	.byte	20
	.word	2492
	.byte	18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,19
	.word	2493
	.byte	0,0,6,0,0,16
	.word	6401
	.byte	17
	.word	6443
	.byte	7,18
	.word	6172
	.byte	17
	.word	6204
	.byte	20
	.word	6221
	.byte	18
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	20
	.word	556
	.byte	18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,19
	.word	557
	.byte	0,0,19
	.word	6222
	.byte	0,0,6,0,0,16
	.word	6464
	.byte	17
	.word	6500
	.byte	7,18
	.word	2650
	.byte	17
	.word	2703
	.byte	17
	.word	2717
	.byte	20
	.word	2737
	.byte	18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,19
	.word	2738
	.byte	0,0,6,0,0,16
	.word	6521
	.byte	17
	.word	6558
	.byte	7,18
	.word	2650
	.byte	17
	.word	2703
	.byte	17
	.word	2717
	.byte	20
	.word	2737
	.byte	18
	.word	307
	.byte	17
	.word	343
	.byte	17
	.word	358
	.byte	17
	.word	379
	.byte	20
	.word	403
	.byte	18
	.word	169
	.byte	17
	.word	199
	.byte	17
	.word	214
	.byte	19
	.word	235
	.byte	0,19
	.word	404
	.byte	18
	.word	237
	.byte	17
	.word	269
	.byte	17
	.word	284
	.byte	19
	.word	305
	.byte	0,19
	.word	405
	.byte	0,0,19
	.word	2738
	.byte	0,0,6,0,0,16
	.word	6589
	.byte	17
	.word	6627
	.byte	17
	.word	6642
	.byte	17
	.word	6658
	.byte	6,0,16
	.word	6689
	.byte	17
	.word	6729
	.byte	17
	.word	6745
	.byte	6,0,16
	.word	6771
	.byte	17
	.word	6829
	.byte	6,0,16
	.word	6850
	.byte	17
	.word	6905
	.byte	6,0,16
	.word	6926
	.byte	17
	.word	6979
	.byte	6,0,16
	.word	6998
	.byte	17
	.word	7044
	.byte	6,0,16
	.word	7060
	.byte	17
	.word	7125
	.byte	7,18
	.word	3269
	.byte	17
	.word	3299
	.byte	19
	.word	3317
	.byte	0,6,18
	.word	3269
	.byte	17
	.word	3299
	.byte	19
	.word	3317
	.byte	0,6,18
	.word	6850
	.byte	17
	.word	6905
	.byte	19
	.word	6924
	.byte	0,6,18
	.word	6589
	.byte	17
	.word	6627
	.byte	17
	.word	6642
	.byte	17
	.word	6658
	.byte	19
	.word	6677
	.byte	0,6,0,0,16
	.word	7154
	.byte	17
	.word	7179
	.byte	17
	.word	7195
	.byte	6,0,16
	.word	7217
	.byte	17
	.word	7251
	.byte	6,0,16
	.word	7274
	.byte	17
	.word	7326
	.byte	17
	.word	7342
	.byte	6,0,16
	.word	7362
	.byte	17
	.word	7395
	.byte	6,0,16
	.word	7411
	.byte	17
	.word	7452
	.byte	6,0,16
	.word	7716
	.byte	17
	.word	7760
	.byte	6,0,16
	.word	7783
	.byte	17
	.word	7822
	.byte	7,18
	.word	7716
	.byte	17
	.word	7760
	.byte	19
	.word	7781
	.byte	0,6,0,0,16
	.word	7841
	.byte	17
	.word	7886
	.byte	6,0,16
	.word	7909
	.byte	17
	.word	7953
	.byte	6,0,16
	.word	7976
	.byte	17
	.word	8023
	.byte	6,0,16
	.word	8046
	.byte	17
	.word	8098
	.byte	6,0,16
	.word	8121
	.byte	17
	.word	8176
	.byte	6,0,16
	.word	8199
	.byte	17
	.word	8249
	.byte	6,0,16
	.word	8272
	.byte	17
	.word	8317
	.byte	7,18
	.word	8199
	.byte	17
	.word	8249
	.byte	19
	.word	8270
	.byte	0,6,0,0,16
	.word	8336
	.byte	17
	.word	8377
	.byte	17
	.word	8392
	.byte	6,0,16
	.word	8416
	.byte	17
	.word	8474
	.byte	6,0,16
	.word	8505
	.byte	17
	.word	8559
	.byte	6,0,16
	.word	8582
	.byte	17
	.word	8632
	.byte	6,0,16
	.word	8655
	.byte	17
	.word	8711
	.byte	6,0,16
	.word	8734
	.byte	17
	.word	8779
	.byte	6,0,16
	.word	8807
	.byte	17
	.word	8849
	.byte	6,0,16
	.word	8872
	.byte	17
	.word	8902
	.byte	6,0,16
	.word	8920
	.byte	17
	.word	8949
	.byte	6,0,16
	.word	8967
	.byte	6,0,16
	.word	9001
	.byte	6,0,16
	.word	9044
	.byte	17
	.word	9087
	.byte	6,0,16
	.word	9104
	.byte	17
	.word	9145
	.byte	6,0,16
	.word	9167
	.byte	17
	.word	9207
	.byte	6,0,16
	.word	9234
	.byte	17
	.word	9282
	.byte	6,0,16
	.word	9299
	.byte	17
	.word	9340
	.byte	6,0,16
	.word	9357
	.byte	17
	.word	9392
	.byte	17
	.word	9411
	.byte	17
	.word	9430
	.byte	6,0,16
	.word	9449
	.byte	17
	.word	9484
	.byte	7,18
	.word	4756
	.byte	17
	.word	4807
	.byte	19
	.word	4820
	.byte	0,6,0,0,16
	.word	9505
	.byte	17
	.word	9556
	.byte	6,0,16
	.word	9574
	.byte	17
	.word	9601
	.byte	17
	.word	9617
	.byte	17
	.word	9631
	.byte	6,0,16
	.word	9651
	.byte	17
	.word	9693
	.byte	6,0,16
	.word	9714
	.byte	17
	.word	9752
	.byte	7,18
	.word	4822
	.byte	17
	.word	4872
	.byte	20
	.word	4885
	.byte	18
	.word	1109
	.byte	17
	.word	1146
	.byte	17
	.word	1160
	.byte	20
	.word	1181
	.byte	18
	.word	1031
	.byte	17
	.word	1072
	.byte	17
	.word	1086
	.byte	19
	.word	1107
	.byte	0,19
	.word	1182
	.byte	0,0,19
	.word	4886
	.byte	0,0,6,0,0,16
	.word	9773
	.byte	17
	.word	9804
	.byte	7,18
	.word	485
	.byte	17
	.word	521
	.byte	17
	.word	535
	.byte	20
	.word	556
	.byte	18
	.word	408
	.byte	17
	.word	448
	.byte	17
	.word	462
	.byte	19
	.word	483
	.byte	0,19
	.word	557
	.byte	0,0,6,0,0,16
	.word	9822
	.byte	17
	.word	9862
	.byte	6,0,16
	.word	9879
	.byte	17
	.word	9911
	.byte	17
	.word	9928
	.byte	7,18
	.word	4889
	.byte	17
	.word	4941
	.byte	19
	.word	4954
	.byte	0,6,18
	.word	4956
	.byte	17
	.word	5005
	.byte	19
	.word	5018
	.byte	0,6,18
	.word	4822
	.byte	17
	.word	4872
	.byte	20
	.word	4885
	.byte	18
	.word	1109
	.byte	17
	.word	1146
	.byte	17
	.word	1160
	.byte	20
	.word	1181
	.byte	18
	.word	1031
	.byte	17
	.word	1072
	.byte	17
	.word	1086
	.byte	19
	.word	1107
	.byte	0,19
	.word	1182
	.byte	0,0,19
	.word	4886
	.byte	0,0,6,0,0,16
	.word	9950
	.byte	17
	.word	9990
	.byte	17
	.word	10006
	.byte	17
	.word	10029
	.byte	17
	.word	10052
	.byte	6,0,16
	.word	10080
	.byte	17
	.word	10117
	.byte	17
	.word	10133
	.byte	17
	.word	10152
	.byte	7,18
	.word	6225
	.byte	17
	.word	6254
	.byte	19
	.word	6270
	.byte	0,6,0,0,16
	.word	10177
	.byte	17
	.word	10216
	.byte	17
	.word	10232
	.byte	17
	.word	10251
	.byte	17
	.word	10270
	.byte	7,18
	.word	9950
	.byte	17
	.word	9990
	.byte	17
	.word	10006
	.byte	17
	.word	10029
	.byte	17
	.word	10052
	.byte	19
	.word	10073
	.byte	0,6,0,0,24,1,3
	.word	15506
	.byte	25
	.byte	'__codeptr',0,29,1,1
	.word	15508
	.byte	25
	.byte	'sint8',0,30,76,25
	.word	8497
	.byte	25
	.byte	'uint8',0,30,81,25
	.word	147
	.byte	25
	.byte	'sint16',0,30,86,25
	.word	5508
	.byte	25
	.byte	'uint16',0,30,91,25
	.word	864
	.byte	25
	.byte	'sint32',0,30,96,24
	.word	3166
	.byte	25
	.byte	'uint32',0,30,106,24
	.word	1375
	.byte	2
	.byte	'unsigned long long int',0,8,7,25
	.byte	'uint64',0,30,111,30
	.word	15619
	.byte	25
	.byte	'boolean',0,30,127,25
	.word	147
	.byte	25
	.byte	'uint8_least',0,30,137,1,25
	.word	3418
	.byte	25
	.byte	'uint16_least',0,30,147,1,25
	.word	3418
	.byte	25
	.byte	'StatusType',0,31,191,1,27
	.word	147
	.byte	25
	.byte	'Std_ReturnType',0,31,199,1,15
	.word	147
	.byte	10,31,206,1,9,8,11
	.byte	'vendorID',0
	.word	864
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	864
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	147
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	147
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	147
	.byte	1,2,35,6,0,25
	.byte	'Std_VersionInfoType',0,31,213,1,3
	.word	15763
	.byte	25
	.byte	'Dem_ClientRequestType',0,32,46,16
	.word	864
	.byte	25
	.byte	'Dem_ClientResultType',0,32,47,16
	.word	864
	.byte	25
	.byte	'Dem_ClientSelectionType',0,32,48,16
	.word	1375
	.byte	25
	.byte	'Dem_ClientPriorityType',0,32,50,15
	.word	147
	.byte	25
	.byte	'Dem_ComponentIdType',0,33,20,15
	.word	147
	.byte	25
	.byte	'PduIdType',0,34,22,19
	.word	864
	.byte	25
	.byte	'PduLengthType',0,34,26,19
	.word	864
	.byte	26,35,113,9,4,27
	.byte	'TP_DATACONF',0,0,27
	.byte	'TP_DATARETRY',0,1,27
	.byte	'TP_CONFPENDING',0,2,0,25
	.byte	'TpDataStateType',0,35,118,3
	.word	16103
	.byte	25
	.byte	'Can_IdType',0,36,32,16
	.word	1375
	.byte	25
	.byte	'Can_HwHandleType',0,36,43,16
	.word	864
	.byte	10,37,93,9,8,11
	.byte	'Class',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	147
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	1375
	.byte	4,2,35,4,0,25
	.byte	'OsTrapInfoType',0,37,97,3
	.word	16223
	.byte	14,68
	.word	1375
	.byte	15,16,0,10,37,154,1,9,68,11
	.byte	'store',0
	.word	16303
	.byte	68,2,35,0,0,14,68
	.word	16312
	.byte	15,0,0,25
	.byte	'Os_JumpBufType',0,37,156,1,3
	.word	16334
	.byte	25
	.byte	'Os_StackTraceType',0,37,174,1,18
	.word	1375
	.byte	10,37,175,1,9,8,11
	.byte	'sp',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	1375
	.byte	4,2,35,4,0,25
	.byte	'Os_StackValueType',0,37,175,1,63
	.word	16394
	.byte	25
	.byte	'Os_StackSizeType',0,37,176,1,27
	.word	16394
	.byte	28,1,1,3
	.word	16479
	.byte	25
	.byte	'Os_VoidVoidFunctionType',0,37,179,1,16
	.word	16482
	.byte	25
	.byte	'ApplicationType',0,37,193,1,23
	.word	147
	.byte	29
	.byte	'Os_ApplicationConfigurationType_s',0,37,198,1,16,2,11
	.byte	'app_id',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	147
	.byte	1,2,35,1,0,25
	.byte	'Os_ApplicationConfigurationType',0,37,201,1,3
	.word	16545
	.byte	25
	.byte	'Os_CoreStateType',0,37,203,1,16
	.word	1375
	.byte	25
	.byte	'AreaIdType',0,37,204,1,16
	.word	864
	.byte	25
	.byte	'Os_PeripheralAddressType',0,37,212,1,22
	.word	1375
	.byte	25
	.byte	'TickType',0,37,221,1,22
	.word	1375
	.byte	25
	.byte	'Os_StopwatchTickType',0,37,225,1,22
	.word	1375
	.byte	25
	.byte	'Os_Lockable',0,37,234,1,18
	.word	1391
	.byte	25
	.byte	'CoreIdType',0,37,236,1,16
	.word	864
	.byte	25
	.byte	'SpinlockIdType',0,37,237,1,16
	.word	864
	.byte	26,37,239,1,9,4,27
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,27
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,25
	.byte	'TryToGetSpinlockType',0,37,239,1,74
	.word	16852
	.byte	26,37,174,2,9,4,27
	.byte	'APPLICATION_ACCESSIBLE',0,0,27
	.byte	'APPLICATION_RESTARTING',0,1,27
	.byte	'APPLICATION_TERMINATED',0,2,0,25
	.byte	'ApplicationStateType',0,37,174,2,92
	.word	16945
	.byte	30,1,1,31
	.word	147
	.byte	31
	.word	12113
	.byte	0,3
	.word	17057
	.byte	25
	.byte	'Os_FunctionEntryType',0,37,183,2,16
	.word	17071
	.byte	29
	.byte	'Os_MeterInfoType_s',0,37,193,2,16,48,11
	.byte	'elapsed',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	1375
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	1375
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	1375
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	16394
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	16394
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	16394
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	16394
	.byte	8,2,35,40,0,25
	.byte	'Os_MeterInfoType',0,37,202,2,3
	.word	17106
	.byte	3
	.word	17106
	.byte	25
	.byte	'Os_MeterInfoRefType',0,37,203,2,50
	.word	17304
	.byte	25
	.byte	'EventMaskType',0,37,206,2,15
	.word	147
	.byte	25
	.byte	'Os_imaskType',0,37,211,2,16
	.word	1375
	.byte	29
	.byte	'Os_ISRDynType_s',0,37,213,2,16,48,11
	.byte	'meter',0
	.word	17106
	.byte	48,2,35,0,0,25
	.byte	'Os_ISRDynType',0,37,215,2,3
	.word	17383
	.byte	3
	.word	17383
	.byte	9
	.word	17444
	.byte	29
	.byte	'Os_ISRType_s',0,37,216,2,16,24,11
	.byte	'entry_function',0
	.word	16487
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	17449
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	1375
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	16394
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	147
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	147
	.byte	1,2,35,21,0,25
	.byte	'Os_ISRType',0,37,223,2,3
	.word	17454
	.byte	3
	.word	16479
	.byte	9
	.word	17454
	.byte	3
	.word	17613
	.byte	25
	.byte	'ISRType',0,37,224,2,46
	.word	17618
	.byte	25
	.byte	'Os_bitmask',0,37,239,2,22
	.word	1375
	.byte	25
	.byte	'Os_pset0Type',0,37,240,2,20
	.word	1375
	.byte	25
	.byte	'Os_pset1Type',0,37,241,2,20
	.word	1375
	.byte	25
	.byte	'Os_pset2Type',0,37,242,2,20
	.word	1375
	.byte	13,37,243,2,9,4,11
	.byte	'p0',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	1375
	.byte	4,2,35,0,0,25
	.byte	'Os_psetType',0,37,247,2,3
	.word	17726
	.byte	13,37,249,2,9,4,11
	.byte	't0',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	1375
	.byte	4,2,35,0,0,25
	.byte	'Os_tpmaskType',0,37,253,2,3
	.word	17790
	.byte	25
	.byte	'Os_ActivationCountType',0,37,254,2,23
	.word	147
	.byte	29
	.byte	'Os_TaskDynType_s',0,37,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	16343
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	17106
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	147
	.byte	1,2,35,116,0,25
	.byte	'Os_TaskDynType',0,37,132,3,3
	.word	17888
	.byte	14,68
	.word	16312
	.byte	15,0,0,3
	.word	17888
	.byte	9
	.word	18014
	.byte	29
	.byte	'Os_TaskType_s',0,37,134,3,16,40,11
	.byte	'dynamic',0
	.word	18019
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	16487
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	17726
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	17790
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	17790
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	864
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	1375
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	16394
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	147
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	147
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	147
	.byte	1,2,35,38,0,25
	.byte	'Os_TaskType',0,37,146,3,3
	.word	18024
	.byte	9
	.word	18024
	.byte	3
	.word	18274
	.byte	25
	.byte	'TaskType',0,37,147,3,47
	.word	18279
	.byte	32
	.byte	'Os_TaskStateType',0,37,155,3,6,4,27
	.byte	'SUSPENDED',0,0,27
	.byte	'READY',0,1,27
	.byte	'WAITING',0,2,27
	.byte	'RUNNING',0,3,0,25
	.byte	'TaskStateType',0,37,156,3,31
	.word	18302
	.byte	13,37,167,3,3,4,11
	.byte	'tpmask',0
	.word	17790
	.byte	4,2,35,0,0,29
	.byte	'Os_ResourceDynType_s',0,37,166,3,16,4,11
	.byte	'saved_priority',0
	.word	18389
	.byte	4,2,35,0,0,25
	.byte	'Os_ResourceDynType',0,37,170,3,3
	.word	18412
	.byte	3
	.word	18412
	.byte	9
	.word	18492
	.byte	29
	.byte	'Os_ResourceType_s',0,37,171,3,16,12,11
	.byte	'dynamic',0
	.word	18497
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	17790
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	147
	.byte	1,2,35,8,0,25
	.byte	'Os_ResourceType',0,37,175,3,3
	.word	18502
	.byte	10,37,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	1375
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	1375
	.byte	4,2,35,8,0,25
	.byte	'AlarmBaseType',0,37,185,3,3
	.word	18601
	.byte	10,37,206,3,9,8,11
	.byte	'Running',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	147
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	1375
	.byte	4,2,35,4,0,25
	.byte	'Os_CounterStatusType',0,37,210,3,3
	.word	18696
	.byte	33
	.word	147
	.byte	1,1,3
	.word	18782
	.byte	25
	.byte	'Os_CounterIncrAdvType',0,37,217,3,22
	.word	18789
	.byte	29
	.byte	's_swd',0,37,222,3,12,4,11
	.byte	'count',0
	.word	1375
	.byte	4,2,35,0,0,13,37,221,3,3,4,11
	.byte	'sw',0
	.word	18825
	.byte	4,2,35,0,0,29
	.byte	'Os_CounterDynType_s',0,37,220,3,16,4,11
	.byte	'type_dependent',0
	.word	18853
	.byte	4,2,35,0,0,25
	.byte	'Os_CounterDynType',0,37,226,3,3
	.word	18872
	.byte	3
	.word	18872
	.byte	9
	.word	18950
	.byte	29
	.byte	'Os_CounterType_s',0,37,227,3,16,28,11
	.byte	'dynamic',0
	.word	18955
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	18794
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	18601
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	12113
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	147
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	147
	.byte	1,2,35,25,0,25
	.byte	'Os_CounterType',0,37,234,3,3
	.word	18960
	.byte	3
	.word	18782
	.byte	9
	.word	18960
	.byte	3
	.word	19112
	.byte	25
	.byte	'CounterType',0,37,235,3,52
	.word	19117
	.byte	32
	.byte	'Os_ScheduleTableStatusType',0,37,240,3,6,4,27
	.byte	'SCHEDULETABLE_STOPPED',0,0,27
	.byte	'SCHEDULETABLE_NEXT',0,1,27
	.byte	'SCHEDULETABLE_WAITING',0,2,27
	.byte	'SCHEDULETABLE_RUNNING',0,3,27
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,25
	.byte	'ScheduleTableStatusType',0,37,241,3,41
	.word	19143
	.byte	9
	.word	.L752-.L154
	.byte	3
	.word	19343
	.byte	25
	.byte	'ScheduleTableType',0,37,128,4,58
	.word	19348
	.byte	29
	.byte	'Os_ScheduleTableDynType_s',0,37,130,4,16,16,11
	.byte	'match',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	19353
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	19143
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	864
	.byte	2,2,35,12,0,3
	.word	19380
	.byte	9
	.word	19473
.L752:
	.byte	29
	.byte	'Os_ScheduleTableType_s',0,37,247,3,16,16,11
	.byte	'dynamic',0
	.word	19478
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	19122
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	147
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	864
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	147
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	147
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	147
	.byte	1,2,35,14,0,25
	.byte	'Os_ScheduleTableType',0,37,255,3,3
	.word	19483
	.byte	9
	.word	19483
	.byte	3
	.word	19663
	.byte	9
	.word	18960
	.byte	3
	.word	19673
	.byte	12
	.word	16787
	.byte	12
	.word	17726
	.byte	12
	.word	17623
	.byte	12
	.word	18284
	.byte	12
	.word	17790
	.byte	12
	.word	147
	.byte	12
	.word	18284
	.byte	29
	.byte	'Os_ControlledCoreType_s',0,37,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	16223
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	19683
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	19688
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	19693
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	19698
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	19703
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	17309
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	17106
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	147
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	19708
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	16394
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	147
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	19713
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	16394
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	147
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	147
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	147
	.byte	1,2,35,110,0,25
	.byte	'Os_ControlledCoreType',0,37,141,7,3
	.word	19718
	.byte	3
	.word	1375
	.byte	9
	.word	17454
	.byte	3
	.word	20174
	.byte	9
	.word	18024
	.byte	3
	.word	20184
	.byte	3
	.word	17106
	.byte	29
	.byte	'Os_AnyCoreType_s',0,37,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	1375
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	1375
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	1375
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	1375
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	1375
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	16343
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	147
	.byte	1,2,35,92,0,25
	.byte	'Os_AnyCoreType',0,37,160,7,3
	.word	20199
	.byte	25
	.byte	'Can_TxObjPriorityClassType',0,38,219,3,16
	.word	1375
	.byte	29
	.byte	'Can_TxHwObjectConfigType',0,38,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	147
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	1375
	.byte	4,2,35,4,0,25
	.byte	'Can_TxHwObjectConfigType',0,38,252,3,3
	.word	20476
	.byte	29
	.byte	'Can_RxHwObjectConfigType',0,38,129,4,16,12,11
	.byte	'MaskRef',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	1375
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	147
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	147
	.byte	1,2,35,9,0,25
	.byte	'Can_RxHwObjectConfigType',0,38,147,4,3
	.word	20612
	.byte	14,4
	.word	147
	.byte	15,3,0,29
	.byte	'Can_ControllerMOMapConfigType',0,38,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	20752
	.byte	4,2,35,0,0,25
	.byte	'Can_ControllerMOMapConfigType',0,38,184,4,3
	.word	20761
	.byte	29
	.byte	'Can_NPCRValueType',0,38,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	864
	.byte	2,2,35,0,0,25
	.byte	'Can_NPCRValueType',0,38,191,4,3
	.word	20862
	.byte	29
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,38,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	864
	.byte	2,2,35,4,0,25
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,38,198,4,3
	.word	20937
	.byte	9
	.word	20937
	.byte	3
	.word	21102
	.byte	29
	.byte	'Can_BaudrateConfigPtrType',0,38,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	21107
	.byte	4,2,35,0,0,25
	.byte	'Can_BaudrateConfigPtrType',0,38,204,4,3
	.word	21112
	.byte	29
	.byte	'Can_EventHandlingType',0,38,226,4,16,4,11
	.byte	'CanEventType',0
	.word	20752
	.byte	4,2,35,0,0,25
	.byte	'Can_EventHandlingType',0,38,229,4,3
	.word	21212
	.byte	25
	.byte	'Rte_TransformerErrorCode',0,39,130,1,15
	.word	147
	.byte	25
	.byte	'Rte_TransformerClass',0,39,131,1,15
	.word	147
	.byte	10,39,168,1,9,12,11
	.byte	'in',0
	.word	12113
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	12113
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	864
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	147
	.byte	1,2,35,10,0,25
	.byte	'Rte_QDynType',0,39,173,1,3
	.word	21358
	.byte	26,39,175,1,9,4,27
	.byte	'RTE_DRA',0,0,27
	.byte	'RTE_WOWP',0,1,27
	.byte	'RTE_TASK',0,2,27
	.byte	'RTE_ARE',0,3,27
	.byte	'RTE_EV',0,4,27
	.byte	'RTE_MSI',0,5,0,25
	.byte	'Rte_NotificationType',0,39,182,1,3
	.word	21445
	.byte	3
	.word	21358
	.byte	29
	.byte	'Rte_QCmnType',0,39,184,1,16,24,11
	.byte	'dynamic',0
	.word	21543
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	147
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	864
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	864
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	12113
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	12113
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	21445
	.byte	4,2,35,20,0,25
	.byte	'Rte_QCmnType',0,39,192,1,3
	.word	21548
	.byte	25
	.byte	'Rte_AlarmRefType',0,39,224,1,32
	.word	1375
	.byte	25
	.byte	'Rte_AlarmIndexType',0,39,226,1,32
	.word	864
	.byte	14,128,8
	.word	147
	.byte	15,255,7,0,25
	.byte	'Impl_NVM_DstPtrType_1024',0,40,50,15
	.word	21786
	.byte	25
	.byte	'CanIf_u32_impl',0,40,69,16
	.word	1375
	.byte	25
	.byte	'CanIf_u16_impl',0,40,71,16
	.word	864
	.byte	25
	.byte	'CanIf_u8_impl',0,40,73,15
	.word	147
	.byte	25
	.byte	'CanIf_ControllerModeType_Enum_impl',0,40,88,15
	.word	147
	.byte	25
	.byte	'CanIf_PduModeType_Enum_impl',0,40,90,15
	.word	147
	.byte	10,40,92,9,2,11
	.byte	'DeviceMode',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	147
	.byte	1,2,35,1,0,25
	.byte	'CanIf_ControllerStateType_struct_impl',0,40,95,3
	.word	21977
	.byte	25
	.byte	'CanIf_NotifStatusType_Enum_impl',0,40,100,15
	.word	147
	.byte	25
	.byte	'CanSM_boolean_Impl',0,40,120,15
	.word	147
	.byte	25
	.byte	'CanSM_u8_Impl',0,40,123,15
	.word	147
	.byte	25
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,40,128,1,15
	.word	147
	.byte	25
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,40,132,1,15
	.word	147
	.byte	25
	.byte	'CanSM_u16_Impl',0,40,136,1,16
	.word	864
	.byte	25
	.byte	'CanSM_TimerStateType_Enum_impl',0,40,138,1,15
	.word	147
	.byte	10,40,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	864
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	147
	.byte	1,2,35,2,0,25
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,40,143,1,3
	.word	22318
	.byte	25
	.byte	'Com_impl_u16',0,40,154,1,16
	.word	864
	.byte	25
	.byte	'Com_impl_u8',0,40,157,1,15
	.word	147
	.byte	25
	.byte	'ComM_uint32_Impl',0,40,173,1,16
	.word	1375
	.byte	25
	.byte	'ComM_uint16_Impl',0,40,175,1,16
	.word	864
	.byte	25
	.byte	'ComM_uint8_Impl',0,40,177,1,15
	.word	147
	.byte	25
	.byte	'ComM_bool_Impl',0,40,179,1,15
	.word	147
	.byte	10,40,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	1375
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	864
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	147
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	147
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	147
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	147
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	147
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	147
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	147
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	147
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	147
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	147
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	147
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	147
	.byte	1,2,35,21,0,25
	.byte	'ComM_ChannelStruct_Impl',0,40,197,1,3
	.word	22550
	.byte	10,40,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	864
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	864
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	147
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	147
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	147
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	147
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	147
	.byte	1,2,35,8,0,25
	.byte	'ComM_UserStruct_Impl',0,40,214,1,3
	.word	23054
	.byte	25
	.byte	'Dcm_IOOperationResponseType',0,40,252,1,15
	.word	147
	.byte	25
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	40,138,2,15
	.word	147
	.byte	25
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,40,146,2,15
	.word	147
	.byte	25
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,40,150,2,15
	.word	147
	.byte	25
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,40,154,2,15
	.word	147
	.byte	25
	.byte	'Dem_DTCFormatType',0,40,160,2,15
	.word	147
	.byte	25
	.byte	'Dem_DTCOriginType',0,40,162,2,15
	.word	147
	.byte	25
	.byte	'Dem_EventIdType',0,40,168,2,16
	.word	864
	.byte	25
	.byte	'Dem_EventStatusType',0,40,170,2,15
	.word	147
	.byte	25
	.byte	'Dem_InitMonitorReasonType',0,40,176,2,15
	.word	147
	.byte	25
	.byte	'Dem_OperationCycleIdType',0,40,179,2,15
	.word	147
	.byte	25
	.byte	'Dem_UdsStatusByteType',0,40,185,2,15
	.word	147
	.byte	25
	.byte	'NvM_BlockIdType',0,40,215,2,16
	.word	864
	.byte	25
	.byte	'NvM_RequestResultType',0,40,225,2,15
	.word	147
	.byte	25
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,40,243,3,34
	.word	21797
	.byte	14,128,8
	.word	147
	.byte	15,255,7,0,25
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,40,246,3,34
	.word	21797
	.byte	25
	.byte	'Dem_DTCGroupIdType',0,41,49,15
	.word	147
	.byte	25
	.byte	'Dem_DtcIdType',0,41,50,16
	.word	864
	.byte	25
	.byte	'Dem_ClientIdType',0,41,53,15
	.word	147
	.byte	25
	.byte	'Dem_DtcCodeType',0,41,55,16
	.word	1375
	.byte	25
	.byte	'Dem_boolean_least',0,41,60,17
	.word	147
	.byte	25
	.byte	'Dem_EventCategoryType',0,41,62,15
	.word	147
	.byte	25
	.byte	'Dem_DTCSeverityType',0,41,217,1,15
	.word	147
	.byte	25
	.byte	'Dem_DebugDataType',0,41,131,3,16
	.word	1375
	.byte	25
	.byte	'Dem_DTCKindType',0,41,145,3,16
	.word	147
	.byte	25
	.byte	'Dem_TriggerType',0,41,167,3,15
	.word	147
	.byte	25
	.byte	'Dem_EnCoList',0,42,31,15
	.word	147
	.byte	25
	.byte	'Dem_OperationCycleList',0,43,23,15
	.word	147
	.byte	25
	.byte	'Dem_StoCoList',0,44,32,15
	.word	147
	.byte	25
	.byte	'Rte_TaskRefType',0,45,184,1,32
	.word	18284
	.byte	25
	.byte	'Rte_EventRefType',0,45,185,1,32
	.word	147
	.byte	25
	.byte	'Rte_EventType',0,45,186,1,32
	.word	1375
	.byte	25
	.byte	'Rte_REActCounterType',0,45,252,1,15
	.word	147
	.byte	3
	.word	147
	.byte	25
	.byte	'Rte_REActCounterRefType',0,45,253,1,58
	.word	24574
	.byte	10,45,255,1,9,8,11
	.byte	'task',0
	.word	24470
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	24579
	.byte	4,2,35,4,0,25
	.byte	'Rte_REContainerType',0,45,130,2,3
	.word	24612
	.byte	9
	.word	18024
	.byte	3
	.word	24676
	.byte	3
	.word	147
	.byte	9
	.word	24612
	.byte	3
	.word	24691
	.byte	25
	.byte	'Rte_REContainerRefType',0,45,132,2,60
	.word	24696
	.byte	25
	.byte	'Rte_MSICounterType',0,45,149,2,16
	.word	864
	.byte	3
	.word	864
	.byte	25
	.byte	'Rte_MSICounterRefType',0,45,150,2,56
	.word	24761
	.byte	25
	.byte	'Rte_MSIPendingFlagType',0,45,152,2,17
	.word	147
	.byte	3
	.word	147
	.byte	25
	.byte	'Rte_MSIPendingFlagRefType',0,45,153,2,60
	.word	24829
	.byte	10,45,163,2,9,24,11
	.byte	'counter',0
	.word	24766
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	147
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	24834
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	24470
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	24579
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	147
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	864
	.byte	2,2,35,22,0,25
	.byte	'Rte_MSITableEntry',0,45,172,2,3
	.word	24869
	.byte	3
	.word	864
	.byte	3
	.word	147
	.byte	25
	.byte	'Rte_TaskArrayIndex',0,45,179,2,16
	.word	147
	.byte	25
	.byte	'Rte_NrWaitingTasks',0,45,180,2,16
	.word	147
	.byte	10,45,182,2,9,4,11
	.byte	'pending',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	147
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	147
	.byte	1,2,35,2,0,25
	.byte	'Rte_WaitableDatum',0,45,186,2,3
	.word	25087
	.byte	3
	.word	25087
	.byte	10,45,226,2,9,12,11
	.byte	'event_id',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	25179
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	1375
	.byte	4,2,35,8,0,25
	.byte	'Rte_WOWP_NotificationType',0,45,230,2,3
	.word	25184
	.byte	9
	.word	25184
	.byte	3
	.word	25273
	.byte	25
	.byte	'Rte_WOWP_NotificationRefType',0,45,232,2,66
	.word	25278
	.byte	25
	.byte	'Rte_ARE_NotificationType',0,45,234,2,29
	.word	24612
	.byte	29
	.byte	'Rte_QTaskType',0,45,243,2,16,28,11
	.byte	'cmn',0
	.word	21548
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	24470
	.byte	4,2,35,24,0,25
	.byte	'Rte_QTaskType',0,45,246,2,3
	.word	25355
	.byte	29
	.byte	'Rte_QREType',0,45,250,2,16,28,11
	.byte	'cmn',0
	.word	21548
	.byte	24,2,35,0,11
	.byte	're',0
	.word	24701
	.byte	4,2,35,24,0,25
	.byte	'Rte_QREType',0,45,253,2,3
	.word	25426
	.byte	9
	.word	24612
	.byte	3
	.word	25491
	.byte	29
	.byte	'Rte_QWWPType',0,45,129,3,16,28,11
	.byte	'cmn',0
	.word	21548
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	25283
	.byte	4,2,35,24,0,25
	.byte	'Rte_QWWPType',0,45,132,3,3
	.word	25501
	.byte	9
	.word	25184
	.byte	3
	.word	25569
	.byte	29
	.byte	'Rte_QEvType',0,45,136,3,16,36,11
	.byte	'cmn',0
	.word	21548
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	24470
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	147
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	24579
	.byte	4,2,35,32,0,25
	.byte	'Rte_QEvType',0,45,141,3,3
	.word	25579
	.byte	29
	.byte	'Rte_QMSIType',0,45,145,3,16,48,11
	.byte	'cmn',0
	.word	21548
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	24470
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	147
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	24579
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	24766
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	24834
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	864
	.byte	2,2,35,44,0,25
	.byte	'Rte_QMSIType',0,45,153,3,3
	.word	25674
	.byte	25
	.byte	'Dem_EvtStateType',0,46,151,1,15
	.word	147
	.byte	25
	.byte	'Dem_OpMoStateType',0,47,13,15
	.word	147
	.byte	25
	.byte	'Dem_FimStateType',0,47,23,15
	.word	147
	.byte	34
	.byte	'Dem_OpMoState',0,47,31,26
	.word	147
	.byte	1,1,34
	.byte	'Dem_FimState',0,47,32,25
	.word	147
	.byte	1,1,25
	.byte	'rba_BswSrv_uint64',0,6,66,28
	.word	15619
	.byte	25
	.byte	'Dem_EventIdIterator',0,9,27,22
	.word	3418
	.byte	25
	.byte	'Dem_DtcIdIterator',0,9,197,1,22
	.word	3418
	.byte	25
	.byte	'Dem_DtcGroupIdIterator',0,9,230,1,21
	.word	3418
	.byte	25
	.byte	'Dem_EventIdListIterator',0,9,174,2,3
	.word	3950
	.byte	10,9,213,2,9,4,11
	.byte	'it',0
	.word	864
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	864
	.byte	2,2,35,2,0,25
	.byte	'Dem_DtcIdListIterator',0,9,216,2,3
	.word	26099
	.byte	26,48,31,9,4,27
	.byte	'MEMIF_JOB_OK',0,0,27
	.byte	'MEMIF_JOB_FAILED',0,1,27
	.byte	'MEMIF_JOB_PENDING',0,2,27
	.byte	'MEMIF_JOB_CANCELED',0,3,27
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,27
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,25
	.byte	'MemIf_JobResultType',0,48,39,2
	.word	26162
	.byte	26,49,49,9,4,27
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,27
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,27
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,27
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,27
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,27
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,27
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,25
	.byte	'NvM_Prv_Activities_ten',0,49,58,3
	.word	26320
	.byte	26,49,104,9,4,27
	.byte	'NvM_Prv_idJob_Idle_e',0,0,27
	.byte	'NvM_Prv_idJob_Read_e',0,1,27
	.byte	'NvM_Prv_idJob_Write_e',0,2,27
	.byte	'NvM_Prv_idJob_Erase_e',0,3,27
	.byte	'NvM_Prv_idJob_Restore_e',0,4,27
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,27
	.byte	'NvM_Prv_idJob_Validate_e',0,6,27
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,27
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,27
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,27
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,27
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,27
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,27
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,25
	.byte	'NvM_Prv_idJob_ten',0,49,115,3
	.word	26561
	.byte	25
	.byte	'NvM_Prv_ServiceBit_tuo',0,49,168,1,16
	.word	864
	.byte	25
	.byte	'NvM_Prv_idService_tuo',0,49,173,1,15
	.word	147
	.byte	25
	.byte	'NvM_Prv_idQueue_tuo',0,49,206,1,15
	.word	147
	.byte	10,49,210,1,9,12,11
	.byte	'idService_uo',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	864
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	864
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	12113
	.byte	4,2,35,8,0,25
	.byte	'NvM_Prv_QueueEntry_tst',0,49,225,1,3
	.word	27118
	.byte	10,49,227,1,9,20,11
	.byte	'idJob_en',0
	.word	26561
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	864
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	164
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	147
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	26162
	.byte	4,2,35,16,0,25
	.byte	'NvM_Prv_JobData_tst',0,49,240,1,3
	.word	27244
	.byte	25
	.byte	'Dem_DtcStateType',0,50,47,15
	.word	147
	.byte	25
	.byte	'Dem_EvMemOccurrenceCounterType',0,22,90,21
	.word	147
	.byte	25
	.byte	'Dem_EvMemAgingCounterType',0,22,99,21
	.word	147
	.byte	25
	.byte	'Dem_EvMemHdrType',0,22,141,1,4
	.word	7508
	.byte	25
	.byte	'Dem_EvMemEventMemoryType',0,22,213,1,4
	.word	7538
	.byte	14,5
	.word	147
	.byte	15,4,0,14,10
	.word	864
	.byte	15,4,0,10,51,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	147
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	27540
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	27549
	.byte	10,2,35,8,0,25
	.byte	'Dem_GenericNvDataType',0,51,24,4
	.word	27558
	.byte	25
	.byte	'Dem_NvmBlockIdType',0,52,14,34
	.word	147
	.byte	13,52,16,9,20,11
	.byte	'evMemData',0
	.word	7538
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	27558
	.byte	18,2,35,0,0,25
	.byte	'Dem_NvMStorageBufferData',0,52,37,3
	.word	27734
	.byte	25
	.byte	'Dem_NvmBlockStatusType',0,52,59,15
	.word	147
	.byte	14,5
	.word	147
	.byte	15,4,0,25
	.byte	'Dem_NvMBlockStatusDoubleBufferType',0,52,70,32
	.word	27846
	.byte	25
	.byte	'Dem_NvmResultType',0,52,78,31
	.word	147
	.byte	14,35
	.word	27855
	.byte	15,6,0,34
	.byte	'Dem_NvMBlockStatusDoubleBuffer',0,12,19,1
	.word	27924
	.byte	1,1,14,5
	.word	147
	.byte	15,4,0,14,14
	.word	864
	.byte	15,6,0,9
	.word	27983
	.byte	34
	.byte	'Dem_NvMBlockMap2NvmId',0,12,38,1
	.word	27992
	.byte	1,1,3
	.word	147
	.byte	35
	.word	147
	.byte	1,1,31
	.word	28029
	.byte	0,3
	.word	28034
	.byte	25
	.byte	'Dem_EvtClearAllowedFncType',0,14,12,26
	.word	28047
	.byte	35
	.word	147
	.byte	1,1,31
	.word	147
	.byte	0,3
	.word	28087
	.byte	25
	.byte	'Dem_InitMForEAllowedFncType',0,15,38,27
	.word	28100
	.byte	10,15,46,9,4,11
	.byte	'state',0
	.word	147
	.byte	1,2,35,0,11
	.byte	'debounceLevel',0
	.word	5508
	.byte	2,2,35,2,0,25
	.byte	'Dem_EvtState',0,15,50,3
	.word	28141
	.byte	10,15,52,9,1,11
	.byte	'lastReportedEvent',0
	.word	147
	.byte	1,2,35,0,0,25
	.byte	'Dem_EvtState8',0,15,55,3
	.word	28206
	.byte	34
	.byte	'Dem_EvtIsAnyInitMonitoringRequestedMask',0,15,151,1,15
	.word	1375
	.byte	1,1,14,24
	.word	28141
	.byte	15,5,0,34
	.byte	'Dem_AllEventsState',0,15,152,1,1
	.word	28312
	.byte	1,1,14,6
	.word	28206
	.byte	15,5,0,34
	.byte	'Dem_AllEventsState8',0,15,153,1,1
	.word	28351
	.byte	1,1,14,4
	.word	1375
	.byte	15,0,0,34
	.byte	'Dem_AllEventsResetDebouncerRequested',0,15,154,1,1
	.word	28391
	.byte	1,1,34
	.byte	'Dem_GlobalInitMonitoringCounter',0,15,157,1,15
	.word	864
	.byte	1,1
.L678:
	.byte	14,6
	.word	147
	.byte	15,5,0,9
	.word	12107
	.byte	3
	.word	28500
	.byte	35
	.word	3418
	.byte	1,1,31
	.word	864
	.byte	31
	.word	28029
	.byte	31
	.word	28505
	.byte	31
	.word	864
	.byte	0,3
	.word	28510
	.byte	25
	.byte	'Dem_DebFilter',0,53,12,23
	.word	28538
	.byte	2
	.byte	'long int',0,4,5,3
	.word	28565
	.byte	30,1,1,31
	.word	28505
	.byte	31
	.word	864
	.byte	31
	.word	28577
	.byte	31
	.word	28577
	.byte	0,3
	.word	28582
	.byte	25
	.byte	'Dem_DebGetLimits',0,53,13,23
	.word	28606
	.byte	30,1,1,31
	.word	864
	.byte	31
	.word	28505
	.byte	31
	.word	864
	.byte	0,3
	.word	28636
	.byte	25
	.byte	'Dem_DebCyclic',0,53,14,16
	.word	28655
	.byte	25
	.byte	'Dem_DebouncedActionType',0,53,35,21
	.word	3418
	.byte	13,54,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	1375
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	20752
	.byte	4,2,35,0,0,25
	.byte	'Dem_EvBuffEnvDataAlignedType',0,54,47,3
	.word	28714
	.byte	10,54,49,9,16,11
	.byte	'envData',0
	.word	28714
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	147
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	864
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	1375
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	1375
	.byte	4,2,35,12,0,25
	.byte	'Dem_EvBuffEvent',0,54,75,2
	.word	28799
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L155:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	11,1,49,19,0,0,21,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,22,59,0,3,8,0,0,23,46,1
	.byte	3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,24,21,0,54,15,0,0,25,22,0,3,8,58,15,59,15,57,15,73,19
	.byte	0,0,26,4,1,58,15,59,15,57,15,11,15,0,0,27,40,0,3,8,28,13,0,0,28,21,0,54,15,39,12,0,0,29,19,1,3,8,58,15
	.byte	59,15,57,15,11,15,0,0,30,21,1,54,15,39,12,0,0,31,5,0,73,19,0,0,32,4,1,3,8,58,15,59,15,57,15,11,15,0,0
	.byte	33,21,0,73,19,54,15,39,12,0,0,34,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,35,21,1,73,19,54,15
	.byte	39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L156:
	.word	.L754-.L753
.L753:
	.half	3
	.word	.L756-.L755
.L755:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Main.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L756:
.L754:
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventStatus')
	.sect	'.debug_info'
.L157:
	.word	458
	.half	3
	.word	.L158
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L160,.L159
	.byte	2
	.word	.L153
	.byte	3
	.byte	'Dem_GetEventStatus',0,1,70,16
	.word	.L194
	.byte	1,1,1
	.word	.L25,.L195,.L142
	.byte	4
	.byte	'EventId',0,1,70,51
	.word	.L196,.L197
	.byte	4
	.byte	'EventStatusExtended',0,1,71,32
	.word	.L198,.L199
	.byte	5
	.word	.L25,.L195
	.byte	6
	.word	.L200,.L33,.L201
	.byte	7
	.word	.L202,.L203
	.byte	8
	.word	.L204,.L33,.L201
	.byte	0,6
	.word	.L205,.L40,.L206
	.byte	7
	.word	.L207,.L208
	.byte	9
	.word	.L209,.L40,.L206
	.byte	6
	.word	.L210,.L211,.L42
	.byte	7
	.word	.L212,.L213
	.byte	7
	.word	.L214,.L215
	.byte	9
	.word	.L216,.L211,.L42
	.byte	6
	.word	.L217,.L211,.L41
	.byte	7
	.word	.L218,.L219
	.byte	7
	.word	.L220,.L221
	.byte	8
	.word	.L222,.L211,.L41
	.byte	0,0,0,0,0,6
	.word	.L223,.L48,.L50
	.byte	7
	.word	.L224,.L225
	.byte	8
	.word	.L226,.L48,.L50
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventStatus')
	.sect	'.debug_abbrev'
.L158:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventStatus')
	.sect	'.debug_line'
.L159:
	.word	.L758-.L757
.L757:
	.half	3
	.word	.L760-.L759
.L759:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0,0
.L760:
	.byte	5,5,7,0,5,2
	.word	.L27
	.byte	3,200,0,1,4,2,5,26,9
	.half	.L33-.L27
	.byte	3,77,1,5,12,9
	.half	.L761-.L33
	.byte	1,5,38,7,9
	.half	.L762-.L761
	.byte	1,5,26,9
	.half	.L763-.L762
	.byte	1,5,4,9
	.half	.L34-.L763
	.byte	1,4,1,5,5,9
	.half	.L36-.L34
	.byte	3,51,1,7,9
	.half	.L201-.L36
	.byte	1,4,3,5,33,9
	.half	.L40-.L201
	.byte	3,173,4,1,5,51,9
	.half	.L764-.L40
	.byte	1,5,60,9
	.half	.L765-.L764
	.byte	1,5,68,9
	.half	.L766-.L765
	.byte	1,4,4,5,28,9
	.half	.L211-.L766
	.byte	3,200,123,1,5,47,9
	.half	.L767-.L211
	.byte	1,5,5,9
	.half	.L768-.L767
	.byte	1,5,73,9
	.half	.L41-.L768
	.byte	3,4,1,5,5,9
	.half	.L769-.L41
	.byte	1,4,3,5,3,9
	.half	.L42-.L769
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L43-.L42
	.byte	3,211,123,1,7,9
	.half	.L206-.L43
	.byte	1,5,2,9
	.half	.L47-.L206
	.byte	3,1,1,7,9
	.half	.L770-.L47
	.byte	1,4,5,5,12,9
	.half	.L48-.L770
	.byte	3,98,1,5,35,9
	.half	.L771-.L48
	.byte	1,5,5,9
	.half	.L772-.L771
	.byte	1,4,1,5,26,9
	.half	.L50-.L772
	.byte	3,32,1,5,12,9
	.half	.L773-.L50
	.byte	3,1,1,5,5,9
	.half	.L774-.L773
	.byte	1,5,1,9
	.half	.L30-.L774
	.byte	3,1,1,7,9
	.half	.L161-.L30
	.byte	0,1,1
.L758:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventStatus')
	.sect	'.debug_ranges'
.L160:
	.word	-1,.L25,0,.L161-.L25,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtGetLastReportedEventStatus')
	.sect	'.debug_info'
.L162:
	.word	277
	.half	3
	.word	.L163
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L165,.L164
	.byte	2
	.word	.L153
	.byte	3
	.byte	'Dem_EvtGetLastReportedEventStatus',0,1,88,21
	.word	.L194
	.byte	1,1,1
	.word	.L146,.L227,.L145
	.byte	4
	.byte	'EventId',0,1,88,72
	.word	.L196,.L228
	.byte	5
	.word	.L146,.L227
	.byte	6
	.word	.L229,.L146,.L53
	.byte	7
	.word	.L230,.L231
	.byte	8
	.word	.L232,.L146,.L53
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtGetLastReportedEventStatus')
	.sect	'.debug_abbrev'
.L163:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtGetLastReportedEventStatus')
	.sect	'.debug_line'
.L164:
	.word	.L776-.L775
.L775:
	.half	3
	.word	.L778-.L777
.L777:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0,0
.L778:
	.byte	4,2,5,11,7,0,5,2
	.word	.L146
	.byte	3,220,1,1,5,30,9
	.half	.L779-.L146
	.byte	1,5,39,9
	.half	.L780-.L779
	.byte	1,5,4,9
	.half	.L781-.L780
	.byte	1,4,1,5,5,9
	.half	.L53-.L781
	.byte	3,253,126,1,5,1,9
	.half	.L54-.L53
	.byte	3,1,1,7,9
	.half	.L166-.L54
	.byte	0,1,1
.L776:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtGetLastReportedEventStatus')
	.sect	'.debug_ranges'
.L165:
	.word	-1,.L146,0,.L166-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_OverwriteWIRStatus')
	.sect	'.debug_info'
.L167:
	.word	860
	.half	3
	.word	.L168
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L170,.L169
	.byte	2
	.word	.L153
	.byte	3
	.byte	'Dem_OverwriteWIRStatus',0,1,214,1,16
	.word	.L194
	.byte	1,1,1
	.word	.L152,.L233,.L151
	.byte	4
	.byte	'EventId',0,1,214,1,56
	.word	.L196,.L234
	.byte	4
	.byte	'WIRStatus',0,1,214,1,73
	.word	.L194,.L235
	.byte	5
	.word	.L152,.L233
	.byte	6
	.byte	'ret_val',0,1,216,1,20
	.word	.L194,.L236
	.byte	7
	.word	.L200,.L237,.L238
	.byte	8
	.word	.L202,.L239
	.byte	9
	.word	.L204,.L237,.L238
	.byte	0,7
	.word	.L240,.L241,.L135
	.byte	8
	.word	.L242,.L243
	.byte	10
	.word	.L244,.L241,.L135
	.byte	7
	.word	.L245,.L246,.L135
	.byte	8
	.word	.L247,.L248
	.byte	8
	.word	.L249,.L250
	.byte	10
	.word	.L251,.L246,.L135
	.byte	7
	.word	.L252,.L253,.L135
	.byte	8
	.word	.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	10
	.word	.L260,.L253,.L135
	.byte	7
	.word	.L261,.L262,.L263
	.byte	8
	.word	.L264,.L265
	.byte	8
	.word	.L266,.L267
	.byte	10
	.word	.L268,.L262,.L263
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L194,.L269
	.byte	0,0,7
	.word	.L270,.L134,.L135
	.byte	8
	.word	.L271,.L272
	.byte	8
	.word	.L273,.L274
	.byte	10
	.word	.L275,.L134,.L135
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L194,.L276
	.byte	0,0,0,0,0,0,0,0,7
	.word	.L277,.L133,.L136
	.byte	8
	.word	.L278,.L279
	.byte	10
	.word	.L280,.L133,.L136
	.byte	7
	.word	.L245,.L281,.L136
	.byte	8
	.word	.L247,.L248
	.byte	8
	.word	.L249,.L250
	.byte	10
	.word	.L251,.L281,.L136
	.byte	7
	.word	.L252,.L282,.L136
	.byte	8
	.word	.L254,.L255
	.byte	8
	.word	.L256,.L257
	.byte	8
	.word	.L258,.L259
	.byte	10
	.word	.L260,.L282,.L136
	.byte	7
	.word	.L261,.L283,.L284
	.byte	8
	.word	.L264,.L265
	.byte	8
	.word	.L266,.L267
	.byte	10
	.word	.L268,.L283,.L284
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L194,.L285
	.byte	0,0,7
	.word	.L270,.L137,.L136
	.byte	8
	.word	.L271,.L272
	.byte	8
	.word	.L273,.L274
	.byte	10
	.word	.L275,.L137,.L136
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L194,.L286
	.byte	0,0,0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_OverwriteWIRStatus')
	.sect	'.debug_abbrev'
.L168:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_OverwriteWIRStatus')
	.sect	'.debug_line'
.L169:
	.word	.L783-.L782
.L782:
	.half	3
	.word	.L785-.L784
.L784:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0,0
.L785:
	.byte	5,28,7,0,5,2
	.word	.L152
	.byte	3,215,1,1,4,3,5,26,9
	.half	.L237-.L152
	.byte	3,190,126,1,5,12,9
	.half	.L786-.L237
	.byte	1,5,38,7,9
	.half	.L787-.L786
	.byte	1,5,26,9
	.half	.L788-.L787
	.byte	1,5,4,9
	.half	.L129-.L788
	.byte	1,4,1,5,5,9
	.half	.L131-.L129
	.byte	3,196,1,1,5,9,7,9
	.half	.L238-.L131
	.byte	3,4,1,4,4,5,52,7,9
	.half	.L241-.L238
	.byte	3,192,0,1,5,75,9
	.half	.L789-.L241
	.byte	1,5,87,9
	.half	.L790-.L789
	.byte	1,4,5,5,41,9
	.half	.L246-.L790
	.byte	3,86,1,4,2,5,5,9
	.half	.L253-.L246
	.byte	3,190,126,1,5,21,7,9
	.half	.L262-.L253
	.byte	3,116,1,5,6,9
	.half	.L744-.L262
	.byte	3,1,1,5,36,9
	.half	.L791-.L744
	.byte	1,5,13,9
	.half	.L745-.L791
	.byte	1,5,53,9
	.half	.L263-.L745
	.byte	3,13,1,5,21,9
	.half	.L134-.L263
	.byte	3,120,1,5,6,9
	.half	.L746-.L134
	.byte	3,1,1,5,47,9
	.half	.L792-.L746
	.byte	1,5,26,9
	.half	.L747-.L792
	.byte	1,5,13,9
	.half	.L793-.L747
	.byte	1,4,1,5,49,9
	.half	.L135-.L793
	.byte	3,179,1,1,4,4,5,52,9
	.half	.L133-.L135
	.byte	3,198,0,1,5,75,9
	.half	.L794-.L133
	.byte	1,5,87,9
	.half	.L795-.L794
	.byte	1,4,5,5,41,9
	.half	.L281-.L795
	.byte	3,78,1,4,2,5,5,9
	.half	.L282-.L281
	.byte	3,190,126,1,5,21,7,9
	.half	.L283-.L282
	.byte	3,116,1,5,6,9
	.half	.L748-.L283
	.byte	3,1,1,5,36,9
	.half	.L796-.L748
	.byte	1,5,13,9
	.half	.L749-.L796
	.byte	1,5,53,9
	.half	.L284-.L749
	.byte	3,13,1,5,21,9
	.half	.L137-.L284
	.byte	3,120,1,5,6,9
	.half	.L750-.L137
	.byte	3,1,1,5,47,9
	.half	.L797-.L750
	.byte	1,5,26,9
	.half	.L751-.L797
	.byte	1,5,13,9
	.half	.L798-.L751
	.byte	1,4,1,5,17,9
	.half	.L136-.L798
	.byte	3,187,1,1,5,5,9
	.half	.L132-.L136
	.byte	3,3,1,5,1,9
	.half	.L139-.L132
	.byte	3,1,1,7,9
	.half	.L171-.L139
	.byte	0,1,1
.L783:
	.sdecl	'.debug_ranges',debug,cluster('Dem_OverwriteWIRStatus')
	.sect	'.debug_ranges'
.L170:
	.word	-1,.L152,0,.L171-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventStatus_GeneralEvtInfo')
	.sect	'.debug_info'
.L172:
	.word	272
	.half	3
	.word	.L173
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L175,.L174
	.byte	2
	.word	.L153
	.byte	3
	.byte	'Dem_GetEventStatus_GeneralEvtInfo',0,1,80,16
	.word	.L194
	.byte	1,1,1
	.word	.L144,.L287,.L143
	.byte	4
	.byte	'EventId',0,1,80,66
	.word	.L196,.L288
	.byte	4
	.byte	'EventStatusExtended',0,1,81,32
	.word	.L198,.L289
	.byte	5
	.word	.L144,.L287
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventStatus_GeneralEvtInfo')
	.sect	'.debug_abbrev'
.L173:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventStatus_GeneralEvtInfo')
	.sect	'.debug_line'
.L174:
	.word	.L800-.L799
.L799:
	.half	3
	.word	.L802-.L801
.L801:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0,0,0,0,0
.L802:
	.byte	5,40,7,0,5,2
	.word	.L144
	.byte	3,210,0,1,5,5,9
	.half	.L685-.L144
	.byte	1,5,1,9
	.half	.L52-.L685
	.byte	3,1,1,7,9
	.half	.L176-.L52
	.byte	0,1,1
.L800:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventStatus_GeneralEvtInfo')
	.sect	'.debug_ranges'
.L175:
	.word	-1,.L144,0,.L176-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EventStatusInitCheckNvM')
	.sect	'.debug_info'
.L177:
	.word	532
	.half	3
	.word	.L178
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L180,.L179
	.byte	2
	.word	.L153
	.byte	3
	.byte	'Dem_EventStatusInitCheckNvM',0,1,41,6,1,1,1
	.word	.L141,.L290,.L140
	.byte	4
	.word	.L141,.L290
	.byte	5
	.byte	'NvmResult',0,1,43,23
	.word	.L194,.L291
	.byte	6
	.word	.L292,.L293,.L2
	.byte	7
	.word	.L294,.L293,.L2
	.byte	0,6
	.word	.L295,.L296,.L297
	.byte	8
	.word	.L298,.L299
	.byte	8
	.word	.L300,.L301
	.byte	8
	.word	.L302,.L303
	.byte	7
	.word	.L304,.L296,.L297
	.byte	0,6
	.word	.L305,.L306,.L307
	.byte	8
	.word	.L308,.L309
	.byte	7
	.word	.L310,.L306,.L307
	.byte	0,6
	.word	.L311,.L312,.L7
	.byte	8
	.word	.L313,.L314
	.byte	9
	.word	.L315,.L312,.L7
	.byte	5
	.byte	'result',0,2,56,27
	.word	.L194,.L316
	.byte	6
	.word	.L317,.L312,.L5
	.byte	8
	.word	.L318,.L319
	.byte	7
	.word	.L320,.L312,.L5
	.byte	0,0,0,6
	.word	.L295,.L321,.L322
	.byte	8
	.word	.L298,.L299
	.byte	8
	.word	.L300,.L301
	.byte	8
	.word	.L302,.L303
	.byte	7
	.word	.L304,.L321,.L322
	.byte	0,6
	.word	.L323,.L324,.L4
	.byte	8
	.word	.L325,.L326
	.byte	7
	.word	.L327,.L324,.L4
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EventStatusInitCheckNvM')
	.sect	'.debug_abbrev'
.L178:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,11,0,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EventStatusInitCheckNvM')
	.sect	'.debug_line'
.L179:
	.word	.L804-.L803
.L803:
	.half	3
	.word	.L806-.L805
.L805:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0,0
.L806:
	.byte	5,6,7,0,5,2
	.word	.L141
	.byte	3,40,1,4,2,5,4,9
	.half	.L293-.L141
	.byte	3,133,1,1,4,1,5,5,9
	.half	.L2-.L293
	.byte	3,255,126,1,5,9,7,9
	.half	.L807-.L2
	.byte	3,3,1,4,3,5,54,9
	.half	.L296-.L807
	.byte	3,109,1,4,1,5,39,9
	.half	.L297-.L296
	.byte	3,20,1,4,2,5,5,9
	.half	.L306-.L297
	.byte	3,60,1,5,35,9
	.half	.L808-.L306
	.byte	1,5,69,9
	.half	.L809-.L808
	.byte	1,5,67,9
	.half	.L810-.L809
	.byte	1,4,1,5,123,9
	.half	.L307-.L810
	.byte	3,67,1,5,39,9
	.half	.L3-.L307
	.byte	3,6,1,4,2,5,12,9
	.half	.L312-.L3
	.byte	3,125,1,5,33,9
	.half	.L811-.L312
	.byte	1,5,5,9
	.half	.L812-.L811
	.byte	1,5,56,9
	.half	.L5-.L812
	.byte	3,6,1,5,5,9
	.half	.L813-.L5
	.byte	1,5,9,7,9
	.half	.L814-.L813
	.byte	3,2,1,5,13,9
	.half	.L6-.L814
	.byte	3,3,1,5,14,9
	.half	.L815-.L6
	.byte	3,5,1,9
	.half	.L816-.L815
	.byte	3,5,1,9
	.half	.L817-.L816
	.byte	3,6,1,9
	.half	.L818-.L817
	.byte	3,3,1,9
	.half	.L819-.L818
	.byte	3,122,1,9
	.half	.L820-.L819
	.byte	3,117,1,9
	.half	.L821-.L820
	.byte	3,4,1,9
	.half	.L822-.L821
	.byte	3,1,1,5,13,9
	.half	.L13-.L822
	.byte	3,124,1,9
	.half	.L15-.L13
	.byte	3,5,1,9
	.half	.L9-.L15
	.byte	3,3,1,9
	.half	.L12-.L9
	.byte	3,3,1,9
	.half	.L10-.L12
	.byte	3,3,1,9
	.half	.L11-.L10
	.byte	3,3,1,9
	.half	.L16-.L11
	.byte	3,6,1,4,1,5,9,9
	.half	.L7-.L16
	.byte	3,97,1,5,13,7,9
	.half	.L823-.L7
	.byte	3,3,1,4,3,5,54,9
	.half	.L321-.L823
	.byte	3,97,1,4,1,5,40,9
	.half	.L322-.L321
	.byte	3,34,1,4,2,5,5,9
	.half	.L324-.L322
	.byte	3,36,1,5,35,9
	.half	.L824-.L324
	.byte	1,5,73,9
	.half	.L825-.L824
	.byte	1,5,71,9
	.half	.L826-.L825
	.byte	1,4,1,5,1,9
	.half	.L4-.L826
	.byte	3,96,1,7,9
	.half	.L181-.L4
	.byte	0,1,1
.L804:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EventStatusInitCheckNvM')
	.sect	'.debug_ranges'
.L180:
	.word	-1,.L141,0,.L181-.L141,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ClearEvent')
	.sect	'.debug_info'
.L182:
	.word	2532
	.half	3
	.word	.L183
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L185,.L184
	.byte	2
	.word	.L153
	.byte	3
	.byte	'Dem_ClearEvent',0,1,93,6,1,1,1
	.word	.L148,.L328,.L147
	.byte	4
	.byte	'eventId',0,1,93,37
	.word	.L196,.L329
	.byte	4
	.byte	'ClearFully',0,1,93,54
	.word	.L194,.L330
	.byte	5
	.word	.L148,.L328
	.byte	6
	.byte	'statusOld',0,1,95,27
	.word	.L194,.L331
	.byte	6
	.byte	'statusNew',0,1,95,38
	.word	.L194,.L332
	.byte	6
	.byte	'dtcStByteOld',0,1,96,27
	.word	.L194,.L333
	.byte	7
	.word	.L205,.L334,.L335
	.byte	8
	.word	.L207,.L336
	.byte	9
	.word	.L209,.L334,.L335
	.byte	7
	.word	.L210,.L337,.L56
	.byte	8
	.word	.L212,.L338
	.byte	8
	.word	.L214,.L339
	.byte	9
	.word	.L216,.L337,.L56
	.byte	7
	.word	.L217,.L337,.L55
	.byte	8
	.word	.L218,.L340
	.byte	8
	.word	.L220,.L341
	.byte	10
	.word	.L222,.L337,.L55
	.byte	0,0,0,0,0,7
	.word	.L342,.L343,.L344
	.byte	8
	.word	.L345,.L346
	.byte	8
	.word	.L347,.L348
	.byte	8
	.word	.L349,.L350
	.byte	9
	.word	.L351,.L343,.L344
	.byte	7
	.word	.L223,.L343,.L59
	.byte	8
	.word	.L224,.L352
	.byte	10
	.word	.L226,.L343,.L59
	.byte	0,0,0,7
	.word	.L353,.L354,.L355
	.byte	8
	.word	.L356,.L357
	.byte	10
	.word	.L358,.L354,.L355
	.byte	0,7
	.word	.L223,.L355,.L61
	.byte	8
	.word	.L224,.L352
	.byte	10
	.word	.L226,.L355,.L61
	.byte	0,7
	.word	.L359,.L360,.L361
	.byte	8
	.word	.L362,.L363
	.byte	8
	.word	.L364,.L365
	.byte	9
	.word	.L366,.L360,.L361
	.byte	6
	.byte	'oldReason',0,2,243,3,31
	.word	.L194,.L367
	.byte	7
	.word	.L368,.L369,.L63
	.byte	8
	.word	.L370,.L371
	.byte	8
	.word	.L372,.L373
	.byte	8
	.word	.L374,.L375
	.byte	9
	.word	.L376,.L369,.L63
	.byte	6
	.byte	'bit2shift',0,3,71,11
	.word	.L194,.L377
	.byte	0,0,7
	.word	.L378,.L379,.L65
	.byte	8
	.word	.L380,.L381
	.byte	8
	.word	.L382,.L383
	.byte	8
	.word	.L384,.L385
	.byte	8
	.word	.L386,.L387
	.byte	9
	.word	.L388,.L379,.L65
	.byte	6
	.byte	'bit2shift',0,3,85,11
	.word	.L194,.L389
	.byte	7
	.word	.L390,.L391,.L392
	.byte	8
	.word	.L393,.L394
	.byte	8
	.word	.L395,.L396
	.byte	8
	.word	.L397,.L398
	.byte	9
	.word	.L399,.L391,.L392
	.byte	6
	.byte	'bit2shift',0,3,79,11
	.word	.L194,.L400
	.byte	0,0,0,0,7
	.word	.L401,.L65,.L402
	.byte	10
	.word	.L403,.L65,.L402
	.byte	0,7
	.word	.L404,.L405,.L361
	.byte	8
	.word	.L406,.L407
	.byte	9
	.word	.L408,.L405,.L361
	.byte	7
	.word	.L409,.L410,.L361
	.byte	8
	.word	.L411,.L412
	.byte	8
	.word	.L413,.L414
	.byte	9
	.word	.L415,.L410,.L361
	.byte	6
	.byte	'bit2shift',0,4,38,12
	.word	.L416,.L417
	.byte	0,0,0,0,0,0,7
	.word	.L418,.L419,.L420
	.byte	8
	.word	.L421,.L422
	.byte	8
	.word	.L423,.L424
	.byte	10
	.word	.L425,.L419,.L420
	.byte	0,7
	.word	.L426,.L66,.L71
	.byte	8
	.word	.L427,.L428
	.byte	8
	.word	.L429,.L430
	.byte	9
	.word	.L431,.L66,.L71
	.byte	7
	.word	.L432,.L433,.L71
	.byte	8
	.word	.L434,.L435
	.byte	8
	.word	.L436,.L437
	.byte	8
	.word	.L438,.L439
	.byte	9
	.word	.L440,.L433,.L71
	.byte	7
	.word	.L441,.L442,.L68
	.byte	8
	.word	.L443,.L444
	.byte	8
	.word	.L445,.L446
	.byte	9
	.word	.L447,.L442,.L68
	.byte	6
	.byte	'element_pos',0,5,36,18
	.word	.L448,.L449
	.byte	6
	.byte	'local_bitpos',0,5,37,18
	.word	.L450,.L451
	.byte	6
	.byte	'mask',0,5,38,18
	.word	.L452,.L453
	.byte	0,0,7
	.word	.L454,.L67,.L69
	.byte	8
	.word	.L455,.L456
	.byte	8
	.word	.L457,.L458
	.byte	9
	.word	.L459,.L67,.L69
	.byte	6
	.byte	'element_pos',0,5,49,18
	.word	.L460,.L461
	.byte	6
	.byte	'local_bitpos',0,5,50,18
	.word	.L462,.L463
	.byte	6
	.byte	'mask',0,5,51,18
	.word	.L464,.L465
	.byte	0,0,0,0,0,0,7
	.word	.L466,.L73,.L72
	.byte	8
	.word	.L467,.L468
	.byte	10
	.word	.L469,.L73,.L72
	.byte	0,7
	.word	.L470,.L60,.L83
	.byte	8
	.word	.L471,.L472
	.byte	9
	.word	.L473,.L60,.L83
	.byte	7
	.word	.L474,.L475,.L77
	.byte	8
	.word	.L476,.L477
	.byte	8
	.word	.L478,.L479
	.byte	9
	.word	.L480,.L475,.L77
	.byte	7
	.word	.L252,.L481,.L77
	.byte	8
	.word	.L254,.L482
	.byte	8
	.word	.L256,.L483
	.byte	8
	.word	.L258,.L484
	.byte	9
	.word	.L260,.L481,.L77
	.byte	7
	.word	.L261,.L485,.L486
	.byte	8
	.word	.L264,.L487
	.byte	8
	.word	.L266,.L488
	.byte	9
	.word	.L268,.L485,.L486
	.byte	6
	.byte	'bit2shift',0,3,38,11
	.word	.L194,.L489
	.byte	0,0,7
	.word	.L270,.L76,.L77
	.byte	8
	.word	.L271,.L490
	.byte	8
	.word	.L273,.L491
	.byte	9
	.word	.L275,.L76,.L77
	.byte	6
	.byte	'bit2shift',0,3,44,11
	.word	.L194,.L492
	.byte	0,0,0,0,0,0,7
	.word	.L493,.L494,.L79
	.byte	8
	.word	.L495,.L496
	.byte	8
	.word	.L497,.L498
	.byte	9
	.word	.L499,.L494,.L79
	.byte	7
	.word	.L252,.L500,.L79
	.byte	8
	.word	.L254,.L482
	.byte	8
	.word	.L256,.L483
	.byte	8
	.word	.L258,.L484
	.byte	9
	.word	.L260,.L500,.L79
	.byte	7
	.word	.L261,.L501,.L502
	.byte	8
	.word	.L264,.L487
	.byte	8
	.word	.L266,.L488
	.byte	9
	.word	.L268,.L501,.L502
	.byte	6
	.byte	'bit2shift',0,3,38,11
	.word	.L194,.L503
	.byte	0,0,7
	.word	.L270,.L78,.L79
	.byte	8
	.word	.L271,.L490
	.byte	8
	.word	.L273,.L491
	.byte	9
	.word	.L275,.L78,.L79
	.byte	6
	.byte	'bit2shift',0,3,44,11
	.word	.L194,.L504
	.byte	0,0,0,0,0,0,7
	.word	.L505,.L506,.L81
	.byte	8
	.word	.L507,.L508
	.byte	8
	.word	.L509,.L510
	.byte	9
	.word	.L511,.L506,.L81
	.byte	7
	.word	.L252,.L512,.L81
	.byte	8
	.word	.L254,.L482
	.byte	8
	.word	.L256,.L483
	.byte	8
	.word	.L258,.L484
	.byte	9
	.word	.L260,.L512,.L81
	.byte	7
	.word	.L261,.L513,.L514
	.byte	8
	.word	.L264,.L487
	.byte	8
	.word	.L266,.L488
	.byte	9
	.word	.L268,.L513,.L514
	.byte	6
	.byte	'bit2shift',0,3,38,11
	.word	.L194,.L515
	.byte	0,0,7
	.word	.L270,.L80,.L81
	.byte	8
	.word	.L271,.L490
	.byte	8
	.word	.L273,.L491
	.byte	9
	.word	.L275,.L80,.L81
	.byte	6
	.byte	'bit2shift',0,3,44,11
	.word	.L194,.L516
	.byte	0,0,0,0,0,0,7
	.word	.L517,.L518,.L83
	.byte	8
	.word	.L519,.L520
	.byte	8
	.word	.L521,.L522
	.byte	9
	.word	.L523,.L518,.L83
	.byte	7
	.word	.L252,.L524,.L83
	.byte	8
	.word	.L254,.L482
	.byte	8
	.word	.L256,.L483
	.byte	8
	.word	.L258,.L484
	.byte	9
	.word	.L260,.L524,.L83
	.byte	7
	.word	.L261,.L525,.L526
	.byte	8
	.word	.L264,.L487
	.byte	8
	.word	.L266,.L488
	.byte	9
	.word	.L268,.L525,.L526
	.byte	6
	.byte	'bit2shift',0,3,38,11
	.word	.L194,.L527
	.byte	0,0,7
	.word	.L270,.L82,.L83
	.byte	8
	.word	.L271,.L490
	.byte	8
	.word	.L273,.L491
	.byte	9
	.word	.L275,.L82,.L83
	.byte	6
	.byte	'bit2shift',0,3,44,11
	.word	.L194,.L528
	.byte	0,0,0,0,0,0,0,0,7
	.word	.L223,.L83,.L75
	.byte	8
	.word	.L224,.L352
	.byte	10
	.word	.L226,.L83,.L75
	.byte	0,7
	.word	.L529,.L530,.L58
	.byte	8
	.word	.L531,.L532
	.byte	8
	.word	.L533,.L534
	.byte	8
	.word	.L535,.L536
	.byte	8
	.word	.L537,.L538
	.byte	10
	.word	.L539,.L530,.L58
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ClearEvent')
	.sect	'.debug_abbrev'
.L183:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ClearEvent')
	.sect	'.debug_line'
.L184:
	.word	.L828-.L827
.L827:
	.half	3
	.word	.L830-.L829
.L829:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0,0
.L830:
	.byte	5,6,7,0,5,2
	.word	.L148
	.byte	3,220,0,1,5,17,9
	.half	.L689-.L148
	.byte	3,5,1,5,15,9
	.half	.L831-.L689
	.byte	1,5,20,9
	.half	.L832-.L831
	.byte	3,2,1,5,18,9
	.half	.L833-.L832
	.byte	1,4,2,5,33,9
	.half	.L334-.L833
	.byte	3,146,4,1,5,51,9
	.half	.L834-.L334
	.byte	1,5,60,9
	.half	.L835-.L834
	.byte	1,5,68,9
	.half	.L836-.L835
	.byte	1,4,3,5,28,9
	.half	.L337-.L836
	.byte	3,200,123,1,5,47,9
	.half	.L837-.L337
	.byte	1,5,5,9
	.half	.L838-.L837
	.byte	1,5,73,9
	.half	.L55-.L838
	.byte	3,4,1,5,5,9
	.half	.L839-.L55
	.byte	1,4,2,5,3,9
	.half	.L56-.L839
	.byte	3,180,4,1,4,1,5,10,9
	.half	.L57-.L56
	.byte	3,240,123,1,5,39,7,9
	.half	.L335-.L57
	.byte	3,3,1,5,49,9
	.half	.L840-.L335
	.byte	1,5,61,9
	.half	.L841-.L840
	.byte	1,4,6,5,12,9
	.half	.L343-.L841
	.byte	3,67,1,5,35,9
	.half	.L842-.L343
	.byte	1,5,5,9
	.half	.L843-.L842
	.byte	1,4,7,5,16,9
	.half	.L59-.L843
	.byte	3,24,1,5,21,9
	.half	.L844-.L59
	.byte	3,1,1,5,19,9
	.half	.L845-.L844
	.byte	1,4,1,5,9,9
	.half	.L344-.L845
	.byte	3,37,1,4,6,5,28,7,9
	.half	.L354-.L344
	.byte	3,239,0,1,5,40,9
	.half	.L846-.L354
	.byte	1,5,38,9
	.half	.L847-.L846
	.byte	1,5,35,9
	.half	.L355-.L847
	.byte	3,211,126,1,5,5,9
	.half	.L690-.L355
	.byte	1,4,1,5,39,9
	.half	.L61-.L690
	.byte	3,196,0,1,5,47,9
	.half	.L688-.L61
	.byte	3,1,1,4,2,5,110,9
	.half	.L360-.L688
	.byte	3,130,3,1,5,119,9
	.half	.L848-.L360
	.byte	1,4,3,5,21,9
	.half	.L369-.L848
	.byte	3,212,124,1,5,19,9
	.half	.L691-.L369
	.byte	3,1,1,5,41,9
	.half	.L849-.L691
	.byte	3,1,1,5,19,9
	.half	.L692-.L849
	.byte	1,5,5,9
	.half	.L850-.L692
	.byte	3,1,1,4,2,5,9,9
	.half	.L63-.L850
	.byte	3,172,3,1,5,41,7,9
	.half	.L851-.L63
	.byte	1,5,73,7,9
	.half	.L64-.L851
	.byte	3,2,1,5,106,9
	.half	.L852-.L64
	.byte	1,4,3,5,21,9
	.half	.L379-.L852
	.byte	3,221,124,1,9
	.half	.L391-.L379
	.byte	3,122,1,5,6,9
	.half	.L694-.L391
	.byte	3,1,1,5,57,9
	.half	.L853-.L694
	.byte	1,5,77,9
	.half	.L695-.L853
	.byte	1,5,83,9
	.half	.L854-.L695
	.byte	1,5,25,9
	.half	.L855-.L854
	.byte	1,5,12,9
	.half	.L856-.L855
	.byte	1,5,6,9
	.half	.L392-.L856
	.byte	3,7,1,5,57,9
	.half	.L857-.L392
	.byte	1,5,35,9
	.half	.L693-.L857
	.byte	1,5,78,9
	.half	.L858-.L693
	.byte	1,5,12,9
	.half	.L859-.L858
	.byte	1,4,2,5,5,9
	.half	.L65-.L859
	.byte	3,142,3,1,5,36,9
	.half	.L860-.L65
	.byte	1,5,34,9
	.half	.L402-.L860
	.byte	3,22,1,5,107,9
	.half	.L405-.L402
	.byte	3,110,1,4,4,5,22,9
	.half	.L410-.L405
	.byte	3,189,124,1,5,6,9
	.half	.L696-.L410
	.byte	3,1,1,5,37,9
	.half	.L861-.L696
	.byte	1,5,13,9
	.half	.L697-.L861
	.byte	1,4,1,5,50,9
	.half	.L361-.L697
	.byte	3,203,0,1,4,2,5,4,9
	.half	.L419-.L361
	.byte	3,241,0,1,5,23,9
	.half	.L862-.L419
	.byte	1,5,51,9
	.half	.L863-.L862
	.byte	1,4,1,5,55,9
	.half	.L420-.L863
	.byte	3,144,127,1,4,2,5,30,9
	.half	.L66-.L420
	.byte	3,181,2,1,5,68,9
	.half	.L864-.L66
	.byte	1,4,5,5,5,9
	.half	.L433-.L864
	.byte	3,152,125,1,5,42,7,9
	.half	.L442-.L433
	.byte	3,100,1,5,43,9
	.half	.L698-.L442
	.byte	3,1,1,5,14,9
	.half	.L865-.L698
	.byte	3,2,1,5,26,9
	.half	.L866-.L865
	.byte	1,5,11,9
	.half	.L700-.L866
	.byte	3,2,1,5,25,9
	.half	.L699-.L700
	.byte	1,5,5,9
	.half	.L867-.L699
	.byte	3,1,1,5,49,9
	.half	.L68-.L867
	.byte	3,23,1,5,42,9
	.half	.L67-.L68
	.byte	3,112,1,5,43,9
	.half	.L701-.L67
	.byte	3,1,1,5,14,9
	.half	.L868-.L701
	.byte	3,2,1,5,26,9
	.half	.L869-.L868
	.byte	1,5,11,9
	.half	.L704-.L869
	.byte	3,2,1,5,37,9
	.half	.L703-.L704
	.byte	1,5,25,9
	.half	.L705-.L703
	.byte	1,5,5,9
	.half	.L870-.L705
	.byte	3,1,1,9
	.half	.L69-.L870
	.byte	3,14,1,4,1,5,30,9
	.half	.L71-.L69
	.byte	3,56,1,5,13,9
	.half	.L871-.L71
	.byte	1,4,8,5,2,7,9
	.half	.L73-.L871
	.byte	3,111,1,4,1,5,13,9
	.half	.L72-.L73
	.byte	3,17,1,4,6,5,64,9
	.half	.L60-.L72
	.byte	3,246,0,1,5,76,9
	.half	.L872-.L60
	.byte	1,4,9,5,41,9
	.half	.L475-.L872
	.byte	3,80,1,4,3,5,5,9
	.half	.L481-.L475
	.byte	3,239,126,1,5,21,7,9
	.half	.L485-.L481
	.byte	3,116,1,5,6,9
	.half	.L706-.L485
	.byte	3,1,1,5,36,9
	.half	.L873-.L706
	.byte	1,5,13,9
	.half	.L707-.L873
	.byte	1,5,53,9
	.half	.L486-.L707
	.byte	3,13,1,5,21,9
	.half	.L76-.L486
	.byte	3,120,1,5,6,9
	.half	.L708-.L76
	.byte	3,1,1,5,47,9
	.half	.L874-.L708
	.byte	1,5,26,9
	.half	.L709-.L874
	.byte	1,5,13,9
	.half	.L875-.L709
	.byte	1,4,6,5,76,9
	.half	.L77-.L875
	.byte	3,199,1,1,4,9,5,41,9
	.half	.L494-.L77
	.byte	3,86,1,4,3,5,5,9
	.half	.L500-.L494
	.byte	3,232,126,1,5,21,7,9
	.half	.L501-.L500
	.byte	3,116,1,5,6,9
	.half	.L710-.L501
	.byte	3,1,1,5,36,9
	.half	.L876-.L710
	.byte	1,5,13,9
	.half	.L711-.L876
	.byte	1,5,53,9
	.half	.L502-.L711
	.byte	3,13,1,5,21,9
	.half	.L78-.L502
	.byte	3,120,1,5,6,9
	.half	.L712-.L78
	.byte	3,1,1,5,47,9
	.half	.L877-.L712
	.byte	1,5,26,9
	.half	.L713-.L877
	.byte	1,5,13,9
	.half	.L878-.L713
	.byte	1,4,6,5,78,9
	.half	.L79-.L878
	.byte	3,200,1,1,4,9,5,41,9
	.half	.L506-.L79
	.byte	3,99,1,5,75,9
	.half	.L879-.L506
	.byte	1,4,3,5,5,9
	.half	.L512-.L879
	.byte	3,218,126,1,5,21,7,9
	.half	.L513-.L512
	.byte	3,116,1,5,6,9
	.half	.L714-.L513
	.byte	3,1,1,5,36,9
	.half	.L880-.L714
	.byte	1,5,13,9
	.half	.L715-.L880
	.byte	1,5,53,9
	.half	.L514-.L715
	.byte	3,13,1,5,21,9
	.half	.L80-.L514
	.byte	3,120,1,5,6,9
	.half	.L716-.L80
	.byte	3,1,1,5,47,9
	.half	.L881-.L716
	.byte	1,5,26,9
	.half	.L717-.L881
	.byte	1,5,13,9
	.half	.L882-.L717
	.byte	1,4,6,5,78,9
	.half	.L81-.L882
	.byte	3,201,1,1,4,9,5,41,9
	.half	.L518-.L81
	.byte	3,105,1,5,75,9
	.half	.L883-.L518
	.byte	1,4,3,5,5,9
	.half	.L524-.L883
	.byte	3,211,126,1,5,21,7,9
	.half	.L525-.L524
	.byte	3,116,1,5,6,9
	.half	.L718-.L525
	.byte	3,1,1,5,36,9
	.half	.L884-.L718
	.byte	1,5,13,9
	.half	.L719-.L884
	.byte	1,5,53,9
	.half	.L526-.L719
	.byte	3,13,1,5,21,9
	.half	.L82-.L526
	.byte	3,120,1,5,6,9
	.half	.L720-.L82
	.byte	3,1,1,5,47,9
	.half	.L885-.L720
	.byte	1,5,26,9
	.half	.L721-.L885
	.byte	1,5,13,9
	.half	.L886-.L721
	.byte	1,4,6,5,35,9
	.half	.L83-.L886
	.byte	3,127,1,5,5,9
	.half	.L722-.L83
	.byte	1,4,1,5,49,9
	.half	.L75-.L722
	.byte	3,221,0,1,4,7,5,5,9
	.half	.L530-.L75
	.byte	3,82,1,4,1,5,1,7,9
	.half	.L58-.L530
	.byte	3,48,1,7,9
	.half	.L186-.L58
	.byte	0,1,1
.L828:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ClearEvent')
	.sect	'.debug_ranges'
.L185:
	.word	-1,.L148,0,.L186-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtAdvanceOperationCycle')
	.sect	'.debug_info'
.L187:
	.word	2062
	.half	3
	.word	.L188
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L190,.L189
	.byte	2
	.word	.L153
	.byte	3
	.byte	'Dem_EvtAdvanceOperationCycle',0,1,142,1,6,1,1,1
	.word	.L150,.L540,.L149
	.byte	4
	.byte	'operationCycleList',0,1,142,1,58
	.word	.L194,.L541
	.byte	5
	.word	.L150,.L540
	.byte	6
	.byte	'eventIt',0,1,144,1,25
	.word	.L542,.L543
	.byte	6
	.byte	'eventId',0,1,145,1,21
	.word	.L196,.L544
	.byte	6
	.byte	'statusNew',0,1,146,1,27
	.word	.L194,.L545
	.byte	6
	.byte	'statusOld',0,1,146,1,37
	.word	.L194,.L546
	.byte	6
	.byte	'dtcStByteOld',0,1,147,1,27
	.word	.L194,.L547
	.byte	6
	.byte	'CBeventId',0,1,148,1,21
	.word	.L548,.L549
	.byte	6
	.byte	'CBStatusOld',0,1,149,1,27
	.word	.L550,.L551
	.byte	6
	.byte	'CBStatusNew',0,1,150,1,27
	.word	.L550,.L552
	.byte	6
	.byte	'CBdtcStByteOld',0,1,151,1,27
	.word	.L550,.L553
	.byte	6
	.byte	'CBindex',0,1,152,1,12
	.word	.L416,.L554
	.byte	6
	.byte	'i',0,1,153,1,12
	.word	.L416,.L555
	.byte	6
	.byte	'eventsProcessed',0,1,154,1,12
	.word	.L416,.L556
	.byte	7
	.word	.L557,.L558,.L559
	.byte	8
	.word	.L560,.L561
	.byte	9
	.word	.L562,.L558,.L559
	.byte	0,7
	.word	.L563,.L564,.L94
	.byte	8
	.word	.L565,.L566
	.byte	9
	.word	.L567,.L564,.L94
	.byte	0,7
	.word	.L568,.L94,.L96
	.byte	8
	.word	.L569,.L570
	.byte	8
	.word	.L571,.L572
	.byte	10
	.word	.L573,.L94,.L96
	.byte	7
	.word	.L574,.L94,.L95
	.byte	8
	.word	.L575,.L576
	.byte	9
	.word	.L577,.L94,.L95
	.byte	0,0,0,7
	.word	.L342,.L578,.L579
	.byte	8
	.word	.L345,.L580
	.byte	8
	.word	.L347,.L581
	.byte	8
	.word	.L349,.L582
	.byte	10
	.word	.L351,.L578,.L579
	.byte	7
	.word	.L223,.L578,.L98
	.byte	8
	.word	.L224,.L583
	.byte	9
	.word	.L226,.L578,.L98
	.byte	0,0,0,7
	.word	.L584,.L585,.L103
	.byte	8
	.word	.L586,.L587
	.byte	10
	.word	.L588,.L585,.L103
	.byte	7
	.word	.L205,.L585,.L589
	.byte	8
	.word	.L207,.L590
	.byte	10
	.word	.L209,.L585,.L589
	.byte	7
	.word	.L210,.L591,.L100
	.byte	8
	.word	.L212,.L592
	.byte	8
	.word	.L214,.L593
	.byte	10
	.word	.L216,.L591,.L100
	.byte	7
	.word	.L217,.L591,.L99
	.byte	8
	.word	.L218,.L594
	.byte	8
	.word	.L220,.L595
	.byte	9
	.word	.L222,.L591,.L99
	.byte	0,0,0,0,0,0,0,7
	.word	.L223,.L103,.L104
	.byte	8
	.word	.L224,.L583
	.byte	9
	.word	.L226,.L103,.L104
	.byte	0,7
	.word	.L359,.L596,.L597
	.byte	8
	.word	.L362,.L598
	.byte	8
	.word	.L364,.L599
	.byte	10
	.word	.L366,.L596,.L597
	.byte	6
	.byte	'oldReason',0,2,243,3,31
	.word	.L194,.L600
	.byte	7
	.word	.L368,.L601,.L106
	.byte	8
	.word	.L370,.L602
	.byte	8
	.word	.L372,.L603
	.byte	8
	.word	.L374,.L604
	.byte	10
	.word	.L376,.L601,.L106
	.byte	6
	.byte	'bit2shift',0,3,71,11
	.word	.L194,.L605
	.byte	0,0,7
	.word	.L378,.L606,.L108
	.byte	8
	.word	.L380,.L607
	.byte	8
	.word	.L382,.L608
	.byte	8
	.word	.L384,.L609
	.byte	8
	.word	.L386,.L610
	.byte	10
	.word	.L388,.L606,.L108
	.byte	6
	.byte	'bit2shift',0,3,85,11
	.word	.L194,.L611
	.byte	7
	.word	.L390,.L612,.L613
	.byte	8
	.word	.L393,.L614
	.byte	8
	.word	.L395,.L615
	.byte	8
	.word	.L397,.L616
	.byte	10
	.word	.L399,.L612,.L613
	.byte	6
	.byte	'bit2shift',0,3,79,11
	.word	.L194,.L617
	.byte	0,0,0,0,7
	.word	.L401,.L108,.L618
	.byte	9
	.word	.L403,.L108,.L618
	.byte	0,7
	.word	.L404,.L619,.L597
	.byte	8
	.word	.L406,.L620
	.byte	10
	.word	.L408,.L619,.L597
	.byte	7
	.word	.L409,.L621,.L597
	.byte	8
	.word	.L411,.L622
	.byte	8
	.word	.L413,.L623
	.byte	10
	.word	.L415,.L621,.L597
	.byte	6
	.byte	'bit2shift',0,4,38,12
	.word	.L416,.L624
	.byte	0,0,0,0,0,0,7
	.word	.L426,.L109,.L114
	.byte	8
	.word	.L427,.L625
	.byte	8
	.word	.L429,.L626
	.byte	10
	.word	.L431,.L109,.L114
	.byte	7
	.word	.L432,.L627,.L114
	.byte	8
	.word	.L434,.L628
	.byte	8
	.word	.L436,.L629
	.byte	8
	.word	.L438,.L630
	.byte	10
	.word	.L440,.L627,.L114
	.byte	7
	.word	.L441,.L631,.L111
	.byte	8
	.word	.L443,.L632
	.byte	8
	.word	.L445,.L633
	.byte	10
	.word	.L447,.L631,.L111
	.byte	6
	.byte	'element_pos',0,5,36,18
	.word	.L634,.L635
	.byte	6
	.byte	'local_bitpos',0,5,37,18
	.word	.L636,.L637
	.byte	6
	.byte	'mask',0,5,38,18
	.word	.L638,.L639
	.byte	0,0,7
	.word	.L454,.L110,.L112
	.byte	8
	.word	.L455,.L640
	.byte	8
	.word	.L457,.L641
	.byte	10
	.word	.L459,.L110,.L112
	.byte	6
	.byte	'element_pos',0,5,49,18
	.word	.L642,.L643
	.byte	6
	.byte	'local_bitpos',0,5,50,18
	.word	.L644,.L645
	.byte	6
	.byte	'mask',0,5,51,18
	.word	.L646,.L647
	.byte	0,0,0,0,0,0,7
	.word	.L418,.L648,.L649
	.byte	8
	.word	.L421,.L650
	.byte	8
	.word	.L423,.L651
	.byte	9
	.word	.L425,.L648,.L649
	.byte	0,7
	.word	.L652,.L115,.L117
	.byte	8
	.word	.L653,.L654
	.byte	8
	.word	.L655,.L656
	.byte	10
	.word	.L657,.L115,.L117
	.byte	7
	.word	.L658,.L115,.L116
	.byte	8
	.word	.L659,.L660
	.byte	9
	.word	.L661,.L115,.L116
	.byte	0,0,0,7
	.word	.L529,.L662,.L122
	.byte	8
	.word	.L531,.L663
	.byte	8
	.word	.L533,.L664
	.byte	8
	.word	.L535,.L665
	.byte	8
	.word	.L537,.L666
	.byte	9
	.word	.L539,.L662,.L122
	.byte	0,7
	.word	.L667,.L668,.L91
	.byte	8
	.word	.L669,.L670
	.byte	9
	.word	.L671,.L668,.L91
	.byte	0,7
	.word	.L672,.L673,.L124
	.byte	8
	.word	.L674,.L675
	.byte	9
	.word	.L676,.L673,.L124
	.byte	0,7
	.word	.L529,.L677,.L127
	.byte	8
	.word	.L531,.L663
	.byte	8
	.word	.L533,.L664
	.byte	8
	.word	.L535,.L665
	.byte	8
	.word	.L537,.L666
	.byte	9
	.word	.L539,.L677,.L127
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtAdvanceOperationCycle')
	.sect	'.debug_abbrev'
.L188:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtAdvanceOperationCycle')
	.sect	'.debug_line'
.L189:
	.word	.L888-.L887
.L887:
	.half	3
	.word	.L890-.L889
.L889:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0,0
.L890:
	.byte	5,6,7,0,5,2
	.word	.L150
	.byte	3,141,1,1,5,78,9
	.half	.L723-.L150
	.byte	3,6,1,5,76,9
	.half	.L891-.L723
	.byte	1,5,86,9
	.half	.L892-.L891
	.byte	3,1,1,5,84,9
	.half	.L893-.L892
	.byte	1,5,86,9
	.half	.L894-.L893
	.byte	3,1,1,5,84,9
	.half	.L895-.L894
	.byte	1,5,89,9
	.half	.L896-.L895
	.byte	3,1,1,5,87,9
	.half	.L897-.L896
	.byte	1,5,19,9
	.half	.L898-.L897
	.byte	3,1,1,5,28,9
	.half	.L724-.L898
	.byte	3,2,1,5,34,9
	.half	.L725-.L724
	.byte	3,3,1,4,6,5,12,9
	.half	.L558-.L725
	.byte	3,132,127,1,5,10,9
	.half	.L899-.L558
	.byte	1,4,1,5,80,9
	.half	.L559-.L899
	.byte	3,252,0,1,5,24,9
	.half	.L92-.L559
	.byte	3,2,1,5,47,9
	.half	.L900-.L92
	.byte	3,1,1,4,6,5,29,9
	.half	.L564-.L900
	.byte	3,144,127,1,5,11,9
	.half	.L901-.L564
	.byte	1,5,4,9
	.half	.L726-.L901
	.byte	1,4,7,5,2,9
	.half	.L94-.L726
	.byte	3,205,0,1,4,2,5,58,9
	.half	.L95-.L94
	.byte	3,207,3,1,5,60,9
	.half	.L902-.L95
	.byte	1,5,31,9
	.half	.L903-.L902
	.byte	1,5,106,9
	.half	.L904-.L903
	.byte	1,5,3,9
	.half	.L905-.L904
	.byte	1,4,1,5,9,9
	.half	.L96-.L905
	.byte	3,213,124,1,5,43,7,9
	.half	.L906-.L96
	.byte	3,3,1,5,53,9
	.half	.L907-.L906
	.byte	1,5,65,9
	.half	.L908-.L907
	.byte	1,4,8,5,12,9
	.half	.L578-.L908
	.byte	3,136,127,1,5,35,9
	.half	.L909-.L578
	.byte	1,5,5,9
	.half	.L910-.L909
	.byte	1,4,9,5,16,9
	.half	.L98-.L910
	.byte	3,24,1,5,21,9
	.half	.L911-.L98
	.byte	3,1,1,5,19,9
	.half	.L912-.L911
	.byte	1,4,1,5,47,9
	.half	.L579-.L912
	.byte	3,224,0,1,4,2,5,33,9
	.half	.L585-.L579
	.byte	3,209,3,1,5,51,9
	.half	.L913-.L585
	.byte	1,5,60,9
	.half	.L914-.L913
	.byte	1,5,68,9
	.half	.L915-.L914
	.byte	1,4,3,5,28,9
	.half	.L591-.L915
	.byte	3,200,123,1,5,47,9
	.half	.L916-.L591
	.byte	1,5,5,9
	.half	.L917-.L916
	.byte	1,5,73,9
	.half	.L99-.L917
	.byte	3,4,1,5,5,9
	.half	.L918-.L99
	.byte	1,4,2,5,3,9
	.half	.L100-.L918
	.byte	3,180,4,1,4,8,5,9,9
	.half	.L101-.L100
	.byte	3,140,125,1,5,32,7,9
	.half	.L589-.L101
	.byte	3,8,1,5,42,9
	.half	.L919-.L589
	.byte	1,5,32,9
	.half	.L920-.L919
	.byte	3,1,1,5,42,9
	.half	.L921-.L920
	.byte	1,5,35,9
	.half	.L103-.L921
	.byte	3,161,126,1,5,5,9
	.half	.L922-.L103
	.byte	1,4,1,5,47,9
	.half	.L104-.L922
	.byte	3,132,1,1,4,2,5,110,9
	.half	.L596-.L104
	.byte	3,195,2,1,5,119,9
	.half	.L923-.L596
	.byte	1,4,3,5,21,9
	.half	.L601-.L923
	.byte	3,212,124,1,5,19,9
	.half	.L727-.L601
	.byte	3,1,1,5,41,9
	.half	.L924-.L727
	.byte	3,1,1,5,19,9
	.half	.L728-.L924
	.byte	1,5,5,9
	.half	.L925-.L728
	.byte	3,1,1,4,2,5,9,9
	.half	.L106-.L925
	.byte	3,172,3,1,5,41,7,9
	.half	.L926-.L106
	.byte	1,5,73,7,9
	.half	.L107-.L926
	.byte	3,2,1,5,106,9
	.half	.L927-.L107
	.byte	1,4,3,5,21,9
	.half	.L606-.L927
	.byte	3,221,124,1,9
	.half	.L612-.L606
	.byte	3,122,1,5,6,9
	.half	.L730-.L612
	.byte	3,1,1,5,57,9
	.half	.L928-.L730
	.byte	1,5,77,9
	.half	.L731-.L928
	.byte	1,5,83,9
	.half	.L929-.L731
	.byte	1,5,25,9
	.half	.L930-.L929
	.byte	1,5,12,9
	.half	.L931-.L930
	.byte	1,5,6,9
	.half	.L613-.L931
	.byte	3,7,1,5,57,9
	.half	.L932-.L613
	.byte	1,5,35,9
	.half	.L729-.L932
	.byte	1,5,78,9
	.half	.L933-.L729
	.byte	1,5,12,9
	.half	.L934-.L933
	.byte	1,4,2,5,5,9
	.half	.L108-.L934
	.byte	3,142,3,1,5,36,9
	.half	.L935-.L108
	.byte	1,5,34,9
	.half	.L618-.L935
	.byte	3,22,1,5,107,9
	.half	.L619-.L618
	.byte	3,110,1,4,4,5,22,9
	.half	.L621-.L619
	.byte	3,189,124,1,5,6,9
	.half	.L732-.L621
	.byte	3,1,1,5,37,9
	.half	.L936-.L732
	.byte	1,5,13,9
	.half	.L733-.L936
	.byte	1,4,1,5,55,9
	.half	.L597-.L733
	.byte	3,138,1,1,4,2,5,30,9
	.half	.L109-.L597
	.byte	3,247,1,1,5,68,9
	.half	.L937-.L109
	.byte	1,4,5,5,5,9
	.half	.L627-.L937
	.byte	3,152,125,1,5,42,7,9
	.half	.L631-.L627
	.byte	3,100,1,5,43,9
	.half	.L734-.L631
	.byte	3,1,1,5,14,9
	.half	.L938-.L734
	.byte	3,2,1,5,26,9
	.half	.L939-.L938
	.byte	1,5,11,9
	.half	.L736-.L939
	.byte	3,2,1,5,25,9
	.half	.L735-.L736
	.byte	1,5,5,9
	.half	.L940-.L735
	.byte	3,1,1,5,49,9
	.half	.L111-.L940
	.byte	3,23,1,5,42,9
	.half	.L110-.L111
	.byte	3,112,1,5,43,9
	.half	.L737-.L110
	.byte	3,1,1,5,14,9
	.half	.L941-.L737
	.byte	3,2,1,5,26,9
	.half	.L942-.L941
	.byte	1,5,11,9
	.half	.L740-.L942
	.byte	3,2,1,5,37,9
	.half	.L739-.L740
	.byte	1,5,25,9
	.half	.L741-.L739
	.byte	1,5,5,9
	.half	.L943-.L741
	.byte	3,1,1,9
	.half	.L112-.L943
	.byte	3,14,1,4,1,5,49,9
	.half	.L114-.L112
	.byte	3,237,0,1,4,2,5,4,9
	.half	.L648-.L114
	.byte	3,49,1,5,23,9
	.half	.L944-.L648
	.byte	1,5,51,9
	.half	.L945-.L944
	.byte	1,4,1,5,22,9
	.half	.L649-.L945
	.byte	3,81,1,5,31,9
	.half	.L946-.L649
	.byte	1,5,24,9
	.half	.L947-.L946
	.byte	3,1,1,5,34,9
	.half	.L948-.L947
	.byte	1,5,33,9
	.half	.L949-.L948
	.byte	1,5,24,9
	.half	.L950-.L949
	.byte	3,1,1,5,33,9
	.half	.L951-.L950
	.byte	1,5,27,9
	.half	.L952-.L951
	.byte	3,1,1,5,37,9
	.half	.L953-.L952
	.byte	1,5,36,9
	.half	.L954-.L953
	.byte	1,5,20,9
	.half	.L955-.L954
	.byte	3,1,1,4,7,5,2,9
	.half	.L115-.L955
	.byte	3,83,1,4,2,5,57,9
	.half	.L116-.L115
	.byte	3,203,3,1,5,59,9
	.half	.L956-.L116
	.byte	1,5,30,9
	.half	.L957-.L956
	.byte	1,5,103,9
	.half	.L958-.L957
	.byte	1,5,4,9
	.half	.L959-.L958
	.byte	1,4,1,5,9,9
	.half	.L117-.L959
	.byte	3,230,124,1,5,32,7,9
	.half	.L118-.L117
	.byte	3,5,1,5,9,9
	.half	.L960-.L118
	.byte	1,5,28,7,9
	.half	.L961-.L960
	.byte	3,2,1,5,18,9
	.half	.L962-.L961
	.byte	3,2,1,5,31,9
	.half	.L742-.L962
	.byte	1,5,73,9
	.half	.L121-.L742
	.byte	3,2,1,5,88,9
	.half	.L963-.L121
	.byte	1,4,9,5,5,9
	.half	.L662-.L963
	.byte	3,148,127,1,4,1,5,34,7,9
	.half	.L122-.L662
	.byte	3,234,0,1,5,31,9
	.half	.L120-.L122
	.byte	1,5,20,7,9
	.half	.L964-.L120
	.byte	3,4,1,5,107,9
	.half	.L119-.L964
	.byte	3,84,1,4,6,5,6,9
	.half	.L668-.L119
	.byte	3,142,127,1,5,9,9
	.half	.L965-.L668
	.byte	1,4,1,5,72,9
	.half	.L91-.L965
	.byte	3,242,0,1,4,6,5,12,9
	.half	.L673-.L91
	.byte	3,137,127,1,5,19,9
	.half	.L966-.L673
	.byte	1,5,16,9
	.half	.L967-.L966
	.byte	1,5,4,9
	.half	.L968-.L967
	.byte	1,4,1,5,80,9
	.half	.L124-.L968
	.byte	3,247,0,1,5,10,7,9
	.half	.L969-.L124
	.byte	3,49,1,5,23,9
	.half	.L743-.L969
	.byte	1,5,65,9
	.half	.L126-.L743
	.byte	3,2,1,5,80,9
	.half	.L970-.L126
	.byte	1,4,9,5,5,9
	.half	.L677-.L970
	.byte	3,139,127,1,4,1,5,26,7,9
	.half	.L127-.L677
	.byte	3,243,0,1,5,23,9
	.half	.L125-.L127
	.byte	1,5,1,7,9
	.half	.L971-.L125
	.byte	3,4,1,7,9
	.half	.L191-.L971
	.byte	0,1,1
.L888:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtAdvanceOperationCycle')
	.sect	'.debug_ranges'
.L190:
	.word	-1,.L150,0,.L191-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_AllEventsStatusByte')
	.sect	'.debug_info'
.L192:
	.word	184
	.half	3
	.word	.L193
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L153
	.byte	3
	.byte	'Dem_AllEventsStatusByte',0,29,21,1
	.word	.L678
	.byte	1,5,3
	.word	Dem_AllEventsStatusByte
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_AllEventsStatusByte')
	.sect	'.debug_abbrev'
.L193:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ClearEvent')
	.sect	'.debug_loc'
.L330:
	.word	-1,.L148,0,.L687-.L148
	.half	1
	.byte	85
	.word	.L60-.L148,.L75-.L148
	.half	1
	.byte	85
	.word	0,0
.L147:
	.word	-1,.L148,0,.L686-.L148
	.half	2
	.byte	138,0
	.word	.L686-.L148,.L328-.L148
	.half	2
	.byte	138,8
	.word	.L328-.L148,.L328-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L352:
	.word	0,0
.L346:
	.word	0,0
.L532:
	.word	0,0
.L357:
	.word	0,0
.L422:
	.word	0,0
.L472:
	.word	0,0
.L428:
	.word	0,0
.L363:
	.word	0,0
.L336:
	.word	0,0
.L424:
	.word	0,0
.L515:
	.word	-1,.L148,.L714-.L148,.L715-.L148
	.half	1
	.byte	95
	.word	0,0
.L527:
	.word	-1,.L148,.L718-.L148,.L719-.L148
	.half	1
	.byte	95
	.word	0,0
.L489:
	.word	-1,.L148,.L706-.L148,.L707-.L148
	.half	1
	.byte	95
	.word	0,0
.L503:
	.word	-1,.L148,.L710-.L148,.L711-.L148
	.half	1
	.byte	95
	.word	0,0
.L417:
	.word	-1,.L148,.L696-.L148,.L697-.L148
	.half	1
	.byte	95
	.word	0,0
.L516:
	.word	-1,.L148,.L716-.L148,.L717-.L148
	.half	1
	.byte	95
	.word	0,0
.L492:
	.word	-1,.L148,.L708-.L148,.L709-.L148
	.half	1
	.byte	95
	.word	0,0
.L528:
	.word	-1,.L148,.L720-.L148,.L721-.L148
	.half	1
	.byte	95
	.word	0,0
.L504:
	.word	-1,.L148,.L712-.L148,.L713-.L148
	.half	1
	.byte	95
	.word	0,0
.L377:
	.word	-1,.L148,.L691-.L148,.L692-.L148
	.half	1
	.byte	81
	.word	0,0
.L400:
	.word	-1,.L148,.L694-.L148,.L695-.L148
	.half	1
	.byte	82
	.word	0,0
.L389:
	.word	-1,.L148,.L391-.L148,.L693-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L446:
	.word	0,0
.L488:
	.word	0,0
.L414:
	.word	0,0
.L491:
	.word	0,0
.L458:
	.word	0,0
.L483:
	.word	0,0
.L341:
	.word	0,0
.L437:
	.word	0,0
.L339:
	.word	0,0
.L373:
	.word	0,0
.L396:
	.word	0,0
.L383:
	.word	0,0
.L444:
	.word	0,0
.L487:
	.word	0,0
.L412:
	.word	0,0
.L490:
	.word	0,0
.L456:
	.word	0,0
.L482:
	.word	0,0
.L435:
	.word	0,0
.L350:
	.word	0,0
.L538:
	.word	0,0
.L333:
	.word	-1,.L148,0,.L328-.L148
	.half	2
	.byte	145,121
	.word	0,0
.L449:
	.word	-1,.L148,.L698-.L148,.L67-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L461:
	.word	-1,.L148,.L701-.L148,.L702-.L148
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L329:
	.word	-1,.L148,0,.L688-.L148
	.half	1
	.byte	84
	.word	.L689-.L148,.L328-.L148
	.half	1
	.byte	88
	.word	.L60-.L148,.L75-.L148
	.half	1
	.byte	84
	.word	0,0
.L468:
	.word	0,0
.L536:
	.word	0,0
.L348:
	.word	0,0
.L534:
	.word	0,0
.L451:
	.word	-1,.L148,.L698-.L148,.L699-.L148
	.half	1
	.byte	95
	.word	0,0
.L463:
	.word	-1,.L148,.L701-.L148,.L703-.L148
	.half	1
	.byte	95
	.word	0,0
.L453:
	.word	-1,.L148,.L700-.L148,.L67-.L148
	.half	1
	.byte	81
	.word	0,0
.L465:
	.word	-1,.L148,.L704-.L148,.L705-.L148
	.half	1
	.byte	81
	.word	0,0
.L365:
	.word	0,0
.L387:
	.word	0,0
.L375:
	.word	0,0
.L398:
	.word	0,0
.L385:
	.word	0,0
.L367:
	.word	0,0
.L407:
	.word	0,0
.L477:
	.word	0,0
.L496:
	.word	0,0
.L508:
	.word	0,0
.L520:
	.word	0,0
.L430:
	.word	0,0
.L479:
	.word	0,0
.L498:
	.word	0,0
.L510:
	.word	0,0
.L522:
	.word	0,0
.L332:
	.word	-1,.L148,.L690-.L148,.L60-.L148
	.half	1
	.byte	89
	.word	.L722-.L148,.L58-.L148
	.half	1
	.byte	89
	.word	0,0
.L331:
	.word	-1,.L148,0,.L328-.L148
	.half	2
	.byte	145,120
	.word	0,0
.L340:
	.word	0,0
.L338:
	.word	0,0
.L371:
	.word	0,0
.L394:
	.word	0,0
.L381:
	.word	0,0
.L484:
	.word	0,0
.L439:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EventStatusInitCheckNvM')
	.sect	'.debug_loc'
.L140:
	.word	-1,.L141,0,.L293-.L141
	.half	2
	.byte	138,0
	.word	.L293-.L141,.L290-.L141
	.half	2
	.byte	138,8
	.word	.L290-.L141,.L290-.L141
	.half	2
	.byte	138,0
	.word	0,0
.L291:
	.word	0,0
.L319:
	.word	0,0
.L314:
	.word	0,0
.L326:
	.word	0,0
.L309:
	.word	0,0
.L303:
	.word	0,0
.L316:
	.word	-1,.L141,0,.L290-.L141
	.half	2
	.byte	145,120
	.word	0,0
.L299:
	.word	0,0
.L301:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtAdvanceOperationCycle')
	.sect	'.debug_loc'
.L552:
	.word	-1,.L150,0,.L540-.L150
	.half	2
	.byte	145,94
	.word	0,0
.L551:
	.word	-1,.L150,0,.L540-.L150
	.half	2
	.byte	145,78
	.word	0,0
.L553:
	.word	-1,.L150,0,.L540-.L150
	.half	2
	.byte	145,110
	.word	0,0
.L549:
	.word	-1,.L150,0,.L540-.L150
	.half	3
	.byte	145,174,127
	.word	0,0
.L554:
	.word	-1,.L150,.L724-.L150,.L540-.L150
	.half	1
	.byte	82
	.word	0,0
.L149:
	.word	-1,.L150,0,.L723-.L150
	.half	2
	.byte	138,0
	.word	.L723-.L150,.L540-.L150
	.half	3
	.byte	138,216,0
	.word	.L540-.L150,.L540-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L583:
	.word	0,0
.L580:
	.word	0,0
.L663:
	.word	0,0
.L650:
	.word	0,0
.L587:
	.word	0,0
.L625:
	.word	0,0
.L598:
	.word	0,0
.L570:
	.word	0,0
.L654:
	.word	0,0
.L590:
	.word	0,0
.L651:
	.word	0,0
.L624:
	.word	-1,.L150,.L732-.L150,.L733-.L150
	.half	1
	.byte	95
	.word	0,0
.L605:
	.word	-1,.L150,.L727-.L150,.L728-.L150
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L617:
	.word	-1,.L150,.L730-.L150,.L731-.L150
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L611:
	.word	-1,.L150,.L612-.L150,.L729-.L150
	.half	1
	.byte	89
	.word	0,0
.L633:
	.word	0,0
.L623:
	.word	0,0
.L641:
	.word	0,0
.L595:
	.word	0,0
.L629:
	.word	0,0
.L593:
	.word	0,0
.L603:
	.word	0,0
.L615:
	.word	0,0
.L608:
	.word	0,0
.L632:
	.word	0,0
.L622:
	.word	0,0
.L640:
	.word	0,0
.L628:
	.word	0,0
.L582:
	.word	0,0
.L666:
	.word	0,0
.L547:
	.word	-1,.L150,0,.L540-.L150
	.half	3
	.byte	145,173,127
	.word	0,0
.L635:
	.word	-1,.L150,.L734-.L150,.L110-.L150
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L643:
	.word	-1,.L150,.L737-.L150,.L738-.L150
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L544:
	.word	-1,.L150,.L726-.L150,.L91-.L150
	.half	1
	.byte	85
	.word	0,0
.L543:
	.word	-1,.L150,0,.L540-.L150
	.half	3
	.byte	145,168,127
	.word	0,0
.L556:
	.word	-1,.L150,.L725-.L150,.L540-.L150
	.half	1
	.byte	83
	.word	0,0
.L656:
	.word	0,0
.L555:
	.word	-1,.L150,.L742-.L150,.L119-.L150
	.half	1
	.byte	95
	.word	.L743-.L150,.L540-.L150
	.half	1
	.byte	95
	.word	0,0
.L576:
	.word	0,0
.L660:
	.word	0,0
.L665:
	.word	0,0
.L581:
	.word	0,0
.L664:
	.word	0,0
.L561:
	.word	0,0
.L675:
	.word	0,0
.L670:
	.word	0,0
.L566:
	.word	0,0
.L637:
	.word	-1,.L150,.L734-.L150,.L735-.L150
	.half	1
	.byte	95
	.word	0,0
.L645:
	.word	-1,.L150,.L737-.L150,.L739-.L150
	.half	1
	.byte	95
	.word	0,0
.L639:
	.word	-1,.L150,.L736-.L150,.L110-.L150
	.half	1
	.byte	81
	.word	0,0
.L647:
	.word	-1,.L150,.L740-.L150,.L741-.L150
	.half	1
	.byte	81
	.word	0,0
.L599:
	.word	0,0
.L610:
	.word	0,0
.L604:
	.word	0,0
.L616:
	.word	0,0
.L609:
	.word	0,0
.L600:
	.word	0,0
.L541:
	.word	-1,.L150,0,.L540-.L150
	.half	1
	.byte	84
	.word	0,0
.L572:
	.word	0,0
.L620:
	.word	0,0
.L626:
	.word	0,0
.L545:
	.word	0,0
.L546:
	.word	-1,.L150,0,.L540-.L150
	.half	3
	.byte	145,172,127
	.word	0,0
.L594:
	.word	0,0
.L592:
	.word	0,0
.L602:
	.word	0,0
.L614:
	.word	0,0
.L607:
	.word	0,0
.L630:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtGetLastReportedEventStatus')
	.sect	'.debug_loc'
.L145:
	.word	-1,.L146,0,.L227-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L228:
	.word	-1,.L146,0,.L227-.L146
	.half	1
	.byte	84
	.word	0,0
.L231:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventStatus')
	.sect	'.debug_loc'
.L142:
	.word	-1,.L25,0,.L195-.L25
	.half	2
	.byte	138,0
	.word	0,0
.L225:
	.word	0,0
.L197:
	.word	-1,.L25,.L27-.L25,.L679-.L25
	.half	1
	.byte	84
	.word	.L33-.L25,.L681-.L25
	.half	1
	.byte	84
	.word	.L40-.L25,.L683-.L25
	.half	1
	.byte	84
	.word	.L48-.L25,.L30-.L25
	.half	1
	.byte	84
	.word	0,0
.L208:
	.word	0,0
.L199:
	.word	-1,.L25,.L27-.L25,.L680-.L25
	.half	1
	.byte	100
	.word	.L33-.L25,.L682-.L25
	.half	1
	.byte	100
	.word	.L40-.L25,.L684-.L25
	.half	1
	.byte	100
	.word	.L48-.L25,.L30-.L25
	.half	1
	.byte	100
	.word	0,0
.L221:
	.word	0,0
.L215:
	.word	0,0
.L203:
	.word	0,0
.L219:
	.word	0,0
.L213:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventStatus_GeneralEvtInfo')
	.sect	'.debug_loc'
.L143:
	.word	-1,.L144,0,.L287-.L144
	.half	2
	.byte	138,0
	.word	0,0
.L288:
	.word	-1,.L144,0,.L685-.L144
	.half	1
	.byte	84
	.word	0,0
.L289:
	.word	-1,.L144,0,.L685-.L144
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_OverwriteWIRStatus')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L233-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L234:
	.word	-1,.L152,0,.L233-.L152
	.half	1
	.byte	84
	.word	0,0
.L243:
	.word	0,0
.L279:
	.word	0,0
.L235:
	.word	-1,.L152,0,.L233-.L152
	.half	1
	.byte	85
	.word	0,0
.L269:
	.word	-1,.L152,.L744-.L152,.L745-.L152
	.half	1
	.byte	95
	.word	0,0
.L285:
	.word	-1,.L152,.L748-.L152,.L749-.L152
	.half	1
	.byte	95
	.word	0,0
.L286:
	.word	-1,.L152,.L750-.L152,.L751-.L152
	.half	1
	.byte	95
	.word	0,0
.L276:
	.word	-1,.L152,.L746-.L152,.L747-.L152
	.half	1
	.byte	95
	.word	0,0
.L267:
	.word	0,0
.L274:
	.word	0,0
.L257:
	.word	0,0
.L265:
	.word	0,0
.L272:
	.word	0,0
.L255:
	.word	0,0
.L239:
	.word	0,0
.L236:
	.word	-1,.L152,.L237-.L152,.L233-.L152
	.half	1
	.byte	82
	.word	0,0
.L248:
	.word	0,0
.L250:
	.word	0,0
.L259:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L972:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_EventStatusInitCheckNvM')
	.sect	'.debug_frame'
	.word	36
	.word	.L972,.L141,.L290-.L141
	.byte	4
	.word	(.L293-.L141)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L290-.L293)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventStatus')
	.sect	'.debug_frame'
	.word	12
	.word	.L972,.L25,.L195-.L25
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventStatus_GeneralEvtInfo')
	.sect	'.debug_frame'
	.word	12
	.word	.L972,.L144,.L287-.L144
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtGetLastReportedEventStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L972,.L146,.L227-.L146
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_ClearEvent')
	.sect	'.debug_frame'
	.word	36
	.word	.L972,.L148,.L328-.L148
	.byte	4
	.word	(.L686-.L148)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L328-.L686)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtAdvanceOperationCycle')
	.sect	'.debug_frame'
	.word	44
	.word	.L972,.L150,.L540-.L150
	.byte	8,19,8,22,8,23,4
	.word	(.L723-.L150)/2
	.byte	19,216,0,22,26,4,19,138,216,0,4
	.word	(.L540-.L723)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_OverwriteWIRStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L972,.L152,.L233-.L152
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   237  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   238  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   239  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.c	   240  #include "Dem_Cfg_MemMap.h"

	; Module end
