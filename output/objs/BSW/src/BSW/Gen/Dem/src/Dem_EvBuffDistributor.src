	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc2912a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_EvBuffDistributor.src BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffDistributor.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffDistributor.c'

	
$TC16X
	
	.sdecl	'.text.Dem_EvBuffDistributor.Dem_EvBuffDistributorMainFunction',code,cluster('Dem_EvBuffDistributorMainFunction')
	.sect	'.text.Dem_EvBuffDistributor.Dem_EvBuffDistributorMainFunction'
	.align	2
	
	.global	Dem_EvBuffDistributorMainFunction

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     1  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     2  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     3  #include "Dem_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     4  #include "Dem_EvBuffDistributor.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     5  #include "Dem_Bfm.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     6  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     7  #include "Dem_EnvMain.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     8  #include "Dem_Clear.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	     9  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    10  #if (DEM_CFG_SUPPORT_PROJECTSPECIFIC_FAILUREMEMORY == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    11  #include "Dem_PrjSpecificFailureMemory.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    12  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    13  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    14  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    15  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    16  static boolean Dem_isDistributionRunning = FALSE;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    17  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    18  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    19  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    20  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    21  DEM_INLINE void Dem_EvBuffDistributorCallReceivers (const Dem_EvBuffEvent* fe)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    22  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    23  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    24  #if (DEM_CFG_EVBUFF_STORES_ENVDATA == DEM_CFG_EVBUFF_STORES_ENVDATA_OFF)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    25      uint8 envData[DEM_CFG_ENVMINSIZE_OF_RAWENVDATA];
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    26  #else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    27      const uint8 *envData;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    28      envData = (fe->envData.Buffer);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    29  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    30  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    31      if (   (fe->eventType == C_EVENTTYPE_SET)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    32              || (fe->eventType == C_EVENTTYPE_SET_RESET)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    33  #if (DEM_CFG_STOREWAITINGFORMONITORINGEVENT == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    34              || (fe->eventType == C_EVENTTYPE_SET_WAITINGFORMONITORING)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    35  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    36      )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    37      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    38  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    39  #if (DEM_CFG_EVBUFF_STORES_ENVDATA == DEM_CFG_EVBUFF_STORES_ENVDATA_OFF)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    40          Dem_EvBuffEnvCaptureData(fe->eventId, envData  DEM_DEBUGDATA_PARAM(fe->debug0, fe->debug1));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    41  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    42          Dem_EvMemSetEventFailedAllMem(fe->eventId, envData);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    43      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    44  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    45      if (   (fe->eventType == C_EVENTTYPE_RESET)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    46              || (fe->eventType == C_EVENTTYPE_SET_RESET)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    47      )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    48      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    49  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    50  #if (DEM_CFG_EVBUFF_STORES_ENVDATA == DEM_CFG_EVBUFF_STORES_ENVDATA_OFF) && (DEM_CFG_EVMEM_EXTENDED_DATA_ON_PASSED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    51          if (fe->eventType != C_EVENTTYPE_SET_RESET)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    52          {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    53              Dem_EnvCaptureED(fe->eventId, envData, DEM_CFG_ENVMINSIZE_OF_RAWENVDATA DEM_DEBUGDATA_PARAM(fe->debug0,fe->debug1));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    54          }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    55  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    56          Dem_EvMemSetEventPassedAllMem(fe->eventId, envData);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    57      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    58  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    59      if (fe->eventType == C_EVENTTYPE_UNROBUST)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    60      {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    61  #if (DEM_CFG_EVBUFF_STORES_ENVDATA == DEM_CFG_EVBUFF_STORES_ENVDATA_OFF)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    62          Dem_EvBuffEnvCaptureData(fe->eventId, envData  DEM_DEBUGDATA_PARAM(fe->debug0, fe->debug1));
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    63  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    64          Dem_EvMemSetEventUnRobustAllMem(fe->eventId, envData);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    65      }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    66  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    67      /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    68  #if( DEM_BFM_ENABLED == DEM_BFM_ON )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    69      rba_DemBfm_EnvReport(fe);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    70  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    71      /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    72  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    73  #if(DEM_CFG_SUPPORT_PROJECTSPECIFIC_FAILUREMEMORY == TRUE)
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    74      Dem_ProjectSpecificFailureMemoryReport(fe);
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    75  #endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    76  }
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    77  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    78  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    79  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    80  static Dem_EvBuffEvent tmpEvBuffLocation;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    81  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    82  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    83  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    84  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    85  /**
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    86   * Get all failure events from SFB and distribute them
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    87   */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    88  void Dem_EvBuffDistributorMainFunction(void)
; Function Dem_EvBuffDistributorMainFunction
.L31:
Dem_EvBuffDistributorMainFunction:	.type	func
	sub.a	a10,#8
.L142:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    89  {
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    90  	Dem_boolean_least performDistribution = FALSE;
	mov	d8,#0
.L143:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    91  	uint32 idx;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    92  	const Dem_EvBuffEvent* fEvent;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    93  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    94  	/* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    95  	#if( DEM_BFM_ENABLED == DEM_BFM_ON )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    96  	if( rba_DemBfm_DeleteAllIsInProgress() )
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    97  	{
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    98  		return;
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    99  	}
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   100  	#endif
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   101  	/* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   102  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   103  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   104  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   105  	if (!Dem_isDistributionRunning)
	movh.a	a12,#@his(Dem_isDistributionRunning)
	lea	a12,[a12]@los(Dem_isDistributionRunning)
	ld.bu	d15,[a12]
	jne	d15,#0,.L2
.L162:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   106  	{
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   107  		performDistribution = TRUE;
	mov	d8,#1
.L163:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   108  		Dem_isDistributionRunning = TRUE;
	mov	d0,#1
.L164:
	st.b	[a12],d0
.L2:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   109  	}
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   110  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   111  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   112  	while (performDistribution)
	j	.L3
.L4:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   113  	{
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   114  		DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   115  		/* getting next event from evBuff and isDistributionRunning must be
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   116  		 * atomic action, to ensure correct processing in case of concurrent
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   117  		 * call to DistributorProcess (on flush).
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   118  		 */
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   119  		fEvent = Dem_EvBuffGetEvent(&idx);
	lea	a4,[a10]0
	call	Dem_EvBuffGetEvent
.L144:
	mov.aa	a15,a2
.L146:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   120  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   121  		if (fEvent == NULL_PTR)
	jnz.a	a15,.L5
.L165:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   122  		{
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   123  			performDistribution = FALSE;
	mov	d8,#0
.L166:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   124  			Dem_isDistributionRunning = FALSE;
	mov	d0,#0
.L167:
	st.b	[a12],d0
.L168:
	j	.L6
.L5:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   125  		}
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   126  		else
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   127  		{
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   128  			DEM_MEMCPY(&tmpEvBuffLocation, fEvent, DEM_SIZEOF_VAR(tmpEvBuffLocation));
	movh.a	a4,#@his(tmpEvBuffLocation)
	lea	a4,[a4]@los(tmpEvBuffLocation)
	mov	d4,#16
.L53:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     3  #ifndef RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     4  #define RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     7  #include "rba_BswSrv.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     9  #define RBA_DIAGLIB_MEMCPY(xDest_p, xSrc_pc, numBytes_u32)                  rba_DiagLib_MemUtils_MemCpy((uint8*)(xDest_p),(const uint8*)(xSrc_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    10  #define RBA_DIAGLIB_MEMSET(xDest_p, xPattern_u32, numBytes_u32)             rba_DiagLib_MemUtils_MemSet((uint8*)(xDest_p),(sint32)(xPattern_u32),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    11  #define RBA_DIAGLIB_MEMCMP(xSrc1_pc, xSrc2_pc, numBytes_u32)                rba_DiagLib_MemUtils_MemCmp((const uint8*)(xSrc1_pc),(const uint8*)(xSrc2_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    12  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    13  #define RBA_DIAGLIB_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    14  #include "rba_DiagLib_MemMap.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    15  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    16  /**
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    17   * Utility functions for MEMCPY, MEMSET, MEMCOMP.
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    18   */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    19  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    20  LOCAL_INLINE void rba_DiagLib_MemUtils_MemCpy(uint8* xDest_p, const uint8* xSrc_pc, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    21  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    22      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemCopy converts argument 1 and 2 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    23      (void) rba_BswSrv_MemCopy(xDest_p, xSrc_pc, numBytes_s32);
	mov.aa	a5,a15
.L145:
	call	rba_BswSrv_MemCopy
.L54:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   129  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   130              /*The Flag NextReportRelevantForMemories is reset here to make sure it is reset only after the distribution to the memories is done*/
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   131              Dem_EvtSetNextReportRelevantForMemories(fEvent->eventId, FALSE);
	ld.hu	d15,[a15]6
.L169:
	mov	d0,#0
.L63:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   632  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   633  /*------NextReportRelevantForMemories----------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   634  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   635  DEM_INLINE Dem_boolean_least Dem_EvtIsNextReportRelevantForMemories (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   636  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   638  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   639  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   640  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   641  DEM_INLINE void Dem_EvtSetNextReportRelevantForMemories (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   642  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   643     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT, setBit);
	movh.a	a15,#@his(Dem_AllEventsState)
.L147:
	lea	a15,[a15]@los(Dem_AllEventsState)
.L170:
	addsc.a	a15,a15,d15,#2
.L171:
	mov	d1,#7
.L70:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d0,#0,.L7
.L79:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d0,#1
.L148:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d15,[a15]
.L172:
	sha	d0,d0,d1
.L149:
	or	d15,d0
	st.b	[a15],d15
.L80:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L8

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L7:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L150:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d0,[a15]
.L173:
	sha	d15,d15,d1
.L151:
	xor	d15,d15,#255
.L174:
	and	d0,d15
	st.b	[a15],d0

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L8:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   132  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   133  			Dem_EvBuffRemoveEvent(idx);
	ld.w	d4,[a10]
	call	Dem_EvBuffRemoveEvent
.L6:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   134  		}
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   135  		DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   136  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   137  		if (performDistribution)
	jeq	d8,#0,.L9
.L175:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   138  		{
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   139  			Dem_EvBuffDistributorCallReceivers(&tmpEvBuffLocation);
	movh.a	a15,#@his(tmpEvBuffLocation)
.L152:
	lea	a15,[a15]@los(tmpEvBuffLocation)
.L95:
	ld.bu	d15,[a15]4
.L176:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    31      if (   (fe->eventType == C_EVENTTYPE_SET)      (inlined)
	jeq	d15,#1,.L10
.L177:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    32              || (fe->eventType == C_EVENTTYPE_SET_RESET)      (inlined)
	jne	d15,#2,.L11
.L10:
	ld.hu	d4,[a15]6

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L12:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a2,#@his(Dem_EvtParam_16)
	lea	a2,[a2]@los(Dem_EvtParam_16)
.L178:
	addsc.a	a2,a2,d4,#1
.L179:
	ld.hu	d15,[a2]0
.L180:
	mov	d0,#0
.L113:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L181:
	and	d15,#1
.L182:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L13

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L13:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L183:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L14

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L14:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L15

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L15:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
	jeq	d15,#0,.L16
.L108:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
	mov	d5,#0
.L184:
	mov.aa	a4,a15
	call	Dem_EvMemSetEventFailed

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
.L16:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    31      if (   (fe->eventType == C_EVENTTYPE_SET)      (inlined)
.L11:
	ld.bu	d15,[a15]4
.L185:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    45      if (   (fe->eventType == C_EVENTTYPE_RESET)      (inlined)
	jeq	d15,#3,.L17
.L186:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    46              || (fe->eventType == C_EVENTTYPE_SET_RESET)      (inlined)
	jne	d15,#2,.L18
.L17:
	ld.hu	d4,[a15]6

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L19:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a2,#@his(Dem_EvtParam_16)
	lea	a2,[a2]@los(Dem_EvtParam_16)
.L187:
	addsc.a	a2,a2,d4,#1
.L188:
	ld.hu	d15,[a2]0
.L189:
	mov	d0,#0
.L132:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L190:
	and	d15,#1
.L191:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L20

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L20:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L192:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L21:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L22

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L22:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
	jeq	d15,#0,.L23
.L131:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
	mov	d5,#0
.L193:
	mov.aa	a4,a15
	call	Dem_EvMemSetEventPassed

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
.L23:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    45      if (   (fe->eventType == C_EVENTTYPE_RESET)      (inlined)
.L18:
	ld.bu	d15,[a15]4
.L194:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    59      if (fe->eventType == C_EVENTTYPE_UNROBUST)      (inlined)
	jne	d15,#7,.L24
.L195:
	ld.hu	d4,[a15]6

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L25:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a2,#@his(Dem_EvtParam_16)
	lea	a2,[a2]@los(Dem_EvtParam_16)
.L196:
	addsc.a	a2,a2,d4,#1
.L197:
	ld.hu	d15,[a2]0
.L198:
	mov	d0,#0
.L140:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L199:
	and	d15,#1
.L200:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L26

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L26:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L201:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L27

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L27:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L28

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L28:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
	jeq	d15,#0,.L29
.L139:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
	mov	d5,#0
.L202:
	mov.aa	a4,a15
	call	Dem_EvMemSetEventUnRobust

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
.L29:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	    59      if (fe->eventType == C_EVENTTYPE_UNROBUST)      (inlined)
.L24:
.L9:
.L3:
	jne	d8,#0,.L4
.L203:

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   140  		}
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   141  	}
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   142  }
	ret
.L45:
	
__Dem_EvBuffDistributorMainFunction_function_end:
	.size	Dem_EvBuffDistributorMainFunction,__Dem_EvBuffDistributorMainFunction_function_end-Dem_EvBuffDistributorMainFunction
.L40:
	; End of function
	
	.sdecl	'.data.Dem_EvBuffDistributor.Dem_isDistributionRunning',data,cluster('Dem_isDistributionRunning')
	.sect	'.data.Dem_EvBuffDistributor.Dem_isDistributionRunning'
Dem_isDistributionRunning:	.type	object
	.size	Dem_isDistributionRunning,1
	.space	1
	.sdecl	'.bss.Dem_EvBuffDistributor.tmpEvBuffLocation',data,cluster('tmpEvBuffLocation')
	.sect	'.bss.Dem_EvBuffDistributor.tmpEvBuffLocation'
	.align	4
tmpEvBuffLocation:	.type	object
	.size	tmpEvBuffLocation,16
	.space	16
	.calls	'Dem_EvBuffDistributorMainFunction','Dem_EvBuffGetEvent'
	.calls	'Dem_EvBuffDistributorMainFunction','rba_BswSrv_MemCopy'
	.calls	'Dem_EvBuffDistributorMainFunction','Dem_EvBuffRemoveEvent'
	.calls	'Dem_EvBuffDistributorMainFunction','Dem_EvMemSetEventFailed'
	.calls	'Dem_EvBuffDistributorMainFunction','Dem_EvMemSetEventPassed'
	.calls	'Dem_EvBuffDistributorMainFunction','Dem_EvMemSetEventUnRobust'
	.extern	rba_BswSrv_MemCopy
	.extern	Dem_EvtParam_16
	.extern	Dem_AllEventsState
	.extern	Dem_EvBuffGetEvent
	.extern	Dem_EvBuffRemoveEvent
	.extern	Dem_EvMemSetEventPassed
	.extern	Dem_EvMemSetEventFailed
	.extern	Dem_EvMemSetEventUnRobust
	.calls	'Dem_EvBuffDistributorMainFunction','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L33:
	.word	26431
	.half	3
	.word	.L34
	.byte	4
.L32:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffDistributor.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L35
.L48:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,1,125,21
	.word	154
	.byte	1,1,4
	.byte	'Input_u32',0,1,125,55
	.word	154
	.byte	5,0,2
	.byte	'unsigned short int',0,2,7,3
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,1,150,1,21
	.word	228
	.byte	1,1,4
	.byte	'Input_u16',0,1,150,1,55
	.word	228
	.byte	5,0
.L46:
	.byte	2
	.byte	'unsigned char',0,1,8,6
	.word	310
	.byte	7
	.word	310
.L99:
	.byte	6
	.word	332
.L52:
	.byte	8
	.byte	'rba_DiagLib_MemUtils_MemCpy',0,3,2,20,19,1,1
.L55:
	.byte	4
	.byte	'xDest_p',0,2,20,54
	.word	327
.L57:
	.byte	4
	.byte	'xSrc_pc',0,2,20,76
	.word	337
.L59:
	.byte	4
	.byte	'numBytes_s32',0,2,20,92
	.word	154
.L61:
	.byte	5,0,2
	.byte	'int',0,4,5,8
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,2,26,19,1,1,4
	.byte	'xDest_pv',0,2,26,54
	.word	327
	.byte	4
	.byte	'xPattern_u32',0,2,26,71
	.word	432
	.byte	4
	.byte	'numBytes_s32',0,2,26,92
	.word	154
	.byte	5,0,3
	.byte	'Dem_LibGetParamUI8',0,3,3,36,18
	.word	310
	.byte	1,1,4
	.byte	'parameter',0,3,36,44
	.word	310
	.byte	5,0,3
	.byte	'Dem_LibGetParamBool',0,3,3,41,20
	.word	310
	.byte	1,1,4
	.byte	'parameter',0,3,41,49
	.word	310
	.byte	5,0,3
	.byte	'Dem_isDtcIdValid',0,3,4,152,1,30
	.word	310
	.byte	1,1,4
	.byte	'id',0,4,152,1,62
	.word	228
	.byte	5,0,3
	.byte	'Dem_DtcIdFromEventId',0,3,4,158,1,27
	.word	228
	.byte	1,1,4
	.byte	'id',0,4,158,1,65
	.word	228
	.byte	5,0,3
	.byte	'Dem_DtcIdGetEventId',0,3,4,166,1,28
	.word	228
	.byte	1,1,4
	.byte	'dtcid',0,4,166,1,63
	.word	228
	.byte	5,0,3
	.byte	'Dem_DtcGroupIdIsValid',0,3,4,252,1,30
	.word	310
	.byte	1,1,4
	.byte	'dtcGroupID',0,4,252,1,72
	.word	310
	.byte	5,0
.L78:
	.byte	8
	.byte	'rba_DiagLib_Bit8SetBit',0,3,5,36,19,1,1
.L81:
	.byte	4
	.byte	'buffer',0,5,36,49
	.word	327
.L83:
	.byte	4
	.byte	'bit_position',0,5,36,63
	.word	310
.L85:
	.byte	5,0
.L87:
	.byte	8
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,5,42,19,1,1
.L88:
	.byte	4
	.byte	'buffer',0,5,42,51
	.word	327
.L90:
	.byte	4
	.byte	'bit_position',0,5,42,65
	.word	310
.L92:
	.byte	5,0
.L69:
	.byte	8
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,5,48,19,1,1
.L71:
	.byte	4
	.byte	'buffer',0,5,48,55
	.word	327
.L73:
	.byte	4
	.byte	'bit_position',0,5,48,69
	.word	310
.L75:
	.byte	4
	.byte	'will_bit_be_set',0,5,48,91
	.word	310
.L77:
	.byte	9,5,5,0,0,3
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,5,60,20
	.word	310
	.byte	1,1,4
	.byte	'value',0,5,60,55
	.word	310
	.byte	4
	.byte	'bit_position',0,5,60,68
	.word	310
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,5,64,22
	.word	310
	.byte	1,1,4
	.byte	'value',0,5,64,53
	.word	310
	.byte	4
	.byte	'bit_position',0,5,64,66
	.word	310
	.byte	9,5,0,0,3
	.byte	'rba_DiagLib_Bit8GetBits',0,3,5,69,20
	.word	310
	.byte	1,1,4
	.byte	'value',0,5,69,50
	.word	310
	.byte	4
	.byte	'bit_position',0,5,69,63
	.word	310
	.byte	4
	.byte	'number_of_bits',0,5,69,83
	.word	310
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,5,77,19,1,1,4
	.byte	'value',0,5,77,52
	.word	327
	.byte	4
	.byte	'bit_position',0,5,77,65
	.word	310
	.byte	4
	.byte	'number_of_bits',0,5,77,85
	.word	310
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,5,83,19,1,1,4
	.byte	'value',0,5,83,56
	.word	327
	.byte	4
	.byte	'bit_position',0,5,83,69
	.word	310
	.byte	4
	.byte	'number_of_bits',0,5,83,89
	.word	310
	.byte	4
	.byte	'newValue',0,5,83,111
	.word	310
	.byte	9,5,0,0,6
	.word	228
	.byte	8
	.byte	'rba_DiagLib_Bit16SetBit',0,3,6,36,19,1,1,4
	.byte	'buffer',0,6,36,51
	.word	1526
	.byte	4
	.byte	'bit_position',0,6,36,65
	.word	310
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,6,42,19,1,1,4
	.byte	'buffer',0,6,42,53
	.word	1526
	.byte	4
	.byte	'bit_position',0,6,42,67
	.word	310
	.byte	5,0
.L119:
	.byte	3
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,6,60,21
	.word	228
	.byte	1,1
.L120:
	.byte	4
	.byte	'value',0,6,60,58
	.word	228
.L122:
	.byte	4
	.byte	'bit_position',0,6,60,71
	.word	310
.L124:
	.byte	5,0
.L112:
	.byte	3
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,6,65,22
	.word	310
	.byte	1,1
.L114:
	.byte	4
	.byte	'value',0,6,65,55
	.word	228
.L116:
	.byte	4
	.byte	'bit_position',0,6,65,68
	.word	310
.L118:
	.byte	9,5,0,0,3
	.byte	'rba_DiagLib_Bit16GetBits',0,3,6,70,21
	.word	228
	.byte	1,1,4
	.byte	'value',0,6,70,53
	.word	228
	.byte	4
	.byte	'bit_position',0,6,70,66
	.word	310
	.byte	4
	.byte	'number_of_bits',0,6,70,86
	.word	310
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,6,78,19,1,1,4
	.byte	'value',0,6,78,54
	.word	1526
	.byte	4
	.byte	'bit_position',0,6,78,67
	.word	310
	.byte	4
	.byte	'number_of_bits',0,6,78,87
	.word	310
	.byte	5,0,6
	.word	154
	.byte	8
	.byte	'rba_DiagLib_Bit32SetBit',0,3,7,36,19,1,1,4
	.byte	'buffer',0,7,36,51
	.word	2015
	.byte	4
	.byte	'bit_position',0,7,36,65
	.word	310
	.byte	5,0,8
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,7,42,19,1,1,4
	.byte	'buffer',0,7,42,53
	.word	2015
	.byte	4
	.byte	'bit_position',0,7,42,67
	.word	310
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,7,60,21
	.word	154
	.byte	1,1,4
	.byte	'value',0,7,60,58
	.word	154
	.byte	4
	.byte	'bit_position',0,7,60,71
	.word	310
	.byte	5,0,3
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,7,65,22
	.word	310
	.byte	1,1,4
	.byte	'value',0,7,65,55
	.word	154
	.byte	4
	.byte	'bit_position',0,7,65,68
	.word	310
	.byte	9,5,0,0,8
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,7,78,19,1,1,4
	.byte	'value',0,7,78,54
	.word	2015
	.byte	4
	.byte	'bit_position',0,7,78,67
	.word	310
	.byte	4
	.byte	'number_of_bits',0,7,78,87
	.word	310
	.byte	5,0,8
	.byte	'Dem_BitArraySetBit',0,3,8,33,17,1,1,4
	.byte	'buffer',0,8,33,36
	.word	2015
	.byte	4
	.byte	'bit_position',0,8,33,75
	.word	154
	.byte	5,0,8
	.byte	'Dem_BitArrayClearBit',0,3,8,46,17,1,1,4
	.byte	'buffer',0,8,46,38
	.word	2015
	.byte	4
	.byte	'bit_position',0,8,46,77
	.word	154
	.byte	5,0,8
	.byte	'Dem_BitArrayOverwriteBit',0,3,8,61,17,1,1,4
	.byte	'buffer',0,8,61,42
	.word	2015
	.byte	4
	.byte	'bit_position',0,8,62,25
	.word	154
	.byte	4
	.byte	'will_bit_be_set',0,8,62,57
	.word	310
	.byte	9,5,5,0,0,7
	.word	154
	.byte	6
	.word	2635
	.byte	3
	.byte	'Dem_BitArrayIsBitSet',0,3,8,75,30
	.word	310
	.byte	1,1,4
	.byte	'buffer',0,8,75,51
	.word	2640
	.byte	4
	.byte	'bit_position',0,8,75,95
	.word	154
	.byte	5,0,3
	.byte	'Dem_EnCoAreAllFulfilled',0,3,9,32,30
	.word	310
	.byte	1,1,4
	.byte	'enableConditionList',0,9,32,68
	.word	310
	.byte	5,0,3
	.byte	'Dem_NvMGetNvMBlocKId',0,3,10,49,28
	.word	228
	.byte	1,1,4
	.byte	'id',0,10,49,68
	.word	310
	.byte	5,0,8
	.byte	'Dem_NvMStartClear',0,3,10,138,1,17,1,1,5,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,11,36,21
	.word	228
	.byte	1,1,4
	.byte	'val',0,11,36,70
	.word	228
	.byte	9,5,0,0,3
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,11,41,21
	.word	154
	.byte	1,1,4
	.byte	'val',0,11,41,70
	.word	154
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,12,55,22
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,55,78
	.word	228
	.byte	5,0
.L107:
	.byte	3
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,12,75,22
	.word	310
	.byte	1,1
.L109:
	.byte	4
	.byte	'indx',0,12,75,77
	.word	228
.L111:
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,12,95,22
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,95,67
	.word	228
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,12,122,20
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,122,69
	.word	228
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,12,129,1,20
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,129,1,65
	.word	228
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,12,136,1,20
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,136,1,67
	.word	228
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,12,149,1,20
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,149,1,72
	.word	228
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,12,155,1,21
	.word	228
	.byte	1,1,4
	.byte	'indx',0,12,155,1,79
	.word	228
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,12,168,1,20
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,168,1,67
	.word	228
	.byte	5,0,3
	.byte	'Dem_EvtParam_GetMaxNumberFreezeFrameRecords',0,3,12,194,1,20
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,194,1,80
	.word	228
	.byte	9,5,0,0,3
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,12,208,1,27
	.word	310
	.byte	1,1,4
	.byte	'indx',0,12,208,1,76
	.word	228
	.byte	5,0,2
	.byte	'short int',0,2,5,3
	.byte	'Dem_EvtGetDebounceLevel',0,3,13,193,1,19
	.word	3686
	.byte	1,1,4
	.byte	'EventId',0,13,193,1,60
	.word	228
	.byte	5,0,3
	.byte	'Dem_EvtGetLastReportedEvent',0,3,13,219,1,32
	.word	310
	.byte	1,1,4
	.byte	'EventId',0,13,219,1,77
	.word	228
	.byte	5,0,8
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,13,227,3,17,1,1,5,0,8
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,13,233,3,17,1,1,4
	.byte	'reason',0,13,233,3,72
	.word	310
	.byte	9,5,0,0
.L62:
	.byte	8
	.byte	'Dem_EvtSetNextReportRelevantForMemories',0,3,13,129,5,17,1,1
.L64:
	.byte	4
	.byte	'EventId',0,13,129,5,74
	.word	228
.L66:
	.byte	4
	.byte	'setBit',0,13,129,5,101
	.word	310
.L68:
	.byte	9,5,0,0,6
	.word	310
	.byte	8
	.byte	'Dem_EnvSetTrigger',0,3,14,17,17,1,1,4
	.byte	'trigger',0,14,17,52
	.word	4007
	.byte	4
	.byte	'trigger2set',0,14,17,77
	.word	310
	.byte	5,0,3
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,14,22,30
	.word	310
	.byte	1,1,4
	.byte	'trigger2test',0,14,22,69
	.word	310
	.byte	5,0,3
	.byte	'Dem_EnvIsTriggerSet',0,3,14,27,30
	.word	310
	.byte	1,1,4
	.byte	'trigger',0,14,27,66
	.word	310
	.byte	4
	.byte	'trigger2test',0,14,27,91
	.word	310
	.byte	9,5,0,0,3
	.byte	'Dem_GetSmallerTrigger',0,3,14,32,28
	.word	310
	.byte	1,1,4
	.byte	'trigger',0,14,32,66
	.word	310
	.byte	5,0,2
	.byte	'unsigned long int',0,4,7,3
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,15,101,30
	.word	310
	.byte	1,1,4
	.byte	'EventId',0,15,101,87
	.word	228
	.byte	4
	.byte	'debAction',0,15,101,120
	.word	4255
	.byte	5,0,10
	.word	228
	.byte	6
	.word	4364
	.byte	8
	.byte	'Dem_ClientResultType_setResult',0,3,16,27,17,1,1,4
	.byte	'result',0,16,27,79
	.word	4369
	.byte	4
	.byte	'request',0,16,27,109
	.word	228
	.byte	4
	.byte	'newResult',0,16,27,133,1
	.word	310
	.byte	5,0,10
	.word	228
	.byte	6
	.word	4464
	.byte	8
	.byte	'Dem_ClientRequestType_setRequest',0,3,16,65,17,1,1,4
	.byte	'request',0,16,65,82
	.word	4469
	.byte	4
	.byte	'newRequest',0,16,65,97
	.word	310
	.byte	5,0,6
	.word	154
	.byte	8
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,16,151,1,17,1,1,4
	.byte	'selection',0,16,151,1,93
	.word	4551
	.byte	5,0,3
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,16,168,1,18
	.word	310
	.byte	1,1,4
	.byte	'selection',0,16,168,1,86
	.word	154
	.byte	5,0,8
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,17,53,17,1,1,4
	.byte	'ClientId',0,17,53,80
	.word	310
	.byte	5,0,8
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,17,68,17,1,1,4
	.byte	'state',0,17,68,62
	.word	310
	.byte	5,0,3
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,17,78,20
	.word	310
	.byte	1,1,4
	.byte	'ClientId',0,17,78,91
	.word	310
	.byte	9,5,5,5,5,0,0,3
	.byte	'Dem_EvMemIsMemIdValid',0,3,18,103,30
	.word	310
	.byte	1,1,4
	.byte	'MemId',0,18,103,65
	.word	4255
	.byte	5,0,3
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,18,112,30
	.word	310
	.byte	1,1,4
	.byte	'LocId',0,18,112,73
	.word	4255
	.byte	5,0,11,19,133,1,3,4,12
	.byte	'Status',0
	.word	228
	.byte	2,2,35,0,12
	.byte	'EventId',0
	.word	228
	.byte	2,2,35,2,0,13,19,131,1,9,4,12
	.byte	'Data',0
	.word	5040
	.byte	4,2,35,0,0,14,7
	.word	310
	.byte	15,6,0,11,19,144,1,9,20,12
	.byte	'Hdr',0
	.word	5080
	.byte	4,2,35,0,12
	.byte	'Data',0
	.word	5101
	.byte	7,2,35,4,12
	.byte	'FailureCounter',0
	.word	310
	.byte	1,2,35,11,12
	.byte	'FreezeFrameCounter',0
	.word	310
	.byte	1,2,35,12,12
	.byte	'AgingCounter',0
	.word	310
	.byte	1,2,35,13,12
	.byte	'OccurrenceCounter',0
	.word	310
	.byte	1,2,35,14,12
	.byte	'Trigger',0
	.word	310
	.byte	1,2,35,15,12
	.byte	'TimeId',0
	.word	154
	.byte	4,2,35,16,0,7
	.word	5110
	.byte	6
	.word	5278
	.byte	3
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,18,134,1,25
	.word	4255
	.byte	1,1,4
	.byte	'EventMemory',0,18,134,1,89
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemStatus',0,3,18,139,1,25
	.word	4255
	.byte	1,1,4
	.byte	'LocId',0,18,139,1,65
	.word	4255
	.byte	9,5,0,0,3
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,18,152,1,28
	.word	228
	.byte	1,1,4
	.byte	'EventMemory',0,18,152,1,93
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,18,170,1,19
	.word	154
	.byte	1,1,4
	.byte	'EventMemory',0,18,170,1,83
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,18,188,1,18
	.word	310
	.byte	1,1,4
	.byte	'EventMemory',0,18,188,1,85
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,18,216,1,24
	.word	4255
	.byte	1,1,4
	.byte	'EventMemory',0,18,216,1,96
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,18,233,1,25
	.word	4255
	.byte	1,1,4
	.byte	'EventMemory',0,18,233,1,100
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,18,133,2,25
	.word	4255
	.byte	1,1,4
	.byte	'EventMemory',0,18,133,2,95
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,18,144,2,25
	.word	4255
	.byte	1,1,4
	.byte	'LocId',0,18,144,2,71
	.word	4255
	.byte	9,5,0,0,8
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,18,150,2,17,1,1,4
	.byte	'LocId',0,18,150,2,63
	.word	4255
	.byte	4
	.byte	'AgingCounter',0,18,150,2,83
	.word	4255
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,18,161,2,25
	.word	4255
	.byte	1,1,4
	.byte	'EventMemory',0,18,161,2,103
	.word	5283
	.byte	5,0,2
	.byte	'char',0,1,6,3
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,18,213,2,18
	.word	6069
	.byte	1,1,4
	.byte	'EventMemory',0,18,213,2,92
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,18,224,2,18
	.word	6069
	.byte	1,1,4
	.byte	'EventMemory',0,18,224,2,88
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,18,238,3,25
	.word	4255
	.byte	1,1,4
	.byte	'EventMemory',0,18,238,3,101
	.word	5283
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,18,141,4,28
	.word	310
	.byte	1,1,4
	.byte	'EventMemory',0,18,141,4,93
	.word	5283
	.byte	5,0,6
	.word	5110
	.byte	3
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,18,170,4,19
	.word	327
	.byte	1,1,4
	.byte	'EventMemory',0,18,170,4,75
	.word	6374
	.byte	5,0,3
	.byte	'Dem_EvMemIsStored',0,3,18,206,4,30
	.word	310
	.byte	1,1,4
	.byte	'Status',0,18,206,4,61
	.word	4255
	.byte	5,0,3
	.byte	'Dem_EvMemIsEmpty',0,3,18,211,4,30
	.word	310
	.byte	1,1,4
	.byte	'Status',0,18,211,4,60
	.word	4255
	.byte	5,0,3
	.byte	'Dem_EvMemSetToEmpty',0,3,18,226,4,25
	.word	4255
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetShadowVisibility',0,3,18,242,4,30
	.word	310
	.byte	1,1,5,0,3
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,18,131,5,25
	.word	4255
	.byte	1,1,4
	.byte	'MemId',0,18,131,5,69
	.word	4255
	.byte	5,0,3
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,18,143,5,25
	.word	4255
	.byte	1,1,4
	.byte	'MemId',0,18,143,5,67
	.word	4255
	.byte	5,0,6
	.word	4255
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,18,179,5,17,1,1,4
	.byte	'MemId',0,18,179,5,63
	.word	6734
	.byte	5,0,7
	.word	4255
	.byte	6
	.word	6796
	.byte	3
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,18,184,5,30
	.word	310
	.byte	1,1,4
	.byte	'MemId',0,18,184,5,86
	.word	6801
	.byte	5,0,8
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,18,189,5,17,1,1,4
	.byte	'MemId',0,18,189,5,64
	.word	6734
	.byte	5,0,3
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,18,247,5,30
	.word	310
	.byte	1,1,4
	.byte	'StatusOld',0,18,247,5,66
	.word	4255
	.byte	4
	.byte	'StatusNew',0,18,247,5,90
	.word	4255
	.byte	4
	.byte	'Trigger',0,18,247,5,114
	.word	4255
	.byte	5,0,3
	.byte	'Dem_EvMemGetRamStsMask',0,3,18,154,7,25
	.word	4255
	.byte	1,1,4
	.byte	'EventId',0,18,154,7,64
	.word	228
	.byte	9,5,0,0,3
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,20,20,25
	.word	4255
	.byte	1,1,4
	.byte	'EventId',0,20,20,81
	.word	228
	.byte	5,0,3
	.byte	'Dem_EvMemIsAged',0,3,20,61,30
	.word	310
	.byte	1,1,4
	.byte	'EventId',0,20,61,62
	.word	228
	.byte	4
	.byte	'LocId',0,20,61,84
	.word	4255
	.byte	4
	.byte	'StatusNew',0,20,61,104
	.word	4255
	.byte	5,0
.L101:
	.byte	8
	.byte	'Dem_EvMemSetEventFailedAllMem',0,3,21,98,17,1,1
.L102:
	.byte	4
	.byte	'EventId',0,21,98,63
	.word	228
.L104:
	.byte	4
	.byte	'EnvData',0,21,98,85
	.word	337
.L106:
	.byte	9,5,0,0
.L125:
	.byte	8
	.byte	'Dem_EvMemSetEventPassedAllMem',0,3,21,113,17,1,1
.L126:
	.byte	4
	.byte	'EventId',0,21,113,63
	.word	228
.L128:
	.byte	4
	.byte	'EnvData',0,21,113,85
	.word	337
.L130:
	.byte	9,5,0,0
.L133:
	.byte	8
	.byte	'Dem_EvMemSetEventUnRobustAllMem',0,3,21,128,1,17,1,1
.L134:
	.byte	4
	.byte	'EventId',0,21,128,1,65
	.word	228
.L136:
	.byte	4
	.byte	'EnvData',0,21,128,1,87
	.word	337
.L138:
	.byte	9,5,0,0,3
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,21,150,1,25
	.word	4255
	.byte	1,1,4
	.byte	'DTCOrigin',0,21,150,1,73
	.word	310
	.byte	5,0,3
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,21,222,1,25
	.word	4255
	.byte	1,1,4
	.byte	'EventId',0,21,222,1,67
	.word	228
	.byte	9,5,0,0,7
	.word	327
	.byte	6
	.word	7569
	.byte	8
	.byte	'Dem_EnvInsertPadding',0,3,22,46,17,1,1,4
	.byte	'start',0,22,46,52
	.word	7574
	.byte	4
	.byte	'size',0,22,46,65
	.word	310
	.byte	9,5,0,0,6
	.word	327
	.byte	11,23,13,9,16,12
	.byte	'eventId',0
	.word	228
	.byte	2,2,35,0,12
	.byte	'debug0',0
	.word	154
	.byte	4,2,35,4,12
	.byte	'debug1',0
	.word	154
	.byte	4,2,35,8,12
	.byte	'evMemLocation',0
	.word	6374
	.byte	4,2,35,12,0,7
	.word	7643
	.byte	6
	.word	7721
	.byte	8
	.byte	'Dem_EnvDACapture',0,3,22,51,17,1,1,4
	.byte	'dataElementId',0,22,51,40
	.word	310
	.byte	4
	.byte	'start',0,22,51,63
	.word	7638
	.byte	4
	.byte	'end',0,22,51,83
	.word	337
	.byte	4
	.byte	'internalEnvData',0,22,51,115
	.word	7726
	.byte	9,5,5,0,0,6
	.word	337
	.byte	8
	.byte	'Dem_EnvDACopy',0,3,22,86,17,1,1,4
	.byte	'dataElementId',0,22,86,37
	.word	310
	.byte	4
	.byte	'start',0,22,86,60
	.word	7638
	.byte	4
	.byte	'end',0,22,86,80
	.word	337
	.byte	4
	.byte	'src',0,22,86,99
	.word	7832
	.byte	9,5,0,0,8
	.byte	'Dem_EnvDASkip',0,3,22,95,17,1,1,4
	.byte	'dataElementId',0,22,95,37
	.word	310
	.byte	4
	.byte	'start',0,22,95,60
	.word	7638
	.byte	4
	.byte	'end',0,22,95,80
	.word	337
	.byte	4
	.byte	'src',0,22,95,99
	.word	7832
	.byte	5,0,3
	.byte	'Dem_EnvDARetrieve',0,3,22,105,30
	.word	310
	.byte	1,1,4
	.byte	'dataElementId',0,22,105,54
	.word	310
	.byte	4
	.byte	'start',0,22,106,11
	.word	7638
	.byte	4
	.byte	'end',0,22,107,16
	.word	337
	.byte	4
	.byte	'src',0,22,108,17
	.word	7832
	.byte	4
	.byte	'internalEnvData',0,22,109,30
	.word	7726
	.byte	9,5,5,0,0,3
	.byte	'Dem_EnvDAGetSizeOf',0,3,22,149,1,18
	.word	310
	.byte	1,1,4
	.byte	'dataElementId',0,22,149,1,43
	.word	310
	.byte	5,0,3
	.byte	'Dem_EnvEDRGetRecordNumber',0,3,24,29,18
	.word	310
	.byte	1,1,4
	.byte	'extDataRecId',0,24,29,51
	.word	310
	.byte	5,0,3
	.byte	'Dem_EnvEDRGetUpdate',0,3,24,34,20
	.word	310
	.byte	1,1,4
	.byte	'extDataRecId',0,24,34,47
	.word	310
	.byte	5,0,3
	.byte	'Dem_EnvEDRGetRecordTrigger',0,3,24,40,28
	.word	310
	.byte	1,1,4
	.byte	'extDataRecId',0,24,40,62
	.word	310
	.byte	5,0,8
	.byte	'Dem_EnvEDRCapture',0,3,24,45,17,1,1,4
	.byte	'extDataRecId',0,24,45,42
	.word	310
	.byte	4
	.byte	'start',0,24,45,64
	.word	7638
	.byte	4
	.byte	'end',0,24,45,84
	.word	337
	.byte	4
	.byte	'internalEnvData',0,24,45,116
	.word	7726
	.byte	9,5,0,0,11,14,7,9,4,12
	.byte	'currentTrigger',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'storedTrigger',0
	.word	310
	.byte	1,2,35,1,12
	.byte	'matchingTrigger',0
	.word	310
	.byte	1,2,35,2,0,6
	.word	8454
	.byte	8
	.byte	'Dem_EnvEDRCopyRaw',0,3,24,59,17,1,1,4
	.byte	'extDataRecId',0,24,59,42
	.word	310
	.byte	4
	.byte	'start',0,24,59,64
	.word	7638
	.byte	4
	.byte	'end',0,24,59,84
	.word	337
	.byte	4
	.byte	'src',0,24,59,103
	.word	7832
	.byte	4
	.byte	'triggerParam',0,24,59,133,1
	.word	8532
	.byte	9,5,5,5,5,5,5,5,5,5,5,0,0,7
	.word	7832
	.byte	3
	.byte	'Dem_EnvEDRRetrieve',0,3,24,103,30
	.word	310
	.byte	1,1,4
	.byte	'extDataRecId',0,24,103,56
	.word	310
	.byte	4
	.byte	'start',0,24,103,78
	.word	7638
	.byte	4
	.byte	'end',0,24,103,98
	.word	337
	.byte	4
	.byte	'src',0,24,103,123
	.word	8656
	.byte	4
	.byte	'internalEnvData',0,24,103,155,1
	.word	7726
	.byte	9,5,0,0,3
	.byte	'Dem_EnvEDRGetSize',0,3,24,119,19
	.word	228
	.byte	1,1,4
	.byte	'extDataRecId',0,24,119,44
	.word	310
	.byte	9,5,0,0,8
	.byte	'Dem_EnvEDRSkipSrc',0,3,24,133,1,17,1,1,4
	.byte	'extDataRecId',0,24,133,1,42
	.word	310
	.byte	4
	.byte	'src',0,24,133,1,70
	.word	7832
	.byte	9,5,0,0,8
	.byte	'Dem_EnvDIDCapture',0,3,25,26,17,1,1,4
	.byte	'didId',0,25,26,41
	.word	310
	.byte	4
	.byte	'start',0,25,26,56
	.word	7638
	.byte	4
	.byte	'end',0,25,26,76
	.word	337
	.byte	4
	.byte	'internalEnvData',0,25,26,108
	.word	7726
	.byte	9,5,0,0,3
	.byte	'Dem_EnvDIDRetrieveRaw',0,3,25,41,30
	.word	310
	.byte	1,1,4
	.byte	'didId',0,25,41,58
	.word	310
	.byte	4
	.byte	'start',0,25,41,73
	.word	7638
	.byte	4
	.byte	'end',0,25,41,93
	.word	337
	.byte	4
	.byte	'src',0,25,41,112
	.word	7832
	.byte	4
	.byte	'internalEnvData',0,25,41,144,1
	.word	7726
	.byte	9,5,0,0,3
	.byte	'Dem_EnvDIDRetrieve',0,3,25,59,30
	.word	310
	.byte	1,1,4
	.byte	'didId',0,25,59,55
	.word	310
	.byte	4
	.byte	'start',0,25,59,70
	.word	7638
	.byte	4
	.byte	'end',0,25,59,90
	.word	337
	.byte	4
	.byte	'src',0,25,59,109
	.word	7832
	.byte	4
	.byte	'internalEnvData',0,25,59,141,1
	.word	7726
	.byte	9,5,0,0,3
	.byte	'Dem_EnvDIDRetrieveSpecificDid',0,3,25,77,30
	.word	310
	.byte	1,1,4
	.byte	'didId',0,25,77,67
	.word	310
	.byte	4
	.byte	'identifier',0,25,77,81
	.word	228
	.byte	4
	.byte	'start',0,25,77,101
	.word	7638
	.byte	4
	.byte	'end',0,25,77,121
	.word	337
	.byte	4
	.byte	'src',0,25,77,140,1
	.word	7832
	.byte	4
	.byte	'internalEnvData',0,25,77,172,1
	.word	7726
	.byte	9,5,5,0,0,3
	.byte	'Dem_EnvDIDGetSize',0,3,25,108,19
	.word	228
	.byte	1,1,4
	.byte	'didId',0,25,108,43
	.word	310
	.byte	9,5,0,0,3
	.byte	'Dem_EnvGetIndexFromFFRecNum',0,3,26,21,18
	.word	310
	.byte	1,1,4
	.byte	'EventId',0,26,21,62
	.word	228
	.byte	4
	.byte	'RecNumber',0,26,21,77
	.word	310
	.byte	5,0,14,4
	.word	310
	.byte	15,3,0,13,28,37,9,4,12
	.byte	'EnforceAlignment',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'Buffer',0
	.word	9481
	.byte	4,2,35,0,0
.L141:
	.byte	11,28,49,9,16,12
	.byte	'envData',0
	.word	9490
	.byte	4,2,35,0,12
	.byte	'eventType',0
	.word	310
	.byte	1,2,35,4,12
	.byte	'eventId',0
	.word	228
	.byte	2,2,35,6,12
	.byte	'debug0',0
	.word	154
	.byte	4,2,35,8,12
	.byte	'debug1',0
	.word	154
	.byte	4,2,35,12,0,7
	.word	9538
.L50:
	.byte	6
	.word	9629
.L94:
	.byte	8
	.byte	'Dem_EvBuffDistributorCallReceivers',0,3,27,21,17,1,1
.L96:
	.byte	4
	.byte	'fe',0,27,21,76
	.word	9634
.L98:
	.byte	9,5,5,5,0,0,16
	.byte	'void',0,6
	.word	9698
	.byte	7
	.word	9698
	.byte	6
	.word	9709
	.byte	17
	.byte	'rba_BswSrv_MemCopy',0,1,83,14
	.word	9704
	.byte	1,1,1,1,4
	.byte	'xDest_pv',0,1,83,39
	.word	9704
	.byte	4
	.byte	'xSrc_pcv',0,1,83,61
	.word	9714
	.byte	4
	.byte	'numBytes_u32',0,1,83,78
	.word	154
	.byte	0,18
	.word	170
	.byte	19
	.word	208
	.byte	5,0,18
	.word	250
	.byte	19
	.word	289
	.byte	5,0,18
	.word	342
	.byte	19
	.word	377
	.byte	19
	.word	393
	.byte	19
	.word	409
	.byte	5,0,18
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	5,0,18
	.word	535
	.byte	19
	.word	565
	.byte	5,0,18
	.word	585
	.byte	19
	.word	616
	.byte	5,0,18
	.word	636
	.byte	19
	.word	665
	.byte	5,0,18
	.word	679
	.byte	19
	.word	712
	.byte	5,0,18
	.word	726
	.byte	19
	.word	758
	.byte	5,0,18
	.word	775
	.byte	19
	.word	809
	.byte	5,0,18
	.word	831
	.byte	19
	.word	861
	.byte	19
	.word	876
	.byte	5,0,18
	.word	899
	.byte	19
	.word	931
	.byte	19
	.word	946
	.byte	5,0,18
	.word	969
	.byte	19
	.word	1005
	.byte	19
	.word	1020
	.byte	19
	.word	1041
	.byte	9,20
	.word	831
	.byte	19
	.word	861
	.byte	19
	.word	876
	.byte	21
	.word	897
	.byte	0,5,20
	.word	899
	.byte	19
	.word	931
	.byte	19
	.word	946
	.byte	21
	.word	967
	.byte	0,5,0,0,18
	.word	1070
	.byte	19
	.word	1110
	.byte	19
	.word	1124
	.byte	5,0,18
	.word	1147
	.byte	19
	.word	1183
	.byte	19
	.word	1197
	.byte	9,20
	.word	1070
	.byte	19
	.word	1110
	.byte	19
	.word	1124
	.byte	21
	.word	1145
	.byte	0,5,0,0,18
	.word	1222
	.byte	19
	.word	1257
	.byte	19
	.word	1271
	.byte	19
	.word	1292
	.byte	5,0,18
	.word	1317
	.byte	19
	.word	1350
	.byte	19
	.word	1364
	.byte	19
	.word	1385
	.byte	5,0,18
	.word	1410
	.byte	19
	.word	1447
	.byte	19
	.word	1461
	.byte	19
	.word	1482
	.byte	19
	.word	1505
	.byte	9,20
	.word	1317
	.byte	19
	.word	1350
	.byte	19
	.word	1364
	.byte	19
	.word	1385
	.byte	21
	.word	1408
	.byte	0,5,0,0,18
	.word	1531
	.byte	19
	.word	1562
	.byte	19
	.word	1577
	.byte	5,0,18
	.word	1600
	.byte	19
	.word	1633
	.byte	19
	.word	1648
	.byte	5,0,18
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	5,0,18
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	9,20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,5,0,0,18
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1875
	.byte	19
	.word	1896
	.byte	5,0,18
	.word	1921
	.byte	19
	.word	1955
	.byte	19
	.word	1969
	.byte	19
	.word	1990
	.byte	5,0,18
	.word	2020
	.byte	19
	.word	2051
	.byte	19
	.word	2066
	.byte	5,0,18
	.word	2089
	.byte	19
	.word	2122
	.byte	19
	.word	2137
	.byte	5,0,18
	.word	2160
	.byte	19
	.word	2201
	.byte	19
	.word	2215
	.byte	5,0,18
	.word	2238
	.byte	19
	.word	2275
	.byte	19
	.word	2289
	.byte	9,20
	.word	2160
	.byte	19
	.word	2201
	.byte	19
	.word	2215
	.byte	21
	.word	2236
	.byte	0,5,0,0,18
	.word	2314
	.byte	19
	.word	2348
	.byte	19
	.word	2362
	.byte	19
	.word	2383
	.byte	5,0,18
	.word	2408
	.byte	19
	.word	2434
	.byte	19
	.word	2449
	.byte	5,0,18
	.word	2472
	.byte	19
	.word	2500
	.byte	19
	.word	2515
	.byte	5,0,18
	.word	2538
	.byte	19
	.word	2570
	.byte	19
	.word	2585
	.byte	19
	.word	2606
	.byte	9,20
	.word	2408
	.byte	19
	.word	2434
	.byte	19
	.word	2449
	.byte	21
	.word	2470
	.byte	0,5,20
	.word	2472
	.byte	19
	.word	2500
	.byte	19
	.word	2515
	.byte	21
	.word	2536
	.byte	0,5,0,0,18
	.word	2645
	.byte	19
	.word	2677
	.byte	19
	.word	2692
	.byte	5,0,18
	.word	2715
	.byte	19
	.word	2750
	.byte	5,0,18
	.word	2780
	.byte	19
	.word	2812
	.byte	5,0,18
	.word	2825
	.byte	5,0,18
	.word	2853
	.byte	19
	.word	2906
	.byte	9,20
	.word	250
	.byte	19
	.word	289
	.byte	21
	.word	308
	.byte	0,5,0,0,18
	.word	2922
	.byte	19
	.word	2975
	.byte	9,20
	.word	170
	.byte	19
	.word	208
	.byte	21
	.word	226
	.byte	0,5,0,0,18
	.word	2991
	.byte	19
	.word	3042
	.byte	5,0,18
	.word	3057
	.byte	19
	.word	3107
	.byte	9,20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,5,0,0,18
	.word	3124
	.byte	19
	.word	3164
	.byte	9,20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,5,0,0,18
	.word	3181
	.byte	19
	.word	3225
	.byte	5,0,18
	.word	3240
	.byte	19
	.word	3281
	.byte	5,0,18
	.word	3297
	.byte	19
	.word	3340
	.byte	5,0,18
	.word	3356
	.byte	19
	.word	3404
	.byte	5,0,18
	.word	3420
	.byte	19
	.word	3474
	.byte	9,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1875
	.byte	19
	.word	1896
	.byte	21
	.word	1919
	.byte	0,5,0,0,18
	.word	3492
	.byte	19
	.word	3535
	.byte	5,0,18
	.word	3551
	.byte	19
	.word	3607
	.byte	9,20
	.word	1825
	.byte	19
	.word	1861
	.byte	19
	.word	1875
	.byte	19
	.word	1896
	.byte	21
	.word	1919
	.byte	0,5,0,0,18
	.word	3625
	.byte	19
	.word	3670
	.byte	5,0,18
	.word	3699
	.byte	19
	.word	3735
	.byte	5,0,18
	.word	3754
	.byte	19
	.word	3794
	.byte	5,0,18
	.word	3813
	.byte	5,0,18
	.word	3866
	.byte	19
	.word	3902
	.byte	9,20
	.word	2020
	.byte	19
	.word	2051
	.byte	19
	.word	2066
	.byte	21
	.word	2087
	.byte	0,5,0,0,18
	.word	3922
	.byte	19
	.word	3970
	.byte	19
	.word	3987
	.byte	9,20
	.word	969
	.byte	19
	.word	1005
	.byte	19
	.word	1020
	.byte	19
	.word	1041
	.byte	22
	.word	1065
	.byte	20
	.word	831
	.byte	19
	.word	861
	.byte	19
	.word	876
	.byte	21
	.word	897
	.byte	0,21
	.word	1066
	.byte	20
	.word	899
	.byte	19
	.word	931
	.byte	19
	.word	946
	.byte	21
	.word	967
	.byte	0,21
	.word	1067
	.byte	0,0,5,0,0,17
	.byte	'Dem_EvBuffGetEvent',0,29,58,24
	.word	9634
	.byte	1,1,1,1,4
	.byte	'locationIndex',0,29,58,52
	.word	2015
	.byte	0,23
	.byte	'Dem_EvBuffRemoveEvent',0,29,60,6,1,1,1,1,4
	.byte	'locationIndex',0,29,60,36
	.word	154
	.byte	0,18
	.word	4012
	.byte	19
	.word	4037
	.byte	19
	.word	4053
	.byte	5,0,18
	.word	4075
	.byte	19
	.word	4109
	.byte	5,0,18
	.word	4132
	.byte	19
	.word	4163
	.byte	19
	.word	4179
	.byte	9,20
	.word	4075
	.byte	19
	.word	4109
	.byte	21
	.word	4130
	.byte	0,5,0,0,18
	.word	4204
	.byte	19
	.word	4237
	.byte	5,0,18
	.word	4276
	.byte	19
	.word	4328
	.byte	19
	.word	4344
	.byte	5,0,18
	.word	4374
	.byte	19
	.word	4412
	.byte	19
	.word	4427
	.byte	19
	.word	4443
	.byte	5,0,18
	.word	4474
	.byte	19
	.word	4514
	.byte	19
	.word	4530
	.byte	5,0,18
	.word	4556
	.byte	19
	.word	4614
	.byte	5,0,18
	.word	4635
	.byte	19
	.word	4690
	.byte	5,0,18
	.word	4711
	.byte	19
	.word	4764
	.byte	5,0,18
	.word	4783
	.byte	19
	.word	4829
	.byte	5,0,18
	.word	4845
	.byte	19
	.word	4910
	.byte	9,20
	.word	535
	.byte	19
	.word	565
	.byte	21
	.word	583
	.byte	0,5,20
	.word	535
	.byte	19
	.word	565
	.byte	21
	.word	583
	.byte	0,5,20
	.word	4635
	.byte	19
	.word	4690
	.byte	21
	.word	4709
	.byte	0,5,20
	.word	4374
	.byte	19
	.word	4412
	.byte	19
	.word	4427
	.byte	19
	.word	4443
	.byte	21
	.word	4462
	.byte	0,5,0,0,18
	.word	4934
	.byte	19
	.word	4967
	.byte	5,0,18
	.word	4983
	.byte	19
	.word	5024
	.byte	5,0,18
	.word	5288
	.byte	19
	.word	5332
	.byte	5,0,18
	.word	5355
	.byte	19
	.word	5394
	.byte	9,20
	.word	5288
	.byte	19
	.word	5332
	.byte	21
	.word	5353
	.byte	0,5,0,0,18
	.word	5413
	.byte	19
	.word	5458
	.byte	5,0,18
	.word	5481
	.byte	19
	.word	5525
	.byte	5,0,18
	.word	5548
	.byte	19
	.word	5595
	.byte	5,0,18
	.word	5618
	.byte	19
	.word	5670
	.byte	5,0,18
	.word	5693
	.byte	19
	.word	5748
	.byte	5,0,18
	.word	5771
	.byte	19
	.word	5821
	.byte	5,0,18
	.word	5844
	.byte	19
	.word	5889
	.byte	9,20
	.word	5771
	.byte	19
	.word	5821
	.byte	21
	.word	5842
	.byte	0,5,0,0,18
	.word	5908
	.byte	19
	.word	5949
	.byte	19
	.word	5964
	.byte	5,0,18
	.word	5988
	.byte	19
	.word	6046
	.byte	5,0,18
	.word	6077
	.byte	19
	.word	6131
	.byte	5,0,18
	.word	6154
	.byte	19
	.word	6204
	.byte	5,0,18
	.word	6227
	.byte	19
	.word	6283
	.byte	5,0,18
	.word	6306
	.byte	19
	.word	6351
	.byte	5,0,18
	.word	6379
	.byte	19
	.word	6421
	.byte	5,0,18
	.word	6444
	.byte	19
	.word	6474
	.byte	5,0,18
	.word	6492
	.byte	19
	.word	6521
	.byte	5,0,18
	.word	6539
	.byte	5,0,18
	.word	6573
	.byte	5,0,18
	.word	6616
	.byte	19
	.word	6659
	.byte	5,0,18
	.word	6676
	.byte	19
	.word	6717
	.byte	5,0,18
	.word	6739
	.byte	19
	.word	6779
	.byte	5,0,18
	.word	6806
	.byte	19
	.word	6854
	.byte	5,0,18
	.word	6871
	.byte	19
	.word	6912
	.byte	5,0,18
	.word	6929
	.byte	19
	.word	6964
	.byte	19
	.word	6983
	.byte	19
	.word	7002
	.byte	5,0,18
	.word	7021
	.byte	19
	.word	7056
	.byte	9,20
	.word	2991
	.byte	19
	.word	3042
	.byte	21
	.word	3055
	.byte	0,5,0,0,18
	.word	7077
	.byte	19
	.word	7128
	.byte	5,0,18
	.word	7146
	.byte	19
	.word	7173
	.byte	19
	.word	7189
	.byte	19
	.word	7203
	.byte	5,0,23
	.byte	'Dem_EvMemSetEventPassed',0,21,59,15,1,1,1,1,4
	.byte	'EventId',0,21,59,55
	.word	228
	.byte	4
	.byte	'MemId',0,21,59,77
	.word	4255
	.byte	4
	.byte	'EnvData',0,21,59,97
	.word	337
	.byte	0,23
	.byte	'Dem_EvMemSetEventFailed',0,21,60,15,1,1,1,1,4
	.byte	'EventId',0,21,60,55
	.word	228
	.byte	4
	.byte	'MemId',0,21,60,77
	.word	4255
	.byte	4
	.byte	'EnvData',0,21,60,97
	.word	337
	.byte	0,23
	.byte	'Dem_EvMemSetEventUnRobust',0,21,61,15,1,1,1,1,4
	.byte	'EventId',0,21,61,57
	.word	228
	.byte	4
	.byte	'MemId',0,21,61,79
	.word	4255
	.byte	4
	.byte	'EnvData',0,21,61,99
	.word	337
	.byte	0,18
	.word	7223
	.byte	19
	.word	7260
	.byte	19
	.word	7276
	.byte	9,20
	.word	3057
	.byte	19
	.word	3107
	.byte	22
	.word	3120
	.byte	20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,21
	.word	3121
	.byte	0,0,5,0,0,18
	.word	7296
	.byte	19
	.word	7333
	.byte	19
	.word	7349
	.byte	9,20
	.word	3057
	.byte	19
	.word	3107
	.byte	22
	.word	3120
	.byte	20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,21
	.word	3121
	.byte	0,0,5,0,0,18
	.word	7369
	.byte	19
	.word	7409
	.byte	19
	.word	7426
	.byte	9,20
	.word	3057
	.byte	19
	.word	3107
	.byte	22
	.word	3120
	.byte	20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,21
	.word	3121
	.byte	0,0,5,0,0,18
	.word	7447
	.byte	19
	.word	7489
	.byte	5,0,18
	.word	7510
	.byte	19
	.word	7548
	.byte	9,20
	.word	3057
	.byte	19
	.word	3107
	.byte	22
	.word	3120
	.byte	20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,21
	.word	3121
	.byte	0,0,5,0,0,18
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	9,20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,5,0,0,18
	.word	7731
	.byte	19
	.word	7755
	.byte	19
	.word	7777
	.byte	19
	.word	7791
	.byte	19
	.word	7803
	.byte	9,20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,5,20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,5,0,0,18
	.word	7837
	.byte	19
	.word	7858
	.byte	19
	.word	7880
	.byte	19
	.word	7894
	.byte	19
	.word	7906
	.byte	9,20
	.word	342
	.byte	19
	.word	377
	.byte	19
	.word	393
	.byte	19
	.word	409
	.byte	21
	.word	430
	.byte	0,5,0,0,18
	.word	7922
	.byte	19
	.word	7943
	.byte	19
	.word	7965
	.byte	19
	.word	7979
	.byte	19
	.word	7991
	.byte	5,0,18
	.word	8005
	.byte	19
	.word	8034
	.byte	19
	.word	8056
	.byte	19
	.word	8070
	.byte	19
	.word	8082
	.byte	19
	.word	8094
	.byte	9,20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,5,20
	.word	342
	.byte	19
	.word	377
	.byte	19
	.word	393
	.byte	19
	.word	409
	.byte	21
	.word	430
	.byte	0,5,0,0,18
	.word	8123
	.byte	19
	.word	8154
	.byte	5,0,18
	.word	8179
	.byte	19
	.word	8216
	.byte	5,0,18
	.word	8239
	.byte	19
	.word	8270
	.byte	5,0,18
	.word	8293
	.byte	19
	.word	8331
	.byte	5,0,18
	.word	8354
	.byte	19
	.word	8379
	.byte	19
	.word	8400
	.byte	19
	.word	8414
	.byte	19
	.word	8426
	.byte	9,20
	.word	7731
	.byte	19
	.word	7755
	.byte	19
	.word	7777
	.byte	19
	.word	7791
	.byte	19
	.word	7803
	.byte	22
	.word	7827
	.byte	20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,21
	.word	7828
	.byte	20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,21
	.word	7829
	.byte	0,0,5,0,0,18
	.word	8537
	.byte	19
	.word	8562
	.byte	19
	.word	8583
	.byte	19
	.word	8597
	.byte	19
	.word	8609
	.byte	19
	.word	8621
	.byte	9,20
	.word	4132
	.byte	19
	.word	4163
	.byte	19
	.word	4179
	.byte	22
	.word	4200
	.byte	20
	.word	4075
	.byte	19
	.word	4109
	.byte	21
	.word	4130
	.byte	0,21
	.word	4201
	.byte	0,0,5,20
	.word	4132
	.byte	19
	.word	4163
	.byte	19
	.word	4179
	.byte	22
	.word	4200
	.byte	20
	.word	4075
	.byte	19
	.word	4109
	.byte	21
	.word	4130
	.byte	0,21
	.word	4201
	.byte	0,0,5,20
	.word	4132
	.byte	19
	.word	4163
	.byte	19
	.word	4179
	.byte	22
	.word	4200
	.byte	20
	.word	4075
	.byte	19
	.word	4109
	.byte	21
	.word	4130
	.byte	0,21
	.word	4201
	.byte	0,0,5,20
	.word	4132
	.byte	19
	.word	4163
	.byte	19
	.word	4179
	.byte	22
	.word	4200
	.byte	20
	.word	4075
	.byte	19
	.word	4109
	.byte	21
	.word	4130
	.byte	0,21
	.word	4201
	.byte	0,0,5,20
	.word	8293
	.byte	19
	.word	8331
	.byte	21
	.word	8352
	.byte	0,5,20
	.word	8239
	.byte	19
	.word	8270
	.byte	21
	.word	8291
	.byte	0,5,20
	.word	4012
	.byte	19
	.word	4037
	.byte	19
	.word	4053
	.byte	21
	.word	4073
	.byte	0,5,20
	.word	4204
	.byte	19
	.word	4237
	.byte	21
	.word	4253
	.byte	0,5,20
	.word	7922
	.byte	19
	.word	7943
	.byte	19
	.word	7965
	.byte	19
	.word	7979
	.byte	19
	.word	7991
	.byte	21
	.word	8003
	.byte	0,5,20
	.word	7837
	.byte	19
	.word	7858
	.byte	19
	.word	7880
	.byte	19
	.word	7894
	.byte	19
	.word	7906
	.byte	22
	.word	7918
	.byte	20
	.word	342
	.byte	19
	.word	377
	.byte	19
	.word	393
	.byte	19
	.word	409
	.byte	21
	.word	430
	.byte	0,21
	.word	7919
	.byte	0,0,5,0,0,18
	.word	8661
	.byte	19
	.word	8691
	.byte	19
	.word	8712
	.byte	19
	.word	8726
	.byte	19
	.word	8738
	.byte	19
	.word	8750
	.byte	9,20
	.word	8005
	.byte	19
	.word	8034
	.byte	19
	.word	8056
	.byte	19
	.word	8070
	.byte	19
	.word	8082
	.byte	19
	.word	8094
	.byte	22
	.word	8118
	.byte	20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,21
	.word	8119
	.byte	20
	.word	342
	.byte	19
	.word	377
	.byte	19
	.word	393
	.byte	19
	.word	409
	.byte	21
	.word	430
	.byte	0,21
	.word	8120
	.byte	0,0,5,0,0,18
	.word	8779
	.byte	19
	.word	8808
	.byte	9,20
	.word	8123
	.byte	19
	.word	8154
	.byte	21
	.word	8177
	.byte	0,5,0,0,18
	.word	8833
	.byte	19
	.word	8859
	.byte	19
	.word	8881
	.byte	9,20
	.word	8779
	.byte	19
	.word	8808
	.byte	22
	.word	8829
	.byte	20
	.word	8123
	.byte	19
	.word	8154
	.byte	21
	.word	8177
	.byte	0,21
	.word	8830
	.byte	0,0,5,0,0,18
	.word	8898
	.byte	19
	.word	8923
	.byte	19
	.word	8937
	.byte	19
	.word	8951
	.byte	19
	.word	8963
	.byte	9,20
	.word	7731
	.byte	19
	.word	7755
	.byte	19
	.word	7777
	.byte	19
	.word	7791
	.byte	19
	.word	7803
	.byte	22
	.word	7827
	.byte	20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,21
	.word	7828
	.byte	20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,21
	.word	7829
	.byte	0,0,5,0,0,18
	.word	8991
	.byte	19
	.word	9024
	.byte	19
	.word	9038
	.byte	19
	.word	9052
	.byte	19
	.word	9064
	.byte	19
	.word	9076
	.byte	9,20
	.word	8005
	.byte	19
	.word	8034
	.byte	19
	.word	8056
	.byte	19
	.word	8070
	.byte	19
	.word	8082
	.byte	19
	.word	8094
	.byte	22
	.word	8118
	.byte	20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,21
	.word	8119
	.byte	20
	.word	342
	.byte	19
	.word	377
	.byte	19
	.word	393
	.byte	19
	.word	409
	.byte	21
	.word	430
	.byte	0,21
	.word	8120
	.byte	0,0,5,0,0,18
	.word	9105
	.byte	19
	.word	9135
	.byte	19
	.word	9149
	.byte	19
	.word	9163
	.byte	19
	.word	9175
	.byte	19
	.word	9187
	.byte	9,20
	.word	8991
	.byte	19
	.word	9024
	.byte	19
	.word	9038
	.byte	19
	.word	9052
	.byte	19
	.word	9064
	.byte	19
	.word	9076
	.byte	22
	.word	9101
	.byte	20
	.word	8005
	.byte	19
	.word	8034
	.byte	19
	.word	8056
	.byte	19
	.word	8070
	.byte	19
	.word	8082
	.byte	19
	.word	8094
	.byte	22
	.word	8118
	.byte	20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,21
	.word	8119
	.byte	20
	.word	342
	.byte	19
	.word	377
	.byte	19
	.word	393
	.byte	19
	.word	409
	.byte	21
	.word	430
	.byte	0,21
	.word	8120
	.byte	0,0,21
	.word	9102
	.byte	0,0,5,0,0,18
	.word	9216
	.byte	19
	.word	9257
	.byte	19
	.word	9271
	.byte	19
	.word	9290
	.byte	19
	.word	9304
	.byte	19
	.word	9316
	.byte	19
	.word	9329
	.byte	9,20
	.word	8123
	.byte	19
	.word	8154
	.byte	21
	.word	8177
	.byte	0,5,20
	.word	8005
	.byte	19
	.word	8034
	.byte	19
	.word	8056
	.byte	19
	.word	8070
	.byte	19
	.word	8082
	.byte	19
	.word	8094
	.byte	22
	.word	8118
	.byte	20
	.word	7579
	.byte	19
	.word	7607
	.byte	19
	.word	7621
	.byte	22
	.word	7634
	.byte	20
	.word	439
	.byte	19
	.word	474
	.byte	19
	.word	491
	.byte	19
	.word	512
	.byte	21
	.word	533
	.byte	0,21
	.word	7635
	.byte	0,0,21
	.word	8119
	.byte	20
	.word	342
	.byte	19
	.word	377
	.byte	19
	.word	393
	.byte	19
	.word	409
	.byte	21
	.word	430
	.byte	0,21
	.word	8120
	.byte	0,0,5,0,0,18
	.word	9359
	.byte	19
	.word	9388
	.byte	9,20
	.word	8123
	.byte	19
	.word	8154
	.byte	21
	.word	8177
	.byte	0,5,0,0,18
	.word	9406
	.byte	19
	.word	9445
	.byte	19
	.word	9461
	.byte	5,0,18
	.word	9639
	.byte	19
	.word	9681
	.byte	9,20
	.word	7223
	.byte	19
	.word	7260
	.byte	19
	.word	7276
	.byte	22
	.word	7292
	.byte	20
	.word	3057
	.byte	19
	.word	3107
	.byte	22
	.word	3120
	.byte	20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,21
	.word	3121
	.byte	0,0,21
	.word	7293
	.byte	0,0,5,20
	.word	7296
	.byte	19
	.word	7333
	.byte	19
	.word	7349
	.byte	22
	.word	7365
	.byte	20
	.word	3057
	.byte	19
	.word	3107
	.byte	22
	.word	3120
	.byte	20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,21
	.word	3121
	.byte	0,0,21
	.word	7366
	.byte	0,0,5,20
	.word	7369
	.byte	19
	.word	7409
	.byte	19
	.word	7426
	.byte	22
	.word	7443
	.byte	20
	.word	3057
	.byte	19
	.word	3107
	.byte	22
	.word	3120
	.byte	20
	.word	1749
	.byte	19
	.word	1786
	.byte	19
	.word	1800
	.byte	22
	.word	1821
	.byte	20
	.word	1671
	.byte	19
	.word	1712
	.byte	19
	.word	1726
	.byte	21
	.word	1747
	.byte	0,21
	.word	1822
	.byte	0,0,21
	.word	3121
	.byte	0,0,21
	.word	7444
	.byte	0,0,5,0,0,24,1,6
	.word	14835
	.byte	25
	.byte	'__codeptr',0,27,1,1
	.word	14837
	.byte	25
	.byte	'sint8',0,30,76,25
	.word	6069
	.byte	25
	.byte	'uint8',0,30,81,25
	.word	310
	.byte	25
	.byte	'sint16',0,30,86,25
	.word	3686
	.byte	25
	.byte	'uint16',0,30,91,25
	.word	228
	.byte	25
	.byte	'sint32',0,30,96,24
	.word	432
	.byte	25
	.byte	'uint32',0,30,106,24
	.word	154
	.byte	2
	.byte	'unsigned long long int',0,8,7,25
	.byte	'uint64',0,30,111,30
	.word	14948
	.byte	25
	.byte	'boolean',0,30,127,25
	.word	310
	.byte	25
	.byte	'uint8_least',0,30,137,1,25
	.word	4255
	.byte	25
	.byte	'uint16_least',0,30,147,1,25
	.word	4255
	.byte	25
	.byte	'StatusType',0,31,191,1,27
	.word	310
	.byte	25
	.byte	'Std_ReturnType',0,31,199,1,15
	.word	310
	.byte	11,31,206,1,9,8,12
	.byte	'vendorID',0
	.word	228
	.byte	2,2,35,0,12
	.byte	'moduleID',0
	.word	228
	.byte	2,2,35,2,12
	.byte	'sw_major_version',0
	.word	310
	.byte	1,2,35,4,12
	.byte	'sw_minor_version',0
	.word	310
	.byte	1,2,35,5,12
	.byte	'sw_patch_version',0
	.word	310
	.byte	1,2,35,6,0,25
	.byte	'Std_VersionInfoType',0,31,213,1,3
	.word	15092
	.byte	25
	.byte	'Dem_ClientRequestType',0,32,46,16
	.word	228
	.byte	25
	.byte	'Dem_ClientResultType',0,32,47,16
	.word	228
	.byte	25
	.byte	'Dem_ClientSelectionType',0,32,48,16
	.word	154
	.byte	25
	.byte	'Dem_ClientPriorityType',0,32,50,15
	.word	310
	.byte	25
	.byte	'Dem_ComponentIdType',0,33,20,15
	.word	310
	.byte	25
	.byte	'PduIdType',0,34,22,19
	.word	228
	.byte	25
	.byte	'PduLengthType',0,34,26,19
	.word	228
	.byte	26,35,113,9,4,27
	.byte	'TP_DATACONF',0,0,27
	.byte	'TP_DATARETRY',0,1,27
	.byte	'TP_CONFPENDING',0,2,0,25
	.byte	'TpDataStateType',0,35,118,3
	.word	15432
	.byte	25
	.byte	'Can_IdType',0,36,32,16
	.word	154
	.byte	25
	.byte	'Can_HwHandleType',0,36,43,16
	.word	228
	.byte	11,37,93,9,8,12
	.byte	'Class',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'TIN',0
	.word	310
	.byte	1,2,35,1,12
	.byte	'ReturnAddress',0
	.word	154
	.byte	4,2,35,4,0,25
	.byte	'OsTrapInfoType',0,37,97,3
	.word	15552
	.byte	14,68
	.word	154
	.byte	15,16,0,11,37,154,1,9,68,12
	.byte	'store',0
	.word	15632
	.byte	68,2,35,0,0,14,68
	.word	15641
	.byte	15,0,0,25
	.byte	'Os_JumpBufType',0,37,156,1,3
	.word	15663
	.byte	25
	.byte	'Os_StackTraceType',0,37,174,1,18
	.word	154
	.byte	11,37,175,1,9,8,12
	.byte	'sp',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'ctx',0
	.word	154
	.byte	4,2,35,4,0,25
	.byte	'Os_StackValueType',0,37,175,1,63
	.word	15723
	.byte	25
	.byte	'Os_StackSizeType',0,37,176,1,27
	.word	15723
	.byte	28,1,1,6
	.word	15808
	.byte	25
	.byte	'Os_VoidVoidFunctionType',0,37,179,1,16
	.word	15811
	.byte	25
	.byte	'ApplicationType',0,37,193,1,23
	.word	310
	.byte	29
	.byte	'Os_ApplicationConfigurationType_s',0,37,198,1,16,2,12
	.byte	'app_id',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'access',0
	.word	310
	.byte	1,2,35,1,0,25
	.byte	'Os_ApplicationConfigurationType',0,37,201,1,3
	.word	15874
	.byte	25
	.byte	'Os_CoreStateType',0,37,203,1,16
	.word	154
	.byte	25
	.byte	'AreaIdType',0,37,204,1,16
	.word	228
	.byte	25
	.byte	'Os_PeripheralAddressType',0,37,212,1,22
	.word	154
	.byte	25
	.byte	'TickType',0,37,221,1,22
	.word	154
	.byte	25
	.byte	'Os_StopwatchTickType',0,37,225,1,22
	.word	154
	.byte	25
	.byte	'Os_Lockable',0,37,234,1,18
	.word	2015
	.byte	25
	.byte	'CoreIdType',0,37,236,1,16
	.word	228
	.byte	25
	.byte	'SpinlockIdType',0,37,237,1,16
	.word	228
	.byte	26,37,239,1,9,4,27
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,27
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,25
	.byte	'TryToGetSpinlockType',0,37,239,1,74
	.word	16181
	.byte	26,37,174,2,9,4,27
	.byte	'APPLICATION_ACCESSIBLE',0,0,27
	.byte	'APPLICATION_RESTARTING',0,1,27
	.byte	'APPLICATION_TERMINATED',0,2,0,25
	.byte	'ApplicationStateType',0,37,174,2,92
	.word	16274
	.byte	30,1,1,31
	.word	310
	.byte	31
	.word	9704
	.byte	0,6
	.word	16386
	.byte	25
	.byte	'Os_FunctionEntryType',0,37,183,2,16
	.word	16400
	.byte	29
	.byte	'Os_MeterInfoType_s',0,37,193,2,16,48,12
	.byte	'elapsed',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'previous',0
	.word	154
	.byte	4,2,35,4,12
	.byte	'max',0
	.word	154
	.byte	4,2,35,8,12
	.byte	'cumulative',0
	.word	154
	.byte	4,2,35,12,12
	.byte	'stackbase',0
	.word	15723
	.byte	8,2,35,16,12
	.byte	'stackusage',0
	.word	15723
	.byte	8,2,35,24,12
	.byte	'stackmax',0
	.word	15723
	.byte	8,2,35,32,12
	.byte	'stackbudget',0
	.word	15723
	.byte	8,2,35,40,0,25
	.byte	'Os_MeterInfoType',0,37,202,2,3
	.word	16435
	.byte	6
	.word	16435
	.byte	25
	.byte	'Os_MeterInfoRefType',0,37,203,2,50
	.word	16633
	.byte	25
	.byte	'EventMaskType',0,37,206,2,15
	.word	310
	.byte	25
	.byte	'Os_imaskType',0,37,211,2,16
	.word	154
	.byte	29
	.byte	'Os_ISRDynType_s',0,37,213,2,16,48,12
	.byte	'meter',0
	.word	16435
	.byte	48,2,35,0,0,25
	.byte	'Os_ISRDynType',0,37,215,2,3
	.word	16712
	.byte	6
	.word	16712
	.byte	7
	.word	16773
	.byte	29
	.byte	'Os_ISRType_s',0,37,216,2,16,24,12
	.byte	'entry_function',0
	.word	15816
	.byte	4,2,35,0,12
	.byte	'dynamic',0
	.word	16778
	.byte	4,2,35,4,12
	.byte	'imask',0
	.word	154
	.byte	4,2,35,8,12
	.byte	'stackbudget',0
	.word	15723
	.byte	8,2,35,12,12
	.byte	'access',0
	.word	310
	.byte	1,2,35,20,12
	.byte	'application',0
	.word	310
	.byte	1,2,35,21,0,25
	.byte	'Os_ISRType',0,37,223,2,3
	.word	16783
	.byte	6
	.word	15808
	.byte	7
	.word	16783
	.byte	6
	.word	16942
	.byte	25
	.byte	'ISRType',0,37,224,2,46
	.word	16947
	.byte	25
	.byte	'Os_bitmask',0,37,239,2,22
	.word	154
	.byte	25
	.byte	'Os_pset0Type',0,37,240,2,20
	.word	154
	.byte	25
	.byte	'Os_pset1Type',0,37,241,2,20
	.word	154
	.byte	25
	.byte	'Os_pset2Type',0,37,242,2,20
	.word	154
	.byte	13,37,243,2,9,4,12
	.byte	'p0',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'p1',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'p2',0
	.word	154
	.byte	4,2,35,0,0,25
	.byte	'Os_psetType',0,37,247,2,3
	.word	17055
	.byte	13,37,249,2,9,4,12
	.byte	't0',0
	.word	154
	.byte	4,2,35,0,12
	.byte	't1',0
	.word	154
	.byte	4,2,35,0,12
	.byte	't2',0
	.word	154
	.byte	4,2,35,0,0,25
	.byte	'Os_tpmaskType',0,37,253,2,3
	.word	17119
	.byte	25
	.byte	'Os_ActivationCountType',0,37,254,2,23
	.word	310
	.byte	29
	.byte	'Os_TaskDynType_s',0,37,128,3,16,120,12
	.byte	'terminate_jump_buf',0
	.word	15672
	.byte	68,2,35,0,12
	.byte	'meter',0
	.word	16435
	.byte	48,2,35,68,12
	.byte	'activation_count',0
	.word	310
	.byte	1,2,35,116,0,25
	.byte	'Os_TaskDynType',0,37,132,3,3
	.word	17217
	.byte	14,68
	.word	15641
	.byte	15,0,0,6
	.word	17217
	.byte	7
	.word	17343
	.byte	29
	.byte	'Os_TaskType_s',0,37,134,3,16,40,12
	.byte	'dynamic',0
	.word	17348
	.byte	4,2,35,0,12
	.byte	'entry_function',0
	.word	15816
	.byte	4,2,35,4,12
	.byte	'pset',0
	.word	17055
	.byte	4,2,35,8,12
	.byte	'base_tpmask',0
	.word	17119
	.byte	4,2,35,12,12
	.byte	'tpmask',0
	.word	17119
	.byte	4,2,35,16,12
	.byte	'core_id',0
	.word	228
	.byte	2,2,35,20,12
	.byte	'index',0
	.word	154
	.byte	4,2,35,24,12
	.byte	'stackbudget',0
	.word	15723
	.byte	8,2,35,28,12
	.byte	'activation_count',0
	.word	310
	.byte	1,2,35,36,12
	.byte	'access',0
	.word	310
	.byte	1,2,35,37,12
	.byte	'application',0
	.word	310
	.byte	1,2,35,38,0,25
	.byte	'Os_TaskType',0,37,146,3,3
	.word	17353
	.byte	7
	.word	17353
	.byte	6
	.word	17603
	.byte	25
	.byte	'TaskType',0,37,147,3,47
	.word	17608
	.byte	32
	.byte	'Os_TaskStateType',0,37,155,3,6,4,27
	.byte	'SUSPENDED',0,0,27
	.byte	'READY',0,1,27
	.byte	'WAITING',0,2,27
	.byte	'RUNNING',0,3,0,25
	.byte	'TaskStateType',0,37,156,3,31
	.word	17631
	.byte	13,37,167,3,3,4,12
	.byte	'tpmask',0
	.word	17119
	.byte	4,2,35,0,0,29
	.byte	'Os_ResourceDynType_s',0,37,166,3,16,4,12
	.byte	'saved_priority',0
	.word	17718
	.byte	4,2,35,0,0,25
	.byte	'Os_ResourceDynType',0,37,170,3,3
	.word	17741
	.byte	6
	.word	17741
	.byte	7
	.word	17821
	.byte	29
	.byte	'Os_ResourceType_s',0,37,171,3,16,12,12
	.byte	'dynamic',0
	.word	17826
	.byte	4,2,35,0,12
	.byte	'tpmask',0
	.word	17119
	.byte	4,2,35,4,12
	.byte	'access',0
	.word	310
	.byte	1,2,35,8,0,25
	.byte	'Os_ResourceType',0,37,175,3,3
	.word	17831
	.byte	11,37,181,3,9,12,12
	.byte	'maxallowedvalue',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'ticksperbase',0
	.word	154
	.byte	4,2,35,4,12
	.byte	'mincycle',0
	.word	154
	.byte	4,2,35,8,0,25
	.byte	'AlarmBaseType',0,37,185,3,3
	.word	17930
	.byte	11,37,206,3,9,8,12
	.byte	'Running',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'Pending',0
	.word	310
	.byte	1,2,35,1,12
	.byte	'Delay',0
	.word	154
	.byte	4,2,35,4,0,25
	.byte	'Os_CounterStatusType',0,37,210,3,3
	.word	18025
	.byte	33
	.word	310
	.byte	1,1,6
	.word	18111
	.byte	25
	.byte	'Os_CounterIncrAdvType',0,37,217,3,22
	.word	18118
	.byte	29
	.byte	's_swd',0,37,222,3,12,4,12
	.byte	'count',0
	.word	154
	.byte	4,2,35,0,0,13,37,221,3,3,4,12
	.byte	'sw',0
	.word	18154
	.byte	4,2,35,0,0,29
	.byte	'Os_CounterDynType_s',0,37,220,3,16,4,12
	.byte	'type_dependent',0
	.word	18182
	.byte	4,2,35,0,0,25
	.byte	'Os_CounterDynType',0,37,226,3,3
	.word	18201
	.byte	6
	.word	18201
	.byte	7
	.word	18279
	.byte	29
	.byte	'Os_CounterType_s',0,37,227,3,16,28,12
	.byte	'dynamic',0
	.word	18284
	.byte	4,2,35,0,12
	.byte	'advincr',0
	.word	18123
	.byte	4,2,35,4,12
	.byte	'base',0
	.word	17930
	.byte	12,2,35,8,12
	.byte	'core',0
	.word	9704
	.byte	4,2,35,20,12
	.byte	'access',0
	.word	310
	.byte	1,2,35,24,12
	.byte	'application',0
	.word	310
	.byte	1,2,35,25,0,25
	.byte	'Os_CounterType',0,37,234,3,3
	.word	18289
	.byte	6
	.word	18111
	.byte	7
	.word	18289
	.byte	6
	.word	18441
	.byte	25
	.byte	'CounterType',0,37,235,3,52
	.word	18446
	.byte	32
	.byte	'Os_ScheduleTableStatusType',0,37,240,3,6,4,27
	.byte	'SCHEDULETABLE_STOPPED',0,0,27
	.byte	'SCHEDULETABLE_NEXT',0,1,27
	.byte	'SCHEDULETABLE_WAITING',0,2,27
	.byte	'SCHEDULETABLE_RUNNING',0,3,27
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,25
	.byte	'ScheduleTableStatusType',0,37,241,3,41
	.word	18472
	.byte	7
	.word	.L153-.L33
	.byte	6
	.word	18672
	.byte	25
	.byte	'ScheduleTableType',0,37,128,4,58
	.word	18677
	.byte	29
	.byte	'Os_ScheduleTableDynType_s',0,37,130,4,16,16,12
	.byte	'match',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'next',0
	.word	18682
	.byte	4,2,35,4,12
	.byte	'state',0
	.word	18472
	.byte	4,2,35,8,12
	.byte	'config',0
	.word	228
	.byte	2,2,35,12,0,6
	.word	18709
	.byte	7
	.word	18802
.L153:
	.byte	29
	.byte	'Os_ScheduleTableType_s',0,37,247,3,16,16,12
	.byte	'dynamic',0
	.word	18807
	.byte	4,2,35,0,12
	.byte	'counter',0
	.word	18451
	.byte	4,2,35,4,12
	.byte	'repeat',0
	.word	310
	.byte	1,2,35,8,12
	.byte	'config',0
	.word	228
	.byte	2,2,35,10,12
	.byte	'initial',0
	.word	310
	.byte	1,2,35,12,12
	.byte	'access',0
	.word	310
	.byte	1,2,35,13,12
	.byte	'application',0
	.word	310
	.byte	1,2,35,14,0,25
	.byte	'Os_ScheduleTableType',0,37,255,3,3
	.word	18812
	.byte	7
	.word	18812
	.byte	6
	.word	18992
	.byte	7
	.word	18289
	.byte	6
	.word	19002
	.byte	10
	.word	16116
	.byte	10
	.word	17055
	.byte	10
	.word	16952
	.byte	10
	.word	17613
	.byte	10
	.word	17119
	.byte	10
	.word	310
	.byte	10
	.word	17613
	.byte	29
	.byte	'Os_ControlledCoreType_s',0,37,251,6,16,112,12
	.byte	'TrapInfo',0
	.word	15552
	.byte	8,2,35,0,12
	.byte	'lock_taskaccess',0
	.word	19012
	.byte	4,2,35,8,12
	.byte	'ReadyTasks',0
	.word	19017
	.byte	4,2,35,12,12
	.byte	'RunningISR',0
	.word	19022
	.byte	4,2,35,16,12
	.byte	'RunningTask',0
	.word	19027
	.byte	4,2,35,20,12
	.byte	'RunningTPMask',0
	.word	19032
	.byte	4,2,35,24,12
	.byte	'CurrentMeteredObject',0
	.word	16638
	.byte	4,2,35,28,12
	.byte	'IdleMeter',0
	.word	16435
	.byte	48,2,35,32,12
	.byte	'AppAccess',0
	.word	310
	.byte	1,2,35,80,12
	.byte	'AppOverride',0
	.word	19037
	.byte	1,2,35,81,12
	.byte	'GetStackValueAdjust',0
	.word	15723
	.byte	8,2,35,84,12
	.byte	'InErrorHook',0
	.word	310
	.byte	1,2,35,92,12
	.byte	'ChainTaskRef',0
	.word	19042
	.byte	4,2,35,96,12
	.byte	'GetStackUsageAdjust',0
	.word	15723
	.byte	8,2,35,100,12
	.byte	'InProtectionHook',0
	.word	310
	.byte	1,2,35,108,12
	.byte	'CoreIsActive',0
	.word	310
	.byte	1,2,35,109,12
	.byte	'InShutdownHook',0
	.word	310
	.byte	1,2,35,110,0,25
	.byte	'Os_ControlledCoreType',0,37,141,7,3
	.word	19047
	.byte	6
	.word	154
	.byte	7
	.word	16783
	.byte	6
	.word	19503
	.byte	7
	.word	17353
	.byte	6
	.word	19513
	.byte	6
	.word	16435
	.byte	29
	.byte	'Os_AnyCoreType_s',0,37,151,7,16,96,12
	.byte	'DisableAllImask',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'SuspendAllImask',0
	.word	154
	.byte	4,2,35,4,12
	.byte	'SuspendOSImask',0
	.word	154
	.byte	4,2,35,8,12
	.byte	'DisableAllCount',0
	.word	154
	.byte	4,2,35,12,12
	.byte	'SuspendAllCount',0
	.word	154
	.byte	4,2,35,16,12
	.byte	'SuspendOSCount',0
	.word	154
	.byte	4,2,35,20,12
	.byte	'RestartJumpBuf',0
	.word	15672
	.byte	68,2,35,24,12
	.byte	'Restartable',0
	.word	310
	.byte	1,2,35,92,0,25
	.byte	'Os_AnyCoreType',0,37,160,7,3
	.word	19528
	.byte	25
	.byte	'Can_TxObjPriorityClassType',0,38,219,3,16
	.word	154
	.byte	29
	.byte	'Can_TxHwObjectConfigType',0,38,231,3,16,8,12
	.byte	'MsgObjId',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'HwControllerId',0
	.word	310
	.byte	1,2,35,1,12
	.byte	'TxObjPriorityClass',0
	.word	154
	.byte	4,2,35,4,0,25
	.byte	'Can_TxHwObjectConfigType',0,38,252,3,3
	.word	19805
	.byte	29
	.byte	'Can_RxHwObjectConfigType',0,38,129,4,16,12,12
	.byte	'MaskRef',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'MsgId',0
	.word	154
	.byte	4,2,35,4,12
	.byte	'MsgObjId',0
	.word	310
	.byte	1,2,35,8,12
	.byte	'HwControllerId',0
	.word	310
	.byte	1,2,35,9,0,25
	.byte	'Can_RxHwObjectConfigType',0,38,147,4,3
	.word	19941
	.byte	29
	.byte	'Can_ControllerMOMapConfigType',0,38,181,4,16,4,12
	.byte	'ControllerMOMap',0
	.word	9481
	.byte	4,2,35,0,0,25
	.byte	'Can_ControllerMOMapConfigType',0,38,184,4,3
	.word	20081
	.byte	29
	.byte	'Can_NPCRValueType',0,38,188,4,16,2,12
	.byte	'Can_NPCRValue',0
	.word	228
	.byte	2,2,35,0,0,25
	.byte	'Can_NPCRValueType',0,38,191,4,3
	.word	20182
	.byte	29
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,38,194,4,16,8,12
	.byte	'CanControllerBaudrate',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'CanControllerBaudrateCfg',0
	.word	228
	.byte	2,2,35,4,0,25
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,38,198,4,3
	.word	20257
	.byte	7
	.word	20257
	.byte	6
	.word	20422
	.byte	29
	.byte	'Can_BaudrateConfigPtrType',0,38,201,4,16,4,12
	.byte	'Can_kBaudrateConfigPtr',0
	.word	20427
	.byte	4,2,35,0,0,25
	.byte	'Can_BaudrateConfigPtrType',0,38,204,4,3
	.word	20432
	.byte	29
	.byte	'Can_EventHandlingType',0,38,226,4,16,4,12
	.byte	'CanEventType',0
	.word	9481
	.byte	4,2,35,0,0,25
	.byte	'Can_EventHandlingType',0,38,229,4,3
	.word	20532
	.byte	25
	.byte	'Rte_TransformerErrorCode',0,39,130,1,15
	.word	310
	.byte	25
	.byte	'Rte_TransformerClass',0,39,131,1,15
	.word	310
	.byte	11,39,168,1,9,12,12
	.byte	'in',0
	.word	9704
	.byte	4,2,35,0,12
	.byte	'out',0
	.word	9704
	.byte	4,2,35,4,12
	.byte	'used',0
	.word	228
	.byte	2,2,35,8,12
	.byte	'lost_data',0
	.word	310
	.byte	1,2,35,10,0,25
	.byte	'Rte_QDynType',0,39,173,1,3
	.word	20678
	.byte	26,39,175,1,9,4,27
	.byte	'RTE_DRA',0,0,27
	.byte	'RTE_WOWP',0,1,27
	.byte	'RTE_TASK',0,2,27
	.byte	'RTE_ARE',0,3,27
	.byte	'RTE_EV',0,4,27
	.byte	'RTE_MSI',0,5,0,25
	.byte	'Rte_NotificationType',0,39,182,1,3
	.word	20765
	.byte	14,128,8
	.word	310
	.byte	15,255,7,0,25
	.byte	'Impl_NVM_DstPtrType_1024',0,40,50,15
	.word	20863
	.byte	25
	.byte	'CanIf_u32_impl',0,40,69,16
	.word	154
	.byte	25
	.byte	'CanIf_u16_impl',0,40,71,16
	.word	228
	.byte	25
	.byte	'CanIf_u8_impl',0,40,73,15
	.word	310
	.byte	25
	.byte	'CanIf_ControllerModeType_Enum_impl',0,40,88,15
	.word	310
	.byte	25
	.byte	'CanIf_PduModeType_Enum_impl',0,40,90,15
	.word	310
	.byte	11,40,92,9,2,12
	.byte	'DeviceMode',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'ChannelMode',0
	.word	310
	.byte	1,2,35,1,0,25
	.byte	'CanIf_ControllerStateType_struct_impl',0,40,95,3
	.word	21054
	.byte	25
	.byte	'CanIf_NotifStatusType_Enum_impl',0,40,100,15
	.word	310
	.byte	25
	.byte	'CanSM_boolean_Impl',0,40,120,15
	.word	310
	.byte	25
	.byte	'CanSM_u8_Impl',0,40,123,15
	.word	310
	.byte	25
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,40,128,1,15
	.word	310
	.byte	25
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,40,132,1,15
	.word	310
	.byte	25
	.byte	'CanSM_u16_Impl',0,40,136,1,16
	.word	228
	.byte	25
	.byte	'CanSM_TimerStateType_Enum_impl',0,40,138,1,15
	.word	310
	.byte	11,40,140,1,9,4,12
	.byte	'cntTick_u16',0
	.word	228
	.byte	2,2,35,0,12
	.byte	'stTimer',0
	.word	310
	.byte	1,2,35,2,0,25
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,40,143,1,3
	.word	21395
	.byte	25
	.byte	'Com_impl_u16',0,40,154,1,16
	.word	228
	.byte	25
	.byte	'Com_impl_u8',0,40,157,1,15
	.word	310
	.byte	25
	.byte	'ComM_uint32_Impl',0,40,173,1,16
	.word	154
	.byte	25
	.byte	'ComM_uint16_Impl',0,40,175,1,16
	.word	228
	.byte	25
	.byte	'ComM_uint8_Impl',0,40,177,1,15
	.word	310
	.byte	25
	.byte	'ComM_bool_Impl',0,40,179,1,15
	.word	310
	.byte	11,40,181,1,9,24,12
	.byte	'ChannelState_e',0
	.word	154
	.byte	4,2,35,0,12
	.byte	'LightTimeoutCtr_u32',0
	.word	154
	.byte	4,2,35,4,12
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	228
	.byte	2,2,35,8,12
	.byte	'ChannelMode_u8',0
	.word	310
	.byte	1,2,35,10,12
	.byte	'BusSmMode_u8',0
	.word	310
	.byte	1,2,35,11,12
	.byte	'UserRequestCtr_u8',0
	.word	310
	.byte	1,2,35,12,12
	.byte	'PassiveRequestState_u8',0
	.word	310
	.byte	1,2,35,13,12
	.byte	'PncRequestCtr_u8',0
	.word	310
	.byte	1,2,35,14,12
	.byte	'InhibitionReqStatus_u8',0
	.word	310
	.byte	1,2,35,15,12
	.byte	'NmNetworkRequestStatus_b',0
	.word	310
	.byte	1,2,35,16,12
	.byte	'DiagnosticRequestState_b',0
	.word	310
	.byte	1,2,35,17,12
	.byte	'CommunicationAllowed_b',0
	.word	310
	.byte	1,2,35,18,12
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	310
	.byte	1,2,35,19,12
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	310
	.byte	1,2,35,20,12
	.byte	'NmNetworkModeStatus_b',0
	.word	310
	.byte	1,2,35,21,0,25
	.byte	'ComM_ChannelStruct_Impl',0,40,197,1,3
	.word	21627
	.byte	11,40,206,1,9,10,12
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	228
	.byte	2,2,35,0,12
	.byte	'LimitToNoComCtr_u16',0
	.word	228
	.byte	2,2,35,2,12
	.byte	'RequestedUserMode_t',0
	.word	310
	.byte	1,2,35,4,12
	.byte	'IndicatedUserMode_t',0
	.word	310
	.byte	1,2,35,5,12
	.byte	'numChannelsInFullCom_u8',0
	.word	310
	.byte	1,2,35,6,12
	.byte	'numChannelsInSilentCom_u8',0
	.word	310
	.byte	1,2,35,7,12
	.byte	'numChannelsInNoCom_u8',0
	.word	310
	.byte	1,2,35,8,0,25
	.byte	'ComM_UserStruct_Impl',0,40,214,1,3
	.word	22131
	.byte	25
	.byte	'Dcm_IOOperationResponseType',0,40,252,1,15
	.word	310
	.byte	25
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	40,138,2,15
	.word	310
	.byte	25
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,40,146,2,15
	.word	310
	.byte	25
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,40,150,2,15
	.word	310
	.byte	25
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,40,154,2,15
	.word	310
	.byte	25
	.byte	'Dem_DTCFormatType',0,40,160,2,15
	.word	310
	.byte	25
	.byte	'Dem_DTCOriginType',0,40,162,2,15
	.word	310
	.byte	25
	.byte	'Dem_EventIdType',0,40,168,2,16
	.word	228
	.byte	25
	.byte	'Dem_EventStatusType',0,40,170,2,15
	.word	310
	.byte	25
	.byte	'Dem_InitMonitorReasonType',0,40,176,2,15
	.word	310
	.byte	25
	.byte	'Dem_OperationCycleIdType',0,40,179,2,15
	.word	310
	.byte	25
	.byte	'NvM_BlockIdType',0,40,215,2,16
	.word	228
	.byte	25
	.byte	'NvM_RequestResultType',0,40,225,2,15
	.word	310
	.byte	25
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,40,243,3,34
	.word	20874
	.byte	14,128,8
	.word	310
	.byte	15,255,7,0,25
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,40,246,3,34
	.word	20874
	.byte	25
	.byte	'Dem_DTCGroupIdType',0,41,49,15
	.word	310
	.byte	25
	.byte	'Dem_DtcIdType',0,41,50,16
	.word	228
	.byte	25
	.byte	'Dem_ClientIdType',0,41,53,15
	.word	310
	.byte	25
	.byte	'Dem_DtcCodeType',0,41,55,16
	.word	154
	.byte	25
	.byte	'Dem_boolean_least',0,41,60,17
	.word	310
	.byte	25
	.byte	'Dem_EventCategoryType',0,41,62,15
	.word	310
	.byte	25
	.byte	'Dem_ReturnGetExtendedDataRecordByDTCType',0,41,110,15
	.word	310
	.byte	25
	.byte	'Dem_ReturnGetSizeOfExtendedDataRecordByDTCType',0,41,132,1,15
	.word	310
	.byte	25
	.byte	'Dem_ReturnGetFreezeFrameDataByDTCType',0,41,154,1,15
	.word	310
	.byte	25
	.byte	'Dem_ReturnGetSizeOfFreezeFrameByDTCType',0,41,176,1,15
	.word	310
	.byte	25
	.byte	'Dem_DTCSeverityType',0,41,217,1,15
	.word	310
	.byte	25
	.byte	'Dem_DebugDataType',0,41,131,3,16
	.word	154
	.byte	25
	.byte	'Dem_DTCKindType',0,41,145,3,16
	.word	310
	.byte	25
	.byte	'Dem_TriggerType',0,41,167,3,15
	.word	310
	.byte	25
	.byte	'rba_BswSrv_uint64',0,1,66,28
	.word	14948
	.byte	25
	.byte	'Dem_EventIdIterator',0,4,27,22
	.word	4255
	.byte	25
	.byte	'Dem_DtcIdIterator',0,4,197,1,22
	.word	4255
	.byte	25
	.byte	'Dem_DtcGroupIdIterator',0,4,230,1,21
	.word	4255
	.byte	7
	.word	228
	.byte	6
	.word	23756
	.byte	11,4,171,2,9,8,12
	.byte	'it',0
	.word	23761
	.byte	4,2,35,0,12
	.byte	'end',0
	.word	23761
	.byte	4,2,35,4,0,25
	.byte	'Dem_EventIdListIterator',0,4,174,2,3
	.word	23766
	.byte	11,4,213,2,9,4,12
	.byte	'it',0
	.word	228
	.byte	2,2,35,0,12
	.byte	'end',0
	.word	228
	.byte	2,2,35,2,0,25
	.byte	'Dem_DtcIdListIterator',0,4,216,2,3
	.word	23831
	.byte	25
	.byte	'Dem_EvBuffEnvDataAlignedType',0,28,47,3
	.word	9490
	.byte	25
	.byte	'Dem_EvBuffEvent',0,28,75,2
	.word	9538
	.byte	25
	.byte	'Dem_EnCoList',0,42,31,15
	.word	310
	.byte	25
	.byte	'Dem_OperationCycleList',0,43,23,15
	.word	310
	.byte	25
	.byte	'Dem_StoCoList',0,44,32,15
	.word	310
	.byte	25
	.byte	'Dem_EvtStateType',0,45,151,1,15
	.word	310
	.byte	26,46,31,9,4,27
	.byte	'MEMIF_JOB_OK',0,0,27
	.byte	'MEMIF_JOB_FAILED',0,1,27
	.byte	'MEMIF_JOB_PENDING',0,2,27
	.byte	'MEMIF_JOB_CANCELED',0,3,27
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,27
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,25
	.byte	'MemIf_JobResultType',0,46,39,2
	.word	24055
	.byte	26,47,49,9,4,27
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,27
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,27
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,27
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,27
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,27
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,27
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,25
	.byte	'NvM_Prv_Activities_ten',0,47,58,3
	.word	24213
	.byte	26,47,104,9,4,27
	.byte	'NvM_Prv_idJob_Idle_e',0,0,27
	.byte	'NvM_Prv_idJob_Read_e',0,1,27
	.byte	'NvM_Prv_idJob_Write_e',0,2,27
	.byte	'NvM_Prv_idJob_Erase_e',0,3,27
	.byte	'NvM_Prv_idJob_Restore_e',0,4,27
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,27
	.byte	'NvM_Prv_idJob_Validate_e',0,6,27
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,27
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,27
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,27
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,27
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,27
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,27
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,25
	.byte	'NvM_Prv_idJob_ten',0,47,115,3
	.word	24454
	.byte	25
	.byte	'NvM_Prv_ServiceBit_tuo',0,47,168,1,16
	.word	228
	.byte	25
	.byte	'NvM_Prv_idService_tuo',0,47,173,1,15
	.word	310
	.byte	25
	.byte	'NvM_Prv_idQueue_tuo',0,47,206,1,15
	.word	310
	.byte	11,47,210,1,9,12,12
	.byte	'idService_uo',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'idBlock_uo',0
	.word	228
	.byte	2,2,35,2,12
	.byte	'ServiceBit_uo',0
	.word	228
	.byte	2,2,35,4,12
	.byte	'BlockData_pv',0
	.word	9704
	.byte	4,2,35,8,0,25
	.byte	'NvM_Prv_QueueEntry_tst',0,47,225,1,3
	.word	25011
	.byte	11,47,227,1,9,20,12
	.byte	'idJob_en',0
	.word	24454
	.byte	4,2,35,0,12
	.byte	'idBlock_uo',0
	.word	228
	.byte	2,2,35,4,12
	.byte	'RamBlock_pu8',0
	.word	327
	.byte	4,2,35,8,12
	.byte	'idxDataset_u8',0
	.word	310
	.byte	1,2,35,12,12
	.byte	'Result_en',0
	.word	24055
	.byte	4,2,35,16,0,25
	.byte	'NvM_Prv_JobData_tst',0,47,240,1,3
	.word	25137
	.byte	25
	.byte	'Dem_EvMemOccurrenceCounterType',0,19,90,21
	.word	310
	.byte	25
	.byte	'Dem_EvMemAgingCounterType',0,19,99,21
	.word	310
	.byte	25
	.byte	'Dem_EvMemHdrType',0,19,141,1,4
	.word	5080
	.byte	25
	.byte	'Dem_EvMemEventMemoryType',0,19,213,1,4
	.word	5110
	.byte	14,5
	.word	310
	.byte	15,4,0,14,10
	.word	228
	.byte	15,4,0,11,48,9,9,18,12
	.byte	'OperationCycleStates',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'OperationCycleQualified',0
	.word	310
	.byte	1,2,35,1,12
	.byte	'Overflow',0
	.word	25408
	.byte	5,2,35,2,12
	.byte	'DtcIdsByOccurrenceTime',0
	.word	25417
	.byte	10,2,35,8,0,25
	.byte	'Dem_GenericNvDataType',0,48,24,4
	.word	25426
	.byte	25
	.byte	'Dem_NvmBlockIdType',0,49,14,34
	.word	310
	.byte	13,49,16,9,20,12
	.byte	'evMemData',0
	.word	5110
	.byte	20,2,35,0,12
	.byte	'genericNvData',0
	.word	25426
	.byte	18,2,35,0,0,25
	.byte	'Dem_NvMStorageBufferData',0,49,37,3
	.word	25602
	.byte	25
	.byte	'Dem_NvmBlockStatusType',0,49,59,15
	.word	310
	.byte	25
	.byte	'Dem_NvmResultType',0,49,78,31
	.word	310
	.byte	6
	.word	310
	.byte	34
	.word	310
	.byte	1,1,31
	.word	25740
	.byte	0,6
	.word	25745
	.byte	25
	.byte	'Dem_EvtClearAllowedFncType',0,12,12,26
	.word	25758
	.byte	11,12,31,9,2,12
	.byte	'dataDataContainer_2',0
	.word	228
	.byte	2,2,35,0,0,25
	.byte	'Dem_EvtParam_16Type',0,12,34,3
	.word	25798
	.byte	14,12
	.word	25798
	.byte	15,5,0,7
	.word	25861
	.byte	35
	.byte	'Dem_EvtParam_16',0,12,38,34
	.word	25870
	.byte	1,1,34
	.word	310
	.byte	1,1,31
	.word	310
	.byte	0,6
	.word	25901
	.byte	25
	.byte	'Dem_InitMForEAllowedFncType',0,13,38,27
	.word	25914
	.byte	11,13,46,9,4,12
	.byte	'state',0
	.word	310
	.byte	1,2,35,0,12
	.byte	'debounceLevel',0
	.word	3686
	.byte	2,2,35,2,0,25
	.byte	'Dem_EvtState',0,13,50,3
	.word	25955
	.byte	14,24
	.word	25955
	.byte	15,5,0,35
	.byte	'Dem_AllEventsState',0,13,152,1,1
	.word	26020
	.byte	1,1,25
	.byte	'Dem_EnvTriggerParamType',0,14,14,3
	.word	8454
	.byte	34
	.word	4255
	.byte	1,1,31
	.word	228
	.byte	31
	.word	25740
	.byte	31
	.word	9714
	.byte	31
	.word	228
	.byte	0,6
	.word	26091
	.byte	25
	.byte	'Dem_DebFilter',0,50,12,23
	.word	26119
	.byte	2
	.byte	'long int',0,4,5,6
	.word	26146
	.byte	30,1,1,31
	.word	9714
	.byte	31
	.word	228
	.byte	31
	.word	26158
	.byte	31
	.word	26158
	.byte	0,6
	.word	26163
	.byte	25
	.byte	'Dem_DebGetLimits',0,50,13,23
	.word	26187
	.byte	30,1,1,31
	.word	228
	.byte	31
	.word	9714
	.byte	31
	.word	228
	.byte	0,6
	.word	26217
	.byte	25
	.byte	'Dem_DebCyclic',0,50,14,16
	.word	26236
	.byte	25
	.byte	'Dem_DebouncedActionType',0,50,35,21
	.word	4255
	.byte	25
	.byte	'Dem_InternalEnvData',0,23,25,3
	.word	7643
	.byte	25
	.byte	'Dem_ReadExternalDataElementFnc',0,22,11,26
	.word	25758
	.byte	7
	.word	7643
	.byte	6
	.word	26362
	.byte	34
	.word	310
	.byte	1,1,31
	.word	25740
	.byte	31
	.word	26367
	.byte	0,6
	.word	26372
	.byte	25
	.byte	'Dem_ReadInternalDataElementFnc',0,22,12,26
	.word	26390
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L34:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,38,0,73
	.byte	19,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,9,11,1,0,0,10,53,0,73,19,0,0,11,19,1,58,15,59
	.byte	15,57,15,11,15,0,0,12,13,0,3,8,73,19,11,15,56,9,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15,73
	.byte	19,0,0,15,33,0,47,15,0,0,16,59,0,3,8,0,0,17,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0
	.byte	0,18,46,1,49,19,0,0,19,5,0,49,19,0,0,20,29,1,49,19,0,0,21,11,0,49,19,0,0,22,11,1,49,19,0,0,23,46,1,3,8
	.byte	58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,24,21,0,54,15,0,0,25,22,0,3,8,58,15,59,15,57,15,73,19,0
	.byte	0,26,4,1,58,15,59,15,57,15,11,15,0,0,27,40,0,3,8,28,13,0,0,28,21,0,54,15,39,12,0,0,29,19,1,3,8,58,15,59
	.byte	15,57,15,11,15,0,0,30,21,1,54,15,39,12,0,0,31,5,0,73,19,0,0,32,4,1,3,8,58,15,59,15,57,15,11,15,0,0,33
	.byte	21,0,73,19,54,15,39,12,0,0,34,21,1,73,19,54,15,39,12,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60
	.byte	12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L35:
	.word	.L155-.L154
.L154:
	.half	3
	.word	.L157-.L156
.L156:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_InternalEnvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvExtendedDataRec.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDid.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvFFRecNumeration.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffDistributor.c',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0,0
.L157:
.L155:
	.sdecl	'.debug_info',debug,cluster('Dem_EvBuffDistributorMainFunction')
	.sect	'.debug_info'
.L36:
	.word	1161
	.half	3
	.word	.L37
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffDistributor.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L39,.L38
	.byte	2
	.word	.L32
	.byte	3
	.byte	'Dem_EvBuffDistributorMainFunction',0,1,88,6,1,1,1
	.word	.L31,.L45,.L30
	.byte	4
	.word	.L31,.L45
	.byte	5
	.byte	'performDistribution',0,1,90,20
	.word	.L46,.L47
	.byte	5
	.byte	'idx',0,1,91,9
	.word	.L48,.L49
	.byte	5
	.byte	'fEvent',0,1,92,25
	.word	.L50,.L51
	.byte	6
	.word	.L52,.L53,.L54
	.byte	7
	.word	.L55,.L56
	.byte	7
	.word	.L57,.L58
	.byte	7
	.word	.L59,.L60
	.byte	8
	.word	.L61,.L53,.L54
	.byte	0,6
	.word	.L62,.L63,.L8
	.byte	7
	.word	.L64,.L65
	.byte	7
	.word	.L66,.L67
	.byte	9
	.word	.L68,.L63,.L8
	.byte	6
	.word	.L69,.L70,.L8
	.byte	7
	.word	.L71,.L72
	.byte	7
	.word	.L73,.L74
	.byte	7
	.word	.L75,.L76
	.byte	9
	.word	.L77,.L70,.L8
	.byte	6
	.word	.L78,.L79,.L80
	.byte	7
	.word	.L81,.L82
	.byte	7
	.word	.L83,.L84
	.byte	9
	.word	.L85,.L79,.L80
	.byte	5
	.byte	'bit2shift',0,2,38,11
	.word	.L46,.L86
	.byte	0,0,6
	.word	.L87,.L7,.L8
	.byte	7
	.word	.L88,.L89
	.byte	7
	.word	.L90,.L91
	.byte	9
	.word	.L92,.L7,.L8
	.byte	5
	.byte	'bit2shift',0,2,44,11
	.word	.L46,.L93
	.byte	0,0,0,0,0,0,6
	.word	.L94,.L95,.L3
	.byte	7
	.word	.L96,.L97
	.byte	9
	.word	.L98,.L95,.L3
	.byte	5
	.byte	'envData',0,1,27,18
	.word	.L99,.L100
	.byte	6
	.word	.L101,.L12,.L11
	.byte	7
	.word	.L102,.L103
	.byte	7
	.word	.L104,.L105
	.byte	9
	.word	.L106,.L12,.L11
	.byte	6
	.word	.L107,.L12,.L108
	.byte	7
	.word	.L109,.L110
	.byte	9
	.word	.L111,.L12,.L108
	.byte	6
	.word	.L112,.L113,.L14
	.byte	7
	.word	.L114,.L115
	.byte	7
	.word	.L116,.L117
	.byte	9
	.word	.L118,.L113,.L14
	.byte	6
	.word	.L119,.L113,.L13
	.byte	7
	.word	.L120,.L121
	.byte	7
	.word	.L122,.L123
	.byte	8
	.word	.L124,.L113,.L13
	.byte	0,0,0,0,0,0,0,6
	.word	.L125,.L19,.L18
	.byte	7
	.word	.L126,.L127
	.byte	7
	.word	.L128,.L129
	.byte	9
	.word	.L130,.L19,.L18
	.byte	6
	.word	.L107,.L19,.L131
	.byte	7
	.word	.L109,.L110
	.byte	9
	.word	.L111,.L19,.L131
	.byte	6
	.word	.L112,.L132,.L21
	.byte	7
	.word	.L114,.L115
	.byte	7
	.word	.L116,.L117
	.byte	9
	.word	.L118,.L132,.L21
	.byte	6
	.word	.L119,.L132,.L20
	.byte	7
	.word	.L120,.L121
	.byte	7
	.word	.L122,.L123
	.byte	8
	.word	.L124,.L132,.L20
	.byte	0,0,0,0,0,0,0,6
	.word	.L133,.L25,.L3
	.byte	7
	.word	.L134,.L135
	.byte	7
	.word	.L136,.L137
	.byte	9
	.word	.L138,.L25,.L3
	.byte	6
	.word	.L107,.L25,.L139
	.byte	7
	.word	.L109,.L110
	.byte	9
	.word	.L111,.L25,.L139
	.byte	6
	.word	.L112,.L140,.L27
	.byte	7
	.word	.L114,.L115
	.byte	7
	.word	.L116,.L117
	.byte	9
	.word	.L118,.L140,.L27
	.byte	6
	.word	.L119,.L140,.L26
	.byte	7
	.word	.L120,.L121
	.byte	7
	.word	.L122,.L123
	.byte	8
	.word	.L124,.L140,.L26
	.byte	0,0,0,0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvBuffDistributorMainFunction')
	.sect	'.debug_abbrev'
.L37:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvBuffDistributorMainFunction')
	.sect	'.debug_line'
.L38:
	.word	.L159-.L158
.L158:
	.half	3
	.word	.L161-.L160
.L160:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffDistributor.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0,0
.L161:
	.byte	5,6,7,0,5,2
	.word	.L31
	.byte	3,215,0,1,5,40,9
	.half	.L142-.L31
	.byte	3,2,1,5,7,9
	.half	.L143-.L142
	.byte	3,15,1,5,23,9
	.half	.L162-.L143
	.byte	3,2,1,5,31,9
	.half	.L163-.L162
	.byte	3,1,1,5,29,9
	.half	.L164-.L163
	.byte	1,5,28,9
	.half	.L2-.L164
	.byte	3,4,1,5,32,9
	.half	.L4-.L2
	.byte	3,7,1,5,10,9
	.half	.L144-.L4
	.byte	1,5,3,9
	.half	.L146-.L144
	.byte	3,2,1,5,24,7,9
	.half	.L165-.L146
	.byte	3,2,1,5,32,9
	.half	.L166-.L165
	.byte	3,1,1,5,30,9
	.half	.L167-.L166
	.byte	1,5,31,9
	.half	.L168-.L167
	.byte	3,127,1,5,4,9
	.half	.L5-.L168
	.byte	3,5,1,4,3,5,49,9
	.half	.L53-.L5
	.byte	3,151,127,1,4,1,5,59,9
	.half	.L54-.L53
	.byte	3,236,0,1,5,70,9
	.half	.L169-.L54
	.byte	1,4,4,5,32,9
	.half	.L63-.L169
	.byte	3,128,4,1,5,50,9
	.half	.L170-.L63
	.byte	1,5,67,9
	.half	.L171-.L170
	.byte	1,4,2,5,5,9
	.half	.L70-.L171
	.byte	3,175,123,1,5,21,7,9
	.half	.L79-.L70
	.byte	3,116,1,5,6,9
	.half	.L148-.L79
	.byte	3,1,1,5,36,9
	.half	.L172-.L148
	.byte	1,5,13,9
	.half	.L149-.L172
	.byte	1,5,53,9
	.half	.L80-.L149
	.byte	3,13,1,5,21,9
	.half	.L7-.L80
	.byte	3,120,1,5,6,9
	.half	.L150-.L7
	.byte	3,1,1,5,47,9
	.half	.L173-.L150
	.byte	1,5,26,9
	.half	.L151-.L173
	.byte	1,5,13,9
	.half	.L174-.L151
	.byte	1,4,1,5,26,9
	.half	.L8-.L174
	.byte	3,216,0,1,5,3,9
	.half	.L6-.L8
	.byte	3,4,1,5,40,7,9
	.half	.L175-.L6
	.byte	3,2,1,5,15,9
	.half	.L95-.L175
	.byte	3,148,127,1,5,12,9
	.half	.L176-.L95
	.byte	1,5,31,7,9
	.half	.L177-.L176
	.byte	3,1,1,5,41,7,9
	.half	.L10-.L177
	.byte	3,10,1,4,5,5,32,9
	.half	.L12-.L10
	.byte	3,36,1,5,47,9
	.half	.L178-.L12
	.byte	1,5,53,9
	.half	.L179-.L178
	.byte	1,5,75,9
	.half	.L180-.L179
	.byte	1,4,6,5,29,9
	.half	.L113-.L180
	.byte	3,112,1,5,46,9
	.half	.L181-.L113
	.byte	1,5,5,9
	.half	.L182-.L181
	.byte	1,5,74,9
	.half	.L13-.L182
	.byte	3,5,1,5,5,9
	.half	.L183-.L13
	.byte	1,4,5,5,2,9
	.half	.L14-.L183
	.byte	3,11,1,4,7,5,4,9
	.half	.L15-.L14
	.byte	3,22,1,5,39,7,9
	.half	.L108-.L15
	.byte	3,2,1,5,67,9
	.half	.L184-.L108
	.byte	1,4,1,5,15,9
	.half	.L11-.L184
	.byte	3,71,1,5,12,9
	.half	.L185-.L11
	.byte	1,5,31,7,9
	.half	.L186-.L185
	.byte	3,1,1,5,41,7,9
	.half	.L17-.L186
	.byte	3,10,1,4,5,5,32,9
	.half	.L19-.L17
	.byte	3,22,1,5,47,9
	.half	.L187-.L19
	.byte	1,5,53,9
	.half	.L188-.L187
	.byte	1,5,75,9
	.half	.L189-.L188
	.byte	1,4,6,5,29,9
	.half	.L132-.L189
	.byte	3,112,1,5,46,9
	.half	.L190-.L132
	.byte	1,5,5,9
	.half	.L191-.L190
	.byte	1,5,74,9
	.half	.L20-.L191
	.byte	3,5,1,5,5,9
	.half	.L192-.L20
	.byte	1,4,5,5,2,9
	.half	.L21-.L192
	.byte	3,11,1,4,7,5,4,9
	.half	.L22-.L21
	.byte	3,37,1,5,39,7,9
	.half	.L131-.L22
	.byte	3,2,1,5,67,9
	.half	.L193-.L131
	.byte	1,4,1,5,11,9
	.half	.L18-.L193
	.byte	3,70,1,5,5,9
	.half	.L194-.L18
	.byte	1,5,43,7,9
	.half	.L195-.L194
	.byte	3,5,1,4,5,5,32,9
	.half	.L25-.L195
	.byte	3,14,1,5,47,9
	.half	.L196-.L25
	.byte	1,5,53,9
	.half	.L197-.L196
	.byte	1,5,75,9
	.half	.L198-.L197
	.byte	1,4,6,5,29,9
	.half	.L140-.L198
	.byte	3,112,1,5,46,9
	.half	.L199-.L140
	.byte	1,5,5,9
	.half	.L200-.L199
	.byte	1,5,74,9
	.half	.L26-.L200
	.byte	3,5,1,5,5,9
	.half	.L201-.L26
	.byte	1,4,5,5,2,9
	.half	.L27-.L201
	.byte	3,11,1,4,7,5,4,9
	.half	.L28-.L27
	.byte	3,52,1,5,41,7,9
	.half	.L139-.L28
	.byte	3,2,1,5,69,9
	.half	.L202-.L139
	.byte	1,4,1,5,28,9
	.half	.L3-.L202
	.byte	3,108,1,5,1,7,9
	.half	.L203-.L3
	.byte	3,30,1,7,9
	.half	.L40-.L203
	.byte	0,1,1
.L159:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvBuffDistributorMainFunction')
	.sect	'.debug_ranges'
.L39:
	.word	-1,.L31,0,.L40-.L31,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_isDistributionRunning')
	.sect	'.debug_info'
.L41:
	.word	192
	.half	3
	.word	.L42
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffDistributor.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L32
	.byte	3
	.byte	'Dem_isDistributionRunning',0,27,16,16
	.word	.L46
	.byte	5,3
	.word	Dem_isDistributionRunning
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_isDistributionRunning')
	.sect	'.debug_abbrev'
.L42:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('tmpEvBuffLocation')
	.sect	'.debug_info'
.L43:
	.word	184
	.half	3
	.word	.L44
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffDistributor.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L32
	.byte	3
	.byte	'tmpEvBuffLocation',0,27,80,24
	.word	.L141
	.byte	5,3
	.word	tmpEvBuffLocation
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tmpEvBuffLocation')
	.sect	'.debug_abbrev'
.L44:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvBuffDistributorMainFunction')
	.sect	'.debug_loc'
.L30:
	.word	-1,.L31,0,.L142-.L31
	.half	2
	.byte	138,0
	.word	.L142-.L31,.L45-.L31
	.half	2
	.byte	138,8
	.word	.L45-.L31,.L45-.L31
	.half	2
	.byte	138,0
	.word	0,0
.L105:
	.word	0,0
.L129:
	.word	0,0
.L137:
	.word	0,0
.L103:
	.word	0,0
.L127:
	.word	0,0
.L135:
	.word	0,0
.L65:
	.word	0,0
.L86:
	.word	-1,.L31,.L148-.L31,.L149-.L31
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L93:
	.word	-1,.L31,.L150-.L31,.L151-.L31
	.half	1
	.byte	95
	.word	0,0
.L84:
	.word	0,0
.L91:
	.word	0,0
.L74:
	.word	0,0
.L123:
	.word	0,0
.L117:
	.word	0,0
.L82:
	.word	0,0
.L89:
	.word	0,0
.L72:
	.word	0,0
.L100:
	.word	-1,.L31,.L152-.L31,.L3-.L31
	.half	1
	.byte	111
	.word	0,0
.L51:
	.word	-1,.L31,.L144-.L31,.L145-.L31
	.half	1
	.byte	98
	.word	.L146-.L31,.L147-.L31
	.half	1
	.byte	111
	.word	.L145-.L31,.L54-.L31
	.half	1
	.byte	101
	.word	0,0
.L97:
	.word	0,0
.L49:
	.word	-1,.L31,0,.L45-.L31
	.half	2
	.byte	145,120
	.word	0,0
.L110:
	.word	0,0
.L60:
	.word	0,0
.L47:
	.word	-1,.L31,.L143-.L31,.L45-.L31
	.half	1
	.byte	88
	.word	0,0
.L67:
	.word	0,0
.L121:
	.word	0,0
.L115:
	.word	0,0
.L76:
	.word	0,0
.L56:
	.word	0,0
.L58:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L204:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_EvBuffDistributorMainFunction')
	.sect	'.debug_frame'
	.word	36
	.word	.L204,.L31,.L45-.L31
	.byte	4
	.word	(.L142-.L31)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L45-.L142)/2
	.byte	19,0,8,26,0,0

; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   143  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   144  
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   145  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\evbuff\Dem_EvBuffDistributor.c	   146  #include "Dem_Cfg_MemMap.h"

	; Module end
