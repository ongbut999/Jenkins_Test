	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15916a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_EnvDataElement.src BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c'

	
$TC16X
	
	.sdecl	'.text.Dem_EnvDataElement.Dem_ReadEventStatusByte',code,cluster('Dem_ReadEventStatusByte')
	.sect	'.text.Dem_EnvDataElement.Dem_ReadEventStatusByte'
	.align	2
	
	.global	Dem_ReadEventStatusByte

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     1  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     2  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     4  #include "Rte_Dem.h" /* For the callbacks */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     5  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     6  #include "Dem_EnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     7  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     8  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	     9  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    10  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    11  #include "Dem_EvMemGen.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    12  #include "Dem_Cfg_ExtPrototypes.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    13  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    14  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    15  #include "Dem_PrjEnvDataElement.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    16  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    17  #define DEM_START_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    18  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    19  const Dem_EnvDataElement Dem_Cfg_EnvDataElement[DEM_CFG_ENV_DATAELEMENTS_ARRAYLENGTH] = DEM_CFG_ENV_DATAELEMENTS;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    20  #define DEM_STOP_SEC_ROM_CONST
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    21  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    22  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    23  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    24  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    25  #if (DEM_CFG_DEBUGDATA != DEM_CFG_DEBUGDATA_OFF)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    26  #if (DEM_CFG_READDEM_DEBUG0_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    27  Std_ReturnType Dem_ReadDebug0(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    28  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    29      Dem_BigEndian_WriteValue2Buffer(Buffer, internalData->debug0, DEM_SIZEOF_TYPE(Dem_DebugDataType));
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    30  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    31  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    32  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    33  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    34  #if (DEM_CFG_READDEM_DEBUG1_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    35  Std_ReturnType Dem_ReadDebug1(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    36  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    37      Dem_BigEndian_WriteValue2Buffer(Buffer, internalData->debug1, DEM_SIZEOF_TYPE(Dem_DebugDataType));
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    38  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    39  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    40  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    41  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    42  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    43  Std_ReturnType Dem_ReadEventStatusByte( uint8* buffer, const Dem_InternalEnvData* internalData )
; Function Dem_ReadEventStatusByte
.L70:
Dem_ReadEventStatusByte:	.type	func

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    44  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    45      // Dem_GetEventStatus() is not used because it is only allowed after Dem_Init() and Dem_ReadEventStatusByte() will be called during Dem_Init when inserting events to Event buffer
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    46      if(Dem_isEventIdValid(internalData->eventId))
	ld.hu	d15,[a5]0
.L96:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d0,#0
.L168:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d15,#0,.L2
.L169:
	ge.u	d1,d15,#6
.L170:
	sel	d0,d1,d0,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L3:
.L2:
	j	.L4

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L4:
	jeq	d0,#0,.L5
.L97:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L171:
	addsc.a	a15,a15,d15,#0
	ld.bu	d15,[a15]
.L172:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L6

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L6:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    47      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    48          *buffer = (uint8)Dem_EvtGetIsoByte( internalData->eventId);
	st.b	[a4],d15
.L173:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    49          return E_OK;
	mov	d2,#0
.L174:
	j	.L7
.L5:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    50      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    51      else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    52      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    53          return E_NOT_OK;
	mov	d2,#1
.L175:
	j	.L8

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    54      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    55  }
.L8:
.L7:
	ret
.L90:
	
__Dem_ReadEventStatusByte_function_end:
	.size	Dem_ReadEventStatusByte,__Dem_ReadEventStatusByte_function_end-Dem_ReadEventStatusByte
.L81:
	; End of function
	
	.sdecl	'.text.Dem_EnvDataElement.Dem_ReadAgingCtrUpCnt',code,cluster('Dem_ReadAgingCtrUpCnt')
	.sect	'.text.Dem_EnvDataElement.Dem_ReadAgingCtrUpCnt'
	.align	2
	
	.global	Dem_ReadAgingCtrUpCnt

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    56  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    57  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    58  #if (DEM_CFG_READDEM_AGINGCTR_UPCNT_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    59  Std_ReturnType Dem_ReadAgingCtrUpCnt(uint8* Buffer, const Dem_InternalEnvData* internalData)
; Function Dem_ReadAgingCtrUpCnt
.L72:
Dem_ReadAgingCtrUpCnt:	.type	func

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    60  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    61      if (internalData->evMemLocation != NULL_PTR)
	ld.a	a15,[a5]12
.L180:
	jz.a	a15,.L9
.L109:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     3  #ifndef DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     4  #define DEM_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     6  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     7  #include "Dem_Prv_Det.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     8  #include "rba_DiagLib_MemUtils.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    11  /* Macro for static assertion Check */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    12  /* either array length is (2*1)-1->valid or (2*0)-1->invalid*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    13  #define DEM_STATIC_ASSERT(COND,MSG) typedef uint8 Dem_static_assertion_##MSG[(2*(((COND)!=(FALSE))?1:0))-1]
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    15  /* mapping of memset and memcpy */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    16  #define DEM_MEMCPY  RBA_DIAGLIB_MEMCPY
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    17  #define DEM_MEMSET  RBA_DIAGLIB_MEMSET
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    19  /* Defines */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    20  #define DEM_MAXSINT16   0x7FFF
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    22  #if (DEM_CFG_BUILDTARGET != DEM_CFG_BUILDTARGET_DEMTESTSUITE)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    23      #define DEM_ASSERT_RANGECHECK(CONDITION) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    24  #else
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    25      #include "DemTest_Stub4RangeCheck.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    27      #define DEM_ASSERT_RANGECHECK(CONDITION) DEM_assertValueInRange(CONDITION)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    28  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    30  // these functions are necessary to avoid compiler warnings of the kind "statement is always FALSE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    31  DEM_INLINE uint16 Dem_LibGetParamUI16( uint16 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    33      return parameter;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    36  DEM_INLINE uint8 Dem_LibGetParamUI8( uint8 parameter )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L10

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L10:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     4  #ifndef DEM_EVMEMAGING_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     5  #define DEM_EVMEMAGING_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     8  #if (DEM_CFG_EVMEM_AGING_METHOD != DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     9  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    10     INLINE Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    11     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    12  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    13  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    14  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    15  uint16_least      Dem_EvMemGetCurrentAgingCycleCounter(Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    16  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    20  DEM_INLINE uint16_least Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    23  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP)   || \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    24      (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN) || \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    25      (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_STORE)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    26      return Dem_EvMemGetCurrentAgingCycleCounter(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    27  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    28      DEM_EVMEM_USEVAR(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    29      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    30  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    31  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    34  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    35     Defines
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    36     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    37  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    39  /* aging state */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    40  #define DEM_EVMEM_AGING_STATE                   ((DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    41                                                    DEM_EVMEM_STSMASK_CONFIRMED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    42  /* aging mask */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    43  #define DEM_EVMEM_AGING_MASK                    ((DEM_EVMEM_STSMASK_TESTFAILED_TAC   * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTFAILED_TAC_SUPPORTED)))   | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    44                                                   (DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    45                                                    DEM_EVMEM_STSMASK_TESTFAILED| \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    46                                                    DEM_EVMEM_STSMASK_CONFIRMED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    47  /* aging state for TFSLC*/
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    48  #define DEM_EVMEM_TFSLC_AGING_STATE             ((DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    49                                                    DEM_EVMEM_STSMASK_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    50  /* aging mask for TFSLC */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    51  #define DEM_EVMEM_TFSLC_AGING_MASK              ((DEM_EVMEM_STSMASK_TESTFAILED_TAC   * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTFAILED_TAC_SUPPORTED)))   | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    52                                                   (DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    53                                                    DEM_EVMEM_STSMASK_TESTFAILED| \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    54                                                    DEM_EVMEM_STSMASK_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    56  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    57   Aging
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    58   ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    59   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    61  DEM_INLINE Dem_boolean_least Dem_EvMemIsAged(Dem_EventIdType EventId, uint16_least LocId, uint16_least StatusNew)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    62  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    63  	DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    64  	DEM_EVMEM_USEVAR(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    66  	return (Dem_boolean_least)((StatusNew & DEM_EVMEM_STSMASK_AGED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    71  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterScaled(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    72  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    73  	uint16_least AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    75  	if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_COUNT_DOWN))
	mov	d0,#2
.L120:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L11

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L11:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    75  	if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_COUNT_DOWN))      (inlined)
	jne	d15,d0,.L12
.L122:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
	ld.hu	d15,[a15]2
.L181:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L13

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L13:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L14:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
	movh.a	a2,#@his(Dem_EvtParam_8)
	lea	a2,[a2]@los(Dem_EvtParam_8)
.L182:
	addsc.a	a2,a2,d15,#0
.L183:
	ld.bu	d0,[a2]
.L184:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;      (inlined)
	j	.L15

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }      (inlined)
.L15:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
	ld.bu	d15,[a15]13
.L185:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;      (inlined)
	j	.L16

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }      (inlined)
.L16:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    76  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    77  		AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory);
	sub	d15,d0,d15
.L152:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    77  		AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory);      (inlined)
	j	.L17

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    75  	if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_COUNT_DOWN))      (inlined)
.L12:
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L18:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     4  #ifndef DEM_EVMEMAGING_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     5  #define DEM_EVMEMAGING_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     8  #if (DEM_CFG_EVMEM_AGING_METHOD != DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     9  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    10     INLINE Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    11     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    12  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    13  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    14  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    15  uint16_least      Dem_EvMemGetCurrentAgingCycleCounter(Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    16  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    20  DEM_INLINE uint16_least Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    23  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP)   || \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    24      (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN) || \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    25      (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_STORE)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    26      return Dem_EvMemGetCurrentAgingCycleCounter(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    27  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    28      DEM_EVMEM_USEVAR(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    29      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    30  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    31  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    34  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    35     Defines
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    36     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    37  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    39  /* aging state */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    40  #define DEM_EVMEM_AGING_STATE                   ((DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    41                                                    DEM_EVMEM_STSMASK_CONFIRMED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    42  /* aging mask */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    43  #define DEM_EVMEM_AGING_MASK                    ((DEM_EVMEM_STSMASK_TESTFAILED_TAC   * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTFAILED_TAC_SUPPORTED)))   | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    44                                                   (DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    45                                                    DEM_EVMEM_STSMASK_TESTFAILED| \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    46                                                    DEM_EVMEM_STSMASK_CONFIRMED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    47  /* aging state for TFSLC*/
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    48  #define DEM_EVMEM_TFSLC_AGING_STATE             ((DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    49                                                    DEM_EVMEM_STSMASK_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    50  /* aging mask for TFSLC */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    51  #define DEM_EVMEM_TFSLC_AGING_MASK              ((DEM_EVMEM_STSMASK_TESTFAILED_TAC   * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTFAILED_TAC_SUPPORTED)))   | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    52                                                   (DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    53                                                    DEM_EVMEM_STSMASK_TESTFAILED| \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    54                                                    DEM_EVMEM_STSMASK_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    56  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    57   Aging
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    58   ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    59   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    61  DEM_INLINE Dem_boolean_least Dem_EvMemIsAged(Dem_EventIdType EventId, uint16_least LocId, uint16_least StatusNew)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    62  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    63  	DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    64  	DEM_EVMEM_USEVAR(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    66  	return (Dem_boolean_least)((StatusNew & DEM_EVMEM_STSMASK_AGED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    71  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterScaled(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    72  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    73  	uint16_least AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    75  	if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_COUNT_DOWN))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    76  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    77  		AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    78  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    79  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP))
	mov	d0,#4
.L134:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L19

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L19:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    79  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP))      (inlined)
	jne	d15,d0,.L20
.L136:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
	ld.hu	d15,[a15]0
.L186:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L21:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    81  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)      (inlined)
	jz.t	d15:0,.L22
.L187:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    80  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    81  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    82  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    83  			AgingCounter = 0;
	mov	d15,#0
.L153:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    83  			AgingCounter = 0;      (inlined)
	j	.L23

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    81  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)      (inlined)
.L22:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
	ld.hu	d15,[a15]0
.L188:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L24

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L24:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    85  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)      (inlined)
	jz.t	d15:10,.L25
.L140:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
	ld.hu	d15,[a15]2
.L189:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L26

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L26:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L27:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
	movh.a	a15,#@his(Dem_EvtParam_8)
	lea	a15,[a15]@los(Dem_EvtParam_8)
.L190:
	addsc.a	a15,a15,d15,#0
.L191:
	ld.bu	d15,[a15]
.L154:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;      (inlined)
	j	.L28

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }      (inlined)
.L28:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    87  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory));      (inlined)
	j	.L29

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    85  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)      (inlined)
.L25:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L30

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L30:
	mov	d0,#0

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    29      return 0;      (inlined)
	j	.L31

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    31  }      (inlined)
.L31:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
	ld.bu	d15,[a15]13
.L192:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;      (inlined)
	j	.L32

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }      (inlined)
.L32:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    84  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    85  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    86  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    87  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    88  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    89  		else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    90  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    91  			AgingCounter = (uint16_least)((Dem_EvMemAgingCounterType)(Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory)));
	sub	d0,d15
.L193:
	extr.u	d15,d0,#0,#8

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    89  		else      (inlined)
.L29:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    85  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)      (inlined)
.L23:
	j	.L33

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    79  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP))      (inlined)
.L20:
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L34

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L34:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     4  #ifndef DEM_EVMEMAGING_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     5  #define DEM_EVMEMAGING_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     8  #if (DEM_CFG_EVMEM_AGING_METHOD != DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     9  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    10     INLINE Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    11     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    12  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    13  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    14  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    15  uint16_least      Dem_EvMemGetCurrentAgingCycleCounter(Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    16  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    20  DEM_INLINE uint16_least Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    23  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP)   || \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    24      (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN) || \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    25      (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_STORE)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    26      return Dem_EvMemGetCurrentAgingCycleCounter(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    27  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    28      DEM_EVMEM_USEVAR(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    29      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    30  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    31  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    34  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    35     Defines
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    36     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    37  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    39  /* aging state */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    40  #define DEM_EVMEM_AGING_STATE                   ((DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    41                                                    DEM_EVMEM_STSMASK_CONFIRMED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    42  /* aging mask */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    43  #define DEM_EVMEM_AGING_MASK                    ((DEM_EVMEM_STSMASK_TESTFAILED_TAC   * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTFAILED_TAC_SUPPORTED)))   | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    44                                                   (DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    45                                                    DEM_EVMEM_STSMASK_TESTFAILED| \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    46                                                    DEM_EVMEM_STSMASK_CONFIRMED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    47  /* aging state for TFSLC*/
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    48  #define DEM_EVMEM_TFSLC_AGING_STATE             ((DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    49                                                    DEM_EVMEM_STSMASK_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    50  /* aging mask for TFSLC */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    51  #define DEM_EVMEM_TFSLC_AGING_MASK              ((DEM_EVMEM_STSMASK_TESTFAILED_TAC   * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTFAILED_TAC_SUPPORTED)))   | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    52                                                   (DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    53                                                    DEM_EVMEM_STSMASK_TESTFAILED| \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    54                                                    DEM_EVMEM_STSMASK_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    56  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    57   Aging
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    58   ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    59   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    61  DEM_INLINE Dem_boolean_least Dem_EvMemIsAged(Dem_EventIdType EventId, uint16_least LocId, uint16_least StatusNew)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    62  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    63  	DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    64  	DEM_EVMEM_USEVAR(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    66  	return (Dem_boolean_least)((StatusNew & DEM_EVMEM_STSMASK_AGED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    71  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterScaled(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    72  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    73  	uint16_least AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    75  	if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_COUNT_DOWN))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    76  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    77  		AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    78  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    79  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    80  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    81  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    82  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    83  			AgingCounter = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    84  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    85  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    86  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    87  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    88  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    89  		else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    90  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    91  			AgingCounter = (uint16_least)((Dem_EvMemAgingCounterType)(Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory)));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    92  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    93  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    94  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN))
	mov	d0,#5
.L145:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L35

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L35:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    94  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN))      (inlined)
	jne	d15,d0,.L36
.L146:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
	ld.hu	d15,[a15]0
.L194:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L37

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L37:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    96  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)      (inlined)
	jz.t	d15:0,.L38
.L147:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
	ld.hu	d15,[a15]2
.L195:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L39

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L39:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L40:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
	movh.a	a15,#@his(Dem_EvtParam_8)
	lea	a15,[a15]@los(Dem_EvtParam_8)
.L196:
	addsc.a	a15,a15,d15,#0
.L197:
	ld.bu	d15,[a15]
.L155:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;      (inlined)
	j	.L41

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }      (inlined)
.L41:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    98  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory));      (inlined)
	j	.L42

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    96  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)      (inlined)
.L38:
	ld.hu	d15,[a15]0
.L198:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L43

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L43:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   100  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)      (inlined)
	jz.t	d15:10,.L44
.L199:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    95  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    96  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    97  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    98  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    99  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   100  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   101  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   102  			AgingCounter = 0;
	mov	d15,#0
.L156:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   102  			AgingCounter = 0;      (inlined)
	j	.L45

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   100  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)      (inlined)
.L44:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
	ld.hu	d0,[a15]2
.L200:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L46

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L46:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L47

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L47:
	mov	d1,#0

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    29      return 0;      (inlined)
	j	.L48

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    31  }      (inlined)
.L48:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
	ld.bu	d15,[a15]13
.L201:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;      (inlined)
	j	.L49

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }      (inlined)
.L49:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   103  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   104  		else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   105  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   106  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) -
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   107  			((uint16_least)((Dem_EvMemAgingCounterType)(Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory))));
	sub	d1,d15
.L202:
	extr.u	d1,d1,#0,#8

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L50:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
	movh.a	a15,#@his(Dem_EvtParam_8)
	lea	a15,[a15]@los(Dem_EvtParam_8)
.L203:
	addsc.a	a15,a15,d0,#0
.L204:
	ld.bu	d15,[a15]
.L205:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;      (inlined)
	j	.L51

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }      (inlined)
.L51:
	sub	d15,d1

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   104  		else      (inlined)
.L45:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   100  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)      (inlined)
.L42:
	j	.L52

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    94  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN))      (inlined)
.L36:
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L53

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L53:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     4  #ifndef DEM_EVMEMAGING_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     5  #define DEM_EVMEMAGING_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     8  #if (DEM_CFG_EVMEM_AGING_METHOD != DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	     9  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    10     INLINE Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    11     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    12  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    13  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    14  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    15  uint16_least      Dem_EvMemGetCurrentAgingCycleCounter(Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    16  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    20  DEM_INLINE uint16_least Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    23  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP)   || \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    24      (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN) || \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    25      (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_STORE)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    26      return Dem_EvMemGetCurrentAgingCycleCounter(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    27  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    28      DEM_EVMEM_USEVAR(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    29      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    30  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    31  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    34  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    35     Defines
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    36     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    37  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    39  /* aging state */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    40  #define DEM_EVMEM_AGING_STATE                   ((DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    41                                                    DEM_EVMEM_STSMASK_CONFIRMED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    42  /* aging mask */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    43  #define DEM_EVMEM_AGING_MASK                    ((DEM_EVMEM_STSMASK_TESTFAILED_TAC   * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTFAILED_TAC_SUPPORTED)))   | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    44                                                   (DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    45                                                    DEM_EVMEM_STSMASK_TESTFAILED| \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    46                                                    DEM_EVMEM_STSMASK_CONFIRMED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    47  /* aging state for TFSLC*/
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    48  #define DEM_EVMEM_TFSLC_AGING_STATE             ((DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    49                                                    DEM_EVMEM_STSMASK_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    50  /* aging mask for TFSLC */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    51  #define DEM_EVMEM_TFSLC_AGING_MASK              ((DEM_EVMEM_STSMASK_TESTFAILED_TAC   * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTFAILED_TAC_SUPPORTED)))   | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    52                                                   (DEM_EVMEM_STSMASK_TESTCOMPLETE_TAC * DEM_EVMEM_BOOL2DEC(Dem_LibGetParamBool(DEM_CFG_EVMEM_TESTCOMPLETE_TAC_SUPPORTED))) | \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    53                                                    DEM_EVMEM_STSMASK_TESTFAILED| \ 
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    54                                                    DEM_EVMEM_STSMASK_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    56  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    57   Aging
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    58   ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    59   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    61  DEM_INLINE Dem_boolean_least Dem_EvMemIsAged(Dem_EventIdType EventId, uint16_least LocId, uint16_least StatusNew)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    62  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    63  	DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    64  	DEM_EVMEM_USEVAR(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    66  	return (Dem_boolean_least)((StatusNew & DEM_EVMEM_STSMASK_AGED) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    71  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterScaled(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    72  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    73  	uint16_least AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    75  	if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_COUNT_DOWN))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    76  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    77  		AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    78  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    79  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    80  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    81  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    82  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    83  			AgingCounter = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    84  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    85  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    86  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    87  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    88  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    89  		else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    90  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    91  			AgingCounter = (uint16_least)((Dem_EvMemAgingCounterType)(Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory)));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    92  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    93  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    94  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    95  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    96  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    97  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    98  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    99  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   100  		else if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_AGED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   101  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   102  			AgingCounter = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   103  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   104  		else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   105  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   106  			AgingCounter = Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) -
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   107  			((uint16_least)((Dem_EvMemAgingCounterType)(Dem_EvMemGetCurrentAgingCycleCounterInt(Dem_EvMemGetEventMemEventIdByPtr(EventMemory)) - Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory))));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   108  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   109  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   110  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_STORE))
	mov	d0,#3
.L148:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    38      return parameter;      (inlined)
	j	.L54

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_Lib.h	    39  }      (inlined)
.L54:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   110  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_STORE))      (inlined)
	jne	d15,d0,.L55
.L149:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
	ld.hu	d15,[a15]0
.L206:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;      (inlined)
	j	.L56

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }      (inlined)
.L56:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   112  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)      (inlined)
	jz.t	d15:0,.L57
.L150:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
	ld.bu	d15,[a15]13
.L157:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;      (inlined)
	j	.L58

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }      (inlined)
.L58:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   114  			AgingCounter = Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory);      (inlined)
	j	.L59

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   112  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)      (inlined)
.L57:
	ld.hu	d0,[a15]2
.L207:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;      (inlined)
	j	.L60

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }      (inlined)
.L60:
	ld.bu	d15,[a15]13
.L208:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;      (inlined)
	j	.L61

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }      (inlined)
.L61:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L62:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
	movh.a	a15,#@his(Dem_EvtParam_8)
	lea	a15,[a15]@los(Dem_EvtParam_8)
.L209:
	addsc.a	a15,a15,d0,#0
.L210:
	ld.bu	d0,[a15]
.L211:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;      (inlined)
	j	.L63

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }      (inlined)
.L63:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   111  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   112  		if ((Dem_EvMemGetEventMemStatusByPtr(EventMemory) & DEM_EVMEM_STSMASK_TESTFAILED) != 0u)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   113  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   114  			AgingCounter = Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   115  		}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   116  		else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   117  		{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   118  			AgingCounter = (uint16_least)((Dem_EvMemAgingCounterType)(Dem_EvMemGetEventMemAgingCounterByPtr(EventMemory) + Dem_EvtParam_GetAgingThreshold(Dem_EvMemGetEventMemEventIdByPtr(EventMemory))));
	add	d15,d0
.L212:
	extr.u	d15,d15,#0,#8

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   116  		else      (inlined)
.L59:
	j	.L64

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   110  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_STORE))      (inlined)
.L55:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
	ld.bu	d15,[a15]13
.L158:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;      (inlined)
	j	.L65

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }      (inlined)
.L65:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   121  	else      (inlined)
.L64:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   110  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_STORE))      (inlined)
.L52:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    94  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_DOWN))      (inlined)
.L33:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	    79  	else if (Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD) == Dem_LibGetParamUI8(DEM_CFG_EVMEM_AGING_METHOD_AGINGCYC_DIFF_UP))      (inlined)
.L17:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   126  	return AgingCounter;      (inlined)
	j	.L66

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemAging.h	   127  }      (inlined)
.L66:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    62      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    63          *Buffer = (uint8) Dem_EvMemGetEventMemAgingCounterScaled(internalData->evMemLocation);
	st.b	[a4],d15
.L110:
	j	.L67
.L9:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    64      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    65      else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    66      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    67          *Buffer = 0;
	mov	d15,#0
.L213:
	st.b	[a4],d15
.L67:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    68      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    69      return E_OK;
	mov	d2,#0
.L214:
	j	.L68

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    70  }
.L68:
	ret
.L105:
	
__Dem_ReadAgingCtrUpCnt_function_end:
	.size	Dem_ReadAgingCtrUpCnt,__Dem_ReadAgingCtrUpCnt_function_end-Dem_ReadAgingCtrUpCnt
.L86:
	; End of function
	
	.sdecl	'.rodata.Dem_EnvDataElement.Dem_Cfg_EnvDataElement',data,rom,cluster('Dem_Cfg_EnvDataElement')
	.sect	'.rodata.Dem_EnvDataElement.Dem_Cfg_EnvDataElement'
	.global	Dem_Cfg_EnvDataElement
	.align	4
Dem_Cfg_EnvDataElement:	.type	object
	.size	Dem_Cfg_EnvDataElement,48
	.space	12
	.word	Rte_Call_Dem_DataServices_DemDataElementClass_SystemFaultRank_ReadData
	.space	4
	.byte	1
	.space	3
	.word	Rte_Call_Dem_DataServices_DemDataElementClass_VehicleSpeed_ReadData
	.space	4
	.byte	2
	.space	7
	.word	Dem_ReadAgingCtrUpCnt
	.byte	1,1
	.space	2
	.calls	'__INDIRECT__','Rte_Call_Dem_DataServices_DemDataElementClass_SystemFaultRank_ReadData'
	.calls	'__INDIRECT__','Rte_Call_Dem_DataServices_DemDataElementClass_VehicleSpeed_ReadData'
	.calls	'__INDIRECT__','Dem_ReadAgingCtrUpCnt'
	.calls	'Dem_ReadEventStatusByte','',0
	.extern	Rte_Call_Dem_DataServices_DemDataElementClass_SystemFaultRank_ReadData
	.extern	Rte_Call_Dem_DataServices_DemDataElementClass_VehicleSpeed_ReadData
	.extern	Dem_EvtParam_8
	.extern	Dem_AllEventsStatusByte
	.extern	__INDIRECT__
	.calls	'Dem_ReadAgingCtrUpCnt','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L74:
	.word	27597
	.half	3
	.word	.L75
	.byte	4
.L73:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L76
.L89:
	.byte	2
	.byte	'unsigned char',0,1,8
.L91:
	.byte	3
	.word	148
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	165
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	165
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1,5
	.byte	'buffer',0,1,48,55
	.word	165
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	148
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	148
	.byte	7,6,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	148
	.byte	1,1,5
	.byte	'value',0,1,60,55
	.word	148
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	148
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	148
	.byte	1,1,5
	.byte	'value',0,1,64,53
	.word	148
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	148
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	148
	.byte	1,1,5
	.byte	'value',0,1,69,50
	.word	148
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	148
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	165
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	148
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1,5
	.byte	'value',0,1,83,56
	.word	165
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	148
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	148
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	148
	.byte	7,6,0,0,2
	.byte	'unsigned short int',0,2,7,3
	.word	865
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	887
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	887
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	148
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	865
	.byte	1,1,5
	.byte	'value',0,2,60,58
	.word	865
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	148
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	148
	.byte	1,1,5
	.byte	'value',0,2,65,55
	.word	865
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	148
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	865
	.byte	1,1,5
	.byte	'value',0,2,70,53
	.word	865
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	148
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	887
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	148
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	148
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,3
	.word	1376
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	1392
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1392
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	148
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1376
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1376
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	148
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	148
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1376
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	148
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1392
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	148
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	148
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,4,125,21
	.word	1376
	.byte	1,1,5
	.byte	'Input_u32',0,4,125,55
	.word	1376
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,4,150,1,21
	.word	865
	.byte	1,1,5
	.byte	'Input_u16',0,4,150,1,55
	.word	865
	.byte	6,0,9
	.word	148
	.byte	3
	.word	1903
	.byte	4
	.byte	'rba_DiagLib_MemUtils_MemCpy',0,3,5,20,19,1,1,5
	.byte	'xDest_p',0,5,20,54
	.word	165
	.byte	5
	.byte	'xSrc_pc',0,5,20,76
	.word	1908
	.byte	5
	.byte	'numBytes_s32',0,5,20,92
	.word	1376
	.byte	6,0,2
	.byte	'int',0,4,5,4
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,5,26,19,1,1,5
	.byte	'xDest_pv',0,5,26,54
	.word	165
	.byte	5
	.byte	'xPattern_u32',0,5,26,71
	.word	2003
	.byte	5
	.byte	'numBytes_s32',0,5,26,92
	.word	1376
	.byte	6,0
.L116:
	.byte	8
	.byte	'Dem_LibGetParamUI8',0,3,6,36,18
	.word	148
	.byte	1,1
.L117:
	.byte	5
	.byte	'parameter',0,6,36,44
	.word	148
.L119:
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,6,41,20
	.word	148
	.byte	1,1,5
	.byte	'parameter',0,6,41,49
	.word	148
	.byte	6,0,8
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,7,99,30
	.word	1376
	.byte	1,1,5
	.byte	'indx',0,7,99,67
	.word	865
	.byte	6,0,9
	.word	165
	.byte	3
	.word	2256
	.byte	4
	.byte	'Dem_EnvInsertPadding',0,3,8,46,17,1,1,5
	.byte	'start',0,8,46,52
	.word	2261
	.byte	5
	.byte	'size',0,8,46,65
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_BitArraySetBit',0,3,9,33,17,1,1,5
	.byte	'buffer',0,9,33,36
	.word	1392
	.byte	5
	.byte	'bit_position',0,9,33,75
	.word	1376
	.byte	6,0,4
	.byte	'Dem_BitArrayClearBit',0,3,9,46,17,1,1,5
	.byte	'buffer',0,9,46,38
	.word	1392
	.byte	5
	.byte	'bit_position',0,9,46,77
	.word	1376
	.byte	6,0,4
	.byte	'Dem_BitArrayOverwriteBit',0,3,9,61,17,1,1,5
	.byte	'buffer',0,9,61,42
	.word	1392
	.byte	5
	.byte	'bit_position',0,9,62,25
	.word	1376
	.byte	5
	.byte	'will_bit_be_set',0,9,62,57
	.word	148
	.byte	7,6,6,0,0,9
	.word	1376
	.byte	3
	.word	2552
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,9,75,30
	.word	148
	.byte	1,1,5
	.byte	'buffer',0,9,75,51
	.word	2557
	.byte	5
	.byte	'bit_position',0,9,75,95
	.word	1376
	.byte	6,0,8
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,10,122,30
	.word	148
	.byte	1,1,5
	.byte	'self',0,10,122,66
	.word	148
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,10,129,1,30
	.word	148
	.byte	1,1,5
	.byte	'self',0,10,129,1,69
	.word	148
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,10,157,1,30
	.word	148
	.byte	1,1,5
	.byte	'self',0,10,157,1,71
	.word	148
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,10,164,1,30
	.word	148
	.byte	1,1,5
	.byte	'self',0,10,164,1,66
	.word	148
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,10,177,1,30
	.word	148
	.byte	1,1,5
	.byte	'self',0,10,177,1,81
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,10,186,1,17,1,1,5
	.byte	'self',0,10,186,1,55
	.word	165
	.byte	5
	.byte	'setOrReset',0,10,186,1,79
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,10,193,1,17,1,1,5
	.byte	'self',0,10,193,1,58
	.word	165
	.byte	5
	.byte	'setOrReset',0,10,193,1,82
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,10,200,1,17,1,1,5
	.byte	'self',0,10,200,1,58
	.word	165
	.byte	5
	.byte	'setOrReset',0,10,200,1,82
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,10,214,1,17,1,1,5
	.byte	'self',0,10,214,1,60
	.word	165
	.byte	5
	.byte	'setOrReset',0,10,214,1,84
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,10,221,1,17,1,1,5
	.byte	'self',0,10,221,1,60
	.word	165
	.byte	5
	.byte	'setOrReset',0,10,221,1,84
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,10,228,1,17,1,1,5
	.byte	'self',0,10,228,1,55
	.word	165
	.byte	5
	.byte	'setOrReset',0,10,228,1,79
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,10,235,1,17,1,1,5
	.byte	'self',0,10,235,1,57
	.word	165
	.byte	5
	.byte	'setOrReset',0,10,235,1,81
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,10,242,1,17,1,1,5
	.byte	'self',0,10,242,1,70
	.word	165
	.byte	5
	.byte	'setOrReset',0,10,242,1,94
	.word	148
	.byte	7,6,0,0
.L95:
	.byte	8
	.byte	'Dem_isEventIdValid',0,3,11,20,30
	.word	148
	.byte	1,1
.L98:
	.byte	5
	.byte	'checkID',0,11,20,65
	.word	865
.L100:
	.byte	6,0,8
	.byte	'Dem_isDtcIdValid',0,3,11,152,1,30
	.word	148
	.byte	1,1,5
	.byte	'id',0,11,152,1,62
	.word	865
	.byte	6,0,8
	.byte	'Dem_DtcIdFromEventId',0,3,11,158,1,27
	.word	865
	.byte	1,1,5
	.byte	'id',0,11,158,1,65
	.word	865
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,11,166,1,28
	.word	865
	.byte	1,1,5
	.byte	'dtcid',0,11,166,1,63
	.word	865
	.byte	6,0,8
	.byte	'Dem_DtcIdGetFirstEventId',0,3,11,174,1,28
	.word	865
	.byte	1,1,5
	.byte	'dtcid',0,11,174,1,68
	.word	865
	.byte	7,6,0,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,11,252,1,30
	.word	148
	.byte	1,1,5
	.byte	'dtcGroupID',0,11,252,1,72
	.word	148
	.byte	6,0,9
	.word	865
	.byte	3
	.word	3888
	.byte	10,11,171,2,9,8,11
	.byte	'it',0
	.word	3893
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	3893
	.byte	4,2,35,4,0,3
	.word	3898
	.byte	4
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,11,177,2,17,1,1,5
	.byte	'it',0,11,177,2,78
	.word	3930
	.byte	5
	.byte	'dtcid',0,11,177,2,96
	.word	865
	.byte	7,6,0,0,9
	.word	3898
	.byte	3
	.word	4010
	.byte	8
	.byte	'Dem_EventIdListIteratorIsValid',0,3,11,193,2,30
	.word	148
	.byte	1,1,5
	.byte	'it',0,11,193,2,92
	.word	4015
	.byte	6,0,4
	.byte	'Dem_EventIdListIteratorNext',0,3,11,198,2,17,1,1,5
	.byte	'it',0,11,198,2,70
	.word	3930
	.byte	6,0,8
	.byte	'Dem_EventIdListIteratorCurrent',0,3,11,203,2,28
	.word	865
	.byte	1,1,5
	.byte	'it',0,11,203,2,90
	.word	4015
	.byte	6,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,12,32,30
	.word	148
	.byte	1,1,5
	.byte	'enableConditionList',0,12,32,68
	.word	148
	.byte	6,0,8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,13,49,28
	.word	865
	.byte	1,1,5
	.byte	'id',0,13,49,68
	.word	148
	.byte	6,0,8
	.byte	'Dem_NvmGetStatus',0,3,13,54,30
	.word	148
	.byte	1,1,5
	.byte	'id',0,13,54,67
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_NvMWriteBlockOnShutdown',0,3,13,92,17,1,1,5
	.byte	'id',0,13,92,64
	.word	148
	.byte	6,0,4
	.byte	'Dem_NvMClearBlockByWrite',0,3,13,102,17,1,1,5
	.byte	'id',0,13,102,61
	.word	148
	.byte	6,0,4
	.byte	'Dem_NvMClearBlockByInvalidate',0,3,13,107,17,1,1,5
	.byte	'id',0,13,107,66
	.word	148
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,13,138,1,17,1,1,6,0,8
	.byte	'Dem_NvMIsInvalidateAllNVMBlocksRequested',0,3,13,167,1,30
	.word	148
	.byte	1,1,6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,14,36,21
	.word	865
	.byte	1,1,5
	.byte	'val',0,14,36,70
	.word	865
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,14,41,21
	.word	1376
	.byte	1,1,5
	.byte	'val',0,14,41,70
	.word	1376
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,15,55,22
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,55,78
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,15,75,22
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,75,77
	.word	865
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,15,82,22
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,82,79
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,15,89,22
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,89,76
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,15,95,22
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,95,67
	.word	865
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,15,122,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,122,69
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,15,129,1,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,129,1,65
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,15,136,1,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,136,1,67
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,15,149,1,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,149,1,72
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,15,155,1,21
	.word	865
	.byte	1,1,5
	.byte	'indx',0,15,155,1,79
	.word	865
	.byte	7,6,0,0
.L126:
	.byte	8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,15,168,1,20
	.word	148
	.byte	1,1
.L127:
	.byte	5
	.byte	'indx',0,15,168,1,67
	.word	865
.L129:
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,15,208,1,27
	.word	148
	.byte	1,1,5
	.byte	'indx',0,15,208,1,76
	.word	865
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,16,193,1,19
	.word	5453
	.byte	1,1,5
	.byte	'EventId',0,16,193,1,60
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,16,219,1,32
	.word	148
	.byte	1,1,5
	.byte	'EventId',0,16,219,1,77
	.word	865
	.byte	6,0,4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,16,227,3,17,1,1,6,0,4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,16,233,3,17,1,1,5
	.byte	'reason',0,16,233,3,72
	.word	148
	.byte	7,6,0,0,8
	.byte	'Dem_EvtIsSuppressed',0,3,16,244,4,30
	.word	148
	.byte	1,1,5
	.byte	'EventId',0,16,244,4,67
	.word	865
	.byte	7,6,0,0
.L101:
	.byte	8
	.byte	'Dem_EvtGetIsoByte',0,3,17,42,34
	.word	148
	.byte	1,1
.L102:
	.byte	5
	.byte	'EventId',0,17,42,69
	.word	865
.L104:
	.byte	6,0,3
	.word	148
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,18,17,17,1,1,5
	.byte	'trigger',0,18,17,52
	.word	5789
	.byte	5
	.byte	'trigger2set',0,18,17,77
	.word	148
	.byte	6,0,8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,18,22,30
	.word	148
	.byte	1,1,5
	.byte	'trigger2test',0,18,22,69
	.word	148
	.byte	6,0
.L114:
	.byte	2
	.byte	'unsigned long int',0,4,7,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,19,101,30
	.word	148
	.byte	1,1,5
	.byte	'EventId',0,19,101,87
	.word	865
	.byte	5
	.byte	'debAction',0,19,101,120
	.word	5914
	.byte	6,0,12
	.word	865
	.byte	3
	.word	6023
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,20,27,17,1,1,5
	.byte	'result',0,20,27,79
	.word	6028
	.byte	5
	.byte	'request',0,20,27,109
	.word	865
	.byte	5
	.byte	'newResult',0,20,27,133,1
	.word	148
	.byte	6,0,12
	.word	865
	.byte	3
	.word	6123
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,20,65,17,1,1,5
	.byte	'request',0,20,65,82
	.word	6128
	.byte	5
	.byte	'newRequest',0,20,65,97
	.word	148
	.byte	6,0,3
	.word	1376
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,20,151,1,17,1,1,5
	.byte	'selection',0,20,151,1,93
	.word	6210
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,20,168,1,18
	.word	148
	.byte	1,1,5
	.byte	'selection',0,20,168,1,86
	.word	1376
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,21,53,17,1,1,5
	.byte	'ClientId',0,21,53,80
	.word	148
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,21,68,17,1,1,5
	.byte	'state',0,21,68,62
	.word	148
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,21,78,20
	.word	148
	.byte	1,1,5
	.byte	'ClientId',0,21,78,91
	.word	148
	.byte	7,6,6,6,6,0,0,8
	.byte	'Dem_EvMemIsMemIdValid',0,3,22,103,30
	.word	148
	.byte	1,1,5
	.byte	'MemId',0,22,103,65
	.word	5914
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,22,112,30
	.word	148
	.byte	1,1,5
	.byte	'LocId',0,22,112,73
	.word	5914
	.byte	6,0,10,23,133,1,3,4,11
	.byte	'Status',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	865
	.byte	2,2,35,2,0,13,23,131,1,9,4,11
	.byte	'Data',0
	.word	6699
	.byte	4,2,35,0,0,14,7
	.word	148
	.byte	15,6,0,10,23,144,1,9,20,11
	.byte	'Hdr',0
	.word	6739
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	6760
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	148
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	148
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	148
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	148
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	148
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	1376
	.byte	4,2,35,16,0,9
	.word	6769
	.byte	3
	.word	6937
.L135:
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,22,134,1,25
	.word	5914
	.byte	1,1
.L137:
	.byte	5
	.byte	'EventMemory',0,22,134,1,89
	.word	6942
.L139:
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,22,139,1,25
	.word	5914
	.byte	1,1,5
	.byte	'LocId',0,22,139,1,65
	.word	5914
	.byte	7,6,0,0
.L121:
	.byte	8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,22,152,1,28
	.word	865
	.byte	1,1
.L123:
	.byte	5
	.byte	'EventMemory',0,22,152,1,93
	.word	6942
.L125:
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,22,170,1,19
	.word	1376
	.byte	1,1,5
	.byte	'EventMemory',0,22,170,1,83
	.word	6942
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,22,188,1,18
	.word	148
	.byte	1,1,5
	.byte	'EventMemory',0,22,188,1,85
	.word	6942
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,22,216,1,24
	.word	5914
	.byte	1,1,5
	.byte	'EventMemory',0,22,216,1,96
	.word	6942
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,22,233,1,25
	.word	5914
	.byte	1,1,5
	.byte	'EventMemory',0,22,233,1,100
	.word	6942
	.byte	6,0
.L130:
	.byte	8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,22,133,2,25
	.word	5914
	.byte	1,1
.L131:
	.byte	5
	.byte	'EventMemory',0,22,133,2,95
	.word	6942
.L133:
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,22,144,2,25
	.word	5914
	.byte	1,1,5
	.byte	'LocId',0,22,144,2,71
	.word	5914
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,22,150,2,17,1,1,5
	.byte	'LocId',0,22,150,2,63
	.word	5914
	.byte	5
	.byte	'AgingCounter',0,22,150,2,83
	.word	5914
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,22,161,2,25
	.word	5914
	.byte	1,1,5
	.byte	'EventMemory',0,22,161,2,103
	.word	6942
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,22,213,2,18
	.word	7728
	.byte	1,1,5
	.byte	'EventMemory',0,22,213,2,92
	.word	6942
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,22,224,2,18
	.word	7728
	.byte	1,1,5
	.byte	'EventMemory',0,22,224,2,88
	.word	6942
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,22,238,3,25
	.word	5914
	.byte	1,1,5
	.byte	'EventMemory',0,22,238,3,101
	.word	6942
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,22,141,4,28
	.word	148
	.byte	1,1,5
	.byte	'EventMemory',0,22,141,4,93
	.word	6942
	.byte	6,0,3
	.word	6769
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,22,170,4,19
	.word	165
	.byte	1,1,5
	.byte	'EventMemory',0,22,170,4,75
	.word	8033
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,22,206,4,30
	.word	148
	.byte	1,1,5
	.byte	'Status',0,22,206,4,61
	.word	5914
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,22,211,4,30
	.word	148
	.byte	1,1,5
	.byte	'Status',0,22,211,4,60
	.word	5914
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,22,226,4,25
	.word	5914
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,22,242,4,30
	.word	148
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,22,131,5,25
	.word	5914
	.byte	1,1,5
	.byte	'MemId',0,22,131,5,69
	.word	5914
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,22,143,5,25
	.word	5914
	.byte	1,1,5
	.byte	'MemId',0,22,143,5,67
	.word	5914
	.byte	6,0,3
	.word	5914
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,22,179,5,17,1,1,5
	.byte	'MemId',0,22,179,5,63
	.word	8393
	.byte	6,0,9
	.word	5914
	.byte	3
	.word	8455
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,22,184,5,30
	.word	148
	.byte	1,1,5
	.byte	'MemId',0,22,184,5,86
	.word	8460
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,22,189,5,17,1,1,5
	.byte	'MemId',0,22,189,5,64
	.word	8393
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,22,247,5,30
	.word	148
	.byte	1,1,5
	.byte	'StatusOld',0,22,247,5,66
	.word	5914
	.byte	5
	.byte	'StatusNew',0,22,247,5,90
	.word	5914
	.byte	5
	.byte	'Trigger',0,22,247,5,114
	.word	5914
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,22,154,7,25
	.word	5914
	.byte	1,1,5
	.byte	'EventId',0,22,154,7,64
	.word	865
	.byte	7,6,0,0
.L141:
	.byte	8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,24,20,25
	.word	5914
	.byte	1,1
.L142:
	.byte	5
	.byte	'EventId',0,24,20,81
	.word	865
.L144:
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,24,61,30
	.word	148
	.byte	1,1,5
	.byte	'EventId',0,24,61,62
	.word	865
	.byte	5
	.byte	'LocId',0,24,61,84
	.word	5914
	.byte	5
	.byte	'StatusNew',0,24,61,104
	.word	5914
	.byte	6,0
.L108:
	.byte	8
	.byte	'Dem_EvMemGetEventMemAgingCounterScaled',0,3,24,71,25
	.word	5914
	.byte	1,1
.L111:
	.byte	5
	.byte	'EventMemory',0,24,71,96
	.word	6942
.L113:
	.byte	7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,25,150,1,25
	.word	5914
	.byte	1,1,5
	.byte	'DTCOrigin',0,25,150,1,73
	.word	148
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,25,222,1,25
	.word	5914
	.byte	1,1,5
	.byte	'EventId',0,25,222,1,67
	.word	865
	.byte	7,6,0,0,8
	.byte	'Dem_GetEvMemLockInternal',0,3,25,137,2,20
	.word	148
	.byte	1,1,6,0,8
	.byte	'Dem_DtcIsSuppressed',0,3,26,118,30
	.word	148
	.byte	1,1,5
	.byte	'dtcId',0,26,118,65
	.word	865
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,26,128,1,30
	.word	148
	.byte	1,1,5
	.byte	'dtcId',0,26,128,1,73
	.word	865
	.byte	6,0,8
	.byte	'Dem_EventUsesOrigin',0,3,26,137,2,30
	.word	148
	.byte	1,1,5
	.byte	'eventId',0,26,137,2,67
	.word	865
	.byte	5
	.byte	'origin',0,26,137,2,94
	.word	148
	.byte	7,6,6,6,0,0,8
	.byte	'Dem_EvMemGenGetDtcIdByOccIndex',0,3,27,31,26
	.word	865
	.byte	1,1,5
	.byte	'OccIndex',0,27,31,64
	.word	1376
	.byte	6,0,4
	.byte	'Dem_EvMemGenSetDtcByOccIndex',0,3,27,42,17,1,1,5
	.byte	'DtcId',0,27,42,60
	.word	865
	.byte	5
	.byte	'OccIndex',0,27,42,73
	.word	1376
	.byte	6,0,4
	.byte	'Dem_EvMemGenReportEvent',0,3,27,79,17,1,1,5
	.byte	'EventId',0,27,79,57
	.word	865
	.byte	5
	.byte	'FirstOccIndex',0,27,79,73
	.word	1376
	.byte	5
	.byte	'RecntOccIndex',0,27,79,95
	.word	1376
	.byte	7,6,6,6,6,6,6,6,6,6,0,0,4
	.byte	'Dem_EvMemGenSetOverflow',0,3,27,174,1,17,1,1,5
	.byte	'DtcOrigin',0,27,174,1,59
	.word	148
	.byte	6,0,8
	.byte	'Dem_EvMemGenIsOverflow',0,3,27,184,1,20
	.word	148
	.byte	1,1,5
	.byte	'DtcOrigin',0,27,184,1,61
	.word	148
	.byte	6,0,16
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	6,0,16
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	6,0,16
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	7,18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,6,18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,6,0,0,16
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	6,0,16
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	7,18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,6,0,0,16
	.word	561
	.byte	17
	.word	596
	.byte	17
	.word	610
	.byte	17
	.word	631
	.byte	6,0,16
	.word	656
	.byte	17
	.word	689
	.byte	17
	.word	703
	.byte	17
	.word	724
	.byte	6,0,16
	.word	749
	.byte	17
	.word	786
	.byte	17
	.word	800
	.byte	17
	.word	821
	.byte	17
	.word	844
	.byte	7,18
	.word	656
	.byte	17
	.word	689
	.byte	17
	.word	703
	.byte	17
	.word	724
	.byte	19
	.word	747
	.byte	0,6,0,0,16
	.word	892
	.byte	17
	.word	923
	.byte	17
	.word	938
	.byte	6,0,16
	.word	961
	.byte	17
	.word	994
	.byte	17
	.word	1009
	.byte	6,0,16
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	6,0,16
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	7,18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,6,0,0,16
	.word	1186
	.byte	17
	.word	1222
	.byte	17
	.word	1236
	.byte	17
	.word	1257
	.byte	6,0,16
	.word	1282
	.byte	17
	.word	1316
	.byte	17
	.word	1330
	.byte	17
	.word	1351
	.byte	6,0,16
	.word	1397
	.byte	17
	.word	1428
	.byte	17
	.word	1443
	.byte	6,0,16
	.word	1466
	.byte	17
	.word	1499
	.byte	17
	.word	1514
	.byte	6,0,16
	.word	1537
	.byte	17
	.word	1578
	.byte	17
	.word	1592
	.byte	6,0,16
	.word	1615
	.byte	17
	.word	1652
	.byte	17
	.word	1666
	.byte	7,18
	.word	1537
	.byte	17
	.word	1578
	.byte	17
	.word	1592
	.byte	19
	.word	1613
	.byte	0,6,0,0,16
	.word	1691
	.byte	17
	.word	1725
	.byte	17
	.word	1739
	.byte	17
	.word	1760
	.byte	6,0,9
	.word	165
	.byte	20
	.byte	'Rte_Call_Dem_DataServices_DemDataElementClass_SystemFaultRank_ReadData',0,28,191,1,32
	.word	148
	.byte	1,1,1,1,5
	.byte	'Data',0,28,191,1,147,1
	.word	10173
	.byte	0,9
	.word	165
	.byte	20
	.byte	'Rte_Call_Dem_DataServices_DemDataElementClass_VehicleSpeed_ReadData',0,28,192,1,32
	.word	148
	.byte	1,1,1,1,5
	.byte	'Data',0,28,192,1,144,1
	.word	10278
	.byte	0,16
	.word	1785
	.byte	17
	.word	1823
	.byte	6,0,16
	.word	1843
	.byte	17
	.word	1882
	.byte	6,0,16
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	6,0,16
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	6,0,16
	.word	2106
	.byte	17
	.word	2136
	.byte	6,0,16
	.word	2156
	.byte	17
	.word	2187
	.byte	6,0,16
	.word	2207
	.byte	17
	.word	2241
	.byte	6,0,16
	.word	2266
	.byte	17
	.word	2294
	.byte	17
	.word	2308
	.byte	7,18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,6,0,0,10,29,13,9,16,11
	.byte	'eventId',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'debug0',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'debug1',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'evMemLocation',0
	.word	8033
	.byte	4,2,35,12,0,9
	.word	10529
.L93:
	.byte	3
	.word	10607
	.byte	16
	.word	2325
	.byte	17
	.word	2351
	.byte	17
	.word	2366
	.byte	6,0,16
	.word	2389
	.byte	17
	.word	2417
	.byte	17
	.word	2432
	.byte	6,0,16
	.word	2455
	.byte	17
	.word	2487
	.byte	17
	.word	2502
	.byte	17
	.word	2523
	.byte	7,18
	.word	2325
	.byte	17
	.word	2351
	.byte	17
	.word	2366
	.byte	19
	.word	2387
	.byte	0,6,18
	.word	2389
	.byte	17
	.word	2417
	.byte	17
	.word	2432
	.byte	19
	.word	2453
	.byte	0,6,0,0,16
	.word	2562
	.byte	17
	.word	2594
	.byte	17
	.word	2609
	.byte	6,0,16
	.word	2632
	.byte	17
	.word	2672
	.byte	7,18
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	21
	.word	557
	.byte	18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,19
	.word	558
	.byte	0,0,6,0,0,16
	.word	2689
	.byte	17
	.word	2733
	.byte	7,18
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	21
	.word	557
	.byte	18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,19
	.word	558
	.byte	0,0,6,0,0,16
	.word	2751
	.byte	17
	.word	2797
	.byte	7,18
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	21
	.word	557
	.byte	18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,19
	.word	558
	.byte	0,0,6,0,0,16
	.word	2815
	.byte	17
	.word	2856
	.byte	7,18
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	21
	.word	557
	.byte	18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,19
	.word	558
	.byte	0,0,6,0,0,16
	.word	2874
	.byte	17
	.word	2930
	.byte	7,18
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	21
	.word	557
	.byte	18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,19
	.word	558
	.byte	0,0,6,0,0,16
	.word	2948
	.byte	17
	.word	2986
	.byte	17
	.word	3000
	.byte	7,18
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	21
	.word	404
	.byte	18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,19
	.word	405
	.byte	18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,19
	.word	406
	.byte	0,0,6,0,0,16
	.word	3024
	.byte	17
	.word	3065
	.byte	17
	.word	3079
	.byte	7,18
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	21
	.word	404
	.byte	18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,19
	.word	405
	.byte	18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,19
	.word	406
	.byte	0,0,6,0,0,16
	.word	3103
	.byte	17
	.word	3144
	.byte	17
	.word	3158
	.byte	7,18
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	21
	.word	404
	.byte	18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,19
	.word	405
	.byte	18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,19
	.word	406
	.byte	0,0,6,0,0,16
	.word	3182
	.byte	17
	.word	3225
	.byte	17
	.word	3239
	.byte	7,18
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	21
	.word	404
	.byte	18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,19
	.word	405
	.byte	18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,19
	.word	406
	.byte	0,0,6,0,0,16
	.word	3263
	.byte	17
	.word	3306
	.byte	17
	.word	3320
	.byte	7,18
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	21
	.word	404
	.byte	18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,19
	.word	405
	.byte	18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,19
	.word	406
	.byte	0,0,6,0,0,16
	.word	3344
	.byte	17
	.word	3382
	.byte	17
	.word	3396
	.byte	7,18
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	21
	.word	404
	.byte	18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,19
	.word	405
	.byte	18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,19
	.word	406
	.byte	0,0,6,0,0,16
	.word	3420
	.byte	17
	.word	3460
	.byte	17
	.word	3474
	.byte	7,18
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	21
	.word	404
	.byte	18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,19
	.word	405
	.byte	18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,19
	.word	406
	.byte	0,0,6,0,0,16
	.word	3498
	.byte	17
	.word	3551
	.byte	17
	.word	3565
	.byte	7,18
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	21
	.word	404
	.byte	18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,19
	.word	405
	.byte	18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,19
	.word	406
	.byte	0,0,6,0,0,16
	.word	3589
	.byte	17
	.word	3619
	.byte	6,0,16
	.word	3637
	.byte	17
	.word	3666
	.byte	6,0,16
	.word	3680
	.byte	17
	.word	3713
	.byte	6,0,16
	.word	3727
	.byte	17
	.word	3759
	.byte	6,0,16
	.word	3776
	.byte	17
	.word	3813
	.byte	7,18
	.word	3727
	.byte	17
	.word	3759
	.byte	19
	.word	3774
	.byte	0,6,0,0,16
	.word	3832
	.byte	17
	.word	3866
	.byte	6,0,16
	.word	3935
	.byte	17
	.word	3979
	.byte	17
	.word	3991
	.byte	7,18
	.word	3637
	.byte	17
	.word	3666
	.byte	19
	.word	3678
	.byte	0,6,0,0,16
	.word	4020
	.byte	17
	.word	4063
	.byte	6,0,16
	.word	4077
	.byte	17
	.word	4113
	.byte	6,0,16
	.word	4127
	.byte	17
	.word	4170
	.byte	6,0,16
	.word	4184
	.byte	17
	.word	4219
	.byte	6,0,16
	.word	4249
	.byte	17
	.word	4281
	.byte	6,0,16
	.word	4294
	.byte	17
	.word	4322
	.byte	7,18
	.word	4249
	.byte	17
	.word	4281
	.byte	19
	.word	4292
	.byte	0,6,0,0,16
	.word	4337
	.byte	17
	.word	4372
	.byte	6,0,16
	.word	4385
	.byte	17
	.word	4417
	.byte	6,0,16
	.word	4430
	.byte	17
	.word	4467
	.byte	6,0,16
	.word	4480
	.byte	6,0,16
	.word	4508
	.byte	6,0,16
	.word	4563
	.byte	17
	.word	4616
	.byte	7,18
	.word	1843
	.byte	17
	.word	1882
	.byte	19
	.word	1901
	.byte	0,6,0,0,16
	.word	4632
	.byte	17
	.word	4685
	.byte	7,18
	.word	1785
	.byte	17
	.word	1823
	.byte	19
	.word	1841
	.byte	0,6,0,0,16
	.word	4701
	.byte	17
	.word	4752
	.byte	6,0,16
	.word	4767
	.byte	17
	.word	4817
	.byte	7,18
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	21
	.word	1182
	.byte	18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,19
	.word	1183
	.byte	0,0,6,0,0,16
	.word	4834
	.byte	17
	.word	4886
	.byte	6,0,16
	.word	4901
	.byte	17
	.word	4950
	.byte	6,0,16
	.word	4965
	.byte	17
	.word	5005
	.byte	7,18
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	21
	.word	1182
	.byte	18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,19
	.word	1183
	.byte	0,0,6,0,0,16
	.word	5022
	.byte	17
	.word	5066
	.byte	6,0,16
	.word	5081
	.byte	17
	.word	5122
	.byte	6,0,16
	.word	5138
	.byte	17
	.word	5181
	.byte	6,0,16
	.word	5197
	.byte	17
	.word	5245
	.byte	6,0,16
	.word	5261
	.byte	17
	.word	5315
	.byte	7,18
	.word	1186
	.byte	17
	.word	1222
	.byte	17
	.word	1236
	.byte	17
	.word	1257
	.byte	19
	.word	1280
	.byte	0,6,0,0,16
	.word	5333
	.byte	17
	.word	5376
	.byte	6,0,16
	.word	5392
	.byte	17
	.word	5437
	.byte	6,0,16
	.word	5466
	.byte	17
	.word	5502
	.byte	6,0,16
	.word	5521
	.byte	17
	.word	5561
	.byte	6,0,16
	.word	5580
	.byte	6,0,16
	.word	5633
	.byte	17
	.word	5669
	.byte	7,18
	.word	1397
	.byte	17
	.word	1428
	.byte	17
	.word	1443
	.byte	19
	.word	1464
	.byte	0,6,0,0,16
	.word	5689
	.byte	17
	.word	5721
	.byte	7,18
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	21
	.word	557
	.byte	18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,19
	.word	558
	.byte	0,0,6,0,0,16
	.word	5742
	.byte	17
	.word	5771
	.byte	6,0,16
	.word	5794
	.byte	17
	.word	5819
	.byte	17
	.word	5835
	.byte	6,0,16
	.word	5857
	.byte	17
	.word	5891
	.byte	6,0,16
	.word	5935
	.byte	17
	.word	5987
	.byte	17
	.word	6003
	.byte	6,0,16
	.word	6033
	.byte	17
	.word	6071
	.byte	17
	.word	6086
	.byte	17
	.word	6102
	.byte	6,0,16
	.word	6133
	.byte	17
	.word	6173
	.byte	17
	.word	6189
	.byte	6,0,16
	.word	6215
	.byte	17
	.word	6273
	.byte	6,0,16
	.word	6294
	.byte	17
	.word	6349
	.byte	6,0,16
	.word	6370
	.byte	17
	.word	6423
	.byte	6,0,16
	.word	6442
	.byte	17
	.word	6488
	.byte	6,0,16
	.word	6504
	.byte	17
	.word	6569
	.byte	7,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	6294
	.byte	17
	.word	6349
	.byte	19
	.word	6368
	.byte	0,6,18
	.word	6033
	.byte	17
	.word	6071
	.byte	17
	.word	6086
	.byte	17
	.word	6102
	.byte	19
	.word	6121
	.byte	0,6,0,0,16
	.word	6593
	.byte	17
	.word	6626
	.byte	6,0,16
	.word	6642
	.byte	17
	.word	6683
	.byte	6,0,16
	.word	6947
	.byte	17
	.word	6991
	.byte	6,0,16
	.word	7014
	.byte	17
	.word	7053
	.byte	7,18
	.word	6947
	.byte	17
	.word	6991
	.byte	19
	.word	7012
	.byte	0,6,0,0,16
	.word	7072
	.byte	17
	.word	7117
	.byte	6,0,16
	.word	7140
	.byte	17
	.word	7184
	.byte	6,0,16
	.word	7207
	.byte	17
	.word	7254
	.byte	6,0,16
	.word	7277
	.byte	17
	.word	7329
	.byte	6,0,16
	.word	7352
	.byte	17
	.word	7407
	.byte	6,0,16
	.word	7430
	.byte	17
	.word	7480
	.byte	6,0,16
	.word	7503
	.byte	17
	.word	7548
	.byte	7,18
	.word	7430
	.byte	17
	.word	7480
	.byte	19
	.word	7501
	.byte	0,6,0,0,16
	.word	7567
	.byte	17
	.word	7608
	.byte	17
	.word	7623
	.byte	6,0,16
	.word	7647
	.byte	17
	.word	7705
	.byte	6,0,16
	.word	7736
	.byte	17
	.word	7790
	.byte	6,0,16
	.word	7813
	.byte	17
	.word	7863
	.byte	6,0,16
	.word	7886
	.byte	17
	.word	7942
	.byte	6,0,16
	.word	7965
	.byte	17
	.word	8010
	.byte	6,0,16
	.word	8038
	.byte	17
	.word	8080
	.byte	6,0,16
	.word	8103
	.byte	17
	.word	8133
	.byte	6,0,16
	.word	8151
	.byte	17
	.word	8180
	.byte	6,0,16
	.word	8198
	.byte	6,0,16
	.word	8232
	.byte	6,0,16
	.word	8275
	.byte	17
	.word	8318
	.byte	6,0,16
	.word	8335
	.byte	17
	.word	8376
	.byte	6,0,16
	.word	8398
	.byte	17
	.word	8438
	.byte	6,0,16
	.word	8465
	.byte	17
	.word	8513
	.byte	6,0,16
	.word	8530
	.byte	17
	.word	8571
	.byte	6,0,16
	.word	8588
	.byte	17
	.word	8623
	.byte	17
	.word	8642
	.byte	17
	.word	8661
	.byte	6,0,16
	.word	8680
	.byte	17
	.word	8715
	.byte	7,18
	.word	4701
	.byte	17
	.word	4752
	.byte	19
	.word	4765
	.byte	0,6,0,0,16
	.word	8736
	.byte	17
	.word	8787
	.byte	6,0,16
	.word	8805
	.byte	17
	.word	8832
	.byte	17
	.word	8848
	.byte	17
	.word	8862
	.byte	6,0,16
	.word	8882
	.byte	17
	.word	8932
	.byte	7,18
	.word	8736
	.byte	17
	.word	8787
	.byte	19
	.word	8803
	.byte	0,6,18
	.word	8736
	.byte	17
	.word	8787
	.byte	19
	.word	8803
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	6947
	.byte	17
	.word	6991
	.byte	19
	.word	7012
	.byte	0,6,18
	.word	6947
	.byte	17
	.word	6991
	.byte	19
	.word	7012
	.byte	0,6,18
	.word	6947
	.byte	17
	.word	6991
	.byte	19
	.word	7012
	.byte	0,6,18
	.word	6947
	.byte	17
	.word	6991
	.byte	19
	.word	7012
	.byte	0,6,18
	.word	6947
	.byte	17
	.word	6991
	.byte	19
	.word	7012
	.byte	0,6,18
	.word	7072
	.byte	17
	.word	7117
	.byte	19
	.word	7138
	.byte	0,6,18
	.word	7430
	.byte	17
	.word	7480
	.byte	19
	.word	7501
	.byte	0,6,18
	.word	7072
	.byte	17
	.word	7117
	.byte	19
	.word	7138
	.byte	0,6,18
	.word	7072
	.byte	17
	.word	7117
	.byte	19
	.word	7138
	.byte	0,6,18
	.word	7430
	.byte	17
	.word	7480
	.byte	19
	.word	7501
	.byte	0,6,18
	.word	7072
	.byte	17
	.word	7117
	.byte	19
	.word	7138
	.byte	0,6,18
	.word	7072
	.byte	17
	.word	7117
	.byte	19
	.word	7138
	.byte	0,6,18
	.word	7072
	.byte	17
	.word	7117
	.byte	19
	.word	7138
	.byte	0,6,18
	.word	7430
	.byte	17
	.word	7480
	.byte	19
	.word	7501
	.byte	0,6,18
	.word	7430
	.byte	17
	.word	7480
	.byte	19
	.word	7501
	.byte	0,6,18
	.word	7072
	.byte	17
	.word	7117
	.byte	19
	.word	7138
	.byte	0,6,18
	.word	7430
	.byte	17
	.word	7480
	.byte	19
	.word	7501
	.byte	0,6,18
	.word	7430
	.byte	17
	.word	7480
	.byte	19
	.word	7501
	.byte	0,6,18
	.word	5333
	.byte	17
	.word	5376
	.byte	19
	.word	5390
	.byte	0,6,18
	.word	5333
	.byte	17
	.word	5376
	.byte	19
	.word	5390
	.byte	0,6,18
	.word	5333
	.byte	17
	.word	5376
	.byte	19
	.word	5390
	.byte	0,6,18
	.word	5333
	.byte	17
	.word	5376
	.byte	19
	.word	5390
	.byte	0,6,18
	.word	5333
	.byte	17
	.word	5376
	.byte	19
	.word	5390
	.byte	0,6,0,0,16
	.word	8988
	.byte	17
	.word	9030
	.byte	6,0,16
	.word	9051
	.byte	17
	.word	9089
	.byte	7,18
	.word	4767
	.byte	17
	.word	4817
	.byte	21
	.word	4830
	.byte	18
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	21
	.word	1182
	.byte	18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,19
	.word	1183
	.byte	0,0,19
	.word	4831
	.byte	0,0,6,0,0,16
	.word	9110
	.byte	6,0,16
	.word	9149
	.byte	17
	.word	9180
	.byte	7,18
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	21
	.word	557
	.byte	18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,19
	.word	558
	.byte	0,0,6,0,0,16
	.word	9198
	.byte	17
	.word	9238
	.byte	6,0,16
	.word	9255
	.byte	17
	.word	9287
	.byte	17
	.word	9304
	.byte	7,18
	.word	4834
	.byte	17
	.word	4886
	.byte	19
	.word	4899
	.byte	0,6,18
	.word	4901
	.byte	17
	.word	4950
	.byte	19
	.word	4963
	.byte	0,6,18
	.word	4767
	.byte	17
	.word	4817
	.byte	21
	.word	4830
	.byte	18
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	21
	.word	1182
	.byte	18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,19
	.word	1183
	.byte	0,0,19
	.word	4831
	.byte	0,0,6,0,0,16
	.word	9326
	.byte	17
	.word	9368
	.byte	6,0,16
	.word	9387
	.byte	17
	.word	9423
	.byte	17
	.word	9437
	.byte	6,0,16
	.word	9456
	.byte	17
	.word	9487
	.byte	17
	.word	9503
	.byte	17
	.word	9525
	.byte	7,18
	.word	3680
	.byte	17
	.word	3713
	.byte	19
	.word	3725
	.byte	0,6,18
	.word	9326
	.byte	17
	.word	9368
	.byte	19
	.word	9385
	.byte	0,6,18
	.word	9326
	.byte	17
	.word	9368
	.byte	19
	.word	9385
	.byte	0,6,18
	.word	4337
	.byte	17
	.word	4372
	.byte	19
	.word	4383
	.byte	0,6,18
	.word	4337
	.byte	17
	.word	4372
	.byte	19
	.word	4383
	.byte	0,6,18
	.word	9387
	.byte	17
	.word	9423
	.byte	17
	.word	9437
	.byte	19
	.word	9454
	.byte	0,6,18
	.word	9387
	.byte	17
	.word	9423
	.byte	17
	.word	9437
	.byte	19
	.word	9454
	.byte	0,6,18
	.word	3637
	.byte	17
	.word	3666
	.byte	19
	.word	3678
	.byte	0,6,18
	.word	3637
	.byte	17
	.word	3666
	.byte	19
	.word	3678
	.byte	0,6,0,0,16
	.word	9559
	.byte	17
	.word	9591
	.byte	6,0,16
	.word	9612
	.byte	17
	.word	9647
	.byte	6,0,22
	.byte	'__INDIRECT__',0,30,1,1,1,1,1,23,1,3
	.word	14364
	.byte	24
	.byte	'__codeptr',0,30,1,1
	.word	14366
	.byte	24
	.byte	'sint8',0,31,76,25
	.word	7728
	.byte	24
	.byte	'uint8',0,31,81,25
	.word	148
	.byte	24
	.byte	'sint16',0,31,86,25
	.word	5453
	.byte	24
	.byte	'uint16',0,31,91,25
	.word	865
	.byte	24
	.byte	'sint32',0,31,96,24
	.word	2003
	.byte	24
	.byte	'uint32',0,31,106,24
	.word	1376
	.byte	2
	.byte	'unsigned long long int',0,8,7,24
	.byte	'uint64',0,31,111,30
	.word	14477
	.byte	24
	.byte	'boolean',0,31,127,25
	.word	148
	.byte	24
	.byte	'uint8_least',0,31,137,1,25
	.word	5914
	.byte	24
	.byte	'uint16_least',0,31,147,1,25
	.word	5914
	.byte	24
	.byte	'StatusType',0,32,191,1,27
	.word	148
	.byte	24
	.byte	'Std_ReturnType',0,32,199,1,15
	.word	148
	.byte	10,32,206,1,9,8,11
	.byte	'vendorID',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	865
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	148
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	148
	.byte	1,2,35,6,0,24
	.byte	'Std_VersionInfoType',0,32,213,1,3
	.word	14621
	.byte	24
	.byte	'Dem_ClientRequestType',0,33,46,16
	.word	865
	.byte	24
	.byte	'Dem_ClientResultType',0,33,47,16
	.word	865
	.byte	24
	.byte	'Dem_ClientSelectionType',0,33,48,16
	.word	1376
	.byte	24
	.byte	'Dem_ClientPriorityType',0,33,50,15
	.word	148
	.byte	24
	.byte	'Dem_ComponentIdType',0,34,20,15
	.word	148
	.byte	24
	.byte	'PduIdType',0,35,22,19
	.word	865
	.byte	24
	.byte	'PduLengthType',0,35,26,19
	.word	865
	.byte	25,36,113,9,4,26
	.byte	'TP_DATACONF',0,0,26
	.byte	'TP_DATARETRY',0,1,26
	.byte	'TP_CONFPENDING',0,2,0,24
	.byte	'TpDataStateType',0,36,118,3
	.word	14961
	.byte	24
	.byte	'Can_IdType',0,37,32,16
	.word	1376
	.byte	24
	.byte	'Can_HwHandleType',0,37,43,16
	.word	865
	.byte	10,38,93,9,8,11
	.byte	'Class',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	1376
	.byte	4,2,35,4,0,24
	.byte	'OsTrapInfoType',0,38,97,3
	.word	15081
	.byte	14,68
	.word	1376
	.byte	15,16,0,10,38,154,1,9,68,11
	.byte	'store',0
	.word	15161
	.byte	68,2,35,0,0,14,68
	.word	15170
	.byte	15,0,0,24
	.byte	'Os_JumpBufType',0,38,156,1,3
	.word	15192
	.byte	24
	.byte	'Os_StackTraceType',0,38,174,1,18
	.word	1376
	.byte	10,38,175,1,9,8,11
	.byte	'sp',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	1376
	.byte	4,2,35,4,0,24
	.byte	'Os_StackValueType',0,38,175,1,63
	.word	15252
	.byte	24
	.byte	'Os_StackSizeType',0,38,176,1,27
	.word	15252
	.byte	27,1,1,3
	.word	15337
	.byte	24
	.byte	'Os_VoidVoidFunctionType',0,38,179,1,16
	.word	15340
	.byte	24
	.byte	'ApplicationType',0,38,193,1,23
	.word	148
	.byte	28
	.byte	'Os_ApplicationConfigurationType_s',0,38,198,1,16,2,11
	.byte	'app_id',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,1,0,24
	.byte	'Os_ApplicationConfigurationType',0,38,201,1,3
	.word	15403
	.byte	24
	.byte	'Os_CoreStateType',0,38,203,1,16
	.word	1376
	.byte	24
	.byte	'AreaIdType',0,38,204,1,16
	.word	865
	.byte	24
	.byte	'Os_PeripheralAddressType',0,38,212,1,22
	.word	1376
	.byte	24
	.byte	'TickType',0,38,221,1,22
	.word	1376
	.byte	24
	.byte	'Os_StopwatchTickType',0,38,225,1,22
	.word	1376
	.byte	24
	.byte	'Os_Lockable',0,38,234,1,18
	.word	1392
	.byte	24
	.byte	'CoreIdType',0,38,236,1,16
	.word	865
	.byte	24
	.byte	'SpinlockIdType',0,38,237,1,16
	.word	865
	.byte	25,38,239,1,9,4,26
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,26
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,24
	.byte	'TryToGetSpinlockType',0,38,239,1,74
	.word	15710
	.byte	25,38,174,2,9,4,26
	.byte	'APPLICATION_ACCESSIBLE',0,0,26
	.byte	'APPLICATION_RESTARTING',0,1,26
	.byte	'APPLICATION_TERMINATED',0,2,0,24
	.byte	'ApplicationStateType',0,38,174,2,92
	.word	15803
	.byte	29
	.byte	'void',0,3
	.word	15915
	.byte	30,1,1,31
	.word	148
	.byte	31
	.word	15921
	.byte	0,3
	.word	15926
	.byte	24
	.byte	'Os_FunctionEntryType',0,38,183,2,16
	.word	15940
	.byte	28
	.byte	'Os_MeterInfoType_s',0,38,193,2,16,48,11
	.byte	'elapsed',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	1376
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	15252
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	15252
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	15252
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	15252
	.byte	8,2,35,40,0,24
	.byte	'Os_MeterInfoType',0,38,202,2,3
	.word	15975
	.byte	3
	.word	15975
	.byte	24
	.byte	'Os_MeterInfoRefType',0,38,203,2,50
	.word	16173
	.byte	24
	.byte	'EventMaskType',0,38,206,2,15
	.word	148
	.byte	24
	.byte	'Os_imaskType',0,38,211,2,16
	.word	1376
	.byte	28
	.byte	'Os_ISRDynType_s',0,38,213,2,16,48,11
	.byte	'meter',0
	.word	15975
	.byte	48,2,35,0,0,24
	.byte	'Os_ISRDynType',0,38,215,2,3
	.word	16252
	.byte	3
	.word	16252
	.byte	9
	.word	16313
	.byte	28
	.byte	'Os_ISRType_s',0,38,216,2,16,24,11
	.byte	'entry_function',0
	.word	15345
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	16318
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	15252
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	148
	.byte	1,2,35,21,0,24
	.byte	'Os_ISRType',0,38,223,2,3
	.word	16323
	.byte	3
	.word	15337
	.byte	9
	.word	16323
	.byte	3
	.word	16482
	.byte	24
	.byte	'ISRType',0,38,224,2,46
	.word	16487
	.byte	24
	.byte	'Os_bitmask',0,38,239,2,22
	.word	1376
	.byte	24
	.byte	'Os_pset0Type',0,38,240,2,20
	.word	1376
	.byte	24
	.byte	'Os_pset1Type',0,38,241,2,20
	.word	1376
	.byte	24
	.byte	'Os_pset2Type',0,38,242,2,20
	.word	1376
	.byte	13,38,243,2,9,4,11
	.byte	'p0',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	1376
	.byte	4,2,35,0,0,24
	.byte	'Os_psetType',0,38,247,2,3
	.word	16595
	.byte	13,38,249,2,9,4,11
	.byte	't0',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	1376
	.byte	4,2,35,0,0,24
	.byte	'Os_tpmaskType',0,38,253,2,3
	.word	16659
	.byte	24
	.byte	'Os_ActivationCountType',0,38,254,2,23
	.word	148
	.byte	28
	.byte	'Os_TaskDynType_s',0,38,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	15201
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	15975
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	148
	.byte	1,2,35,116,0,24
	.byte	'Os_TaskDynType',0,38,132,3,3
	.word	16757
	.byte	14,68
	.word	15170
	.byte	15,0,0,3
	.word	16757
	.byte	9
	.word	16883
	.byte	28
	.byte	'Os_TaskType_s',0,38,134,3,16,40,11
	.byte	'dynamic',0
	.word	16888
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	15345
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	16595
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	16659
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	16659
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	865
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	1376
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	15252
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	148
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	148
	.byte	1,2,35,38,0,24
	.byte	'Os_TaskType',0,38,146,3,3
	.word	16893
	.byte	9
	.word	16893
	.byte	3
	.word	17143
	.byte	24
	.byte	'TaskType',0,38,147,3,47
	.word	17148
	.byte	32
	.byte	'Os_TaskStateType',0,38,155,3,6,4,26
	.byte	'SUSPENDED',0,0,26
	.byte	'READY',0,1,26
	.byte	'WAITING',0,2,26
	.byte	'RUNNING',0,3,0,24
	.byte	'TaskStateType',0,38,156,3,31
	.word	17171
	.byte	13,38,167,3,3,4,11
	.byte	'tpmask',0
	.word	16659
	.byte	4,2,35,0,0,28
	.byte	'Os_ResourceDynType_s',0,38,166,3,16,4,11
	.byte	'saved_priority',0
	.word	17258
	.byte	4,2,35,0,0,24
	.byte	'Os_ResourceDynType',0,38,170,3,3
	.word	17281
	.byte	3
	.word	17281
	.byte	9
	.word	17361
	.byte	28
	.byte	'Os_ResourceType_s',0,38,171,3,16,12,11
	.byte	'dynamic',0
	.word	17366
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	16659
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,8,0,24
	.byte	'Os_ResourceType',0,38,175,3,3
	.word	17371
	.byte	10,38,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	1376
	.byte	4,2,35,8,0,24
	.byte	'AlarmBaseType',0,38,185,3,3
	.word	17470
	.byte	10,38,206,3,9,8,11
	.byte	'Running',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	1376
	.byte	4,2,35,4,0,24
	.byte	'Os_CounterStatusType',0,38,210,3,3
	.word	17565
	.byte	33
	.word	148
	.byte	1,1,3
	.word	17651
	.byte	24
	.byte	'Os_CounterIncrAdvType',0,38,217,3,22
	.word	17658
	.byte	28
	.byte	's_swd',0,38,222,3,12,4,11
	.byte	'count',0
	.word	1376
	.byte	4,2,35,0,0,13,38,221,3,3,4,11
	.byte	'sw',0
	.word	17694
	.byte	4,2,35,0,0,28
	.byte	'Os_CounterDynType_s',0,38,220,3,16,4,11
	.byte	'type_dependent',0
	.word	17722
	.byte	4,2,35,0,0,24
	.byte	'Os_CounterDynType',0,38,226,3,3
	.word	17741
	.byte	3
	.word	17741
	.byte	9
	.word	17819
	.byte	28
	.byte	'Os_CounterType_s',0,38,227,3,16,28,11
	.byte	'dynamic',0
	.word	17824
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	17663
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	17470
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	15921
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	148
	.byte	1,2,35,25,0,24
	.byte	'Os_CounterType',0,38,234,3,3
	.word	17829
	.byte	3
	.word	17651
	.byte	9
	.word	17829
	.byte	3
	.word	17981
	.byte	24
	.byte	'CounterType',0,38,235,3,52
	.word	17986
	.byte	32
	.byte	'Os_ScheduleTableStatusType',0,38,240,3,6,4,26
	.byte	'SCHEDULETABLE_STOPPED',0,0,26
	.byte	'SCHEDULETABLE_NEXT',0,1,26
	.byte	'SCHEDULETABLE_WAITING',0,2,26
	.byte	'SCHEDULETABLE_RUNNING',0,3,26
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,24
	.byte	'ScheduleTableStatusType',0,38,241,3,41
	.word	18012
	.byte	9
	.word	.L159-.L74
	.byte	3
	.word	18212
	.byte	24
	.byte	'ScheduleTableType',0,38,128,4,58
	.word	18217
	.byte	28
	.byte	'Os_ScheduleTableDynType_s',0,38,130,4,16,16,11
	.byte	'match',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	18222
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	18012
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	865
	.byte	2,2,35,12,0,3
	.word	18249
	.byte	9
	.word	18342
.L159:
	.byte	28
	.byte	'Os_ScheduleTableType_s',0,38,247,3,16,16,11
	.byte	'dynamic',0
	.word	18347
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	17991
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	148
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	865
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	148
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	148
	.byte	1,2,35,14,0,24
	.byte	'Os_ScheduleTableType',0,38,255,3,3
	.word	18352
	.byte	9
	.word	18352
	.byte	3
	.word	18532
	.byte	9
	.word	17829
	.byte	3
	.word	18542
	.byte	12
	.word	15645
	.byte	12
	.word	16595
	.byte	12
	.word	16492
	.byte	12
	.word	17153
	.byte	12
	.word	16659
	.byte	12
	.word	148
	.byte	12
	.word	17153
	.byte	28
	.byte	'Os_ControlledCoreType_s',0,38,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	15081
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	18552
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	18557
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	18562
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	18567
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	18572
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	16178
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	15975
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	148
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	18577
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	15252
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	148
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	18582
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	15252
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	148
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	148
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	148
	.byte	1,2,35,110,0,24
	.byte	'Os_ControlledCoreType',0,38,141,7,3
	.word	18587
	.byte	3
	.word	1376
	.byte	9
	.word	16323
	.byte	3
	.word	19043
	.byte	9
	.word	16893
	.byte	3
	.word	19053
	.byte	3
	.word	15975
	.byte	28
	.byte	'Os_AnyCoreType_s',0,38,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	1376
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	1376
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	1376
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	15201
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	148
	.byte	1,2,35,92,0,24
	.byte	'Os_AnyCoreType',0,38,160,7,3
	.word	19068
	.byte	24
	.byte	'Can_TxObjPriorityClassType',0,39,219,3,16
	.word	1376
	.byte	28
	.byte	'Can_TxHwObjectConfigType',0,39,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	1376
	.byte	4,2,35,4,0,24
	.byte	'Can_TxHwObjectConfigType',0,39,252,3,3
	.word	19345
	.byte	28
	.byte	'Can_RxHwObjectConfigType',0,39,129,4,16,12,11
	.byte	'MaskRef',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	148
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	148
	.byte	1,2,35,9,0,24
	.byte	'Can_RxHwObjectConfigType',0,39,147,4,3
	.word	19481
	.byte	14,4
	.word	148
	.byte	15,3,0,28
	.byte	'Can_ControllerMOMapConfigType',0,39,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	19621
	.byte	4,2,35,0,0,24
	.byte	'Can_ControllerMOMapConfigType',0,39,184,4,3
	.word	19630
	.byte	28
	.byte	'Can_NPCRValueType',0,39,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	865
	.byte	2,2,35,0,0,24
	.byte	'Can_NPCRValueType',0,39,191,4,3
	.word	19731
	.byte	28
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,39,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	865
	.byte	2,2,35,4,0,24
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,39,198,4,3
	.word	19806
	.byte	9
	.word	19806
	.byte	3
	.word	19971
	.byte	28
	.byte	'Can_BaudrateConfigPtrType',0,39,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	19976
	.byte	4,2,35,0,0,24
	.byte	'Can_BaudrateConfigPtrType',0,39,204,4,3
	.word	19981
	.byte	28
	.byte	'Can_EventHandlingType',0,39,226,4,16,4,11
	.byte	'CanEventType',0
	.word	19621
	.byte	4,2,35,0,0,24
	.byte	'Can_EventHandlingType',0,39,229,4,3
	.word	20081
	.byte	24
	.byte	'Rte_TransformerErrorCode',0,40,130,1,15
	.word	148
	.byte	24
	.byte	'Rte_TransformerClass',0,40,131,1,15
	.word	148
	.byte	10,40,168,1,9,12,11
	.byte	'in',0
	.word	15921
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	15921
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	865
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	148
	.byte	1,2,35,10,0,24
	.byte	'Rte_QDynType',0,40,173,1,3
	.word	20227
	.byte	25,40,175,1,9,4,26
	.byte	'RTE_DRA',0,0,26
	.byte	'RTE_WOWP',0,1,26
	.byte	'RTE_TASK',0,2,26
	.byte	'RTE_ARE',0,3,26
	.byte	'RTE_EV',0,4,26
	.byte	'RTE_MSI',0,5,0,24
	.byte	'Rte_NotificationType',0,40,182,1,3
	.word	20314
	.byte	3
	.word	20227
	.byte	28
	.byte	'Rte_QCmnType',0,40,184,1,16,24,11
	.byte	'dynamic',0
	.word	20412
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	865
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	865
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	15921
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	15921
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	20314
	.byte	4,2,35,20,0,24
	.byte	'Rte_QCmnType',0,40,192,1,3
	.word	20417
	.byte	24
	.byte	'Rte_AlarmRefType',0,40,224,1,32
	.word	1376
	.byte	24
	.byte	'Rte_AlarmIndexType',0,40,226,1,32
	.word	865
	.byte	14,128,8
	.word	148
	.byte	15,255,7,0,24
	.byte	'Impl_NVM_DstPtrType_1024',0,41,50,15
	.word	20655
	.byte	24
	.byte	'CanIf_u32_impl',0,41,69,16
	.word	1376
	.byte	24
	.byte	'CanIf_u16_impl',0,41,71,16
	.word	865
	.byte	24
	.byte	'CanIf_u8_impl',0,41,73,15
	.word	148
	.byte	24
	.byte	'CanIf_ControllerModeType_Enum_impl',0,41,88,15
	.word	148
	.byte	24
	.byte	'CanIf_PduModeType_Enum_impl',0,41,90,15
	.word	148
	.byte	10,41,92,9,2,11
	.byte	'DeviceMode',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	148
	.byte	1,2,35,1,0,24
	.byte	'CanIf_ControllerStateType_struct_impl',0,41,95,3
	.word	20846
	.byte	24
	.byte	'CanIf_NotifStatusType_Enum_impl',0,41,100,15
	.word	148
	.byte	24
	.byte	'CanSM_boolean_Impl',0,41,120,15
	.word	148
	.byte	24
	.byte	'CanSM_u8_Impl',0,41,123,15
	.word	148
	.byte	24
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,41,128,1,15
	.word	148
	.byte	24
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,41,132,1,15
	.word	148
	.byte	24
	.byte	'CanSM_u16_Impl',0,41,136,1,16
	.word	865
	.byte	24
	.byte	'CanSM_TimerStateType_Enum_impl',0,41,138,1,15
	.word	148
	.byte	10,41,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	148
	.byte	1,2,35,2,0,24
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,41,143,1,3
	.word	21187
	.byte	24
	.byte	'Com_impl_u16',0,41,154,1,16
	.word	865
	.byte	24
	.byte	'Com_impl_u8',0,41,157,1,15
	.word	148
	.byte	24
	.byte	'ComM_uint32_Impl',0,41,173,1,16
	.word	1376
	.byte	24
	.byte	'ComM_uint16_Impl',0,41,175,1,16
	.word	865
	.byte	24
	.byte	'ComM_uint8_Impl',0,41,177,1,15
	.word	148
	.byte	24
	.byte	'ComM_bool_Impl',0,41,179,1,15
	.word	148
	.byte	10,41,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	865
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	148
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	148
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	148
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	148
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	148
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	148
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	148
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	148
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	148
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	148
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	148
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	148
	.byte	1,2,35,21,0,24
	.byte	'ComM_ChannelStruct_Impl',0,41,197,1,3
	.word	21419
	.byte	10,41,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	865
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	148
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	148
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	148
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	148
	.byte	1,2,35,8,0,24
	.byte	'ComM_UserStruct_Impl',0,41,214,1,3
	.word	21923
	.byte	24
	.byte	'Dcm_IOOperationResponseType',0,41,252,1,15
	.word	148
	.byte	24
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	41,138,2,15
	.word	148
	.byte	24
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,41,146,2,15
	.word	148
	.byte	24
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,41,150,2,15
	.word	148
	.byte	24
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,41,154,2,15
	.word	148
	.byte	24
	.byte	'Dem_DTCFormatType',0,41,160,2,15
	.word	148
	.byte	24
	.byte	'Dem_DTCOriginType',0,41,162,2,15
	.word	148
	.byte	24
	.byte	'Dem_EventIdType',0,41,168,2,16
	.word	865
	.byte	24
	.byte	'Dem_EventStatusType',0,41,170,2,15
	.word	148
	.byte	24
	.byte	'Dem_InitMonitorReasonType',0,41,176,2,15
	.word	148
	.byte	24
	.byte	'Dem_OperationCycleIdType',0,41,179,2,15
	.word	148
	.byte	24
	.byte	'Dem_UdsStatusByteType',0,41,185,2,15
	.word	148
	.byte	24
	.byte	'NvM_BlockIdType',0,41,215,2,16
	.word	865
	.byte	24
	.byte	'NvM_RequestResultType',0,41,225,2,15
	.word	148
	.byte	24
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,41,243,3,34
	.word	20666
	.byte	14,128,8
	.word	148
	.byte	15,255,7,0,24
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,41,246,3,34
	.word	20666
	.byte	24
	.byte	'Dem_DTCGroupIdType',0,42,49,15
	.word	148
	.byte	24
	.byte	'Dem_DtcIdType',0,42,50,16
	.word	865
	.byte	24
	.byte	'Dem_ClientIdType',0,42,53,15
	.word	148
	.byte	24
	.byte	'Dem_DtcCodeType',0,42,55,16
	.word	1376
	.byte	24
	.byte	'Dem_boolean_least',0,42,60,17
	.word	148
	.byte	24
	.byte	'Dem_EventCategoryType',0,42,62,15
	.word	148
	.byte	24
	.byte	'Dem_DTCSeverityType',0,42,217,1,15
	.word	148
	.byte	24
	.byte	'Dem_DebugDataType',0,42,131,3,16
	.word	1376
	.byte	24
	.byte	'Dem_DTCKindType',0,42,145,3,16
	.word	148
	.byte	24
	.byte	'Dem_TriggerType',0,42,167,3,15
	.word	148
	.byte	24
	.byte	'Dem_EnCoList',0,43,31,15
	.word	148
	.byte	24
	.byte	'Dem_OperationCycleList',0,44,23,15
	.word	148
	.byte	24
	.byte	'Dem_StoCoList',0,45,32,15
	.word	148
	.byte	24
	.byte	'Rte_TaskRefType',0,46,184,1,32
	.word	17153
	.byte	24
	.byte	'Rte_EventRefType',0,46,185,1,32
	.word	148
	.byte	24
	.byte	'Rte_EventType',0,46,186,1,32
	.word	1376
	.byte	24
	.byte	'Rte_REActCounterType',0,46,252,1,15
	.word	148
	.byte	3
	.word	148
	.byte	24
	.byte	'Rte_REActCounterRefType',0,46,253,1,58
	.word	23443
	.byte	10,46,255,1,9,8,11
	.byte	'task',0
	.word	23339
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	23448
	.byte	4,2,35,4,0,24
	.byte	'Rte_REContainerType',0,46,130,2,3
	.word	23481
	.byte	9
	.word	16893
	.byte	3
	.word	23545
	.byte	3
	.word	148
	.byte	9
	.word	23481
	.byte	3
	.word	23560
	.byte	24
	.byte	'Rte_REContainerRefType',0,46,132,2,60
	.word	23565
	.byte	24
	.byte	'Rte_MSICounterType',0,46,149,2,16
	.word	865
	.byte	3
	.word	865
	.byte	24
	.byte	'Rte_MSICounterRefType',0,46,150,2,56
	.word	23630
	.byte	24
	.byte	'Rte_MSIPendingFlagType',0,46,152,2,17
	.word	148
	.byte	3
	.word	148
	.byte	24
	.byte	'Rte_MSIPendingFlagRefType',0,46,153,2,60
	.word	23698
	.byte	10,46,163,2,9,24,11
	.byte	'counter',0
	.word	23635
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	23703
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	23339
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	23448
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	148
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	865
	.byte	2,2,35,22,0,24
	.byte	'Rte_MSITableEntry',0,46,172,2,3
	.word	23738
	.byte	3
	.word	865
	.byte	3
	.word	148
	.byte	24
	.byte	'Rte_TaskArrayIndex',0,46,179,2,16
	.word	148
	.byte	24
	.byte	'Rte_NrWaitingTasks',0,46,180,2,16
	.word	148
	.byte	10,46,182,2,9,4,11
	.byte	'pending',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	148
	.byte	1,2,35,2,0,24
	.byte	'Rte_WaitableDatum',0,46,186,2,3
	.word	23956
	.byte	3
	.word	23956
	.byte	10,46,226,2,9,12,11
	.byte	'event_id',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	24048
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	1376
	.byte	4,2,35,8,0,24
	.byte	'Rte_WOWP_NotificationType',0,46,230,2,3
	.word	24053
	.byte	9
	.word	24053
	.byte	3
	.word	24142
	.byte	24
	.byte	'Rte_WOWP_NotificationRefType',0,46,232,2,66
	.word	24147
	.byte	24
	.byte	'Rte_ARE_NotificationType',0,46,234,2,29
	.word	23481
	.byte	28
	.byte	'Rte_QTaskType',0,46,243,2,16,28,11
	.byte	'cmn',0
	.word	20417
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23339
	.byte	4,2,35,24,0,24
	.byte	'Rte_QTaskType',0,46,246,2,3
	.word	24224
	.byte	28
	.byte	'Rte_QREType',0,46,250,2,16,28,11
	.byte	'cmn',0
	.word	20417
	.byte	24,2,35,0,11
	.byte	're',0
	.word	23570
	.byte	4,2,35,24,0,24
	.byte	'Rte_QREType',0,46,253,2,3
	.word	24295
	.byte	9
	.word	23481
	.byte	3
	.word	24360
	.byte	28
	.byte	'Rte_QWWPType',0,46,129,3,16,28,11
	.byte	'cmn',0
	.word	20417
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	24152
	.byte	4,2,35,24,0,24
	.byte	'Rte_QWWPType',0,46,132,3,3
	.word	24370
	.byte	9
	.word	24053
	.byte	3
	.word	24438
	.byte	28
	.byte	'Rte_QEvType',0,46,136,3,16,36,11
	.byte	'cmn',0
	.word	20417
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23339
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	148
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	23448
	.byte	4,2,35,32,0,24
	.byte	'Rte_QEvType',0,46,141,3,3
	.word	24448
	.byte	28
	.byte	'Rte_QMSIType',0,46,145,3,16,48,11
	.byte	'cmn',0
	.word	20417
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23339
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	148
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	23448
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	23635
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	23703
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	865
	.byte	2,2,35,44,0,24
	.byte	'Rte_QMSIType',0,46,153,3,3
	.word	24543
	.byte	24
	.byte	'rba_BswSrv_uint64',0,4,66,28
	.word	14477
	.byte	24
	.byte	'Dem_EvtStateType',0,47,151,1,15
	.word	148
	.byte	24
	.byte	'Dem_DtcStateType',0,48,47,15
	.word	148
	.byte	24
	.byte	'Dem_EvMemOccurrenceCounterType',0,23,90,21
	.word	148
	.byte	24
	.byte	'Dem_EvMemAgingCounterType',0,23,99,21
	.word	148
	.byte	24
	.byte	'Dem_EvMemHdrType',0,23,141,1,4
	.word	6739
	.byte	24
	.byte	'Dem_EvMemEventMemoryType',0,23,213,1,4
	.word	6769
	.byte	24
	.byte	'Dem_InternalEnvData',0,29,25,3
	.word	10529
	.byte	3
	.word	148
	.byte	34
	.word	148
	.byte	1,1,31
	.word	24936
	.byte	0,3
	.word	24941
	.byte	24
	.byte	'Dem_ReadExternalDataElementFnc',0,8,11,26
	.word	24954
	.byte	9
	.word	10529
	.byte	3
	.word	24998
	.byte	34
	.word	148
	.byte	1,1,31
	.word	24936
	.byte	31
	.word	25003
	.byte	0,3
	.word	25008
	.byte	24
	.byte	'Dem_ReadInternalDataElementFnc',0,8,12,26
	.word	25026
	.byte	10,8,15,9,12,11
	.byte	'ReadExternalFnc',0
	.word	24959
	.byte	4,2,35,0,11
	.byte	'ReadInternalFnc',0
	.word	25031
	.byte	4,2,35,4,11
	.byte	'Size',0
	.word	148
	.byte	1,2,35,8,11
	.byte	'captureOnRetrieve',0
	.word	148
	.byte	1,2,35,9,0,24
	.byte	'Dem_EnvDataElement',0,8,25,3
	.word	25070
	.byte	3
	.word	24941
	.byte	3
	.word	25008
	.byte	14,48
	.word	25070
	.byte	15,3,0
.L151:
	.byte	9
	.word	25204
	.byte	24
	.byte	'Dem_EventIdIterator',0,11,27,22
	.word	5914
	.byte	24
	.byte	'Dem_DtcIdIterator',0,11,197,1,22
	.word	5914
	.byte	24
	.byte	'Dem_DtcGroupIdIterator',0,11,230,1,21
	.word	5914
	.byte	24
	.byte	'Dem_EventIdListIterator',0,11,174,2,3
	.word	3898
	.byte	10,11,213,2,9,4,11
	.byte	'it',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	865
	.byte	2,2,35,2,0,24
	.byte	'Dem_DtcIdListIterator',0,11,216,2,3
	.word	25338
	.byte	25,49,31,9,4,26
	.byte	'MEMIF_JOB_OK',0,0,26
	.byte	'MEMIF_JOB_FAILED',0,1,26
	.byte	'MEMIF_JOB_PENDING',0,2,26
	.byte	'MEMIF_JOB_CANCELED',0,3,26
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,26
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,24
	.byte	'MemIf_JobResultType',0,49,39,2
	.word	25401
	.byte	25,50,49,9,4,26
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,26
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,26
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,26
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,26
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,26
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,26
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,24
	.byte	'NvM_Prv_Activities_ten',0,50,58,3
	.word	25559
	.byte	25,50,104,9,4,26
	.byte	'NvM_Prv_idJob_Idle_e',0,0,26
	.byte	'NvM_Prv_idJob_Read_e',0,1,26
	.byte	'NvM_Prv_idJob_Write_e',0,2,26
	.byte	'NvM_Prv_idJob_Erase_e',0,3,26
	.byte	'NvM_Prv_idJob_Restore_e',0,4,26
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,26
	.byte	'NvM_Prv_idJob_Validate_e',0,6,26
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,26
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,26
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,26
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,26
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,26
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,26
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,24
	.byte	'NvM_Prv_idJob_ten',0,50,115,3
	.word	25800
	.byte	24
	.byte	'NvM_Prv_ServiceBit_tuo',0,50,168,1,16
	.word	865
	.byte	24
	.byte	'NvM_Prv_idService_tuo',0,50,173,1,15
	.word	148
	.byte	24
	.byte	'NvM_Prv_idQueue_tuo',0,50,206,1,15
	.word	148
	.byte	10,50,210,1,9,12,11
	.byte	'idService_uo',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	865
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	865
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	15921
	.byte	4,2,35,8,0,24
	.byte	'NvM_Prv_QueueEntry_tst',0,50,225,1,3
	.word	26357
	.byte	10,50,227,1,9,20,11
	.byte	'idJob_en',0
	.word	25800
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	865
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	165
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	148
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	25401
	.byte	4,2,35,16,0,24
	.byte	'NvM_Prv_JobData_tst',0,50,240,1,3
	.word	26483
	.byte	14,5
	.word	148
	.byte	15,4,0,14,10
	.word	865
	.byte	15,4,0,10,51,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	26621
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	26630
	.byte	10,2,35,8,0,24
	.byte	'Dem_GenericNvDataType',0,51,24,4
	.word	26639
	.byte	24
	.byte	'Dem_NvmBlockIdType',0,52,14,34
	.word	148
	.byte	13,52,16,9,20,11
	.byte	'evMemData',0
	.word	6769
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	26639
	.byte	18,2,35,0,0,24
	.byte	'Dem_NvMStorageBufferData',0,52,37,3
	.word	26815
	.byte	24
	.byte	'Dem_NvmBlockStatusType',0,52,59,15
	.word	148
	.byte	24
	.byte	'Dem_NvmResultType',0,52,78,31
	.word	148
	.byte	24
	.byte	'Dem_EvtClearAllowedFncType',0,15,12,26
	.word	24954
	.byte	10,15,26,9,1,11
	.byte	'dataDataContainer_1',0
	.word	148
	.byte	1,2,35,0,0,24
	.byte	'Dem_EvtParam_8Type',0,15,29,3
	.word	26988
	.byte	14,6
	.word	26988
	.byte	15,5,0,9
	.word	27050
	.byte	35
	.byte	'Dem_EvtParam_8',0,15,37,33
	.word	27059
	.byte	1,1,34
	.word	148
	.byte	1,1,31
	.word	148
	.byte	0,3
	.word	27089
	.byte	24
	.byte	'Dem_InitMForEAllowedFncType',0,16,38,27
	.word	27102
	.byte	14,6
	.word	148
	.byte	15,5,0,35
	.byte	'Dem_AllEventsStatusByte',0,17,22,1
	.word	27143
	.byte	1,1,9
	.word	15915
	.byte	3
	.word	27186
	.byte	34
	.word	5914
	.byte	1,1,31
	.word	865
	.byte	31
	.word	24936
	.byte	31
	.word	27191
	.byte	31
	.word	865
	.byte	0,3
	.word	27196
	.byte	24
	.byte	'Dem_DebFilter',0,53,12,23
	.word	27224
	.byte	2
	.byte	'long int',0,4,5,3
	.word	27251
	.byte	30,1,1,31
	.word	27191
	.byte	31
	.word	865
	.byte	31
	.word	27263
	.byte	31
	.word	27263
	.byte	0,3
	.word	27268
	.byte	24
	.byte	'Dem_DebGetLimits',0,53,13,23
	.word	27292
	.byte	30,1,1,31
	.word	865
	.byte	31
	.word	27191
	.byte	31
	.word	865
	.byte	0,3
	.word	27322
	.byte	24
	.byte	'Dem_DebCyclic',0,53,14,16
	.word	27341
	.byte	24
	.byte	'Dem_DebouncedActionType',0,53,35,21
	.word	5914
	.byte	13,54,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	19621
	.byte	4,2,35,0,0,24
	.byte	'Dem_EvBuffEnvDataAlignedType',0,54,47,3
	.word	27400
	.byte	10,54,49,9,16,11
	.byte	'envData',0
	.word	27400
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	865
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	1376
	.byte	4,2,35,12,0,24
	.byte	'Dem_EvBuffEvent',0,54,75,2
	.word	27485
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L75:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,21,11,1,49,19,0,0,22,46,0,3,8,58,15,59,15
	.byte	57,15,54,15,63,12,60,12,0,0,23,21,0,54,15,0,0,24,22,0,3,8,58,15,59,15,57,15,73,19,0,0,25,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,26,40,0,3,8,28,13,0,0,27,21,0,54,15,39,12,0,0,28,19,1,3,8,58,15,59,15,57,15,11,15,0
	.byte	0,29,59,0,3,8,0,0,30,21,1,54,15,39,12,0,0,31,5,0,73,19,0,0,32,4,1,3,8,58,15,59,15,57,15,11,15,0,0,33,21
	.byte	0,73,19,54,15,39,12,0,0,34,21,1,73,19,54,15,39,12,0,0,35,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12
	.byte	0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L76:
	.word	.L161-.L160
.L160:
	.half	3
	.word	.L163-.L162
.L162:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Dem.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_InternalEnvData.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L163:
.L161:
	.sdecl	'.debug_info',debug,cluster('Dem_ReadEventStatusByte')
	.sect	'.debug_info'
.L77:
	.word	328
	.half	3
	.word	.L78
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L80,.L79
	.byte	2
	.word	.L73
	.byte	3
	.byte	'Dem_ReadEventStatusByte',0,1,43,16
	.word	.L89
	.byte	1,1,1
	.word	.L70,.L90,.L69
	.byte	4
	.byte	'buffer',0,1,43,48
	.word	.L91,.L92
	.byte	4
	.byte	'internalData',0,1,43,83
	.word	.L93,.L94
	.byte	5
	.word	.L70,.L90
	.byte	6
	.word	.L95,.L96,.L97
	.byte	7
	.word	.L98,.L99
	.byte	8
	.word	.L100,.L96,.L97
	.byte	0,6
	.word	.L101,.L97,.L6
	.byte	7
	.word	.L102,.L103
	.byte	8
	.word	.L104,.L97,.L6
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ReadEventStatusByte')
	.sect	'.debug_abbrev'
.L78:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ReadEventStatusByte')
	.sect	'.debug_line'
.L79:
	.word	.L165-.L164
.L164:
	.half	3
	.word	.L167-.L166
.L166:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0,0
.L167:
	.byte	5,39,7,0,5,2
	.word	.L70
	.byte	3,45,1,4,2,5,26,9
	.half	.L96-.L70
	.byte	3,104,1,5,12,9
	.half	.L168-.L96
	.byte	1,5,38,7,9
	.half	.L169-.L168
	.byte	1,5,26,9
	.half	.L170-.L169
	.byte	1,5,4,9
	.half	.L2-.L170
	.byte	1,4,1,5,5,9
	.half	.L4-.L2
	.byte	3,24,1,4,3,5,12,7,9
	.half	.L97-.L4
	.byte	3,126,1,5,35,9
	.half	.L171-.L97
	.byte	1,5,5,9
	.half	.L172-.L171
	.byte	1,4,1,5,17,9
	.half	.L6-.L172
	.byte	3,4,1,5,16,9
	.half	.L173-.L6
	.byte	3,1,1,5,9,9
	.half	.L174-.L173
	.byte	1,5,16,9
	.half	.L5-.L174
	.byte	3,4,1,5,9,9
	.half	.L175-.L5
	.byte	1,5,1,9
	.half	.L7-.L175
	.byte	3,2,1,7,9
	.half	.L81-.L7
	.byte	0,1,1
.L165:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ReadEventStatusByte')
	.sect	'.debug_ranges'
.L80:
	.word	-1,.L70,0,.L81-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ReadAgingCtrUpCnt')
	.sect	'.debug_info'
.L82:
	.word	1504
	.half	3
	.word	.L83
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L85,.L84
	.byte	2
	.word	.L73
	.byte	3
	.byte	'Dem_ReadAgingCtrUpCnt',0,1,59,16
	.word	.L89
	.byte	1,1,1
	.word	.L72,.L105,.L71
	.byte	4
	.byte	'Buffer',0,1,59,45
	.word	.L91,.L106
	.byte	4
	.byte	'internalData',0,1,59,80
	.word	.L93,.L107
	.byte	5
	.word	.L72,.L105
	.byte	6
	.word	.L108,.L109,.L110
	.byte	7
	.word	.L111,.L112
	.byte	8
	.word	.L113,.L109,.L110
	.byte	9
	.byte	'AgingCounter',0,2,73,15
	.word	.L114,.L115
	.byte	6
	.word	.L116,.L109,.L10
	.byte	7
	.word	.L117,.L118
	.byte	10
	.word	.L119,.L109,.L10
	.byte	0,6
	.word	.L116,.L120,.L11
	.byte	7
	.word	.L117,.L118
	.byte	10
	.word	.L119,.L120,.L11
	.byte	0,6
	.word	.L121,.L122,.L14
	.byte	7
	.word	.L123,.L124
	.byte	10
	.word	.L125,.L122,.L14
	.byte	0,6
	.word	.L126,.L14,.L15
	.byte	7
	.word	.L127,.L128
	.byte	10
	.word	.L129,.L14,.L15
	.byte	0,6
	.word	.L130,.L15,.L16
	.byte	7
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L15,.L16
	.byte	0,6
	.word	.L116,.L12,.L18
	.byte	7
	.word	.L117,.L118
	.byte	10
	.word	.L119,.L12,.L18
	.byte	0,6
	.word	.L116,.L134,.L19
	.byte	7
	.word	.L117,.L118
	.byte	10
	.word	.L119,.L134,.L19
	.byte	0,6
	.word	.L135,.L136,.L21
	.byte	7
	.word	.L137,.L138
	.byte	10
	.word	.L139,.L136,.L21
	.byte	0,6
	.word	.L135,.L22,.L24
	.byte	7
	.word	.L137,.L138
	.byte	10
	.word	.L139,.L22,.L24
	.byte	0,6
	.word	.L121,.L140,.L27
	.byte	7
	.word	.L123,.L124
	.byte	10
	.word	.L125,.L140,.L27
	.byte	0,6
	.word	.L126,.L27,.L28
	.byte	7
	.word	.L127,.L128
	.byte	10
	.word	.L129,.L27,.L28
	.byte	0,6
	.word	.L121,.L25,.L30
	.byte	7
	.word	.L123,.L124
	.byte	10
	.word	.L125,.L25,.L30
	.byte	0,6
	.word	.L141,.L30,.L31
	.byte	7
	.word	.L142,.L143
	.byte	10
	.word	.L144,.L30,.L31
	.byte	0,6
	.word	.L130,.L31,.L32
	.byte	7
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L31,.L32
	.byte	0,6
	.word	.L116,.L20,.L34
	.byte	7
	.word	.L117,.L118
	.byte	10
	.word	.L119,.L20,.L34
	.byte	0,6
	.word	.L116,.L145,.L35
	.byte	7
	.word	.L117,.L118
	.byte	10
	.word	.L119,.L145,.L35
	.byte	0,6
	.word	.L135,.L146,.L37
	.byte	7
	.word	.L137,.L138
	.byte	10
	.word	.L139,.L146,.L37
	.byte	0,6
	.word	.L121,.L147,.L40
	.byte	7
	.word	.L123,.L124
	.byte	10
	.word	.L125,.L147,.L40
	.byte	0,6
	.word	.L126,.L40,.L41
	.byte	7
	.word	.L127,.L128
	.byte	10
	.word	.L129,.L40,.L41
	.byte	0,6
	.word	.L135,.L38,.L43
	.byte	7
	.word	.L137,.L138
	.byte	10
	.word	.L139,.L38,.L43
	.byte	0,6
	.word	.L121,.L44,.L46
	.byte	7
	.word	.L123,.L124
	.byte	10
	.word	.L125,.L44,.L46
	.byte	0,6
	.word	.L121,.L46,.L47
	.byte	7
	.word	.L123,.L124
	.byte	10
	.word	.L125,.L46,.L47
	.byte	0,6
	.word	.L141,.L47,.L48
	.byte	7
	.word	.L142,.L143
	.byte	10
	.word	.L144,.L47,.L48
	.byte	0,6
	.word	.L130,.L48,.L49
	.byte	7
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L48,.L49
	.byte	0,6
	.word	.L126,.L50,.L51
	.byte	7
	.word	.L127,.L128
	.byte	10
	.word	.L129,.L50,.L51
	.byte	0,6
	.word	.L116,.L36,.L53
	.byte	7
	.word	.L117,.L118
	.byte	10
	.word	.L119,.L36,.L53
	.byte	0,6
	.word	.L116,.L148,.L54
	.byte	7
	.word	.L117,.L118
	.byte	10
	.word	.L119,.L148,.L54
	.byte	0,6
	.word	.L135,.L149,.L56
	.byte	7
	.word	.L137,.L138
	.byte	10
	.word	.L139,.L149,.L56
	.byte	0,6
	.word	.L130,.L150,.L58
	.byte	7
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L150,.L58
	.byte	0,6
	.word	.L121,.L57,.L60
	.byte	7
	.word	.L123,.L124
	.byte	10
	.word	.L125,.L57,.L60
	.byte	0,6
	.word	.L130,.L60,.L62
	.byte	7
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L60,.L62
	.byte	0,6
	.word	.L126,.L62,.L63
	.byte	7
	.word	.L127,.L128
	.byte	10
	.word	.L129,.L62,.L63
	.byte	0,6
	.word	.L130,.L55,.L17
	.byte	7
	.word	.L131,.L132
	.byte	10
	.word	.L133,.L55,.L17
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ReadAgingCtrUpCnt')
	.sect	'.debug_abbrev'
.L83:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,52,0,3,8,58,15,59,15,57,15,73
	.byte	16,2,6,0,0,10,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ReadAgingCtrUpCnt')
	.sect	'.debug_line'
.L84:
	.word	.L177-.L176
.L176:
	.half	3
	.word	.L179-.L178
.L178:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0,0
.L179:
	.byte	5,21,7,0,5,2
	.word	.L72
	.byte	3,60,1,5,5,9
	.half	.L180-.L72
	.byte	1,4,3,7,9
	.half	.L109-.L180
	.byte	3,105,1,4,2,5,75,9
	.half	.L10-.L109
	.byte	3,37,1,4,3,5,5,9
	.half	.L120-.L10
	.byte	3,91,1,4,2,5,2,9
	.half	.L11-.L120
	.byte	3,37,1,4,4,5,33,7,9
	.half	.L122-.L11
	.byte	3,207,0,1,5,5,9
	.half	.L181-.L122
	.byte	1,4,5,5,9,9
	.half	.L14-.L181
	.byte	3,17,1,5,23,9
	.half	.L182-.L14
	.byte	1,5,29,9
	.half	.L183-.L182
	.byte	1,5,2,9
	.half	.L184-.L183
	.byte	1,4,4,5,39,9
	.half	.L15-.L184
	.byte	3,223,0,1,5,7,9
	.half	.L185-.L15
	.byte	1,4,2,5,96,9
	.half	.L16-.L185
	.byte	3,195,126,1,5,81,9
	.half	.L152-.L16
	.byte	1,4,3,5,5,9
	.half	.L12-.L152
	.byte	3,89,1,4,2,5,80,9
	.half	.L18-.L12
	.byte	3,41,1,4,3,5,5,9
	.half	.L134-.L18
	.byte	3,87,1,4,2,5,7,9
	.half	.L19-.L134
	.byte	3,41,1,4,4,5,33,7,9
	.half	.L136-.L19
	.byte	3,57,1,5,5,9
	.half	.L186-.L136
	.byte	1,4,2,5,3,9
	.half	.L21-.L186
	.byte	3,73,1,5,17,7,9
	.half	.L187-.L21
	.byte	3,2,1,5,20,9
	.half	.L153-.L187
	.byte	1,4,4,5,33,9
	.half	.L22-.L153
	.byte	3,53,1,5,5,9
	.half	.L188-.L22
	.byte	1,4,2,5,8,9
	.half	.L24-.L188
	.byte	3,77,1,4,4,5,33,7,9
	.half	.L140-.L24
	.byte	3,197,0,1,5,5,9
	.half	.L189-.L140
	.byte	1,4,5,5,9,9
	.half	.L27-.L189
	.byte	3,17,1,5,23,9
	.half	.L190-.L27
	.byte	1,5,29,9
	.half	.L191-.L190
	.byte	1,5,2,9
	.half	.L154-.L191
	.byte	1,4,2,5,82,9
	.half	.L28-.L154
	.byte	3,172,127,1,4,4,5,5,9
	.half	.L25-.L28
	.byte	3,195,0,1,4,2,9
	.half	.L30-.L25
	.byte	3,131,127,1,4,4,5,39,9
	.half	.L31-.L30
	.byte	3,237,1,1,5,7,9
	.half	.L192-.L31
	.byte	1,4,2,5,149,1,9
	.half	.L32-.L192
	.byte	3,209,126,1,5,34,9
	.half	.L193-.L32
	.byte	1,5,3,9
	.half	.L23-.L193
	.byte	3,122,1,4,3,5,5,9
	.half	.L20-.L23
	.byte	3,81,1,4,2,5,80,9
	.half	.L34-.L20
	.byte	3,56,1,4,3,5,5,9
	.half	.L145-.L34
	.byte	3,72,1,4,2,5,7,9
	.half	.L35-.L145
	.byte	3,56,1,4,4,5,33,7,9
	.half	.L146-.L35
	.byte	3,42,1,5,5,9
	.half	.L194-.L146
	.byte	1,4,2,5,3,9
	.half	.L37-.L194
	.byte	3,88,1,4,4,5,33,7,9
	.half	.L147-.L37
	.byte	3,58,1,5,5,9
	.half	.L195-.L147
	.byte	1,4,5,5,9,9
	.half	.L40-.L195
	.byte	3,17,1,5,23,9
	.half	.L196-.L40
	.byte	1,5,29,9
	.half	.L197-.L196
	.byte	1,5,2,9
	.half	.L155-.L197
	.byte	1,4,2,5,82,9
	.half	.L41-.L155
	.byte	3,183,127,1,4,4,5,33,9
	.half	.L38-.L41
	.byte	3,38,1,5,5,9
	.half	.L198-.L38
	.byte	1,4,2,5,8,9
	.half	.L43-.L198
	.byte	3,92,1,5,17,7,9
	.half	.L199-.L43
	.byte	3,2,1,5,20,9
	.half	.L156-.L199
	.byte	1,4,4,5,33,9
	.half	.L44-.L156
	.byte	3,52,1,5,5,9
	.half	.L200-.L44
	.byte	1,4,2,9
	.half	.L47-.L200
	.byte	3,131,127,1,4,4,5,39,9
	.half	.L48-.L47
	.byte	3,237,1,1,5,7,9
	.half	.L201-.L48
	.byte	1,4,2,5,135,1,9
	.half	.L49-.L201
	.byte	3,225,126,1,5,20,9
	.half	.L202-.L49
	.byte	1,4,5,5,9,9
	.half	.L50-.L202
	.byte	3,192,0,1,5,23,9
	.half	.L203-.L50
	.byte	1,5,29,9
	.half	.L204-.L203
	.byte	1,5,2,9
	.half	.L205-.L204
	.byte	1,4,2,5,97,9
	.half	.L51-.L205
	.byte	3,191,127,1,5,3,9
	.half	.L42-.L51
	.byte	3,122,1,4,3,5,5,9
	.half	.L36-.L42
	.byte	3,66,1,4,2,5,80,9
	.half	.L53-.L36
	.byte	3,200,0,1,4,3,5,5,9
	.half	.L148-.L53
	.byte	3,184,127,1,4,2,5,7,9
	.half	.L54-.L148
	.byte	3,200,0,1,4,4,5,33,7,9
	.half	.L149-.L54
	.byte	3,26,1,5,5,9
	.half	.L206-.L149
	.byte	1,4,2,5,3,9
	.half	.L56-.L206
	.byte	3,104,1,4,4,5,39,7,9
	.half	.L150-.L56
	.byte	3,154,1,1,5,7,9
	.half	.L157-.L150
	.byte	1,4,2,5,69,9
	.half	.L58-.L157
	.byte	3,232,126,1,4,4,5,33,9
	.half	.L57-.L58
	.byte	3,40,1,5,5,9
	.half	.L207-.L57
	.byte	1,5,39,9
	.half	.L60-.L207
	.byte	3,240,0,1,5,7,9
	.half	.L208-.L60
	.byte	1,4,5,5,9,9
	.half	.L62-.L208
	.byte	3,161,127,1,5,23,9
	.half	.L209-.L62
	.byte	1,5,29,9
	.half	.L210-.L209
	.byte	1,5,2,9
	.half	.L211-.L210
	.byte	1,4,2,5,113,9
	.half	.L63-.L211
	.byte	3,75,1,5,34,9
	.half	.L212-.L63
	.byte	1,5,3,9
	.half	.L59-.L212
	.byte	3,126,1,4,4,5,39,9
	.half	.L55-.L59
	.byte	3,150,1,1,5,7,9
	.half	.L158-.L55
	.byte	1,4,2,5,2,9
	.half	.L17-.L158
	.byte	3,244,126,1,4,1,5,17,9
	.half	.L66-.L17
	.byte	3,65,1,5,94,9
	.half	.L110-.L66
	.byte	1,5,19,9
	.half	.L9-.L110
	.byte	3,4,1,5,17,9
	.half	.L213-.L9
	.byte	1,5,12,9
	.half	.L67-.L213
	.byte	3,2,1,5,5,9
	.half	.L214-.L67
	.byte	1,5,1,9
	.half	.L68-.L214
	.byte	3,1,1,7,9
	.half	.L86-.L68
	.byte	0,1,1
.L177:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ReadAgingCtrUpCnt')
	.sect	'.debug_ranges'
.L85:
	.word	-1,.L72,0,.L86-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_Cfg_EnvDataElement')
	.sect	'.debug_info'
.L87:
	.word	184
	.half	3
	.word	.L88
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L73
	.byte	3
	.byte	'Dem_Cfg_EnvDataElement',0,30,19,26
	.word	.L151
	.byte	1,5,3
	.word	Dem_Cfg_EnvDataElement
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_Cfg_EnvDataElement')
	.sect	'.debug_abbrev'
.L88:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ReadAgingCtrUpCnt')
	.sect	'.debug_loc'
.L115:
	.word	-1,.L72,.L152-.L72,.L12-.L72
	.half	1
	.byte	95
	.word	.L153-.L72,.L22-.L72
	.half	1
	.byte	95
	.word	.L154-.L72,.L25-.L72
	.half	1
	.byte	95
	.word	.L23-.L72,.L20-.L72
	.half	1
	.byte	95
	.word	.L155-.L72,.L38-.L72
	.half	1
	.byte	95
	.word	.L156-.L72,.L44-.L72
	.half	1
	.byte	95
	.word	.L51-.L72,.L36-.L72
	.half	1
	.byte	95
	.word	.L157-.L72,.L57-.L72
	.half	1
	.byte	95
	.word	.L59-.L72,.L55-.L72
	.half	1
	.byte	95
	.word	.L158-.L72,.L9-.L72
	.half	1
	.byte	95
	.word	0,0
.L106:
	.word	-1,.L72,0,.L105-.L72
	.half	1
	.byte	100
	.word	0,0
.L71:
	.word	-1,.L72,0,.L105-.L72
	.half	2
	.byte	138,0
	.word	0,0
.L143:
	.word	0,0
.L112:
	.word	0,0
.L138:
	.word	0,0
.L124:
	.word	0,0
.L132:
	.word	0,0
.L128:
	.word	0,0
.L107:
	.word	-1,.L72,0,.L105-.L72
	.half	1
	.byte	101
	.word	0,0
.L118:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ReadEventStatusByte')
	.sect	'.debug_loc'
.L69:
	.word	-1,.L70,0,.L90-.L70
	.half	2
	.byte	138,0
	.word	0,0
.L103:
	.word	0,0
.L92:
	.word	-1,.L70,0,.L90-.L70
	.half	1
	.byte	100
	.word	0,0
.L99:
	.word	0,0
.L94:
	.word	-1,.L70,0,.L90-.L70
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L215:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_ReadEventStatusByte')
	.sect	'.debug_frame'
	.word	20
	.word	.L215,.L70,.L90-.L70
	.byte	8,18,8,19,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_ReadAgingCtrUpCnt')
	.sect	'.debug_frame'
	.word	20
	.word	.L215,.L72,.L105-.L72
	.byte	8,19,8,22,8,23,0,0

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    71  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    72  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    73  #if (DEM_CFG_READDEM_AGINGCTR_DOWNCNT_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    74  Std_ReturnType Dem_ReadAgingCtrDownCnt(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    75  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    76      if (internalData->evMemLocation != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    77      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    78      	*Buffer = (uint8)(Dem_EvtParam_GetAgingThreshold(internalData->eventId) - Dem_EvMemGetEventMemAgingCounterScaled (internalData->evMemLocation));
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    79      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    80      else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    81      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    82          *Buffer = 0;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    83      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    84      return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    85  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    86  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    87  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    88  #if (DEM_CFG_READDEM_OCCCTR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    89  Std_ReturnType Dem_ReadOccCtr(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    90  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    91  	if (internalData->evMemLocation != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    92  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    93  		*Buffer = (uint8)Dem_EvMemGetEventMemOccurrenceCounterByPtr(internalData->evMemLocation);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    94  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    95  	else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    96  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    97  		*Buffer = 0;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    98  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	    99  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   100  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   101  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   102  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   103  #if (DEM_CFG_READDEM_OVFLIND_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   104  Std_ReturnType Dem_ReadOvflInd(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   105  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   106  	DEM_UNUSED_PARAM(internalData);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   107  	/* Overflow Indicator supported for PRIMARY Memory */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   108  	*Buffer = DEM_BOOL2BIT( Dem_EvMemGenIsOverflow(DEM_DTC_ORIGIN_PRIMARY_MEMORY) );
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   109  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   110  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   111  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   112  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   113  #if (DEM_CFG_READDEM_SIGNIFICANCE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   114  Std_ReturnType Dem_ReadSignificance(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   115  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   116  	*Buffer = Dem_EvtParam_GetSignificance(internalData->eventId);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   117  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   118  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   119  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   120  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   121  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   122  #if (DEM_CFG_READDEM_CURRENT_FDC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   123  Std_ReturnType Dem_ReadCurrentFDC(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   124  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   125      *Buffer = (uint8)Dem_DtcFaultDetectionRetrieve(Dem_DtcIdFromEventId(internalData->eventId));
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   126  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   127  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   128  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   129  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   130  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   131  Std_ReturnType Dem_ReadMaxFdcDuringCurrentCycle(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   132  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   133  	if (internalData->evMemLocation != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   134  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   135  		*Buffer = (uint8)Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(internalData->evMemLocation);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   136  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   137  	else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   138  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   139  		*Buffer = 0;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   140  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   141  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   142  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   143  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   144  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   145  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   146  Std_ReturnType Dem_ReadMaxFdcSinceLastClear(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   147  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   148  	if (internalData->evMemLocation != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   149  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   150  		*Buffer = (uint8)Dem_EvMemGetMaxFdcSinceLastClearByPtr(internalData->evMemLocation);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   151  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   152  	else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   153  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   154  		*Buffer = 0;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   155  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   156  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   157  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   158  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   159  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   160  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   161  Std_ReturnType Dem_ReadCyclesSinceFirstFailed(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   162  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   163  	if (internalData->evMemLocation != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   164  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   165  		*Buffer = Dem_EvMemGetCyclesSinceFirstFailedByPtr(internalData->evMemLocation);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   166  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   167  	else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   168  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   169  		*Buffer = 0;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   170  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   171  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   172  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   173  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   174  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   175  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   176  Std_ReturnType Dem_ReadCyclesSinceLastFailed(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   177  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   178  	if (internalData->evMemLocation != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   179  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   180  		*Buffer = Dem_EvMemGetCyclesSinceLastFailedByPtr(internalData->evMemLocation);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   181  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   182  	else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   183  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   184  		*Buffer = 0;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   185  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   186  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   187  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   188  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   189  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   190  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   191  Std_ReturnType Dem_ReadCyclesSinceLastFailedExcludingTNC(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   192  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   193  	if (internalData->evMemLocation != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   194  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   195  		*Buffer = Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(internalData->evMemLocation);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   196  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   197  	else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   198  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   199  		*Buffer = 0;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   200  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   201  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   202  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   203  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   204  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   205  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   206  Std_ReturnType Dem_ReadFailedCycles(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   207  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   208  	if (internalData->evMemLocation != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   209  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   210  		*Buffer = Dem_EvMemGetFailedCyclesByPtr(internalData->evMemLocation);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   211  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   212  	else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   213  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   214  		*Buffer = 0;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   215  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   216  	return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   217  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   218  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   219  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   220  #if (DEM_CFG_READDEM_EVENT_ID_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   221  Std_ReturnType Dem_ReadEventId(uint8* Buffer, const Dem_InternalEnvData* internalData)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   222  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   223      Dem_BigEndian_WriteValue2Buffer(Buffer, internalData->eventId, DEM_SIZEOF_TYPE( Dem_EventIdType ));
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   224      return E_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   225  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   226  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   227  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   228  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvDataElement.c	   229  #include "Dem_Cfg_MemMap.h"

	; Module end
