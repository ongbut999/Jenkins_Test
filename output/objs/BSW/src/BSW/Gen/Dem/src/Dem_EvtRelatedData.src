	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc16364a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_EvtRelatedData.src BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c'

	
$TC16X
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_DltGetAllExtendedDataRecords',code,cluster('Dem_DltGetAllExtendedDataRecords')
	.sect	'.text.Dem_EvtRelatedData.Dem_DltGetAllExtendedDataRecords'
	.align	2
	
	.global	Dem_DltGetAllExtendedDataRecords

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     1  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     2  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     4  #include "Dem_Dlt.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     5  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     6  #include "Dem_EvtRelatedData.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     7  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     8  #include "Dem_EnvMain.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	     9  #include "Dem_EvMemBase.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    10  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    11  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    12  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    13  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    14  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    15  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    16  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    17  Std_ReturnType Dem_DltGetAllExtendedDataRecords(Dem_EventIdType EventId, uint8* DestBuffer, uint16* BufSize)
; Function Dem_DltGetAllExtendedDataRecords
.L194:
Dem_DltGetAllExtendedDataRecords:	.type	func
	sub.a	a10,#24
.L551:
	mov	d8,d4
.L553:
	mov.aa	a12,a4
.L554:
	mov.aa	a13,a5
.L293:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d0,#0
.L681:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d8,#0,.L2
.L682:
	ge.u	d15,d8,#6
.L683:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L3:
.L2:
	j	.L4

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L4:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    18  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    19  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    20  	Std_ReturnType returnValue = E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    21  	Dem_EvMemEventMemoryType ReaderCopy;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    22  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    23  	if (!Dem_isEventIdValid(EventId))
	jne	d0,#0,.L5
.L294:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    24  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    25  		return E_NOT_OK;
	mov	d2,#1
.L684:
	j	.L6
.L5:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L685:
	addsc.a	a15,a15,d8,#2
.L686:
	ld.bu	d0,[a15]
.L687:
	mov	d1,#2
.L304:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L688:
	and	d15,d0,#1
.L689:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L7

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L7:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L690:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L8

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L8:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L9

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L9:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    26  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    27  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    28      if (Dem_EvtIsSuppressed(EventId))
	jeq	d15,#0,.L10
.L299:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    29      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    30          return E_NOT_OK;
	mov	d2,#1
.L691:
	j	.L11
.L10:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    31      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    32  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    33      if ((DestBuffer==NULL_PTR) || (BufSize==NULL_PTR))
	jz.a	a12,.L12
.L692:
	jnz.a	a13,.L13
.L12:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    34      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    35          return E_NOT_OK;
	mov	d2,#1
.L693:
	j	.L14
.L13:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    36      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    37  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    38      if (Dem_EvMemGetReaderCopyOfEventFromEventMemory(&ReaderCopy, EventId) == E_OK)
	lea	a4,[a10]0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L15:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L694:
	addsc.a	a15,a15,d8,#1
.L695:
	ld.hu	d15,[a15]0
.L696:
	mov	d0,#0
.L334:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L697:
	and	d15,#1
.L698:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L16

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L16:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L699:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L17

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L17:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L18:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
	jeq	d15,#0,.L19
.L329:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   195  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   196  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfDtcAndOrigin(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   197  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   198      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   199      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   200              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   201         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   202      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   203          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   204      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   206      return Dem_EvMemGetEventMemoryStatusOfDtc(DtcId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   207  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   208  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   209  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   210  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   211      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   212      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   213              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   214         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   215      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   216          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   217      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   219      return Dem_EvMemGetEventMemoryStatusOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   222  DEM_INLINE uint16_least Dem_EvMemGetMemIdForEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   225      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;
	mov	d5,#0
.L555:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;      (inlined)
	j	.L20

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
.L19:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   227      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   228  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   229  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   230      if(Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   231      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   232          return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   233      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   234  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   235  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;
	mov.u	d5,#65535
.L556:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;      (inlined)
	j	.L21

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }      (inlined)
.L21:
.L20:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
	eq	d15,d5,#0
.L700:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);      (inlined)
	j	.L22

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }      (inlined)
.L22:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
	jne	d15,#0,.L23
.L701:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   238  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   239  DEM_INLINE uint16_least Dem_EvMemGetLocationOfEventFromEventMemory(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   240  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   241      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   242      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   243      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   244          return DEM_EVMEM_INVALID_LOCID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   245      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   247      return Dem_EvMemGetEventMemoryLocIdOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   249  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   251  DEM_INLINE Std_ReturnType Dem_EvMemGetReaderCopyOfEventFromEventMemory(
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   252          Dem_EvMemEventMemoryType* ReaderCopy,
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   253          Dem_EventIdType EventId
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   254  )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   256      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   258      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;
	mov	d2,#1

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;      (inlined)
	j	.L24

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
.L23:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   260      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);
	mov	d4,d8
	call	Dem_EvMemGetReaderCopyOfEvent
.L552:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);      (inlined)
	j	.L25

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   263  }      (inlined)
.L25:
.L24:
	jne	d2,#0,.L26
.L702:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    39      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    40          returnValue = Dem_EnvRetrieveRawED(EventId, DestBuffer, BufSize, Dem_EvMemGetEventMemDataByPtr(&ReaderCopy), &ReaderCopy);
	lea	a6,[a10]0
.L351:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
	add.a	a6,#4
.L703:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;      (inlined)
	j	.L27

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }      (inlined)
.L27:
	lea	a7,[a10]0
	mov	d4,d8
.L557:
	mov.aa	a4,a12
.L559:
	mov.aa	a5,a13
.L560:
	call	Dem_EnvRetrieveRawED
.L558:
	j	.L28
.L26:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    41      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    42  	else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    43  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    44  		return E_NOT_OK;
	mov	d2,#1
.L704:
	j	.L29
.L28:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    45  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    46  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    47  	return returnValue;
	j	.L30

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    48  }
.L30:
.L29:
.L14:
.L11:
.L6:
	ret
.L282:
	
__Dem_DltGetAllExtendedDataRecords_function_end:
	.size	Dem_DltGetAllExtendedDataRecords,__Dem_DltGetAllExtendedDataRecords_function_end-Dem_DltGetAllExtendedDataRecords
.L225:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_DltGetMostRecentFreezeFrameRecordData',code,cluster('Dem_DltGetMostRecentFreezeFrameRecordData')
	.sect	'.text.Dem_EvtRelatedData.Dem_DltGetMostRecentFreezeFrameRecordData'
	.align	2
	
	.global	Dem_DltGetMostRecentFreezeFrameRecordData

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    49  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    50  Std_ReturnType Dem_DltGetMostRecentFreezeFrameRecordData(Dem_EventIdType EventId, uint8* DestBuffer, uint16* BufSize)
; Function Dem_DltGetMostRecentFreezeFrameRecordData
.L196:
Dem_DltGetMostRecentFreezeFrameRecordData:	.type	func
	sub.a	a10,#24
.L561:
	mov	d8,d4
.L563:
	mov.aa	a12,a4
.L564:
	mov.aa	a13,a5
.L362:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d0,#0
.L709:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d8,#0,.L31
.L710:
	ge.u	d15,d8,#6
.L711:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L32:
.L31:
	j	.L33

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L33:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    51  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    52  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    53  	uint16_least ffIndex;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    54  	Std_ReturnType returnValue = E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    55  	Dem_EvMemEventMemoryType ReaderCopy;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    56  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    57  	if (!Dem_isEventIdValid(EventId))
	jne	d0,#0,.L34
.L363:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    58  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    59  		return E_NOT_OK;
	mov	d2,#1
.L712:
	j	.L35
.L34:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L713:
	addsc.a	a15,a15,d8,#2
.L714:
	ld.bu	d0,[a15]
.L715:
	mov	d1,#2
.L367:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L716:
	and	d15,d0,#1
.L717:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L36

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L36:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L718:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L37

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L37:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L38

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L38:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    60  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    61  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    62  	if (Dem_EvtIsSuppressed(EventId))
	jeq	d15,#0,.L39
.L365:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    63  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    64  	    return E_NOT_OK;
	mov	d2,#1
.L719:
	j	.L40
.L39:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    65  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    66  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    67      if ((DestBuffer==NULL_PTR) || (BufSize==NULL_PTR))
	jz.a	a12,.L41
.L720:
	jnz.a	a13,.L42
.L41:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    68      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    69          return E_NOT_OK;
	mov	d2,#1
.L721:
	j	.L43
.L42:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    70      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    71  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    72  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    73      if (Dem_EvMemGetReaderCopyOfEventFromEventMemory(&ReaderCopy, EventId) == E_OK)
	lea	a4,[a10]0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L44:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L722:
	addsc.a	a15,a15,d8,#1
.L723:
	ld.hu	d15,[a15]0
.L724:
	mov	d0,#0
.L378:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L725:
	and	d15,#1
.L726:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L45

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L45:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L727:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L46

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L46:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L47

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L47:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
	jeq	d15,#0,.L48
.L376:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   195  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   196  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfDtcAndOrigin(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   197  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   198      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   199      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   200              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   201         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   202      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   203          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   204      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   206      return Dem_EvMemGetEventMemoryStatusOfDtc(DtcId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   207  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   208  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   209  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   210  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   211      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   212      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   213              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   214         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   215      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   216          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   217      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   219      return Dem_EvMemGetEventMemoryStatusOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   222  DEM_INLINE uint16_least Dem_EvMemGetMemIdForEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   225      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;
	mov	d5,#0
.L565:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;      (inlined)
	j	.L49

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
.L48:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   227      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   228  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   229  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   230      if(Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   231      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   232          return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   233      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   234  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   235  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;
	mov.u	d5,#65535
.L566:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;      (inlined)
	j	.L50

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }      (inlined)
.L50:
.L49:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
	eq	d15,d5,#0
.L728:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);      (inlined)
	j	.L51

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }      (inlined)
.L51:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
	jne	d15,#0,.L52
.L729:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   238  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   239  DEM_INLINE uint16_least Dem_EvMemGetLocationOfEventFromEventMemory(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   240  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   241      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   242      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   243      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   244          return DEM_EVMEM_INVALID_LOCID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   245      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   247      return Dem_EvMemGetEventMemoryLocIdOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   249  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   251  DEM_INLINE Std_ReturnType Dem_EvMemGetReaderCopyOfEventFromEventMemory(
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   252          Dem_EvMemEventMemoryType* ReaderCopy,
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   253          Dem_EventIdType EventId
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   254  )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   256      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   258      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;
	mov	d2,#1

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;      (inlined)
	j	.L53

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
.L52:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   260      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);
	mov	d4,d8
	call	Dem_EvMemGetReaderCopyOfEvent
.L562:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);      (inlined)
	j	.L54

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   263  }      (inlined)
.L54:
.L53:
	jne	d2,#0,.L55
.L385:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
	ld.bu	d15,[a10]12
.L730:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;      (inlined)
	j	.L56

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }      (inlined)
.L56:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    74      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    75  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    76          ffIndex = Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&ReaderCopy);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    77  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    78          if (ffIndex < 1u)
	jne	d15,#0,.L57
.L731:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    79          {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    80              return E_NOT_OK;
	mov	d2,#1
.L732:
	j	.L58
.L57:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    81          }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    82          returnValue = Dem_EnvRetrieveRawFF(EventId, DestBuffer, BufSize, (uint8)(ffIndex - 1u), Dem_EvMemGetEventMemDataByPtr(&ReaderCopy), &ReaderCopy);
	lea	a6,[a10]0
.L389:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
	add.a	a6,#4
.L733:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;      (inlined)
	j	.L59

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }      (inlined)
.L59:
	add	d5,d15,#-1
.L734:
	lea	a7,[a10]0
	mov	d4,d8
.L567:
	mov.aa	a4,a12
.L569:
	mov.aa	a5,a13
.L570:
	call	Dem_EnvRetrieveRawFF
.L568:
	j	.L60
.L55:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    83      }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    84      else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    85  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    86  		returnValue = E_NOT_OK;
	mov	d2,#1
.L60:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    87  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    88  	return returnValue;
	j	.L61

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    89  }
.L61:
.L58:
.L43:
.L40:
.L35:
	ret
.L355:
	
__Dem_DltGetMostRecentFreezeFrameRecordData_function_end:
	.size	Dem_DltGetMostRecentFreezeFrameRecordData,__Dem_DltGetMostRecentFreezeFrameRecordData_function_end-Dem_DltGetMostRecentFreezeFrameRecordData
.L230:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecord',code,cluster('Dem_GetEventExtendedDataRecord')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecord'
	.align	2
	
	.global	Dem_GetEventExtendedDataRecord

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    90  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    91  Std_ReturnType Dem_GetEventExtendedDataRecord(
; Function Dem_GetEventExtendedDataRecord
.L198:
Dem_GetEventExtendedDataRecord:	.type	func
	sub.a	a10,#24
.L571:
	mov	e8,d5,d4
	mov.aa	a12,a4
.L575:
	mov.aa	a13,a5
.L576:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    92  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    93  		uint8 RecordNumber,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    94  		uint8* DestBuffer,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    95  		uint16* BufSize
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    96  )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    97  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    98  #if( DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED != FALSE )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	    99  	Std_ReturnType returnValue = E_NOT_OK;
	mov	d10,#1

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   100  	Dem_TriggerType Trigger;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   101  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   102  	Dem_EvMemEventMemoryType ReaderCopy;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   103  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   104  	/* Entry Condition Check */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   105  	DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_OPMO_ALLFAILUREINFOLOCKED_EVTIDVALID_EVTAVAILABLE(EventId, DEM_DET_APIID_GETEVENTEXTENDEDDATARECORD , E_NOT_OK);
.L62:
.L63:
.L64:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L65
	mov	d4,#54
.L573:
	mov	d5,#0
.L574:
	mov	d6,#48
	mov	d7,#32
	call	Det_ReportError
.L572:
	mov	d2,#1
	j	.L66
.L65:
.L67:
.L68:
.L69:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d0,#0
.L580:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d8,#0,.L70
.L747:
	ge.u	d15,d8,#6
.L581:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L71:
.L70:
	j	.L72

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L72:
	jne	d0,#0,.L73
.L411:
	mov	d4,#54
.L578:
	mov	d5,#0
.L579:
	mov	d6,#48
	mov	d7,#16
	call	Det_ReportError
.L577:
	mov	d2,#1
	j	.L74
.L73:
.L75:
.L76:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L585:
	addsc.a	a15,a15,d8,#2
.L586:
	ld.bu	d0,[a15]
.L748:
	mov	d1,#2
.L415:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L749:
	and	d15,d0,#1
.L750:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L77

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L77:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L751:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L78

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L78:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L79

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L79:
	jeq	d15,#0,.L80
.L413:
	mov	d2,#1
	j	.L81
.L80:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   106  	DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(DestBuffer,DEM_DET_APIID_GETEVENTEXTENDEDDATARECORD,E_NOT_OK);
.L82:
.L83:
	jnz.a	a12,.L84
.L752:
	mov	d4,#54
.L583:
	mov	d5,#0
.L584:
	mov	d6,#48
	mov	d7,#17
	call	Det_ReportError
.L582:
	mov	d2,#1
	j	.L85
.L84:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   107  	DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(BufSize,DEM_DET_APIID_GETEVENTEXTENDEDDATARECORD,E_NOT_OK);
.L86:
.L87:
	jnz.a	a13,.L88
.L753:
	mov	d4,#54
.L588:
	mov	d5,#0
.L589:
	mov	d6,#48
	mov	d7,#17
	call	Det_ReportError
.L587:
	mov	d2,#1
	j	.L89
.L88:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   108  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   109  	if (!Dem_EnvIsEDRNumberValid (EventId, RecordNumber, &Trigger))
	lea	a4,[a10]0
.L591:
	mov	e4,d9,d8
.L592:
	call	Dem_EnvIsEDRNumberValid
.L590:
	jne	d2,#0,.L90
.L754:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   110  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   111  		return E_NOT_OK;
	mov	d2,#1
.L755:
	j	.L91
.L90:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   112  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   113  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   114      if (Dem_EvMemGetReaderCopyOfEventFromEventMemory(&ReaderCopy, EventId) == E_OK)
	lea	a4,[a10]4

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L92:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L593:
	addsc.a	a15,a15,d8,#1
.L594:
	ld.hu	d15,[a15]0
.L756:
	mov	d0,#0
.L426:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L757:
	and	d15,#1
.L758:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L93

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L93:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L759:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L94

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L94:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L95

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L95:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
	jeq	d15,#0,.L96
.L424:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   195  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   196  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfDtcAndOrigin(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   197  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   198      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   199      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   200              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   201         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   202      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   203          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   204      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   206      return Dem_EvMemGetEventMemoryStatusOfDtc(DtcId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   207  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   208  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   209  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   210  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   211      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   212      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   213              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   214         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   215      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   216          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   217      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   219      return Dem_EvMemGetEventMemoryStatusOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   222  DEM_INLINE uint16_least Dem_EvMemGetMemIdForEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   225      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;
	mov	d5,#0
.L595:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;      (inlined)
	j	.L97

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
.L96:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   227      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   228  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   229  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   230      if(Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   231      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   232          return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   233      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   234  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   235  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;
	mov.u	d5,#65535
.L596:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;      (inlined)
	j	.L98

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }      (inlined)
.L98:
.L97:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
	eq	d15,d5,#0
.L760:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);      (inlined)
	j	.L99

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }      (inlined)
.L99:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
	jne	d15,#0,.L100
.L761:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   238  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   239  DEM_INLINE uint16_least Dem_EvMemGetLocationOfEventFromEventMemory(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   240  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   241      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   242      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   243      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   244          return DEM_EVMEM_INVALID_LOCID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   245      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   247      return Dem_EvMemGetEventMemoryLocIdOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   249  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   251  DEM_INLINE Std_ReturnType Dem_EvMemGetReaderCopyOfEventFromEventMemory(
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   252          Dem_EvMemEventMemoryType* ReaderCopy,
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   253          Dem_EventIdType EventId
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   254  )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   256      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   258      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;
	mov	d2,#1

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;      (inlined)
	j	.L101

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
.L100:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   260      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);
	mov	d4,d8
.L598:
	call	Dem_EvMemGetReaderCopyOfEvent
.L597:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);      (inlined)
	j	.L102

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   263  }      (inlined)
.L102:
.L101:
	jne	d2,#0,.L103
.L433:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
	ld.bu	d15,[a10]19
.L762:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;      (inlined)
	j	.L104

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }      (inlined)
.L104:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   115      {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   116  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   117          if (!Dem_EnvIsTriggerSet(Dem_EvMemGetEventMemTriggerByPtr(&ReaderCopy), Trigger))
	ld.bu	d0,[a10]
.L438:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     1  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     2  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     3  #ifndef DEM_ENVTRIGGER_H
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     4  #define DEM_ENVTRIGGER_H
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     5  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     6  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     7  typedef struct
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     8  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	     9  	/* In Parameter */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    10  	Dem_TriggerType currentTrigger;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    11  	Dem_TriggerType storedTrigger;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    12  	/* Out Parameter */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    13  	Dem_TriggerType matchingTrigger;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    14  } Dem_EnvTriggerParamType;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    15  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    16  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    17  DEM_INLINE void Dem_EnvSetTrigger(Dem_TriggerType* trigger, Dem_TriggerType trigger2set)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    18  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    19  	*trigger = (*trigger) | trigger2set;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    20  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    21  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    22  DEM_INLINE Dem_boolean_least Dem_EnvIsAnyTriggerSet(Dem_TriggerType trigger2test)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    23  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    24  	return (Dem_boolean_least)(trigger2test != 0);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    25  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    26  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    27  DEM_INLINE Dem_boolean_least Dem_EnvIsTriggerSet(Dem_TriggerType trigger, Dem_TriggerType trigger2test)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    28  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    29  	return Dem_EnvIsAnyTriggerSet(trigger & trigger2test);
	and	d15,d0
.L446:
	ne	d15,d15,#0
.L763:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    24  	return (Dem_boolean_least)(trigger2test != 0);      (inlined)
	j	.L105

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    25  }      (inlined)
.L105:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    29  	return Dem_EnvIsAnyTriggerSet(trigger & trigger2test);      (inlined)
	j	.L106

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvTrigger.h	    30  }      (inlined)
.L106:
	jne	d15,#0,.L107
.L439:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   118          {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   119  			return E_NOT_OK;
	mov	d2,#1
.L764:
	j	.L108
.L107:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   120  		}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   121  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   122  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   123          if( Dem_EnvRetrieveRawEDR(EventId, RecordNumber, DestBuffer, BufSize, Dem_EvMemGetEventMemDataByPtr(&ReaderCopy), &ReaderCopy) == FALSE )
	lea	a6,[a10]4
.L450:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
	add.a	a6,#4
.L765:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;      (inlined)
	j	.L109

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }      (inlined)
.L109:
	lea	a7,[a10]4
.L599:
	mov	e4,d9,d8
.L600:
	mov.aa	a4,a12
.L601:
	mov.aa	a5,a13
.L603:
	call	Dem_EnvRetrieveRawEDR
.L602:
	eq	d10,d2,#0
.L766:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   124  		{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   125  			returnValue = E_NOT_OK;
	j	.L111
.L110:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   126  		}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   127  		else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   128  		{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   129  		    returnValue = E_OK;
	mov	d10,#0
.L111:
	j	.L112
.L103:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   130  		}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   131  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   132  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   133  	else
.L112:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   134  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   135  		/* Nothing to do here , E_NOT_OK returned at the end of the function */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   136  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   137  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   138  	return returnValue;
	mov	d2,d10
.L604:
	j	.L113

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   139  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   140  #else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   141  	DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   142  	DEM_UNUSED_PARAM(RecordNumber);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   143  	DEM_UNUSED_PARAM(DestBuffer);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   144  	DEM_UNUSED_PARAM(BufSize);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   145  	return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   146  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   147  }
.L113:
.L108:
.L91:
.L89:
.L85:
.L81:
.L74:
.L66:
	ret
.L403:
	
__Dem_GetEventExtendedDataRecord_function_end:
	.size	Dem_GetEventExtendedDataRecord,__Dem_GetEventExtendedDataRecord_function_end-Dem_GetEventExtendedDataRecord
.L245:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecordForRTE',code,cluster('Dem_GetEventExtendedDataRecordForRTE')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecordForRTE'
	.align	2
	
	.global	Dem_GetEventExtendedDataRecordForRTE

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   148  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   149  Std_ReturnType Dem_GetEventExtendedDataRecordForRTE(
; Function Dem_GetEventExtendedDataRecordForRTE
.L200:
Dem_GetEventExtendedDataRecordForRTE:	.type	func
	sub.a	a10,#8
.L605:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   150          Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   151          uint8 RecordNumber,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   152          uint8* DestBuffer
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   153  )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   154  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   155      uint16 bufSize = DEM_SIZEOF_TYPE(Dem_MaxDataValueType);
	mov	d15,#2
.L808:
	st.h	[a10],d15
.L809:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   156      return Dem_GetEventExtendedDataRecord(EventId, RecordNumber, DestBuffer, &bufSize);
	lea	a5,[a10]0
	call	Dem_GetEventExtendedDataRecord
.L606:
	j	.L114

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   157  }
.L114:
	ret
.L521:
	
__Dem_GetEventExtendedDataRecordForRTE_function_end:
	.size	Dem_GetEventExtendedDataRecordForRTE,__Dem_GetEventExtendedDataRecordForRTE_function_end-Dem_GetEventExtendedDataRecordForRTE
.L260:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecord_GeneralEvtInfo',code,cluster('Dem_GetEventExtendedDataRecord_GeneralEvtInfo')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecord_GeneralEvtInfo'
	.align	2
	
	.global	Dem_GetEventExtendedDataRecord_GeneralEvtInfo

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   158  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   159  Std_ReturnType Dem_GetEventExtendedDataRecord_GeneralEvtInfo(
; Function Dem_GetEventExtendedDataRecord_GeneralEvtInfo
.L202:
Dem_GetEventExtendedDataRecord_GeneralEvtInfo:	.type	func

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   160          Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   161          uint8 RecordNumber,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   162          uint8* DestBuffer
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   163  )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   164  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   165      return Dem_GetEventExtendedDataRecordForRTE(EventId, RecordNumber, DestBuffer);
	call	Dem_GetEventExtendedDataRecordForRTE
.L607:
	j	.L115

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   166  }
.L115:
	ret
.L526:
	
__Dem_GetEventExtendedDataRecord_GeneralEvtInfo_function_end:
	.size	Dem_GetEventExtendedDataRecord_GeneralEvtInfo,__Dem_GetEventExtendedDataRecord_GeneralEvtInfo_function_end-Dem_GetEventExtendedDataRecord_GeneralEvtInfo
.L265:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecordEx',code,cluster('Dem_GetEventExtendedDataRecordEx')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecordEx'
	.align	2
	
	.global	Dem_GetEventExtendedDataRecordEx

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   167  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   168  Std_ReturnType Dem_GetEventExtendedDataRecordEx(Dem_EventIdType EventId, uint8 RecordNumber, uint8* DestBuffer, uint16* BufSize)
; Function Dem_GetEventExtendedDataRecordEx
.L204:
Dem_GetEventExtendedDataRecordEx:	.type	func

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   169  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   170      return Dem_GetEventExtendedDataRecord(EventId, RecordNumber, DestBuffer, BufSize);
	call	Dem_GetEventExtendedDataRecord
.L608:
	j	.L116

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   171  }
.L116:
	ret
.L391:
	
__Dem_GetEventExtendedDataRecordEx_function_end:
	.size	Dem_GetEventExtendedDataRecordEx,__Dem_GetEventExtendedDataRecordEx_function_end-Dem_GetEventExtendedDataRecordEx
.L235:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo',code,cluster('Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo'
	.align	2
	
	.global	Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   172  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   173  Std_ReturnType Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo(Dem_EventIdType EventId, uint8 RecordNumber, uint8* DestBuffer, uint16* BufSize)
; Function Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo
.L206:
Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo:	.type	func

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   174  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   175      return Dem_GetEventExtendedDataRecord(EventId, RecordNumber, DestBuffer, BufSize);
	call	Dem_GetEventExtendedDataRecord
.L609:
	j	.L117

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   176  }
.L117:
	ret
.L516:
	
__Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo_function_end:
	.size	Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo,__Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo_function_end-Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo
.L255:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameData',code,cluster('Dem_GetEventFreezeFrameData')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameData'
	.align	2
	
	.global	Dem_GetEventFreezeFrameData

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   177  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   178  Std_ReturnType Dem_GetEventFreezeFrameData(
; Function Dem_GetEventFreezeFrameData
.L208:
Dem_GetEventFreezeFrameData:	.type	func
	sub.a	a10,#24
.L610:
	mov	e8,d5,d4
	mov	e10,d7,d6
	mov.aa	a12,a4
.L615:
	mov.aa	a13,a5
.L616:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   179  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   180  		uint8 RecordNumber,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   181  		boolean ReportTotalRecord,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   182  		uint16 DataId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   183  		uint8* DestBuffer,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   184  		uint16* BufSize
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   185  )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   186  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   187  #if ( DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED != FALSE )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   188  	Std_ReturnType returnValue = E_NOT_OK;
	mov	d12,#1
.L617:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   189  	uint16_least ffIndex = 0xFFFF;
	mov.u	d5,#65535

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   190  	Dem_EvMemEventMemoryType ReaderCopy;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   191  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   192  	DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_OPMO_ALLFAILUREINFOLOCKED_EVTIDVALID_EVTAVAILABLE(EventId, DEM_DET_APIID_GETEVENTFREEZEFRAMEDATA , E_NOT_OK);
.L118:
.L119:
.L120:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L121
	mov	d4,#54
.L613:
	mov	d5,#0
	mov	d6,#49
.L614:
	mov	d7,#32
.L612:
	call	Det_ReportError
.L611:
	mov	d2,#1
	j	.L122
.L121:
.L123:
.L124:
.L125:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d0,#0
.L622:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d8,#0,.L126
.L771:
	ge.u	d15,d8,#6
.L623:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L127:
.L126:
	j	.L128

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L128:
	jne	d0,#0,.L129
.L462:
	mov	d4,#54
.L620:
	mov	d5,#0
	mov	d6,#49
.L621:
	mov	d7,#16
.L619:
	call	Det_ReportError
.L618:
	mov	d2,#1
	j	.L130
.L129:
.L131:
.L132:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L628:
	addsc.a	a15,a15,d8,#2
.L629:
	ld.bu	d15,[a15]
.L772:
	mov	d0,#2
.L466:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L773:
	and	d15,#1
.L774:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L133

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L133:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L775:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L134

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L134:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L135

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L135:
	jeq	d15,#0,.L136
.L464:
	mov	d2,#1
	j	.L137
.L136:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   193  	DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(DestBuffer,DEM_DET_APIID_GETEVENTFREEZEFRAMEDATA,E_NOT_OK);
.L138:
.L139:
	jnz.a	a12,.L140
.L776:
	mov	d4,#54
.L626:
	mov	d5,#0
	mov	d6,#49
.L627:
	mov	d7,#17
.L625:
	call	Det_ReportError
.L624:
	mov	d2,#1
	j	.L141
.L140:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   194  	DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(BufSize,DEM_DET_APIID_GETEVENTFREEZEFRAMEDATA,E_NOT_OK);
.L142:
.L143:
	jnz.a	a13,.L144
.L777:
	mov	d4,#54
.L632:
	mov	d5,#0
	mov	d6,#49
.L633:
	mov	d7,#17
.L631:
	call	Det_ReportError
.L630:
	mov	d2,#1
	j	.L145
.L144:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     1  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     2  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     3  #ifndef DEM_ENVFFRECNUMERATION_H
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     4  #define DEM_ENVFFRECNUMERATION_H
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     5  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     6  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     7  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     8  #include "Dem_Cfg_EnvFFRecNumeration.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     9  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    10  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    11  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    12  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    13  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    14  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    15  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    16  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumValid(Dem_EventIdType EventId, uint8 RecNumber)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    17  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));
	mov	d0,#0
.L635:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
	jeq	d9,#0,.L146

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L147:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   173  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   174  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   175  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThresholdForTFSLC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   176  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   177  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   178  	return 0u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   179  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   180  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   181  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   182  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureConfirmationThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   183  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   184  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   185  	return 1u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   186  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   187  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   188  LOCAL_INLINE uint8 Dem_EvtParam_GetEventPriority(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   189  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   190  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   191  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 7, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   192  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   193  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   194  LOCAL_INLINE uint8 Dem_EvtParam_GetMaxNumberFreezeFrameRecords(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   195  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L636:
	addsc.a	a15,a15,d8,#1
.L637:
	ld.hu	d1,[a15]0
.L483:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d15,#1
.L638:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d1,d1,#-10
.L778:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d15,#2
.L639:
	div.u	e2,d1,d15
.L779:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L148

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L148:
	extr.u	d15,d3,#0,#8
.L780:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));      (inlined)
	j	.L149

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   198  }      (inlined)
.L149:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
	lt.u	d15,d15,d9
.L640:
	cmovn	d0,d15,#1

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));      (inlined)
.L150:
.L146:
	j	.L151

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    19  }      (inlined)
.L151:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   195  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   196     if (  (!Dem_EnvIsFFRecNumValid(EventId,RecordNumber)) && (RecordNumber != 0xFF)
	jne	d0,#0,.L152
.L472:
	mov	d15,#255
.L641:
	jeq	d15,d9,.L153

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   197  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   198  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   199           && (RecordNumber != 0x00)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   200  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   201  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   202           )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   203     {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   204         DEM_ASSERT_ISNOTLOCKED();
.L154:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   205         return E_NOT_OK;
	mov	d2,#1
.L781:
	j	.L155
.L153:
.L152:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   206     }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   207  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   208     if (Dem_EvMemGetReaderCopyOfEventFromEventMemory(&ReaderCopy, EventId) == E_OK)
	lea	a4,[a10]0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L156:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L642:
	addsc.a	a2,a15,d8,#1
.L643:
	ld.hu	d15,[a2]0
.L782:
	mov	d0,#0
.L498:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L783:
	and	d15,#1
.L784:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L157

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L157:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L785:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L158

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L158:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L159

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L159:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
	jeq	d15,#0,.L160
.L496:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   195  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   196  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfDtcAndOrigin(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   197  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   198      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   199      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   200              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   201         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   202      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   203          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   204      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   206      return Dem_EvMemGetEventMemoryStatusOfDtc(DtcId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   207  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   208  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   209  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   210  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   211      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   212      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   213              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   214         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   215      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   216          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   217      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   219      return Dem_EvMemGetEventMemoryStatusOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   222  DEM_INLINE uint16_least Dem_EvMemGetMemIdForEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   225      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;
	mov	d5,#0
.L644:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;      (inlined)
	j	.L161

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))      (inlined)
.L160:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;      (inlined)
	j	.L162

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }      (inlined)
.L162:
.L161:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
	eq	d15,d5,#0
.L645:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);      (inlined)
	j	.L163

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }      (inlined)
.L163:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
	jne	d15,#0,.L164
.L786:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   227      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   228  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   229  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   230      if(Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   231      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   232          return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   233      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   234  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   235  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   238  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   239  DEM_INLINE uint16_least Dem_EvMemGetLocationOfEventFromEventMemory(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   240  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   241      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   242      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   243      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   244          return DEM_EVMEM_INVALID_LOCID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   245      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   247      return Dem_EvMemGetEventMemoryLocIdOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   249  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   251  DEM_INLINE Std_ReturnType Dem_EvMemGetReaderCopyOfEventFromEventMemory(
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   252          Dem_EvMemEventMemoryType* ReaderCopy,
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   253          Dem_EventIdType EventId
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   254  )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   256      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   258      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;
	mov	d2,#1

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;      (inlined)
	j	.L165

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))      (inlined)
.L164:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   260      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);
	mov	d4,d8
.L646:
	call	Dem_EvMemGetReaderCopyOfEvent
.L634:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);      (inlined)
	j	.L166

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   263  }      (inlined)
.L166:
.L165:
	jne	d2,#0,.L167
.L787:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   209     {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   210         if(RecordNumber == 0xFFu)
	mov	d15,#255
.L647:
	jne	d15,d9,.L168
.L504:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
	ld.bu	d15,[a10]12
.L788:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;      (inlined)
	j	.L169

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }      (inlined)
.L169:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   211         {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   212  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   213  			/* If RecordNumber is 0xFF then ffIndex will be index of the last FreezeFrame in case of Calculated*/
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   214             ffIndex = Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&ReaderCopy);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   215  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   216  			if(ffIndex > 0u)
	jeq	d15,#0,.L170
.L789:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   217  			{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   218  				ffIndex--;
	add	d5,d15,#-1
.L648:
	j	.L171
.L170:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   219  			}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   220  			else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   221  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   222  			{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   223  				return E_NOT_OK;
	mov	d2,#1
.L790:
	j	.L172
.L171:
	j	.L173
.L168:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   224  			}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   225  		}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   226        else if (RecordNumber == 0x00u)
	jne	d9,#0,.L174
.L649:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   227        {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   228  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   229  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   230           /* Read PID value from OBD Freeze frame,in case of RecordNumber =0.*/
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   231           if ((DataId & 0xFF00u) == 0xF400u)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   232           {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   233              returnValue = rba_DemObdBasic_FF_RetrievePidData((uint8)(DataId & 0xFFu), DestBuffer, BufSize, &ReaderCopy);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   234           }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   235           else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   236           {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   237              /*Return Negative response in case of wrong input parameter*/
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   238              returnValue = E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   239           }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   240  #else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   241  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   242           /* Non OBD -> freeze frame record 0 does not exist */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   243           return E_NOT_OK;
	mov	d2,#1
.L791:
	j	.L175
.L174:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     1  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     2  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     3  #ifndef DEM_ENVFFRECNUMERATION_H
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     4  #define DEM_ENVFFRECNUMERATION_H
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     5  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     6  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     7  #include "Dem_Types.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     8  #include "Dem_Cfg_EnvFFRecNumeration.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	     9  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    10  #include "Dem_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    11  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    12  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    13  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    14  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    15  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    16  DEM_INLINE Dem_boolean_least Dem_EnvIsFFRecNumValid(Dem_EventIdType EventId, uint8 RecNumber)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    17  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    18  	return ((RecNumber > 0) && (RecNumber <= Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId)));
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    19  }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    20  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    21  DEM_INLINE uint8 Dem_EnvGetIndexFromFFRecNum(Dem_EventIdType EventId, uint8 RecNumber)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    22  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    23  	DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    24  	return (RecNumber - 1);
	add	d5,d9,#-1
.L650:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    24  	return (RecNumber - 1);      (inlined)
	j	.L176

; BSW\src\BSW\Gen\Dem\src\env\Dem_EnvFFRecNumeration.h	    25  }      (inlined)
.L176:
.L173:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   244  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   245  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   246  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   247        }
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   248  		else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   249  		{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   250  			ffIndex = Dem_EnvGetIndexFromFFRecNum(EventId,RecordNumber);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   251  		}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   252  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   253  		if(ReportTotalRecord)
	jeq	d10,#0,.L177
.L652:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   254  		{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   255  			DEM_DET(DEM_DET_APIID_GETEVENTFREEZEFRAMEDATA, 0);
	mov	d4,#54
	mov	d5,#0
.L651:
	mov	d6,#49
	mov	d7,#0
	call	Det_ReportError
.L792:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   256  			return E_NOT_OK;
	mov	d2,#1
.L793:
	j	.L178
.L177:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L179:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   160  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   161  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   162  LOCAL_INLINE uint8 Dem_EvtParam_GetBufferTimeSFB(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   163  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   164  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   165  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   166  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   167  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   168  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   169  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   170  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   171  	return Dem_EvtParam_8[indx].dataDataContainer_1;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   172  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   173  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   174  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   175  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingThresholdForTFSLC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   176  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   177  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   178  	return 0u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   179  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   180  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   181  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   182  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureConfirmationThreshold(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   183  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   184  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   185  	return 1u;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   186  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   187  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   188  LOCAL_INLINE uint8 Dem_EvtParam_GetEventPriority(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   189  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   190  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   191  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 7, 3));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   192  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   193  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   194  LOCAL_INLINE uint8 Dem_EvtParam_GetMaxNumberFreezeFrameRecords(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   195  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   196  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));
	addsc.a	a15,a15,d8,#1
.L653:
	ld.hu	d0,[a15]0
.L512:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d15,#1
.L655:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d0,d0,#-10
.L794:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d15,#2
.L656:
	div.u	e0,d0,d15
.L795:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L180

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L180:
	extr.u	d15,d1,#0,#8
.L796:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   197  	return (uint8)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 10, 2));      (inlined)
	j	.L181

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   198  }      (inlined)
.L181:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   257  		}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   258  		else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   259  		{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   260  #if (DEM_CFG_FFRECNUM == DEM_CFG_FFRECNUM_CALCULATED)
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   261  			if(ffIndex < Dem_EvtParam_GetMaxNumberFreezeFrameRecords(EventId))
	jge.u	d5,d15,.L182
.L797:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   262  #else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   263  			if(Dem_EnvIsFFRecNumStored(&ReaderCopy, RecordNumber))
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   264  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   265  			{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   266  			    if( Dem_EnvRetrieveRawDid(EventId, DestBuffer, BufSize, (uint8)(ffIndex), DataId, Dem_EvMemGetEventMemDataByPtr(&ReaderCopy), &ReaderCopy) == FALSE )
	lea	a6,[a10]0
.L514:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     3  #ifndef DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     4  #define DEM_EVMEMBASE_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     6  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     7  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     8  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	     9  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    10  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    11  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    12  #include "Dem_EnvTrigger.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    13  #include "Dem_Cfg_EnvDataElement.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    14  #include "Dem_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    15  #include "Dem_EvBuffEvent.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    16  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    17  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    18  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    20  typedef uint8 Dem_EvMemActionType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    21  #define DEM_EVMEM_ACTIONTYPE_CONFIRMATION   1
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    22  #define DEM_EVMEM_ACTIONTYPE_DISPLACEMENT   2
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    23  #define DEM_EVMEM_ACTIONTYPE_AGING          3
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    24  #define DEM_EVMEM_ACTIONTYPE_NONE           4
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    25  #define DEM_EVMEM_ACTIONTYPE_SETPENDING     5
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    26  #define DEM_EVMEM_ACTIONTYPE_RESETPENDING   6
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    27  #define DEM_EVMEM_ACTIONTYPE_IMMEDIATEAGING 7
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    28  #define DEM_EVMEM_ACTIONTYPE_AGINGOFCONFIRMED   8
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    33  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    34     Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    35     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    36  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    37  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    38  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    39  uint32       Dem_EvMemGetNewEventMemoryTimeId(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    40  void         Dem_EvMemCopyToMirrorMemory(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    41  void         Dem_EvMemForceClearEventMemoryLocation(uint16_least LocId, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    42  uint16_least Dem_EvMemGetEventMemoryStorageLocation (Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    43  uint16_least Dem_EvMemGetMirrorMemoryStorageLocation(Dem_EventIdType EventId, uint16_least MemId, Dem_boolean_least isDisplacementSupported, uint16_least displacementStrategy);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    45  #if (DEM_CFG_EVMEM_MEMORY_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST) || (DEM_CFG_EVMEM_MIRROR_DISPLACEMENT_STRATEGY == DEM_CFG_EVMEM_DISPLACEMENT_STRATEGY_CUST)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    46  uint16       Dem_EvMemGetEventMemoryDisplacementLocationCust(Dem_EventIdType EventId, Dem_EvBuffEventType EventType, uint16 MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    47  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    49  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    50  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    54  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    55     Macros
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    56     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    57  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    59  #define DEM_EVMEM_CLEAROBJ(obj)             DEM_MEMSET(&(obj),0,DEM_SIZEOF_VAR(obj))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    60  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    61  #define DEM_EVMEM_BOOL2DEC(b)               ( (b) ? 1u : 0u )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    63  #define DEM_EVMEM_USEVAR(var)               (void)(var)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    65  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    66     Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    67     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    68  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    69  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    70  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    71  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdType,      Dem_EvMemNvmId,       DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    72  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    73  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    75  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    76      /* If the evmem is read from a separate task we copy each location into a reader copy on every main cycle
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    77       * and serve all read requests from the copy instead of the evmem location itself. The reader copies are stored
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    78       * in the Dem_EvMemEventMemory array after the normal entries. */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    79      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    (2u * DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    80  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    81      #define DEM_CFG_EVMEM_EVENTMEMORY_LENGTH    DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    83  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    85  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    86  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    87  DEM_ARRAY_DECLARE(Dem_EvMemEventMemoryType, Dem_EvMemEventMemory, DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    88  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    90  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    91  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    93  DEM_ARRAY_DECLARE_CONST(uint16_least,       Dem_EvMemLocIdList,   DEM_CFG_EVMEM_MAX_MEMS+1u);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    94  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    98  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	    99     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   100     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   101  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   103  DEM_INLINE Dem_boolean_least Dem_EvMemIsMemIdValid(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   104  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   105      return (Dem_boolean_least)(MemId < DEM_CFG_EVMEM_MAX_MEMS);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   108  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   109     Event Memory Data
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   110     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   111  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   112  DEM_INLINE Dem_boolean_least Dem_EvMemIsEventMemLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   113  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   114      return (Dem_boolean_least)(LocId < DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   117  DEM_INLINE uint16_least Dem_EvMemLocId2ReaderCopyLocId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   118  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   119      DEM_ASSERT(Dem_EvMemIsEventMemLocIdValid(LocId), DEM_DET_APIID_EVMEMSETEVENTFAILED, 10);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   121  #if DEM_CFG_EVMEM_READ_FROM_DIFFERENT_TASK
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   122      return LocId + DEM_CFG_MAX_NUMBER_EVENT_ENTRY_ALL;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   123  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   124      return LocId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   128  DEM_INLINE Dem_boolean_least Dem_EvMemIsReaderCopyLocIdValid(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   130      return (Dem_boolean_least)(LocId < DEM_CFG_EVMEM_EVENTMEMORY_LENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   131  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   132  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   133  /* --- Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   134  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   135  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   136      return EventMemory->Hdr.Data.Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   137  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   138  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   139  DEM_INLINE uint16_least Dem_EvMemGetEventMemStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   140  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   141      return Dem_EvMemGetEventMemStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   142  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   145  DEM_INLINE void Dem_EvMemSetEventMemStatus(uint16_least LocId, uint16_least Status)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   146  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   147      Dem_EvMemEventMemory[LocId].Hdr.Data.Status = (uint16)Status;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   151  /* --- EventId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   152  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   154      return EventMemory->Hdr.Data.EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   157  DEM_INLINE Dem_EventIdType Dem_EvMemGetEventMemEventId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   159      return Dem_EvMemGetEventMemEventIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   163  DEM_INLINE void Dem_EvMemSetEventMemEventId(uint16_least LocId, Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   164  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   165      Dem_EvMemEventMemory[LocId].Hdr.Data.EventId = (uint16)EventId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   166  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   169  /* --- TimeId --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   170  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeIdByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   172      return EventMemory->TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   175  DEM_INLINE uint32 Dem_EvMemGetEventMemTimeId(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   177      return Dem_EvMemGetEventMemTimeIdByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   178  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   181  DEM_INLINE void Dem_EvMemSetEventMemTimeId(uint16_least LocId, uint32 TimeId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   183      Dem_EvMemEventMemory[LocId].TimeId = TimeId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   187  /* --- DTC Status --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   188  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatusByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   189  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   190      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   192  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   193      return EventMemory->DTCStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   194  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   195      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   196  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   197  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   199  DEM_INLINE uint8 Dem_EvMemGetEventMemDtcStatus(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   201      return Dem_EvMemGetEventMemDtcStatusByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   205  DEM_INLINE void Dem_EvMemSetEventMemDtcStatus(uint16_least LocId, uint8 DtcStatus)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   207      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   208      DEM_EVMEM_USEVAR(DtcStatus);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   210  #if (DEM_CFG_EVMEM_MIRROR_MEMORY_DTC_STATUS_STORED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   211      Dem_EvMemEventMemory[LocId].DTCStatus = DtcStatus;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   212  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   215  /* --- FailureCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   216  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   217  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   218      return EventMemory->FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   219  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   221  DEM_INLINE uint8_least Dem_EvMemGetEventMemFailureCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   223      return Dem_EvMemGetEventMemFailureCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   224  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   225  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   227  DEM_INLINE void Dem_EvMemSetEventMemFailureCounter(uint16_least LocId, uint8 FailureCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   228  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   229      Dem_EvMemEventMemory[LocId].FailureCounter = FailureCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   230  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   232  /* --- OccurrenceCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   233  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   234  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   235      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   237  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   238      return (uint16_least)EventMemory->OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   239  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   240      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   241  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   244  DEM_INLINE uint16_least Dem_EvMemGetEventMemOccurrenceCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   246      return Dem_EvMemGetEventMemOccurrenceCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   250  DEM_INLINE void Dem_EvMemSetEventMemOccurrenceCounter(uint16_least LocId, uint16_least OccurrenceCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   252      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   253      DEM_EVMEM_USEVAR(OccurrenceCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   255  #if (DEM_CFG_EVMEM_OCCURRENCE_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   256      Dem_EvMemEventMemory[LocId].OccurrenceCounter = (Dem_EvMemOccurrenceCounterType) OccurrenceCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   257  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   260  /* --- AgingCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   261  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   262  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   263     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   265  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   266        return (uint16_least)EventMemory->AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   267  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   268      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   269  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   270  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   271  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   272  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   273  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   274     return Dem_EvMemGetEventMemAgingCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   278  DEM_INLINE void Dem_EvMemSetEventMemAgingCounter(uint16_least LocId, uint16_least AgingCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   279  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   280      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   281      DEM_EVMEM_USEVAR(AgingCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   282  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   283  #if (DEM_CFG_EVMEM_AGING_COUNTER_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   284      Dem_EvMemEventMemory[LocId].AgingCounter = (Dem_EvMemAgingCounterType) AgingCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   285  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   288  /* --- AgingCounterForTFSLC --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   289  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   290  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   291     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   293  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   294        return (uint16_least)EventMemory->AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   295  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   296      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   297  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   298  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   300  DEM_INLINE uint16_least Dem_EvMemGetEventMemAgingCounterForTFSLC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   301  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   302     return Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   304  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   306  DEM_INLINE void Dem_EvMemSetEventMemAgingCounterForTFSLC(uint16_least LocId, uint16_least AgingCounterForTFSLC)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   307  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   308      DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   309      DEM_EVMEM_USEVAR(AgingCounterForTFSLC);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   310  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   311  #if (DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   312      Dem_EvMemEventMemory[LocId].AgingCounterForTFSLC = (Dem_EvMemAgingCounterType) AgingCounterForTFSLC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   313  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   314  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   315  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   316  /* --- Debouncer-Info: MaxFdcCurrentCycle / MaxFdcSinceLastClear --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   317  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   318  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   319  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   320  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   321      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   322      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   323  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   324  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   325  	EventMemory->MaxFdcDuringCurrentCycle = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   326  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   327  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   329  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is depending on compiler switch setting */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   330  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClearByPtr(Dem_EvMemEventMemoryType *EventMemory, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   331  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   332      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   333      DEM_EVMEM_USEVAR(fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   334  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   335  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   336  	EventMemory->MaxFdcSinceLastClear = fdc;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   337  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   338  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   339  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   340  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   341  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   342  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   343      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   344  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   345  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   346  	return EventMemory->MaxFdcDuringCurrentCycle;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   347  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   348  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   349  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   350  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   351  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   352  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClearByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   353  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   354      DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   355  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   356  #if (DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   357  	return EventMemory->MaxFdcSinceLastClear;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   358  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   359     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   360  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   361  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   362  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   363  DEM_INLINE void Dem_EvMemSetMaxFdcDuringCurrentCycle(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   364  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   365  	Dem_EvMemSetMaxFdcDuringCurrentCycleByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   366  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   367  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   368  DEM_INLINE void Dem_EvMemSetMaxFdcSinceLastClear(uint16_least LocId, sint8 fdc)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   369  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   370  	Dem_EvMemSetMaxFdcSinceLastClearByPtr(&(Dem_EvMemEventMemory[LocId]), fdc);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   371  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   372  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   373  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   374  DEM_INLINE sint8 Dem_EvMemGetMaxFdcDuringCurrentCycle(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   375  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   376      return Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   377  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   379  DEM_INLINE sint8 Dem_EvMemGetMaxFdcSinceLastClear(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   380  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   381  	return Dem_EvMemGetMaxFdcSinceLastClearByPtr (&(Dem_EvMemEventMemory[LocId]));
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   382  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   383  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   384  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   385  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   386  /* --- Cycle-Info: CyclesSinceFirstFailed / CyclesSinceLastFailed  / FailedCycles --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   387  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceFirstFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   388  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   389  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   390  	return EventMemory->CyclesSinceFirstFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   391  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   392  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   393     	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   394  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   395  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   396  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   397  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   398  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   399  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   400  	return EventMemory->CyclesSinceLastFailed;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   401  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   402  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   403  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   404  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   405  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   406  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   407  DEM_INLINE uint8 Dem_EvMemGetCyclesSinceLastFailedExcludingTNCByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   408  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   409  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   410     	return EventMemory->CyclesSinceLastFailedExcludingTNC;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   411  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   412  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   413  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   414  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   415  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   416  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   417  DEM_INLINE uint8 Dem_EvMemGetFailedCyclesByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   418  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   419  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   420  	return EventMemory->FailedCycles;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   421  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   422  	DEM_UNUSED_PARAM(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   423  	return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   424  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   427  DEM_INLINE void Dem_EvMemIncCyclesSinceFirstFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   429  #if (DEM_CFG_READDEM_CYCLES_SINCE_FIRST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   430  	if(Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   431  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   432  		Dem_EvMemEventMemory[LocId].CyclesSinceFirstFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   433  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   434  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   435  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   436  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   437  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   438  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   439  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   440  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   441  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   442  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   443  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   444  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   445  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   446  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   447  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   448  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   449  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   450  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   451  DEM_INLINE void Dem_EvMemIncCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   452  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   453  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   454  	if(Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   455  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   456  		Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   457  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   458  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   459  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   460  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   461  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   462  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   463  DEM_INLINE void Dem_EvMemIncFailedCycles(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   464  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   465  #if (DEM_CFG_READDEM_FAILED_CYCLES_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   466  	if(Dem_EvMemEventMemory[LocId].FailedCycles != 255)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   467  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   468  		Dem_EvMemEventMemory[LocId].FailedCycles++;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   469  	}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   470  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   471  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   472  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   473  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   474  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   475  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailed(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   476  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   477  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   478  	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailed = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   479  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   480  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   481  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   482  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   483  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   484  DEM_INLINE void Dem_EvMemResetCyclesSinceLastFailedExcludingTNC(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   485  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   486  #if (DEM_CFG_READDEM_CYCLES_SINCE_LAST_FAILED_EXCLUDING_TNC_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   487     	Dem_EvMemEventMemory[LocId].CyclesSinceLastFailedExcludingTNC = 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   488  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   489  	DEM_UNUSED_PARAM(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   490  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   491  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   492  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   493  /* --- FreezeFrameCounter --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   494  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounterByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   495  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   496     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   497  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   498  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   499     return (uint16_least)EventMemory->FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   500  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   501     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   502  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   503  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   504  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   505  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   506  DEM_INLINE uint16_least Dem_EvMemGetEventMemFreezeFrameCounter(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   507  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   508     return Dem_EvMemGetEventMemFreezeFrameCounterByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   509  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   511  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   512  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   513  DEM_INLINE void Dem_EvMemSetEventMemLocFreezeFrameCounter(uint16_least LocId, uint16_least FreezeFrameCounter)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   514  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   515     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   516     DEM_EVMEM_USEVAR(FreezeFrameCounter);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   517  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   518  #if (DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   519     Dem_EvMemEventMemory[LocId].FreezeFrameCounter = (uint8)FreezeFrameCounter;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   520  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   521  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   523  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   524  /* --- Extended Data Trigger --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   525  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTriggerByPtr(const Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   527     DEM_EVMEM_USEVAR(EventMemory);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   528  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   529  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   530     return EventMemory->Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   531  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   532     return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   533  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   535  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   536  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   537  DEM_INLINE Dem_TriggerType Dem_EvMemGetEventMemTrigger(uint16_least LocId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   538  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   539     return Dem_EvMemGetEventMemTriggerByPtr(&Dem_EvMemEventMemory[LocId]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   540  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   541  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   542  DEM_INLINE void Dem_EvMemSetEventMemTrigger(uint16_least LocId, Dem_TriggerType Trigger)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   543  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   544     DEM_EVMEM_USEVAR(LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   545     DEM_EVMEM_USEVAR(Trigger);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   546  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   547  #if (DEM_CFG_EVMEM_EXTENDED_DATA_SUPPORTED || DEM_CFG_EVMEM_FREEZE_FRAME_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   548     Dem_EvMemEventMemory[LocId].Trigger = Trigger;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   549  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   550  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   551  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   552  /* --- Data --- */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   553  /* MR12 RULE 8.13 VIOLATION: parameter not made const, as it is used to get address of element data and to fill the data block */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   554  DEM_INLINE uint8 *Dem_EvMemGetEventMemDataByPtr(Dem_EvMemEventMemoryType *EventMemory)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   555  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;
	add.a	a6,#4
.L798:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   556     return EventMemory->Data;      (inlined)
	j	.L183

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemBase.h	   557  }      (inlined)
.L183:
	lea	a7,[a10]0
.L657:
	mov	d4,d8
.L658:
	mov.aa	a4,a12
.L659:
	mov.aa	a5,a13
.L660:
	mov	d6,d11
.L661:
	call	Dem_EnvRetrieveRawDid
.L654:
	eq	d12,d2,#0
.L799:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   267  				{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   268  					returnValue = E_NOT_OK;
	j	.L185
.L184:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   269  				}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   270  				else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   271  				{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   272  					returnValue = E_OK;
	mov	d12,#0
.L185:
	j	.L186
.L182:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   273  				}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   274  			}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   275  			else
.L186:
	j	.L187
.L167:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   276  			{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   277                  /* Nothing to do here , E_NOT_OK returned at the end of the function */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   278  			}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   279  		}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   280  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   281  	else
.L187:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   282  	{
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   283             /* Nothing to do here , E_NOT_OK returned at the end of the function */
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   284  	}
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   285  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   286  	return returnValue;
	mov	d2,d12
.L662:
	j	.L188

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   287  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   288  #else
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   289  	DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   290  	DEM_UNUSED_PARAM(RecordNumber);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   291  	DEM_UNUSED_PARAM(ReportTotalRecord);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   292  	DEM_UNUSED_PARAM(DataId);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   293  	DEM_UNUSED_PARAM(DestBuffer);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   294  	DEM_UNUSED_PARAM(BufSize);
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   295  	return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   296  #endif
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   297  }
.L188:
.L178:
.L175:
.L172:
.L155:
.L145:
.L141:
.L137:
.L130:
.L122:
	ret
.L452:
	
__Dem_GetEventFreezeFrameData_function_end:
	.size	Dem_GetEventFreezeFrameData,__Dem_GetEventFreezeFrameData_function_end-Dem_GetEventFreezeFrameData
.L250:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameDataForRTE',code,cluster('Dem_GetEventFreezeFrameDataForRTE')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameDataForRTE'
	.align	2
	
	.global	Dem_GetEventFreezeFrameDataForRTE

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   298  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   299  Std_ReturnType Dem_GetEventFreezeFrameDataForRTE(
; Function Dem_GetEventFreezeFrameDataForRTE
.L210:
Dem_GetEventFreezeFrameDataForRTE:	.type	func
	sub.a	a10,#8
.L663:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   300          Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   301          uint8 RecordNumber,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   302          boolean ReportTotalRecord,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   303          uint16 DataId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   304          Dem_MaxDataValueType DestBuffer
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   305  )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   306  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   307      uint16 bufSize = DEM_SIZEOF_TYPE(Dem_MaxDataValueType);
	mov	d15,#2
.L822:
	st.h	[a10],d15
.L823:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   308      return Dem_GetEventFreezeFrameData(EventId, RecordNumber, ReportTotalRecord, DataId, DestBuffer, &bufSize);
	lea	a5,[a10]0
	call	Dem_GetEventFreezeFrameData
.L664:
	j	.L189

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   309  }
.L189:
	ret
.L537:
	
__Dem_GetEventFreezeFrameDataForRTE_function_end:
	.size	Dem_GetEventFreezeFrameDataForRTE,__Dem_GetEventFreezeFrameDataForRTE_function_end-Dem_GetEventFreezeFrameDataForRTE
.L275:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameDataEx',code,cluster('Dem_GetEventFreezeFrameDataEx')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameDataEx'
	.align	2
	
	.global	Dem_GetEventFreezeFrameDataEx

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   310  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   311  Std_ReturnType Dem_GetEventFreezeFrameDataEx(Dem_EventIdType EventId, uint8 RecordNumber, uint16 DataId, uint8* DestBuffer, uint16* BufSize)
; Function Dem_GetEventFreezeFrameDataEx
.L212:
Dem_GetEventFreezeFrameDataEx:	.type	func
	mov	d7,d6
.L667:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   312  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   313      boolean ReportTotalRecord = FALSE;
	mov	d6,#0
.L666:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   314      return Dem_GetEventFreezeFrameData(EventId, RecordNumber, ReportTotalRecord, DataId, DestBuffer, BufSize);
	call	Dem_GetEventFreezeFrameData
.L665:
	j	.L190

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   315  }
.L190:
	ret
.L396:
	
__Dem_GetEventFreezeFrameDataEx_function_end:
	.size	Dem_GetEventFreezeFrameDataEx,__Dem_GetEventFreezeFrameDataEx_function_end-Dem_GetEventFreezeFrameDataEx
.L240:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo',code,cluster('Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo'
	.align	2
	
	.global	Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   316  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   317  Std_ReturnType Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo(Dem_EventIdType EventId, uint8 RecordNumber, uint16 DataId, uint8* DestBuffer, uint16* BufSize)
; Function Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo
.L214:
Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo:	.type	func
	mov	d7,d6
.L670:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   318  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   319      boolean ReportTotalRecord = FALSE;
	mov	d6,#0
.L669:

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   320      return Dem_GetEventFreezeFrameData(EventId, RecordNumber, ReportTotalRecord, DataId, DestBuffer, BufSize);
	call	Dem_GetEventFreezeFrameData
.L668:
	j	.L191

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   321  }
.L191:
	ret
.L530:
	
__Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo_function_end:
	.size	Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo,__Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo_function_end-Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo
.L270:
	; End of function
	
	.sdecl	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameData_GeneralEvtInfo',code,cluster('Dem_GetEventFreezeFrameData_GeneralEvtInfo')
	.sect	'.text.Dem_EvtRelatedData.Dem_GetEventFreezeFrameData_GeneralEvtInfo'
	.align	2
	
	.global	Dem_GetEventFreezeFrameData_GeneralEvtInfo

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   322  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   323  Std_ReturnType Dem_GetEventFreezeFrameData_GeneralEvtInfo(
; Function Dem_GetEventFreezeFrameData_GeneralEvtInfo
.L216:
Dem_GetEventFreezeFrameData_GeneralEvtInfo:	.type	func

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   324          Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   325          uint8 RecordNumber,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   326          boolean ReportTotalRecord,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   327          uint16 DataId,
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   328          Dem_MaxDataValueType DestBuffer
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   329  )
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   330  {
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   331      return Dem_GetEventFreezeFrameDataForRTE(EventId, RecordNumber, ReportTotalRecord, DataId, DestBuffer);
	call	Dem_GetEventFreezeFrameDataForRTE
.L671:
	j	.L192

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   332  }
.L192:
	ret
.L545:
	
__Dem_GetEventFreezeFrameData_GeneralEvtInfo_function_end:
	.size	Dem_GetEventFreezeFrameData_GeneralEvtInfo,__Dem_GetEventFreezeFrameData_GeneralEvtInfo_function_end-Dem_GetEventFreezeFrameData_GeneralEvtInfo
.L280:
	; End of function
	
	.calls	'Dem_DltGetAllExtendedDataRecords','Dem_EvMemGetReaderCopyOfEvent'
	.calls	'Dem_DltGetAllExtendedDataRecords','Dem_EnvRetrieveRawED'
	.calls	'Dem_DltGetMostRecentFreezeFrameRecordData','Dem_EvMemGetReaderCopyOfEvent'
	.calls	'Dem_DltGetMostRecentFreezeFrameRecordData','Dem_EnvRetrieveRawFF'
	.calls	'Dem_GetEventExtendedDataRecord','Det_ReportError'
	.calls	'Dem_GetEventExtendedDataRecord','Dem_EnvIsEDRNumberValid'
	.calls	'Dem_GetEventExtendedDataRecord','Dem_EvMemGetReaderCopyOfEvent'
	.calls	'Dem_GetEventExtendedDataRecord','Dem_EnvRetrieveRawEDR'
	.calls	'Dem_GetEventExtendedDataRecordForRTE','Dem_GetEventExtendedDataRecord'
	.calls	'Dem_GetEventExtendedDataRecord_GeneralEvtInfo','Dem_GetEventExtendedDataRecordForRTE'
	.calls	'Dem_GetEventExtendedDataRecordEx','Dem_GetEventExtendedDataRecord'
	.calls	'Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo','Dem_GetEventExtendedDataRecord'
	.calls	'Dem_GetEventFreezeFrameData','Det_ReportError'
	.calls	'Dem_GetEventFreezeFrameData','Dem_EvMemGetReaderCopyOfEvent'
	.calls	'Dem_GetEventFreezeFrameData','Dem_EnvRetrieveRawDid'
	.calls	'Dem_GetEventFreezeFrameDataForRTE','Dem_GetEventFreezeFrameData'
	.calls	'Dem_GetEventFreezeFrameDataEx','Dem_GetEventFreezeFrameData'
	.calls	'Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo','Dem_GetEventFreezeFrameData'
	.calls	'Dem_GetEventFreezeFrameData_GeneralEvtInfo','Dem_GetEventFreezeFrameDataForRTE'
	.calls	'Dem_DltGetAllExtendedDataRecords','',24
	.calls	'Dem_DltGetMostRecentFreezeFrameRecordData','',24
	.calls	'Dem_GetEventExtendedDataRecord','',24
	.calls	'Dem_GetEventExtendedDataRecordForRTE','',8
	.calls	'Dem_GetEventExtendedDataRecord_GeneralEvtInfo','',0
	.calls	'Dem_GetEventExtendedDataRecordEx','',0
	.calls	'Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo','',0
	.calls	'Dem_GetEventFreezeFrameData','',24
	.calls	'Dem_GetEventFreezeFrameDataForRTE','',8
	.calls	'Dem_GetEventFreezeFrameDataEx','',0
	.calls	'Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo','',0
	.extern	Det_ReportError
	.extern	Dem_OpMoState
	.extern	Dem_EvtParam_16
	.extern	Dem_AllEventsState
	.extern	Dem_EvMemGetReaderCopyOfEvent
	.extern	Dem_EnvIsEDRNumberValid
	.extern	Dem_EnvRetrieveRawED
	.extern	Dem_EnvRetrieveRawEDR
	.extern	Dem_EnvRetrieveRawFF
	.extern	Dem_EnvRetrieveRawDid
	.calls	'Dem_GetEventFreezeFrameData_GeneralEvtInfo','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L218:
	.word	27985
	.half	3
	.word	.L219
	.byte	4
.L217:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L220
.L281:
	.byte	2
	.byte	'unsigned char',0,1,8
.L285:
	.byte	3
	.word	148
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1,5
	.byte	'buffer',0,1,36,49
	.word	165
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1,5
	.byte	'buffer',0,1,42,51
	.word	165
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1,5
	.byte	'buffer',0,1,48,55
	.word	165
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	148
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	148
	.byte	7,6,6,0,0
.L310:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	148
	.byte	1,1
.L311:
	.byte	5
	.byte	'value',0,1,60,55
	.word	148
.L313:
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	148
.L315:
	.byte	6,0
.L303:
	.byte	8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	148
	.byte	1,1
.L305:
	.byte	5
	.byte	'value',0,1,64,53
	.word	148
.L307:
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	148
.L309:
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	148
	.byte	1,1,5
	.byte	'value',0,1,69,50
	.word	148
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	148
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	165
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	148
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1,5
	.byte	'value',0,1,83,56
	.word	165
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	148
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	148
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	148
	.byte	7,6,0,0
.L283:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L287:
	.byte	3
	.word	865
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	887
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	887
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	148
	.byte	6,0
.L340:
	.byte	8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	865
	.byte	1,1
.L341:
	.byte	5
	.byte	'value',0,2,60,58
	.word	865
.L343:
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	148
.L345:
	.byte	6,0
.L333:
	.byte	8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	148
	.byte	1,1
.L335:
	.byte	5
	.byte	'value',0,2,65,55
	.word	865
.L337:
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	148
.L339:
	.byte	7,6,0,0
.L482:
	.byte	8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	865
	.byte	1,1
.L484:
	.byte	5
	.byte	'value',0,2,70,53
	.word	865
.L486:
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	148
.L488:
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	148
.L490:
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	887
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	148
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	148
	.byte	6,0,2
	.byte	'unsigned int',0,4,7,3
	.word	1376
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	1392
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	148
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1392
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	148
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1376
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1376
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	148
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	148
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1376
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	148
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1392
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	148
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	148
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,4,125,21
	.word	1376
	.byte	1,1,5
	.byte	'Input_u32',0,4,125,55
	.word	1376
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,4,150,1,21
	.word	865
	.byte	1,1,5
	.byte	'Input_u16',0,4,150,1,55
	.word	865
	.byte	6,0,9
	.word	148
	.byte	3
	.word	1903
	.byte	4
	.byte	'rba_DiagLib_MemUtils_MemCpy',0,3,5,20,19,1,1,5
	.byte	'xDest_p',0,5,20,54
	.word	165
	.byte	5
	.byte	'xSrc_pc',0,5,20,76
	.word	1908
	.byte	5
	.byte	'numBytes_s32',0,5,20,92
	.word	1376
	.byte	6,0,2
	.byte	'int',0,4,5,4
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,5,26,19,1,1,5
	.byte	'xDest_pv',0,5,26,54
	.word	165
	.byte	5
	.byte	'xPattern_u32',0,5,26,71
	.word	2003
	.byte	5
	.byte	'numBytes_s32',0,5,26,92
	.word	1376
	.byte	6,0,8
	.byte	'Dem_LibGetParamUI8',0,3,6,36,18
	.word	148
	.byte	1,1,5
	.byte	'parameter',0,6,36,44
	.word	148
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,6,41,20
	.word	148
	.byte	1,1,5
	.byte	'parameter',0,6,41,49
	.word	148
	.byte	6,0
.L292:
	.byte	8
	.byte	'Dem_isEventIdValid',0,3,7,20,30
	.word	148
	.byte	1,1
.L295:
	.byte	5
	.byte	'checkID',0,7,20,65
	.word	865
.L297:
	.byte	6,0,8
	.byte	'Dem_isDtcIdValid',0,3,7,152,1,30
	.word	148
	.byte	1,1,5
	.byte	'id',0,7,152,1,62
	.word	865
	.byte	6,0,8
	.byte	'Dem_DtcIdFromEventId',0,3,7,158,1,27
	.word	865
	.byte	1,1,5
	.byte	'id',0,7,158,1,65
	.word	865
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,7,166,1,28
	.word	865
	.byte	1,1,5
	.byte	'dtcid',0,7,166,1,63
	.word	865
	.byte	6,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,7,252,1,30
	.word	148
	.byte	1,1,5
	.byte	'dtcGroupID',0,7,252,1,72
	.word	148
	.byte	6,0,9
	.word	165
	.byte	3
	.word	2450
	.byte	4
	.byte	'Dem_EnvInsertPadding',0,3,8,46,17,1,1,5
	.byte	'start',0,8,46,52
	.word	2455
	.byte	5
	.byte	'size',0,8,46,65
	.word	148
	.byte	7,6,0,0,3
	.word	165
	.byte	10,10,133,1,3,4,11
	.byte	'Status',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	865
	.byte	2,2,35,2,0,12,10,131,1,9,4,11
	.byte	'Data',0
	.word	2524
	.byte	4,2,35,0,0,13,7
	.word	148
	.byte	14,6,0
.L290:
	.byte	10,10,144,1,9,20,11
	.byte	'Hdr',0
	.word	2564
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	2585
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	148
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	148
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	148
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	148
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	148
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	1376
	.byte	4,2,35,16,0,3
	.word	2594
	.byte	10,9,13,9,16,11
	.byte	'eventId',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'debug0',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'debug1',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'evMemLocation',0
	.word	2762
	.byte	4,2,35,12,0,9
	.word	2767
	.byte	3
	.word	2845
	.byte	4
	.byte	'Dem_EnvDACapture',0,3,8,51,17,1,1,5
	.byte	'dataElementId',0,8,51,40
	.word	148
	.byte	5
	.byte	'start',0,8,51,63
	.word	2519
	.byte	5
	.byte	'end',0,8,51,83
	.word	1908
	.byte	5
	.byte	'internalEnvData',0,8,51,115
	.word	2850
	.byte	7,6,6,0,0,3
	.word	1908
	.byte	4
	.byte	'Dem_EnvDACopy',0,3,8,86,17,1,1,5
	.byte	'dataElementId',0,8,86,37
	.word	148
	.byte	5
	.byte	'start',0,8,86,60
	.word	2519
	.byte	5
	.byte	'end',0,8,86,80
	.word	1908
	.byte	5
	.byte	'src',0,8,86,99
	.word	2956
	.byte	7,6,0,0,4
	.byte	'Dem_EnvDASkip',0,3,8,95,17,1,1,5
	.byte	'dataElementId',0,8,95,37
	.word	148
	.byte	5
	.byte	'start',0,8,95,60
	.word	2519
	.byte	5
	.byte	'end',0,8,95,80
	.word	1908
	.byte	5
	.byte	'src',0,8,95,99
	.word	2956
	.byte	6,0,8
	.byte	'Dem_EnvDARetrieve',0,3,8,105,30
	.word	148
	.byte	1,1,5
	.byte	'dataElementId',0,8,105,54
	.word	148
	.byte	5
	.byte	'start',0,8,106,11
	.word	2519
	.byte	5
	.byte	'end',0,8,107,16
	.word	1908
	.byte	5
	.byte	'src',0,8,108,17
	.word	2956
	.byte	5
	.byte	'internalEnvData',0,8,109,30
	.word	2850
	.byte	7,6,6,0,0,8
	.byte	'Dem_EnvDAGetSizeOf',0,3,8,149,1,18
	.word	148
	.byte	1,1,5
	.byte	'dataElementId',0,8,149,1,43
	.word	148
	.byte	6,0,3
	.word	148
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,11,17,17,1,1,5
	.byte	'trigger',0,11,17,52
	.word	3303
	.byte	5
	.byte	'trigger2set',0,11,17,77
	.word	148
	.byte	6,0
.L445:
	.byte	8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,11,22,30
	.word	148
	.byte	1,1
.L447:
	.byte	5
	.byte	'trigger2test',0,11,22,69
	.word	148
.L449:
	.byte	6,0
.L437:
	.byte	8
	.byte	'Dem_EnvIsTriggerSet',0,3,11,27,30
	.word	148
	.byte	1,1
.L440:
	.byte	5
	.byte	'trigger',0,11,27,66
	.word	148
.L442:
	.byte	5
	.byte	'trigger2test',0,11,27,91
	.word	148
.L444:
	.byte	7,6,0,0,8
	.byte	'Dem_GetSmallerTrigger',0,3,11,32,28
	.word	148
	.byte	1,1,5
	.byte	'trigger',0,11,32,66
	.word	148
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetRecordNumber',0,3,12,29,18
	.word	148
	.byte	1,1,5
	.byte	'extDataRecId',0,12,29,51
	.word	148
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetUpdate',0,3,12,34,20
	.word	148
	.byte	1,1,5
	.byte	'extDataRecId',0,12,34,47
	.word	148
	.byte	6,0,8
	.byte	'Dem_EnvEDRGetRecordTrigger',0,3,12,40,28
	.word	148
	.byte	1,1,5
	.byte	'extDataRecId',0,12,40,62
	.word	148
	.byte	6,0,4
	.byte	'Dem_EnvEDRCapture',0,3,12,45,17,1,1,5
	.byte	'extDataRecId',0,12,45,42
	.word	148
	.byte	5
	.byte	'start',0,12,45,64
	.word	2519
	.byte	5
	.byte	'end',0,12,45,84
	.word	1908
	.byte	5
	.byte	'internalEnvData',0,12,45,116
	.word	2850
	.byte	7,6,0,0,10,11,7,9,4,11
	.byte	'currentTrigger',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'storedTrigger',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'matchingTrigger',0
	.word	148
	.byte	1,2,35,2,0,3
	.word	3826
	.byte	4
	.byte	'Dem_EnvEDRCopyRaw',0,3,12,59,17,1,1,5
	.byte	'extDataRecId',0,12,59,42
	.word	148
	.byte	5
	.byte	'start',0,12,59,64
	.word	2519
	.byte	5
	.byte	'end',0,12,59,84
	.word	1908
	.byte	5
	.byte	'src',0,12,59,103
	.word	2956
	.byte	5
	.byte	'triggerParam',0,12,59,133,1
	.word	3904
	.byte	7,6,6,6,6,6,6,6,6,6,6,0,0,9
	.word	2956
	.byte	8
	.byte	'Dem_EnvEDRRetrieve',0,3,12,103,30
	.word	148
	.byte	1,1,5
	.byte	'extDataRecId',0,12,103,56
	.word	148
	.byte	5
	.byte	'start',0,12,103,78
	.word	2519
	.byte	5
	.byte	'end',0,12,103,98
	.word	1908
	.byte	5
	.byte	'src',0,12,103,123
	.word	4028
	.byte	5
	.byte	'internalEnvData',0,12,103,155,1
	.word	2850
	.byte	7,6,0,0,8
	.byte	'Dem_EnvEDRGetSize',0,3,12,119,19
	.word	865
	.byte	1,1,5
	.byte	'extDataRecId',0,12,119,44
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_EnvEDRSkipSrc',0,3,12,133,1,17,1,1,5
	.byte	'extDataRecId',0,12,133,1,42
	.word	148
	.byte	5
	.byte	'src',0,12,133,1,70
	.word	2956
	.byte	7,6,0,0,4
	.byte	'Dem_EnvDIDCapture',0,3,13,26,17,1,1,5
	.byte	'didId',0,13,26,41
	.word	148
	.byte	5
	.byte	'start',0,13,26,56
	.word	2519
	.byte	5
	.byte	'end',0,13,26,76
	.word	1908
	.byte	5
	.byte	'internalEnvData',0,13,26,108
	.word	2850
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieveRaw',0,3,13,41,30
	.word	148
	.byte	1,1,5
	.byte	'didId',0,13,41,58
	.word	148
	.byte	5
	.byte	'start',0,13,41,73
	.word	2519
	.byte	5
	.byte	'end',0,13,41,93
	.word	1908
	.byte	5
	.byte	'src',0,13,41,112
	.word	2956
	.byte	5
	.byte	'internalEnvData',0,13,41,144,1
	.word	2850
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieve',0,3,13,59,30
	.word	148
	.byte	1,1,5
	.byte	'didId',0,13,59,55
	.word	148
	.byte	5
	.byte	'start',0,13,59,70
	.word	2519
	.byte	5
	.byte	'end',0,13,59,90
	.word	1908
	.byte	5
	.byte	'src',0,13,59,109
	.word	2956
	.byte	5
	.byte	'internalEnvData',0,13,59,141,1
	.word	2850
	.byte	7,6,0,0,8
	.byte	'Dem_EnvDIDRetrieveSpecificDid',0,3,13,77,30
	.word	148
	.byte	1,1,5
	.byte	'didId',0,13,77,67
	.word	148
	.byte	5
	.byte	'identifier',0,13,77,81
	.word	865
	.byte	5
	.byte	'start',0,13,77,101
	.word	2519
	.byte	5
	.byte	'end',0,13,77,121
	.word	1908
	.byte	5
	.byte	'src',0,13,77,140,1
	.word	2956
	.byte	5
	.byte	'internalEnvData',0,13,77,172,1
	.word	2850
	.byte	7,6,6,0,0,8
	.byte	'Dem_EnvDIDGetSize',0,3,13,108,19
	.word	865
	.byte	1,1,5
	.byte	'didId',0,13,108,43
	.word	148
	.byte	7,6,0,0,4
	.byte	'Dem_BitArraySetBit',0,3,14,33,17,1,1,5
	.byte	'buffer',0,14,33,36
	.word	1392
	.byte	5
	.byte	'bit_position',0,14,33,75
	.word	1376
	.byte	6,0,4
	.byte	'Dem_BitArrayClearBit',0,3,14,46,17,1,1,5
	.byte	'buffer',0,14,46,38
	.word	1392
	.byte	5
	.byte	'bit_position',0,14,46,77
	.word	1376
	.byte	6,0,4
	.byte	'Dem_BitArrayOverwriteBit',0,3,14,61,17,1,1,5
	.byte	'buffer',0,14,61,42
	.word	1392
	.byte	5
	.byte	'bit_position',0,14,62,25
	.word	1376
	.byte	5
	.byte	'will_bit_be_set',0,14,62,57
	.word	148
	.byte	7,6,6,0,0,9
	.word	1376
	.byte	3
	.word	5005
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,14,75,30
	.word	148
	.byte	1,1,5
	.byte	'buffer',0,14,75,51
	.word	5010
	.byte	5
	.byte	'bit_position',0,14,75,95
	.word	1376
	.byte	6,0,8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,15,32,30
	.word	148
	.byte	1,1,5
	.byte	'enableConditionList',0,15,32,68
	.word	148
	.byte	6,0,8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,16,49,28
	.word	865
	.byte	1,1,5
	.byte	'id',0,16,49,68
	.word	148
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,16,138,1,17,1,1,6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,17,36,21
	.word	865
	.byte	1,1,5
	.byte	'val',0,17,36,70
	.word	865
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,17,41,21
	.word	1376
	.byte	1,1,5
	.byte	'val',0,17,41,70
	.word	1376
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,18,55,22
	.word	148
	.byte	1,1,5
	.byte	'indx',0,18,55,78
	.word	865
	.byte	6,0
.L328:
	.byte	8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,18,75,22
	.word	148
	.byte	1,1
.L330:
	.byte	5
	.byte	'indx',0,18,75,77
	.word	865
.L332:
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,18,95,22
	.word	148
	.byte	1,1,5
	.byte	'indx',0,18,95,67
	.word	865
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,18,122,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,18,122,69
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,18,129,1,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,18,129,1,65
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,18,136,1,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,18,136,1,67
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,18,149,1,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,18,149,1,72
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,18,155,1,21
	.word	865
	.byte	1,1,5
	.byte	'indx',0,18,155,1,79
	.word	865
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,18,168,1,20
	.word	148
	.byte	1,1,5
	.byte	'indx',0,18,168,1,67
	.word	865
	.byte	6,0
.L478:
	.byte	8
	.byte	'Dem_EvtParam_GetMaxNumberFreezeFrameRecords',0,3,18,194,1,20
	.word	148
	.byte	1,1
.L479:
	.byte	5
	.byte	'indx',0,18,194,1,80
	.word	865
.L481:
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,18,208,1,27
	.word	148
	.byte	1,1,5
	.byte	'indx',0,18,208,1,76
	.word	865
	.byte	6,0,2
	.byte	'short int',0,2,5,8
	.byte	'Dem_EvtGetDebounceLevel',0,3,19,193,1,19
	.word	6056
	.byte	1,1,5
	.byte	'EventId',0,19,193,1,60
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,19,219,1,32
	.word	148
	.byte	1,1,5
	.byte	'EventId',0,19,219,1,77
	.word	865
	.byte	6,0,4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,19,227,3,17,1,1,6,0,4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,19,233,3,17,1,1,5
	.byte	'reason',0,19,233,3,72
	.word	148
	.byte	7,6,0,0
.L298:
	.byte	8
	.byte	'Dem_EvtIsSuppressed',0,3,19,244,4,30
	.word	148
	.byte	1,1
.L300:
	.byte	5
	.byte	'EventId',0,19,244,4,67
	.word	865
.L302:
	.byte	7,6,0,0
.L322:
	.byte	2
	.byte	'unsigned long int',0,4,7,8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,20,101,30
	.word	148
	.byte	1,1,5
	.byte	'EventId',0,20,101,87
	.word	865
	.byte	5
	.byte	'debAction',0,20,101,120
	.word	6345
	.byte	6,0,15
	.word	865
	.byte	3
	.word	6454
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,21,27,17,1,1,5
	.byte	'result',0,21,27,79
	.word	6459
	.byte	5
	.byte	'request',0,21,27,109
	.word	865
	.byte	5
	.byte	'newResult',0,21,27,133,1
	.word	148
	.byte	6,0,15
	.word	865
	.byte	3
	.word	6554
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,21,65,17,1,1,5
	.byte	'request',0,21,65,82
	.word	6559
	.byte	5
	.byte	'newRequest',0,21,65,97
	.word	148
	.byte	6,0,3
	.word	1376
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,21,151,1,17,1,1,5
	.byte	'selection',0,21,151,1,93
	.word	6641
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,21,168,1,18
	.word	148
	.byte	1,1,5
	.byte	'selection',0,21,168,1,86
	.word	1376
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,22,53,17,1,1,5
	.byte	'ClientId',0,22,53,80
	.word	148
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,22,68,17,1,1,5
	.byte	'state',0,22,68,62
	.word	148
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,22,78,20
	.word	148
	.byte	1,1,5
	.byte	'ClientId',0,22,78,91
	.word	148
	.byte	7,6,6,6,6,0,0
.L346:
	.byte	8
	.byte	'Dem_EvMemIsMemIdValid',0,3,23,103,30
	.word	148
	.byte	1,1
.L347:
	.byte	5
	.byte	'MemId',0,23,103,65
	.word	6345
.L349:
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,23,112,30
	.word	148
	.byte	1,1,5
	.byte	'LocId',0,23,112,73
	.word	6345
	.byte	6,0,9
	.word	2594
	.byte	3
	.word	7130
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,23,134,1,25
	.word	6345
	.byte	1,1,5
	.byte	'EventMemory',0,23,134,1,89
	.word	7135
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,23,139,1,25
	.word	6345
	.byte	1,1,5
	.byte	'LocId',0,23,139,1,65
	.word	6345
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,23,152,1,28
	.word	865
	.byte	1,1,5
	.byte	'EventMemory',0,23,152,1,93
	.word	7135
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,23,170,1,19
	.word	1376
	.byte	1,1,5
	.byte	'EventMemory',0,23,170,1,83
	.word	7135
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,23,188,1,18
	.word	148
	.byte	1,1,5
	.byte	'EventMemory',0,23,188,1,85
	.word	7135
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,23,216,1,24
	.word	6345
	.byte	1,1,5
	.byte	'EventMemory',0,23,216,1,96
	.word	7135
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,23,233,1,25
	.word	6345
	.byte	1,1,5
	.byte	'EventMemory',0,23,233,1,100
	.word	7135
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,23,133,2,25
	.word	6345
	.byte	1,1,5
	.byte	'EventMemory',0,23,133,2,95
	.word	7135
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,23,144,2,25
	.word	6345
	.byte	1,1,5
	.byte	'LocId',0,23,144,2,71
	.word	6345
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,23,150,2,17,1,1,5
	.byte	'LocId',0,23,150,2,63
	.word	6345
	.byte	5
	.byte	'AgingCounter',0,23,150,2,83
	.word	6345
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,23,161,2,25
	.word	6345
	.byte	1,1,5
	.byte	'EventMemory',0,23,161,2,103
	.word	7135
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,23,213,2,18
	.word	7921
	.byte	1,1,5
	.byte	'EventMemory',0,23,213,2,92
	.word	7135
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,23,224,2,18
	.word	7921
	.byte	1,1,5
	.byte	'EventMemory',0,23,224,2,88
	.word	7135
	.byte	6,0
.L384:
	.byte	8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,23,238,3,25
	.word	6345
	.byte	1,1
.L386:
	.byte	5
	.byte	'EventMemory',0,23,238,3,101
	.word	7135
.L388:
	.byte	6,0
.L432:
	.byte	8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,23,141,4,28
	.word	148
	.byte	1,1
.L434:
	.byte	5
	.byte	'EventMemory',0,23,141,4,93
	.word	7135
.L436:
	.byte	6,0
.L350:
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,23,170,4,19
	.word	165
	.byte	1,1
.L352:
	.byte	5
	.byte	'EventMemory',0,23,170,4,75
	.word	2762
.L354:
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,23,206,4,30
	.word	148
	.byte	1,1,5
	.byte	'Status',0,23,206,4,61
	.word	6345
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,23,211,4,30
	.word	148
	.byte	1,1,5
	.byte	'Status',0,23,211,4,60
	.word	6345
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,23,226,4,25
	.word	6345
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,23,242,4,30
	.word	148
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,23,131,5,25
	.word	6345
	.byte	1,1,5
	.byte	'MemId',0,23,131,5,69
	.word	6345
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,23,143,5,25
	.word	6345
	.byte	1,1,5
	.byte	'MemId',0,23,143,5,67
	.word	6345
	.byte	6,0,3
	.word	6345
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,23,179,5,17,1,1,5
	.byte	'MemId',0,23,179,5,63
	.word	8581
	.byte	6,0,9
	.word	6345
	.byte	3
	.word	8643
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,23,184,5,30
	.word	148
	.byte	1,1,5
	.byte	'MemId',0,23,184,5,86
	.word	8648
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,23,189,5,17,1,1,5
	.byte	'MemId',0,23,189,5,64
	.word	8581
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,23,247,5,30
	.word	148
	.byte	1,1,5
	.byte	'StatusOld',0,23,247,5,66
	.word	6345
	.byte	5
	.byte	'StatusNew',0,23,247,5,90
	.word	6345
	.byte	5
	.byte	'Trigger',0,23,247,5,114
	.word	6345
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,23,154,7,25
	.word	6345
	.byte	1,1,5
	.byte	'EventId',0,23,154,7,64
	.word	865
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,24,20,25
	.word	6345
	.byte	1,1,5
	.byte	'EventId',0,24,20,81
	.word	865
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,24,61,30
	.word	148
	.byte	1,1,5
	.byte	'EventId',0,24,61,62
	.word	865
	.byte	5
	.byte	'LocId',0,24,61,84
	.word	6345
	.byte	5
	.byte	'StatusNew',0,24,61,104
	.word	6345
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,25,150,1,25
	.word	6345
	.byte	1,1,5
	.byte	'DTCOrigin',0,25,150,1,73
	.word	148
	.byte	6,0
.L324:
	.byte	8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,25,222,1,25
	.word	6345
	.byte	1,1
.L325:
	.byte	5
	.byte	'EventId',0,25,222,1,67
	.word	865
.L327:
	.byte	7,6,0,0
.L316:
	.byte	8
	.byte	'Dem_EvMemGetReaderCopyOfEventFromEventMemory',0,3,25,251,1,27
	.word	148
	.byte	1,1
.L317:
	.byte	5
	.byte	'ReaderCopy',0,25,252,1,35
	.word	2762
.L319:
	.byte	5
	.byte	'EventId',0,25,253,1,25
	.word	865
.L321:
	.byte	7,6,6,0,0
.L471:
	.byte	8
	.byte	'Dem_EnvIsFFRecNumValid',0,3,26,16,30
	.word	148
	.byte	1,1
.L473:
	.byte	5
	.byte	'EventId',0,26,16,69
	.word	865
.L475:
	.byte	5
	.byte	'RecNumber',0,26,16,84
	.word	148
.L477:
	.byte	7,6,0,0
.L506:
	.byte	8
	.byte	'Dem_EnvGetIndexFromFFRecNum',0,3,26,21,18
	.word	148
	.byte	1,1
.L507:
	.byte	5
	.byte	'EventId',0,26,21,62
	.word	865
.L509:
	.byte	5
	.byte	'RecNumber',0,26,21,77
	.word	148
.L511:
	.byte	6,0,16
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	6,0,16
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	6,0,16
	.word	308
	.byte	17
	.word	344
	.byte	17
	.word	359
	.byte	17
	.word	380
	.byte	7,18
	.word	170
	.byte	17
	.word	200
	.byte	17
	.word	215
	.byte	19
	.word	236
	.byte	0,6,18
	.word	238
	.byte	17
	.word	270
	.byte	17
	.word	285
	.byte	19
	.word	306
	.byte	0,6,0,0,16
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	6,0,16
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	7,18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,6,0,0,16
	.word	561
	.byte	17
	.word	596
	.byte	17
	.word	610
	.byte	17
	.word	631
	.byte	6,0,16
	.word	656
	.byte	17
	.word	689
	.byte	17
	.word	703
	.byte	17
	.word	724
	.byte	6,0,16
	.word	749
	.byte	17
	.word	786
	.byte	17
	.word	800
	.byte	17
	.word	821
	.byte	17
	.word	844
	.byte	7,18
	.word	656
	.byte	17
	.word	689
	.byte	17
	.word	703
	.byte	17
	.word	724
	.byte	19
	.word	747
	.byte	0,6,0,0,16
	.word	892
	.byte	17
	.word	923
	.byte	17
	.word	938
	.byte	6,0,16
	.word	961
	.byte	17
	.word	994
	.byte	17
	.word	1009
	.byte	6,0,16
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	6,0,16
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	7,18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,6,0,0,16
	.word	1186
	.byte	17
	.word	1222
	.byte	17
	.word	1236
	.byte	17
	.word	1257
	.byte	6,0,16
	.word	1282
	.byte	17
	.word	1316
	.byte	17
	.word	1330
	.byte	17
	.word	1351
	.byte	6,0,16
	.word	1397
	.byte	17
	.word	1428
	.byte	17
	.word	1443
	.byte	6,0,16
	.word	1466
	.byte	17
	.word	1499
	.byte	17
	.word	1514
	.byte	6,0,16
	.word	1537
	.byte	17
	.word	1578
	.byte	17
	.word	1592
	.byte	6,0,16
	.word	1615
	.byte	17
	.word	1652
	.byte	17
	.word	1666
	.byte	7,18
	.word	1537
	.byte	17
	.word	1578
	.byte	17
	.word	1592
	.byte	19
	.word	1613
	.byte	0,6,0,0,16
	.word	1691
	.byte	17
	.word	1725
	.byte	17
	.word	1739
	.byte	17
	.word	1760
	.byte	6,0
.L542:
	.byte	3
	.word	148
	.byte	20
	.byte	'Det_ReportError',0,27,112,16
	.word	148
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,27,112,39
	.word	865
	.byte	5
	.byte	'InstanceId',0,27,112,55
	.word	148
	.byte	5
	.byte	'ApiId',0,27,112,73
	.word	148
	.byte	5
	.byte	'ErrorId',0,27,112,86
	.word	148
	.byte	0,16
	.word	1785
	.byte	17
	.word	1823
	.byte	6,0,16
	.word	1843
	.byte	17
	.word	1882
	.byte	6,0,16
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	6,0,16
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	6,0,16
	.word	2106
	.byte	17
	.word	2136
	.byte	6,0,16
	.word	2156
	.byte	17
	.word	2187
	.byte	6,0,16
	.word	2207
	.byte	17
	.word	2237
	.byte	6,0,16
	.word	2255
	.byte	17
	.word	2284
	.byte	6,0,16
	.word	2298
	.byte	17
	.word	2331
	.byte	6,0,16
	.word	2345
	.byte	17
	.word	2377
	.byte	6,0,16
	.word	2394
	.byte	17
	.word	2428
	.byte	6,0,16
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	7,18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,6,0,0,16
	.word	2855
	.byte	17
	.word	2879
	.byte	17
	.word	2901
	.byte	17
	.word	2915
	.byte	17
	.word	2927
	.byte	7,18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,6,18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,6,0,0,16
	.word	2961
	.byte	17
	.word	2982
	.byte	17
	.word	3004
	.byte	17
	.word	3018
	.byte	17
	.word	3030
	.byte	7,18
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	19
	.word	2001
	.byte	0,6,0,0,16
	.word	3046
	.byte	17
	.word	3067
	.byte	17
	.word	3089
	.byte	17
	.word	3103
	.byte	17
	.word	3115
	.byte	6,0,16
	.word	3129
	.byte	17
	.word	3158
	.byte	17
	.word	3180
	.byte	17
	.word	3194
	.byte	17
	.word	3206
	.byte	17
	.word	3218
	.byte	7,18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,6,18
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	19
	.word	2001
	.byte	0,6,0,0,16
	.word	3247
	.byte	17
	.word	3278
	.byte	6,0,16
	.word	3308
	.byte	17
	.word	3333
	.byte	17
	.word	3349
	.byte	6,0,16
	.word	3371
	.byte	17
	.word	3405
	.byte	6,0,16
	.word	3428
	.byte	17
	.word	3459
	.byte	17
	.word	3475
	.byte	7,18
	.word	3371
	.byte	17
	.word	3405
	.byte	19
	.word	3426
	.byte	0,6,0,0,16
	.word	3500
	.byte	17
	.word	3533
	.byte	6,0,16
	.word	3551
	.byte	17
	.word	3588
	.byte	6,0,16
	.word	3611
	.byte	17
	.word	3642
	.byte	6,0,16
	.word	3665
	.byte	17
	.word	3703
	.byte	6,0,16
	.word	3726
	.byte	17
	.word	3751
	.byte	17
	.word	3772
	.byte	17
	.word	3786
	.byte	17
	.word	3798
	.byte	7,18
	.word	2855
	.byte	17
	.word	2879
	.byte	17
	.word	2901
	.byte	17
	.word	2915
	.byte	17
	.word	2927
	.byte	21
	.word	2951
	.byte	18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,19
	.word	2952
	.byte	18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,19
	.word	2953
	.byte	0,0,6,0,0,16
	.word	3909
	.byte	17
	.word	3934
	.byte	17
	.word	3955
	.byte	17
	.word	3969
	.byte	17
	.word	3981
	.byte	17
	.word	3993
	.byte	7,18
	.word	3428
	.byte	17
	.word	3459
	.byte	17
	.word	3475
	.byte	21
	.word	3496
	.byte	18
	.word	3371
	.byte	17
	.word	3405
	.byte	19
	.word	3426
	.byte	0,19
	.word	3497
	.byte	0,0,6,18
	.word	3428
	.byte	17
	.word	3459
	.byte	17
	.word	3475
	.byte	21
	.word	3496
	.byte	18
	.word	3371
	.byte	17
	.word	3405
	.byte	19
	.word	3426
	.byte	0,19
	.word	3497
	.byte	0,0,6,18
	.word	3428
	.byte	17
	.word	3459
	.byte	17
	.word	3475
	.byte	21
	.word	3496
	.byte	18
	.word	3371
	.byte	17
	.word	3405
	.byte	19
	.word	3426
	.byte	0,19
	.word	3497
	.byte	0,0,6,18
	.word	3428
	.byte	17
	.word	3459
	.byte	17
	.word	3475
	.byte	21
	.word	3496
	.byte	18
	.word	3371
	.byte	17
	.word	3405
	.byte	19
	.word	3426
	.byte	0,19
	.word	3497
	.byte	0,0,6,18
	.word	3665
	.byte	17
	.word	3703
	.byte	19
	.word	3724
	.byte	0,6,18
	.word	3611
	.byte	17
	.word	3642
	.byte	19
	.word	3663
	.byte	0,6,18
	.word	3308
	.byte	17
	.word	3333
	.byte	17
	.word	3349
	.byte	19
	.word	3369
	.byte	0,6,18
	.word	3500
	.byte	17
	.word	3533
	.byte	19
	.word	3549
	.byte	0,6,18
	.word	3046
	.byte	17
	.word	3067
	.byte	17
	.word	3089
	.byte	17
	.word	3103
	.byte	17
	.word	3115
	.byte	19
	.word	3127
	.byte	0,6,18
	.word	2961
	.byte	17
	.word	2982
	.byte	17
	.word	3004
	.byte	17
	.word	3018
	.byte	17
	.word	3030
	.byte	21
	.word	3042
	.byte	18
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	19
	.word	2001
	.byte	0,19
	.word	3043
	.byte	0,0,6,0,0,16
	.word	4033
	.byte	17
	.word	4063
	.byte	17
	.word	4084
	.byte	17
	.word	4098
	.byte	17
	.word	4110
	.byte	17
	.word	4122
	.byte	7,18
	.word	3129
	.byte	17
	.word	3158
	.byte	17
	.word	3180
	.byte	17
	.word	3194
	.byte	17
	.word	3206
	.byte	17
	.word	3218
	.byte	21
	.word	3242
	.byte	18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,19
	.word	3243
	.byte	18
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	19
	.word	2001
	.byte	0,19
	.word	3244
	.byte	0,0,6,0,0,16
	.word	4151
	.byte	17
	.word	4180
	.byte	7,18
	.word	3247
	.byte	17
	.word	3278
	.byte	19
	.word	3301
	.byte	0,6,0,0,16
	.word	4205
	.byte	17
	.word	4231
	.byte	17
	.word	4253
	.byte	7,18
	.word	4151
	.byte	17
	.word	4180
	.byte	21
	.word	4201
	.byte	18
	.word	3247
	.byte	17
	.word	3278
	.byte	19
	.word	3301
	.byte	0,19
	.word	4202
	.byte	0,0,6,0,0,16
	.word	4270
	.byte	17
	.word	4295
	.byte	17
	.word	4309
	.byte	17
	.word	4323
	.byte	17
	.word	4335
	.byte	7,18
	.word	2855
	.byte	17
	.word	2879
	.byte	17
	.word	2901
	.byte	17
	.word	2915
	.byte	17
	.word	2927
	.byte	21
	.word	2951
	.byte	18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,19
	.word	2952
	.byte	18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,19
	.word	2953
	.byte	0,0,6,0,0,16
	.word	4363
	.byte	17
	.word	4396
	.byte	17
	.word	4410
	.byte	17
	.word	4424
	.byte	17
	.word	4436
	.byte	17
	.word	4448
	.byte	7,18
	.word	3129
	.byte	17
	.word	3158
	.byte	17
	.word	3180
	.byte	17
	.word	3194
	.byte	17
	.word	3206
	.byte	17
	.word	3218
	.byte	21
	.word	3242
	.byte	18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,19
	.word	3243
	.byte	18
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	19
	.word	2001
	.byte	0,19
	.word	3244
	.byte	0,0,6,0,0,16
	.word	4477
	.byte	17
	.word	4507
	.byte	17
	.word	4521
	.byte	17
	.word	4535
	.byte	17
	.word	4547
	.byte	17
	.word	4559
	.byte	7,18
	.word	4363
	.byte	17
	.word	4396
	.byte	17
	.word	4410
	.byte	17
	.word	4424
	.byte	17
	.word	4436
	.byte	17
	.word	4448
	.byte	21
	.word	4473
	.byte	18
	.word	3129
	.byte	17
	.word	3158
	.byte	17
	.word	3180
	.byte	17
	.word	3194
	.byte	17
	.word	3206
	.byte	17
	.word	3218
	.byte	21
	.word	3242
	.byte	18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,19
	.word	3243
	.byte	18
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	19
	.word	2001
	.byte	0,19
	.word	3244
	.byte	0,0,19
	.word	4474
	.byte	0,0,6,0,0,16
	.word	4588
	.byte	17
	.word	4629
	.byte	17
	.word	4643
	.byte	17
	.word	4662
	.byte	17
	.word	4676
	.byte	17
	.word	4688
	.byte	17
	.word	4701
	.byte	7,18
	.word	3247
	.byte	17
	.word	3278
	.byte	19
	.word	3301
	.byte	0,6,18
	.word	3129
	.byte	17
	.word	3158
	.byte	17
	.word	3180
	.byte	17
	.word	3194
	.byte	17
	.word	3206
	.byte	17
	.word	3218
	.byte	21
	.word	3242
	.byte	18
	.word	2460
	.byte	17
	.word	2488
	.byte	17
	.word	2502
	.byte	21
	.word	2515
	.byte	18
	.word	2010
	.byte	17
	.word	2045
	.byte	17
	.word	2062
	.byte	17
	.word	2083
	.byte	19
	.word	2104
	.byte	0,19
	.word	2516
	.byte	0,0,19
	.word	3243
	.byte	18
	.word	1913
	.byte	17
	.word	1948
	.byte	17
	.word	1964
	.byte	17
	.word	1980
	.byte	19
	.word	2001
	.byte	0,19
	.word	3244
	.byte	0,0,6,0,0,16
	.word	4731
	.byte	17
	.word	4760
	.byte	7,18
	.word	3247
	.byte	17
	.word	3278
	.byte	19
	.word	3301
	.byte	0,6,0,0,16
	.word	4778
	.byte	17
	.word	4804
	.byte	17
	.word	4819
	.byte	6,0,16
	.word	4842
	.byte	17
	.word	4870
	.byte	17
	.word	4885
	.byte	6,0,16
	.word	4908
	.byte	17
	.word	4940
	.byte	17
	.word	4955
	.byte	17
	.word	4976
	.byte	7,18
	.word	4778
	.byte	17
	.word	4804
	.byte	17
	.word	4819
	.byte	19
	.word	4840
	.byte	0,6,18
	.word	4842
	.byte	17
	.word	4870
	.byte	17
	.word	4885
	.byte	19
	.word	4906
	.byte	0,6,0,0,16
	.word	5015
	.byte	17
	.word	5047
	.byte	17
	.word	5062
	.byte	6,0,16
	.word	5085
	.byte	17
	.word	5120
	.byte	6,0,16
	.word	5150
	.byte	17
	.word	5182
	.byte	6,0,16
	.word	5195
	.byte	6,0,16
	.word	5223
	.byte	17
	.word	5276
	.byte	7,18
	.word	1843
	.byte	17
	.word	1882
	.byte	19
	.word	1901
	.byte	0,6,0,0,16
	.word	5292
	.byte	17
	.word	5345
	.byte	7,18
	.word	1785
	.byte	17
	.word	1823
	.byte	19
	.word	1841
	.byte	0,6,0,0,16
	.word	5361
	.byte	17
	.word	5412
	.byte	6,0,16
	.word	5427
	.byte	17
	.word	5477
	.byte	7,18
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	21
	.word	1182
	.byte	18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,19
	.word	1183
	.byte	0,0,6,0,0,16
	.word	5494
	.byte	17
	.word	5534
	.byte	7,18
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	21
	.word	1182
	.byte	18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,19
	.word	1183
	.byte	0,0,6,0,0,16
	.word	5551
	.byte	17
	.word	5595
	.byte	6,0,16
	.word	5610
	.byte	17
	.word	5651
	.byte	6,0,16
	.word	5667
	.byte	17
	.word	5710
	.byte	6,0,16
	.word	5726
	.byte	17
	.word	5774
	.byte	6,0,16
	.word	5790
	.byte	17
	.word	5844
	.byte	7,18
	.word	1186
	.byte	17
	.word	1222
	.byte	17
	.word	1236
	.byte	17
	.word	1257
	.byte	19
	.word	1280
	.byte	0,6,0,0,16
	.word	5862
	.byte	17
	.word	5905
	.byte	6,0,16
	.word	5921
	.byte	17
	.word	5977
	.byte	7,18
	.word	1186
	.byte	17
	.word	1222
	.byte	17
	.word	1236
	.byte	17
	.word	1257
	.byte	19
	.word	1280
	.byte	0,6,0,0,16
	.word	5995
	.byte	17
	.word	6040
	.byte	6,0,16
	.word	6069
	.byte	17
	.word	6105
	.byte	6,0,16
	.word	6124
	.byte	17
	.word	6164
	.byte	6,0,16
	.word	6183
	.byte	6,0,16
	.word	6236
	.byte	17
	.word	6272
	.byte	7,18
	.word	1397
	.byte	17
	.word	1428
	.byte	17
	.word	1443
	.byte	19
	.word	1464
	.byte	0,6,0,0,16
	.word	6292
	.byte	17
	.word	6324
	.byte	7,18
	.word	486
	.byte	17
	.word	522
	.byte	17
	.word	536
	.byte	21
	.word	557
	.byte	18
	.word	409
	.byte	17
	.word	449
	.byte	17
	.word	463
	.byte	19
	.word	484
	.byte	0,19
	.word	558
	.byte	0,0,6,0,0,16
	.word	6366
	.byte	17
	.word	6418
	.byte	17
	.word	6434
	.byte	6,0,16
	.word	6464
	.byte	17
	.word	6502
	.byte	17
	.word	6517
	.byte	17
	.word	6533
	.byte	6,0,16
	.word	6564
	.byte	17
	.word	6604
	.byte	17
	.word	6620
	.byte	6,0,16
	.word	6646
	.byte	17
	.word	6704
	.byte	6,0,16
	.word	6725
	.byte	17
	.word	6780
	.byte	6,0,16
	.word	6801
	.byte	17
	.word	6854
	.byte	6,0,16
	.word	6873
	.byte	17
	.word	6919
	.byte	6,0,16
	.word	6935
	.byte	17
	.word	7000
	.byte	7,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	2106
	.byte	17
	.word	2136
	.byte	19
	.word	2154
	.byte	0,6,18
	.word	6725
	.byte	17
	.word	6780
	.byte	19
	.word	6799
	.byte	0,6,18
	.word	6464
	.byte	17
	.word	6502
	.byte	17
	.word	6517
	.byte	17
	.word	6533
	.byte	19
	.word	6552
	.byte	0,6,0,0,16
	.word	7024
	.byte	17
	.word	7057
	.byte	6,0,16
	.word	7073
	.byte	17
	.word	7114
	.byte	6,0,16
	.word	7140
	.byte	17
	.word	7184
	.byte	6,0,16
	.word	7207
	.byte	17
	.word	7246
	.byte	7,18
	.word	7140
	.byte	17
	.word	7184
	.byte	19
	.word	7205
	.byte	0,6,0,0,16
	.word	7265
	.byte	17
	.word	7310
	.byte	6,0,16
	.word	7333
	.byte	17
	.word	7377
	.byte	6,0,16
	.word	7400
	.byte	17
	.word	7447
	.byte	6,0,16
	.word	7470
	.byte	17
	.word	7522
	.byte	6,0,16
	.word	7545
	.byte	17
	.word	7600
	.byte	6,0,16
	.word	7623
	.byte	17
	.word	7673
	.byte	6,0,16
	.word	7696
	.byte	17
	.word	7741
	.byte	7,18
	.word	7623
	.byte	17
	.word	7673
	.byte	19
	.word	7694
	.byte	0,6,0,0,16
	.word	7760
	.byte	17
	.word	7801
	.byte	17
	.word	7816
	.byte	6,0,16
	.word	7840
	.byte	17
	.word	7898
	.byte	6,0,16
	.word	7929
	.byte	17
	.word	7983
	.byte	6,0,16
	.word	8006
	.byte	17
	.word	8056
	.byte	6,0,16
	.word	8079
	.byte	17
	.word	8135
	.byte	6,0,16
	.word	8158
	.byte	17
	.word	8203
	.byte	6,0,16
	.word	8226
	.byte	17
	.word	8268
	.byte	6,0,16
	.word	8291
	.byte	17
	.word	8321
	.byte	6,0,16
	.word	8339
	.byte	17
	.word	8368
	.byte	6,0,16
	.word	8386
	.byte	6,0,16
	.word	8420
	.byte	6,0,16
	.word	8463
	.byte	17
	.word	8506
	.byte	6,0,16
	.word	8523
	.byte	17
	.word	8564
	.byte	6,0,16
	.word	8586
	.byte	17
	.word	8626
	.byte	6,0,16
	.word	8653
	.byte	17
	.word	8701
	.byte	6,0,16
	.word	8718
	.byte	17
	.word	8759
	.byte	6,0,16
	.word	8776
	.byte	17
	.word	8811
	.byte	17
	.word	8830
	.byte	17
	.word	8849
	.byte	6,0,16
	.word	8868
	.byte	17
	.word	8903
	.byte	7,18
	.word	5361
	.byte	17
	.word	5412
	.byte	19
	.word	5425
	.byte	0,6,0,0,16
	.word	8924
	.byte	17
	.word	8975
	.byte	6,0,16
	.word	8993
	.byte	17
	.word	9020
	.byte	17
	.word	9036
	.byte	17
	.word	9050
	.byte	6,0,20
	.byte	'Dem_EvMemGetReaderCopyOfEvent',0,25,68,16
	.word	148
	.byte	1,1,1,1,5
	.byte	'ReaderCopy',0,25,68,72
	.word	2762
	.byte	5
	.byte	'EventId',0,25,68,100
	.word	865
	.byte	5
	.byte	'MemId',0,25,68,122
	.word	6345
	.byte	0,16
	.word	9070
	.byte	17
	.word	9112
	.byte	6,0,16
	.word	9133
	.byte	17
	.word	9171
	.byte	7,18
	.word	5427
	.byte	17
	.word	5477
	.byte	21
	.word	5490
	.byte	18
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	21
	.word	1182
	.byte	18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,19
	.word	1183
	.byte	0,0,19
	.word	5491
	.byte	0,0,6,0,0,16
	.word	9192
	.byte	17
	.word	9249
	.byte	17
	.word	9269
	.byte	7,18
	.word	7024
	.byte	17
	.word	7057
	.byte	19
	.word	7071
	.byte	0,6,18
	.word	9133
	.byte	17
	.word	9171
	.byte	21
	.word	9188
	.byte	18
	.word	5427
	.byte	17
	.word	5477
	.byte	21
	.word	5490
	.byte	18
	.word	1110
	.byte	17
	.word	1147
	.byte	17
	.word	1161
	.byte	21
	.word	1182
	.byte	18
	.word	1032
	.byte	17
	.word	1073
	.byte	17
	.word	1087
	.byte	19
	.word	1108
	.byte	0,19
	.word	1183
	.byte	0,0,19
	.word	5491
	.byte	0,0,19
	.word	9189
	.byte	0,0,6,0,0,16
	.word	9291
	.byte	17
	.word	9325
	.byte	17
	.word	9341
	.byte	7,18
	.word	5921
	.byte	17
	.word	5977
	.byte	21
	.word	5991
	.byte	18
	.word	1186
	.byte	17
	.word	1222
	.byte	17
	.word	1236
	.byte	17
	.word	1257
	.byte	19
	.word	1280
	.byte	0,19
	.word	5992
	.byte	0,0,6,0,0,16
	.word	9363
	.byte	17
	.word	9402
	.byte	17
	.word	9418
	.byte	6,0,20
	.byte	'Dem_EnvIsEDRNumberValid',0,28,54,19
	.word	148
	.byte	1,1,1,1,5
	.byte	'EventId',0,28,54,59
	.word	865
	.byte	5
	.byte	'RecordNumber',0,28,54,74
	.word	148
	.byte	5
	.byte	'trigger',0,28,54,105
	.word	3303
	.byte	0,20
	.byte	'Dem_EnvRetrieveRawED',0,28,65,16
	.word	148
	.byte	1,1,1,1,5
	.byte	'EventId',0,28,65,53
	.word	865
	.byte	5
	.byte	'dest',0,28,65,69
	.word	165
	.byte	5
	.byte	'destSize',0,28,65,83
	.word	887
	.byte	5
	.byte	'src',0,28,65,106
	.word	1908
	.byte	5
	.byte	'evMemLocation',0,28,65,137,1
	.word	2762
	.byte	0,20
	.byte	'Dem_EnvRetrieveRawEDR',0,28,66,19
	.word	148
	.byte	1,1,1,1,5
	.byte	'EventId',0,28,66,57
	.word	865
	.byte	5
	.byte	'RecordNumber',0,28,66,72
	.word	148
	.byte	5
	.byte	'dest',0,28,66,93
	.word	165
	.byte	5
	.byte	'destSize',0,28,66,107
	.word	887
	.byte	5
	.byte	'src',0,28,66,130,1
	.word	1908
	.byte	5
	.byte	'evMemLocation',0,28,66,161,1
	.word	2762
	.byte	0,20
	.byte	'Dem_EnvRetrieveRawFF',0,28,67,16
	.word	148
	.byte	1,1,1,1,5
	.byte	'EventId',0,28,67,53
	.word	865
	.byte	5
	.byte	'dest',0,28,67,69
	.word	165
	.byte	5
	.byte	'destSize',0,28,67,83
	.word	887
	.byte	5
	.byte	'ffIndex',0,28,67,99
	.word	148
	.byte	5
	.byte	'src',0,28,67,121
	.word	1908
	.byte	5
	.byte	'evMemLocation',0,28,67,152,1
	.word	2762
	.byte	0,20
	.byte	'Dem_EnvRetrieveRawDid',0,28,68,19
	.word	148
	.byte	1,1,1,1,5
	.byte	'EventId',0,28,68,57
	.word	865
	.byte	5
	.byte	'dest',0,28,68,73
	.word	165
	.byte	5
	.byte	'destSize',0,28,68,87
	.word	887
	.byte	5
	.byte	'ffIndex',0,28,68,103
	.word	148
	.byte	5
	.byte	'did',0,28,68,119
	.word	865
	.byte	5
	.byte	'src',0,28,68,137,1
	.word	1908
	.byte	5
	.byte	'evMemLocation',0,28,68,168,1
	.word	2762
	.byte	0,22,1,3
	.word	14529
	.byte	23
	.byte	'__codeptr',0,29,1,1
	.word	14531
	.byte	23
	.byte	'sint8',0,30,76,25
	.word	7921
	.byte	23
	.byte	'uint8',0,30,81,25
	.word	148
	.byte	23
	.byte	'sint16',0,30,86,25
	.word	6056
	.byte	23
	.byte	'uint16',0,30,91,25
	.word	865
	.byte	23
	.byte	'sint32',0,30,96,24
	.word	2003
	.byte	23
	.byte	'uint32',0,30,106,24
	.word	1376
	.byte	2
	.byte	'unsigned long long int',0,8,7,23
	.byte	'uint64',0,30,111,30
	.word	14642
	.byte	23
	.byte	'boolean',0,30,127,25
	.word	148
	.byte	23
	.byte	'uint8_least',0,30,137,1,25
	.word	6345
	.byte	23
	.byte	'uint16_least',0,30,147,1,25
	.word	6345
	.byte	23
	.byte	'StatusType',0,31,191,1,27
	.word	148
	.byte	23
	.byte	'Std_ReturnType',0,31,199,1,15
	.word	148
	.byte	10,31,206,1,9,8,11
	.byte	'vendorID',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	865
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	148
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	148
	.byte	1,2,35,6,0,23
	.byte	'Std_VersionInfoType',0,31,213,1,3
	.word	14786
	.byte	23
	.byte	'Dem_ClientRequestType',0,32,46,16
	.word	865
	.byte	23
	.byte	'Dem_ClientResultType',0,32,47,16
	.word	865
	.byte	23
	.byte	'Dem_ClientSelectionType',0,32,48,16
	.word	1376
	.byte	23
	.byte	'Dem_ClientPriorityType',0,32,50,15
	.word	148
	.byte	23
	.byte	'Dem_ComponentIdType',0,33,20,15
	.word	148
	.byte	23
	.byte	'PduIdType',0,34,22,19
	.word	865
	.byte	23
	.byte	'PduLengthType',0,34,26,19
	.word	865
	.byte	24,35,113,9,4,25
	.byte	'TP_DATACONF',0,0,25
	.byte	'TP_DATARETRY',0,1,25
	.byte	'TP_CONFPENDING',0,2,0,23
	.byte	'TpDataStateType',0,35,118,3
	.word	15126
	.byte	23
	.byte	'Can_IdType',0,36,32,16
	.word	1376
	.byte	23
	.byte	'Can_HwHandleType',0,36,43,16
	.word	865
	.byte	10,37,93,9,8,11
	.byte	'Class',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	1376
	.byte	4,2,35,4,0,23
	.byte	'OsTrapInfoType',0,37,97,3
	.word	15246
	.byte	13,68
	.word	1376
	.byte	14,16,0,10,37,154,1,9,68,11
	.byte	'store',0
	.word	15326
	.byte	68,2,35,0,0,13,68
	.word	15335
	.byte	14,0,0,23
	.byte	'Os_JumpBufType',0,37,156,1,3
	.word	15357
	.byte	23
	.byte	'Os_StackTraceType',0,37,174,1,18
	.word	1376
	.byte	10,37,175,1,9,8,11
	.byte	'sp',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	1376
	.byte	4,2,35,4,0,23
	.byte	'Os_StackValueType',0,37,175,1,63
	.word	15417
	.byte	23
	.byte	'Os_StackSizeType',0,37,176,1,27
	.word	15417
	.byte	26,1,1,3
	.word	15502
	.byte	23
	.byte	'Os_VoidVoidFunctionType',0,37,179,1,16
	.word	15505
	.byte	23
	.byte	'ApplicationType',0,37,193,1,23
	.word	148
	.byte	27
	.byte	'Os_ApplicationConfigurationType_s',0,37,198,1,16,2,11
	.byte	'app_id',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,1,0,23
	.byte	'Os_ApplicationConfigurationType',0,37,201,1,3
	.word	15568
	.byte	23
	.byte	'Os_CoreStateType',0,37,203,1,16
	.word	1376
	.byte	23
	.byte	'AreaIdType',0,37,204,1,16
	.word	865
	.byte	23
	.byte	'Os_PeripheralAddressType',0,37,212,1,22
	.word	1376
	.byte	23
	.byte	'TickType',0,37,221,1,22
	.word	1376
	.byte	23
	.byte	'Os_StopwatchTickType',0,37,225,1,22
	.word	1376
	.byte	23
	.byte	'Os_Lockable',0,37,234,1,18
	.word	1392
	.byte	23
	.byte	'CoreIdType',0,37,236,1,16
	.word	865
	.byte	23
	.byte	'SpinlockIdType',0,37,237,1,16
	.word	865
	.byte	24,37,239,1,9,4,25
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,25
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,23
	.byte	'TryToGetSpinlockType',0,37,239,1,74
	.word	15875
	.byte	24,37,174,2,9,4,25
	.byte	'APPLICATION_ACCESSIBLE',0,0,25
	.byte	'APPLICATION_RESTARTING',0,1,25
	.byte	'APPLICATION_TERMINATED',0,2,0,23
	.byte	'ApplicationStateType',0,37,174,2,92
	.word	15968
	.byte	28
	.byte	'void',0,3
	.word	16080
	.byte	29,1,1,30
	.word	148
	.byte	30
	.word	16086
	.byte	0,3
	.word	16091
	.byte	23
	.byte	'Os_FunctionEntryType',0,37,183,2,16
	.word	16105
	.byte	27
	.byte	'Os_MeterInfoType_s',0,37,193,2,16,48,11
	.byte	'elapsed',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	1376
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	15417
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	15417
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	15417
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	15417
	.byte	8,2,35,40,0,23
	.byte	'Os_MeterInfoType',0,37,202,2,3
	.word	16140
	.byte	3
	.word	16140
	.byte	23
	.byte	'Os_MeterInfoRefType',0,37,203,2,50
	.word	16338
	.byte	23
	.byte	'EventMaskType',0,37,206,2,15
	.word	148
	.byte	23
	.byte	'Os_imaskType',0,37,211,2,16
	.word	1376
	.byte	27
	.byte	'Os_ISRDynType_s',0,37,213,2,16,48,11
	.byte	'meter',0
	.word	16140
	.byte	48,2,35,0,0,23
	.byte	'Os_ISRDynType',0,37,215,2,3
	.word	16417
	.byte	3
	.word	16417
	.byte	9
	.word	16478
	.byte	27
	.byte	'Os_ISRType_s',0,37,216,2,16,24,11
	.byte	'entry_function',0
	.word	15510
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	16483
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	15417
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	148
	.byte	1,2,35,21,0,23
	.byte	'Os_ISRType',0,37,223,2,3
	.word	16488
	.byte	3
	.word	15502
	.byte	9
	.word	16488
	.byte	3
	.word	16647
	.byte	23
	.byte	'ISRType',0,37,224,2,46
	.word	16652
	.byte	23
	.byte	'Os_bitmask',0,37,239,2,22
	.word	1376
	.byte	23
	.byte	'Os_pset0Type',0,37,240,2,20
	.word	1376
	.byte	23
	.byte	'Os_pset1Type',0,37,241,2,20
	.word	1376
	.byte	23
	.byte	'Os_pset2Type',0,37,242,2,20
	.word	1376
	.byte	12,37,243,2,9,4,11
	.byte	'p0',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	1376
	.byte	4,2,35,0,0,23
	.byte	'Os_psetType',0,37,247,2,3
	.word	16760
	.byte	12,37,249,2,9,4,11
	.byte	't0',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	1376
	.byte	4,2,35,0,0,23
	.byte	'Os_tpmaskType',0,37,253,2,3
	.word	16824
	.byte	23
	.byte	'Os_ActivationCountType',0,37,254,2,23
	.word	148
	.byte	27
	.byte	'Os_TaskDynType_s',0,37,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	15366
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	16140
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	148
	.byte	1,2,35,116,0,23
	.byte	'Os_TaskDynType',0,37,132,3,3
	.word	16922
	.byte	13,68
	.word	15335
	.byte	14,0,0,3
	.word	16922
	.byte	9
	.word	17048
	.byte	27
	.byte	'Os_TaskType_s',0,37,134,3,16,40,11
	.byte	'dynamic',0
	.word	17053
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	15510
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	16760
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	16824
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	16824
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	865
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	1376
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	15417
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	148
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	148
	.byte	1,2,35,38,0,23
	.byte	'Os_TaskType',0,37,146,3,3
	.word	17058
	.byte	9
	.word	17058
	.byte	3
	.word	17308
	.byte	23
	.byte	'TaskType',0,37,147,3,47
	.word	17313
	.byte	31
	.byte	'Os_TaskStateType',0,37,155,3,6,4,25
	.byte	'SUSPENDED',0,0,25
	.byte	'READY',0,1,25
	.byte	'WAITING',0,2,25
	.byte	'RUNNING',0,3,0,23
	.byte	'TaskStateType',0,37,156,3,31
	.word	17336
	.byte	12,37,167,3,3,4,11
	.byte	'tpmask',0
	.word	16824
	.byte	4,2,35,0,0,27
	.byte	'Os_ResourceDynType_s',0,37,166,3,16,4,11
	.byte	'saved_priority',0
	.word	17423
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType',0,37,170,3,3
	.word	17446
	.byte	3
	.word	17446
	.byte	9
	.word	17526
	.byte	27
	.byte	'Os_ResourceType_s',0,37,171,3,16,12,11
	.byte	'dynamic',0
	.word	17531
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	16824
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,8,0,23
	.byte	'Os_ResourceType',0,37,175,3,3
	.word	17536
	.byte	10,37,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	1376
	.byte	4,2,35,8,0,23
	.byte	'AlarmBaseType',0,37,185,3,3
	.word	17635
	.byte	10,37,206,3,9,8,11
	.byte	'Running',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	1376
	.byte	4,2,35,4,0,23
	.byte	'Os_CounterStatusType',0,37,210,3,3
	.word	17730
	.byte	32
	.word	148
	.byte	1,1,3
	.word	17816
	.byte	23
	.byte	'Os_CounterIncrAdvType',0,37,217,3,22
	.word	17823
	.byte	27
	.byte	's_swd',0,37,222,3,12,4,11
	.byte	'count',0
	.word	1376
	.byte	4,2,35,0,0,12,37,221,3,3,4,11
	.byte	'sw',0
	.word	17859
	.byte	4,2,35,0,0,27
	.byte	'Os_CounterDynType_s',0,37,220,3,16,4,11
	.byte	'type_dependent',0
	.word	17887
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType',0,37,226,3,3
	.word	17906
	.byte	3
	.word	17906
	.byte	9
	.word	17984
	.byte	27
	.byte	'Os_CounterType_s',0,37,227,3,16,28,11
	.byte	'dynamic',0
	.word	17989
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	17828
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	17635
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	16086
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	148
	.byte	1,2,35,25,0,23
	.byte	'Os_CounterType',0,37,234,3,3
	.word	17994
	.byte	3
	.word	17816
	.byte	9
	.word	17994
	.byte	3
	.word	18146
	.byte	23
	.byte	'CounterType',0,37,235,3,52
	.word	18151
	.byte	31
	.byte	'Os_ScheduleTableStatusType',0,37,240,3,6,4,25
	.byte	'SCHEDULETABLE_STOPPED',0,0,25
	.byte	'SCHEDULETABLE_NEXT',0,1,25
	.byte	'SCHEDULETABLE_WAITING',0,2,25
	.byte	'SCHEDULETABLE_RUNNING',0,3,25
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,23
	.byte	'ScheduleTableStatusType',0,37,241,3,41
	.word	18177
	.byte	9
	.word	.L672-.L218
	.byte	3
	.word	18377
	.byte	23
	.byte	'ScheduleTableType',0,37,128,4,58
	.word	18382
	.byte	27
	.byte	'Os_ScheduleTableDynType_s',0,37,130,4,16,16,11
	.byte	'match',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	18387
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	18177
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	865
	.byte	2,2,35,12,0,3
	.word	18414
	.byte	9
	.word	18507
.L672:
	.byte	27
	.byte	'Os_ScheduleTableType_s',0,37,247,3,16,16,11
	.byte	'dynamic',0
	.word	18512
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	18156
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	148
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	865
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	148
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	148
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	148
	.byte	1,2,35,14,0,23
	.byte	'Os_ScheduleTableType',0,37,255,3,3
	.word	18517
	.byte	9
	.word	18517
	.byte	3
	.word	18697
	.byte	9
	.word	17994
	.byte	3
	.word	18707
	.byte	15
	.word	15810
	.byte	15
	.word	16760
	.byte	15
	.word	16657
	.byte	15
	.word	17318
	.byte	15
	.word	16824
	.byte	15
	.word	148
	.byte	15
	.word	17318
	.byte	27
	.byte	'Os_ControlledCoreType_s',0,37,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	15246
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	18717
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	18722
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	18727
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	18732
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	18737
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	16343
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	16140
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	148
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	18742
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	15417
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	148
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	18747
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	15417
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	148
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	148
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	148
	.byte	1,2,35,110,0,23
	.byte	'Os_ControlledCoreType',0,37,141,7,3
	.word	18752
	.byte	3
	.word	1376
	.byte	9
	.word	16488
	.byte	3
	.word	19208
	.byte	9
	.word	17058
	.byte	3
	.word	19218
	.byte	3
	.word	16140
	.byte	27
	.byte	'Os_AnyCoreType_s',0,37,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	1376
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	1376
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	1376
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	15366
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	148
	.byte	1,2,35,92,0,23
	.byte	'Os_AnyCoreType',0,37,160,7,3
	.word	19233
	.byte	23
	.byte	'Can_TxObjPriorityClassType',0,38,219,3,16
	.word	1376
	.byte	27
	.byte	'Can_TxHwObjectConfigType',0,38,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	1376
	.byte	4,2,35,4,0,23
	.byte	'Can_TxHwObjectConfigType',0,38,252,3,3
	.word	19510
	.byte	27
	.byte	'Can_RxHwObjectConfigType',0,38,129,4,16,12,11
	.byte	'MaskRef',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	148
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	148
	.byte	1,2,35,9,0,23
	.byte	'Can_RxHwObjectConfigType',0,38,147,4,3
	.word	19646
	.byte	13,4
	.word	148
	.byte	14,3,0,27
	.byte	'Can_ControllerMOMapConfigType',0,38,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	19786
	.byte	4,2,35,0,0,23
	.byte	'Can_ControllerMOMapConfigType',0,38,184,4,3
	.word	19795
	.byte	27
	.byte	'Can_NPCRValueType',0,38,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	865
	.byte	2,2,35,0,0,23
	.byte	'Can_NPCRValueType',0,38,191,4,3
	.word	19896
	.byte	27
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,38,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	865
	.byte	2,2,35,4,0,23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,38,198,4,3
	.word	19971
	.byte	9
	.word	19971
	.byte	3
	.word	20136
	.byte	27
	.byte	'Can_BaudrateConfigPtrType',0,38,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	20141
	.byte	4,2,35,0,0,23
	.byte	'Can_BaudrateConfigPtrType',0,38,204,4,3
	.word	20146
	.byte	27
	.byte	'Can_EventHandlingType',0,38,226,4,16,4,11
	.byte	'CanEventType',0
	.word	19786
	.byte	4,2,35,0,0,23
	.byte	'Can_EventHandlingType',0,38,229,4,3
	.word	20246
	.byte	23
	.byte	'Rte_TransformerErrorCode',0,39,130,1,15
	.word	148
	.byte	23
	.byte	'Rte_TransformerClass',0,39,131,1,15
	.word	148
	.byte	10,39,168,1,9,12,11
	.byte	'in',0
	.word	16086
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	16086
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	865
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	148
	.byte	1,2,35,10,0,23
	.byte	'Rte_QDynType',0,39,173,1,3
	.word	20392
	.byte	24,39,175,1,9,4,25
	.byte	'RTE_DRA',0,0,25
	.byte	'RTE_WOWP',0,1,25
	.byte	'RTE_TASK',0,2,25
	.byte	'RTE_ARE',0,3,25
	.byte	'RTE_EV',0,4,25
	.byte	'RTE_MSI',0,5,0,23
	.byte	'Rte_NotificationType',0,39,182,1,3
	.word	20479
	.byte	3
	.word	20392
	.byte	27
	.byte	'Rte_QCmnType',0,39,184,1,16,24,11
	.byte	'dynamic',0
	.word	20577
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	865
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	865
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	16086
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	16086
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	20479
	.byte	4,2,35,20,0,23
	.byte	'Rte_QCmnType',0,39,192,1,3
	.word	20582
	.byte	23
	.byte	'Rte_AlarmRefType',0,39,224,1,32
	.word	1376
	.byte	23
	.byte	'Rte_AlarmIndexType',0,39,226,1,32
	.word	865
	.byte	13,128,8
	.word	148
	.byte	14,255,7,0,23
	.byte	'Impl_NVM_DstPtrType_1024',0,40,50,15
	.word	20820
	.byte	23
	.byte	'CanIf_u32_impl',0,40,69,16
	.word	1376
	.byte	23
	.byte	'CanIf_u16_impl',0,40,71,16
	.word	865
	.byte	23
	.byte	'CanIf_u8_impl',0,40,73,15
	.word	148
	.byte	23
	.byte	'CanIf_ControllerModeType_Enum_impl',0,40,88,15
	.word	148
	.byte	23
	.byte	'CanIf_PduModeType_Enum_impl',0,40,90,15
	.word	148
	.byte	10,40,92,9,2,11
	.byte	'DeviceMode',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	148
	.byte	1,2,35,1,0,23
	.byte	'CanIf_ControllerStateType_struct_impl',0,40,95,3
	.word	21011
	.byte	23
	.byte	'CanIf_NotifStatusType_Enum_impl',0,40,100,15
	.word	148
	.byte	23
	.byte	'CanSM_boolean_Impl',0,40,120,15
	.word	148
	.byte	23
	.byte	'CanSM_u8_Impl',0,40,123,15
	.word	148
	.byte	23
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,40,128,1,15
	.word	148
	.byte	23
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,40,132,1,15
	.word	148
	.byte	23
	.byte	'CanSM_u16_Impl',0,40,136,1,16
	.word	865
	.byte	23
	.byte	'CanSM_TimerStateType_Enum_impl',0,40,138,1,15
	.word	148
	.byte	10,40,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	148
	.byte	1,2,35,2,0,23
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,40,143,1,3
	.word	21352
	.byte	23
	.byte	'Com_impl_u16',0,40,154,1,16
	.word	865
	.byte	23
	.byte	'Com_impl_u8',0,40,157,1,15
	.word	148
	.byte	23
	.byte	'ComM_uint32_Impl',0,40,173,1,16
	.word	1376
	.byte	23
	.byte	'ComM_uint16_Impl',0,40,175,1,16
	.word	865
	.byte	23
	.byte	'ComM_uint8_Impl',0,40,177,1,15
	.word	148
	.byte	23
	.byte	'ComM_bool_Impl',0,40,179,1,15
	.word	148
	.byte	10,40,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	1376
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	865
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	148
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	148
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	148
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	148
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	148
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	148
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	148
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	148
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	148
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	148
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	148
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	148
	.byte	1,2,35,21,0,23
	.byte	'ComM_ChannelStruct_Impl',0,40,197,1,3
	.word	21584
	.byte	10,40,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	865
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	148
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	148
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	148
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	148
	.byte	1,2,35,8,0,23
	.byte	'ComM_UserStruct_Impl',0,40,214,1,3
	.word	22088
	.byte	23
	.byte	'Dcm_IOOperationResponseType',0,40,252,1,15
	.word	148
	.byte	23
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	40,138,2,15
	.word	148
	.byte	23
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,40,146,2,15
	.word	148
	.byte	23
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,40,150,2,15
	.word	148
	.byte	23
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,40,154,2,15
	.word	148
	.byte	23
	.byte	'Dem_DTCFormatType',0,40,160,2,15
	.word	148
	.byte	23
	.byte	'Dem_DTCOriginType',0,40,162,2,15
	.word	148
	.byte	23
	.byte	'Dem_EventIdType',0,40,168,2,16
	.word	865
	.byte	23
	.byte	'Dem_EventStatusType',0,40,170,2,15
	.word	148
	.byte	23
	.byte	'Dem_InitMonitorReasonType',0,40,176,2,15
	.word	148
	.byte	13,2
	.word	148
	.byte	14,1,0,23
	.byte	'Dem_MaxDataValueType',0,40,178,2,15
	.word	22917
	.byte	23
	.byte	'Dem_OperationCycleIdType',0,40,179,2,15
	.word	148
	.byte	23
	.byte	'NvM_BlockIdType',0,40,215,2,16
	.word	865
	.byte	23
	.byte	'NvM_RequestResultType',0,40,225,2,15
	.word	148
	.byte	23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,40,243,3,34
	.word	20831
	.byte	13,128,8
	.word	148
	.byte	14,255,7,0,23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,40,246,3,34
	.word	20831
	.byte	23
	.byte	'Dem_DTCGroupIdType',0,41,49,15
	.word	148
	.byte	23
	.byte	'Dem_DtcIdType',0,41,50,16
	.word	865
	.byte	23
	.byte	'Dem_ClientIdType',0,41,53,15
	.word	148
	.byte	23
	.byte	'Dem_DtcCodeType',0,41,55,16
	.word	1376
	.byte	23
	.byte	'Dem_boolean_least',0,41,60,17
	.word	148
	.byte	23
	.byte	'Dem_EventCategoryType',0,41,62,15
	.word	148
	.byte	23
	.byte	'Dem_ReturnGetExtendedDataRecordByDTCType',0,41,110,15
	.word	148
	.byte	23
	.byte	'Dem_ReturnGetSizeOfExtendedDataRecordByDTCType',0,41,132,1,15
	.word	148
	.byte	23
	.byte	'Dem_ReturnGetFreezeFrameDataByDTCType',0,41,154,1,15
	.word	148
	.byte	23
	.byte	'Dem_ReturnGetSizeOfFreezeFrameByDTCType',0,41,176,1,15
	.word	148
	.byte	23
	.byte	'Dem_DTCSeverityType',0,41,217,1,15
	.word	148
	.byte	23
	.byte	'Dem_DebugDataType',0,41,131,3,16
	.word	1376
	.byte	23
	.byte	'Dem_DTCKindType',0,41,145,3,16
	.word	148
	.byte	23
	.byte	'Dem_TriggerType',0,41,167,3,15
	.word	148
	.byte	23
	.byte	'Dem_EnCoList',0,42,31,15
	.word	148
	.byte	23
	.byte	'Dem_OperationCycleList',0,43,23,15
	.word	148
	.byte	23
	.byte	'Dem_StoCoList',0,44,32,15
	.word	148
	.byte	23
	.byte	'Rte_TaskRefType',0,45,184,1,32
	.word	17318
	.byte	23
	.byte	'Rte_EventRefType',0,45,185,1,32
	.word	148
	.byte	23
	.byte	'Rte_EventType',0,45,186,1,32
	.word	1376
	.byte	23
	.byte	'Rte_REActCounterType',0,45,252,1,15
	.word	148
	.byte	3
	.word	148
	.byte	23
	.byte	'Rte_REActCounterRefType',0,45,253,1,58
	.word	23817
	.byte	10,45,255,1,9,8,11
	.byte	'task',0
	.word	23713
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	23822
	.byte	4,2,35,4,0,23
	.byte	'Rte_REContainerType',0,45,130,2,3
	.word	23855
	.byte	9
	.word	17058
	.byte	3
	.word	23919
	.byte	3
	.word	148
	.byte	9
	.word	23855
	.byte	3
	.word	23934
	.byte	23
	.byte	'Rte_REContainerRefType',0,45,132,2,60
	.word	23939
	.byte	23
	.byte	'Rte_MSICounterType',0,45,149,2,16
	.word	865
	.byte	3
	.word	865
	.byte	23
	.byte	'Rte_MSICounterRefType',0,45,150,2,56
	.word	24004
	.byte	23
	.byte	'Rte_MSIPendingFlagType',0,45,152,2,17
	.word	148
	.byte	3
	.word	148
	.byte	23
	.byte	'Rte_MSIPendingFlagRefType',0,45,153,2,60
	.word	24072
	.byte	10,45,163,2,9,24,11
	.byte	'counter',0
	.word	24009
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	24077
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	23713
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	23822
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	148
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	865
	.byte	2,2,35,22,0,23
	.byte	'Rte_MSITableEntry',0,45,172,2,3
	.word	24112
	.byte	3
	.word	865
	.byte	3
	.word	148
	.byte	23
	.byte	'Rte_TaskArrayIndex',0,45,179,2,16
	.word	148
	.byte	23
	.byte	'Rte_NrWaitingTasks',0,45,180,2,16
	.word	148
	.byte	10,45,182,2,9,4,11
	.byte	'pending',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	148
	.byte	1,2,35,2,0,23
	.byte	'Rte_WaitableDatum',0,45,186,2,3
	.word	24330
	.byte	3
	.word	24330
	.byte	10,45,226,2,9,12,11
	.byte	'event_id',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	24422
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	1376
	.byte	4,2,35,8,0,23
	.byte	'Rte_WOWP_NotificationType',0,45,230,2,3
	.word	24427
	.byte	9
	.word	24427
	.byte	3
	.word	24516
	.byte	23
	.byte	'Rte_WOWP_NotificationRefType',0,45,232,2,66
	.word	24521
	.byte	23
	.byte	'Rte_ARE_NotificationType',0,45,234,2,29
	.word	23855
	.byte	27
	.byte	'Rte_QTaskType',0,45,243,2,16,28,11
	.byte	'cmn',0
	.word	20582
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23713
	.byte	4,2,35,24,0,23
	.byte	'Rte_QTaskType',0,45,246,2,3
	.word	24598
	.byte	27
	.byte	'Rte_QREType',0,45,250,2,16,28,11
	.byte	'cmn',0
	.word	20582
	.byte	24,2,35,0,11
	.byte	're',0
	.word	23944
	.byte	4,2,35,24,0,23
	.byte	'Rte_QREType',0,45,253,2,3
	.word	24669
	.byte	9
	.word	23855
	.byte	3
	.word	24734
	.byte	27
	.byte	'Rte_QWWPType',0,45,129,3,16,28,11
	.byte	'cmn',0
	.word	20582
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	24526
	.byte	4,2,35,24,0,23
	.byte	'Rte_QWWPType',0,45,132,3,3
	.word	24744
	.byte	9
	.word	24427
	.byte	3
	.word	24812
	.byte	27
	.byte	'Rte_QEvType',0,45,136,3,16,36,11
	.byte	'cmn',0
	.word	20582
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23713
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	148
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	23822
	.byte	4,2,35,32,0,23
	.byte	'Rte_QEvType',0,45,141,3,3
	.word	24822
	.byte	27
	.byte	'Rte_QMSIType',0,45,145,3,16,48,11
	.byte	'cmn',0
	.word	20582
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	23713
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	148
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	23822
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	24009
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	24077
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	865
	.byte	2,2,35,44,0,23
	.byte	'Rte_QMSIType',0,45,153,3,3
	.word	24917
	.byte	23
	.byte	'rba_BswSrv_uint64',0,4,66,28
	.word	14642
	.byte	23
	.byte	'Dem_EventIdIterator',0,7,27,22
	.word	6345
	.byte	23
	.byte	'Dem_DtcIdIterator',0,7,197,1,22
	.word	6345
	.byte	23
	.byte	'Dem_DtcGroupIdIterator',0,7,230,1,21
	.word	6345
	.byte	9
	.word	865
	.byte	3
	.word	25185
	.byte	10,7,171,2,9,8,11
	.byte	'it',0
	.word	25190
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	25190
	.byte	4,2,35,4,0,23
	.byte	'Dem_EventIdListIterator',0,7,174,2,3
	.word	25195
	.byte	10,7,213,2,9,4,11
	.byte	'it',0
	.word	865
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	865
	.byte	2,2,35,2,0,23
	.byte	'Dem_DtcIdListIterator',0,7,216,2,3
	.word	25260
	.byte	23
	.byte	'Dem_EvtStateType',0,46,151,1,15
	.word	148
	.byte	23
	.byte	'Dem_EvMemOccurrenceCounterType',0,10,90,21
	.word	148
	.byte	23
	.byte	'Dem_EvMemAgingCounterType',0,10,99,21
	.word	148
	.byte	23
	.byte	'Dem_EvMemHdrType',0,10,141,1,4
	.word	2564
	.byte	23
	.byte	'Dem_EvMemEventMemoryType',0,10,213,1,4
	.word	2594
	.byte	23
	.byte	'Dem_InternalEnvData',0,9,25,3
	.word	2767
	.byte	3
	.word	148
	.byte	33
	.word	148
	.byte	1,1,30
	.word	25510
	.byte	0,3
	.word	25515
	.byte	23
	.byte	'Dem_ReadExternalDataElementFnc',0,8,11,26
	.word	25528
	.byte	9
	.word	2767
	.byte	3
	.word	25572
	.byte	33
	.word	148
	.byte	1,1,30
	.word	25510
	.byte	30
	.word	25577
	.byte	0,3
	.word	25582
	.byte	23
	.byte	'Dem_ReadInternalDataElementFnc',0,8,12,26
	.word	25600
	.byte	23
	.byte	'Dem_EnvTriggerParamType',0,11,14,3
	.word	3826
	.byte	23
	.byte	'Dem_OpMoStateType',0,47,13,15
	.word	148
	.byte	34
	.byte	'Dem_OpMoState',0,47,31,26
	.word	148
	.byte	1,1,24,48,31,9,4,25
	.byte	'MEMIF_JOB_OK',0,0,25
	.byte	'MEMIF_JOB_FAILED',0,1,25
	.byte	'MEMIF_JOB_PENDING',0,2,25
	.byte	'MEMIF_JOB_CANCELED',0,3,25
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,25
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,23
	.byte	'MemIf_JobResultType',0,48,39,2
	.word	25726
	.byte	24,49,49,9,4,25
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,25
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,25
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,25
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,25
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,25
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,25
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,23
	.byte	'NvM_Prv_Activities_ten',0,49,58,3
	.word	25884
	.byte	24,49,104,9,4,25
	.byte	'NvM_Prv_idJob_Idle_e',0,0,25
	.byte	'NvM_Prv_idJob_Read_e',0,1,25
	.byte	'NvM_Prv_idJob_Write_e',0,2,25
	.byte	'NvM_Prv_idJob_Erase_e',0,3,25
	.byte	'NvM_Prv_idJob_Restore_e',0,4,25
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,25
	.byte	'NvM_Prv_idJob_Validate_e',0,6,25
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,25
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,25
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,25
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,25
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,25
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,25
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,23
	.byte	'NvM_Prv_idJob_ten',0,49,115,3
	.word	26125
	.byte	23
	.byte	'NvM_Prv_ServiceBit_tuo',0,49,168,1,16
	.word	865
	.byte	23
	.byte	'NvM_Prv_idService_tuo',0,49,173,1,15
	.word	148
	.byte	23
	.byte	'NvM_Prv_idQueue_tuo',0,49,206,1,15
	.word	148
	.byte	10,49,210,1,9,12,11
	.byte	'idService_uo',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	865
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	865
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	16086
	.byte	4,2,35,8,0,23
	.byte	'NvM_Prv_QueueEntry_tst',0,49,225,1,3
	.word	26682
	.byte	10,49,227,1,9,20,11
	.byte	'idJob_en',0
	.word	26125
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	865
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	165
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	148
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	25726
	.byte	4,2,35,16,0,23
	.byte	'NvM_Prv_JobData_tst',0,49,240,1,3
	.word	26808
	.byte	13,5
	.word	148
	.byte	14,4,0,13,10
	.word	865
	.byte	14,4,0,10,50,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	148
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	26946
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	26955
	.byte	10,2,35,8,0,23
	.byte	'Dem_GenericNvDataType',0,50,24,4
	.word	26964
	.byte	23
	.byte	'Dem_NvmBlockIdType',0,51,14,34
	.word	148
	.byte	12,51,16,9,20,11
	.byte	'evMemData',0
	.word	2594
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	26964
	.byte	18,2,35,0,0,23
	.byte	'Dem_NvMStorageBufferData',0,51,37,3
	.word	27140
	.byte	23
	.byte	'Dem_NvmBlockStatusType',0,51,59,15
	.word	148
	.byte	23
	.byte	'Dem_NvmResultType',0,51,78,31
	.word	148
	.byte	23
	.byte	'Dem_EvtClearAllowedFncType',0,18,12,26
	.word	25528
	.byte	10,18,31,9,2,11
	.byte	'dataDataContainer_2',0
	.word	865
	.byte	2,2,35,0,0,23
	.byte	'Dem_EvtParam_16Type',0,18,34,3
	.word	27313
	.byte	13,12
	.word	27313
	.byte	14,5,0,9
	.word	27376
	.byte	34
	.byte	'Dem_EvtParam_16',0,18,38,34
	.word	27385
	.byte	1,1,33
	.word	148
	.byte	1,1,30
	.word	148
	.byte	0,3
	.word	27416
	.byte	23
	.byte	'Dem_InitMForEAllowedFncType',0,19,38,27
	.word	27429
	.byte	10,19,46,9,4,11
	.byte	'state',0
	.word	148
	.byte	1,2,35,0,11
	.byte	'debounceLevel',0
	.word	6056
	.byte	2,2,35,2,0,23
	.byte	'Dem_EvtState',0,19,50,3
	.word	27470
	.byte	13,24
	.word	27470
	.byte	14,5,0,34
	.byte	'Dem_AllEventsState',0,19,152,1,1
	.word	27535
	.byte	1,1,9
	.word	16080
	.byte	3
	.word	27574
	.byte	33
	.word	6345
	.byte	1,1,30
	.word	865
	.byte	30
	.word	25510
	.byte	30
	.word	27579
	.byte	30
	.word	865
	.byte	0,3
	.word	27584
	.byte	23
	.byte	'Dem_DebFilter',0,52,12,23
	.word	27612
	.byte	2
	.byte	'long int',0,4,5,3
	.word	27639
	.byte	29,1,1,30
	.word	27579
	.byte	30
	.word	865
	.byte	30
	.word	27651
	.byte	30
	.word	27651
	.byte	0,3
	.word	27656
	.byte	23
	.byte	'Dem_DebGetLimits',0,52,13,23
	.word	27680
	.byte	29,1,1,30
	.word	865
	.byte	30
	.word	27579
	.byte	30
	.word	865
	.byte	0,3
	.word	27710
	.byte	23
	.byte	'Dem_DebCyclic',0,52,14,16
	.word	27729
	.byte	23
	.byte	'Dem_DebouncedActionType',0,52,35,21
	.word	6345
	.byte	12,53,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	1376
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	19786
	.byte	4,2,35,0,0,23
	.byte	'Dem_EvBuffEnvDataAlignedType',0,53,47,3
	.word	27788
	.byte	10,53,49,9,16,11
	.byte	'envData',0
	.word	27788
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	148
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	865
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	1376
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	1376
	.byte	4,2,35,12,0,23
	.byte	'Dem_EvBuffEvent',0,53,75,2
	.word	27873
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L219:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,1,1,11,15,73,19,0,0,14,33,0
	.byte	47,15,0,0,15,53,0,73,19,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,21,11,1,49,19,0,0,22,21,0,54,15,0,0,23,22
	.byte	0,3,8,58,15,59,15,57,15,73,19,0,0,24,4,1,58,15,59,15,57,15,11,15,0,0,25,40,0,3,8,28,13,0,0,26,21,0,54
	.byte	15,39,12,0,0,27,19,1,3,8,58,15,59,15,57,15,11,15,0,0,28,59,0,3,8,0,0,29,21,1,54,15,39,12,0,0,30,5,0,73
	.byte	19,0,0,31,4,1,3,8,58,15,59,15,57,15,11,15,0,0,32,21,0,73,19,54,15,39,12,0,0,33,21,1,73,19,54,15,39,12
	.byte	0,0,34,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L220:
	.word	.L674-.L673
.L673:
	.half	3
	.word	.L676-.L675
.L675:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDataElement.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_InternalEnvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvExtendedDataRec.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvDid.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvFFRecNumeration.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvMain.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Main.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0,0
.L676:
.L674:
	.sdecl	'.debug_info',debug,cluster('Dem_DltGetAllExtendedDataRecords')
	.sect	'.debug_info'
.L221:
	.word	797
	.half	3
	.word	.L222
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L224,.L223
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_DltGetAllExtendedDataRecords',0,1,17,16
	.word	.L281
	.byte	1,1,1
	.word	.L194,.L282,.L193
	.byte	4
	.byte	'EventId',0,1,17,65
	.word	.L283,.L284
	.byte	4
	.byte	'DestBuffer',0,1,17,81
	.word	.L285,.L286
	.byte	4
	.byte	'BufSize',0,1,17,101
	.word	.L287,.L288
	.byte	5
	.word	.L194,.L282
	.byte	6
	.byte	'returnValue',0,1,20,17
	.word	.L281,.L289
	.byte	6
	.byte	'ReaderCopy',0,1,21,27
	.word	.L290,.L291
	.byte	7
	.word	.L292,.L293,.L294
	.byte	8
	.word	.L295,.L296
	.byte	9
	.word	.L297,.L293,.L294
	.byte	0,7
	.word	.L298,.L5,.L299
	.byte	8
	.word	.L300,.L301
	.byte	10
	.word	.L302,.L5,.L299
	.byte	7
	.word	.L303,.L304,.L8
	.byte	8
	.word	.L305,.L306
	.byte	8
	.word	.L307,.L308
	.byte	10
	.word	.L309,.L304,.L8
	.byte	7
	.word	.L310,.L304,.L7
	.byte	8
	.word	.L311,.L312
	.byte	8
	.word	.L313,.L314
	.byte	9
	.word	.L315,.L304,.L7
	.byte	0,0,0,0,0,7
	.word	.L316,.L15,.L24
	.byte	8
	.word	.L317,.L318
	.byte	8
	.word	.L319,.L320
	.byte	10
	.word	.L321,.L15,.L24
	.byte	6
	.byte	'MemId',0,2,128,2,18
	.word	.L322,.L323
	.byte	7
	.word	.L324,.L15,.L20
	.byte	8
	.word	.L325,.L326
	.byte	10
	.word	.L327,.L15,.L20
	.byte	7
	.word	.L328,.L15,.L329
	.byte	8
	.word	.L330,.L331
	.byte	10
	.word	.L332,.L15,.L329
	.byte	7
	.word	.L333,.L334,.L17
	.byte	8
	.word	.L335,.L336
	.byte	8
	.word	.L337,.L338
	.byte	10
	.word	.L339,.L334,.L17
	.byte	7
	.word	.L340,.L334,.L16
	.byte	8
	.word	.L341,.L342
	.byte	8
	.word	.L343,.L344
	.byte	9
	.word	.L345,.L334,.L16
	.byte	0,0,0,0,0,0,0,7
	.word	.L346,.L20,.L22
	.byte	8
	.word	.L347,.L348
	.byte	9
	.word	.L349,.L20,.L22
	.byte	0,0,0,7
	.word	.L350,.L351,.L27
	.byte	8
	.word	.L352,.L353
	.byte	9
	.word	.L354,.L351,.L27
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DltGetAllExtendedDataRecords')
	.sect	'.debug_abbrev'
.L222:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DltGetAllExtendedDataRecords')
	.sect	'.debug_line'
.L223:
	.word	.L678-.L677
.L677:
	.half	3
	.word	.L680-.L679
.L679:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L680:
	.byte	5,16,7,0,5,2
	.word	.L194
	.byte	3,16,1,4,3,5,26,9
	.half	.L293-.L194
	.byte	3,5,1,5,12,9
	.half	.L681-.L293
	.byte	1,5,38,7,9
	.half	.L682-.L681
	.byte	1,5,26,9
	.half	.L683-.L682
	.byte	1,5,4,9
	.half	.L2-.L683
	.byte	1,4,1,5,7,9
	.half	.L4-.L2
	.byte	3,1,1,5,10,7,9
	.half	.L294-.L4
	.byte	3,2,1,5,3,9
	.half	.L684-.L294
	.byte	1,4,4,5,33,9
	.half	.L5-.L684
	.byte	3,221,4,1,5,51,9
	.half	.L685-.L5
	.byte	1,5,60,9
	.half	.L686-.L685
	.byte	1,5,68,9
	.half	.L687-.L686
	.byte	1,4,5,5,28,9
	.half	.L304-.L687
	.byte	3,200,123,1,5,47,9
	.half	.L688-.L304
	.byte	1,5,5,9
	.half	.L689-.L688
	.byte	1,5,73,9
	.half	.L7-.L689
	.byte	3,4,1,5,5,9
	.half	.L690-.L7
	.byte	1,4,4,5,3,9
	.half	.L8-.L690
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L9-.L8
	.byte	3,166,123,1,5,16,7,9
	.half	.L299-.L9
	.byte	3,2,1,5,9,9
	.half	.L691-.L299
	.byte	1,9
	.half	.L10-.L691
	.byte	3,3,1,5,43,7,9
	.half	.L692-.L10
	.byte	1,5,16,7,9
	.half	.L12-.L692
	.byte	3,2,1,5,9,9
	.half	.L693-.L12
	.byte	1,5,55,9
	.half	.L13-.L693
	.byte	3,3,1,4,6,5,32,9
	.half	.L15-.L13
	.byte	3,40,1,5,47,9
	.half	.L694-.L15
	.byte	1,5,53,9
	.half	.L695-.L694
	.byte	1,5,75,9
	.half	.L696-.L695
	.byte	1,4,7,5,29,9
	.half	.L334-.L696
	.byte	3,112,1,5,46,9
	.half	.L697-.L334
	.byte	1,5,5,9
	.half	.L698-.L697
	.byte	1,5,74,9
	.half	.L16-.L698
	.byte	3,5,1,5,5,9
	.half	.L699-.L16
	.byte	1,4,6,5,2,9
	.half	.L17-.L699
	.byte	3,11,1,4,2,5,5,9
	.half	.L18-.L17
	.byte	3,146,1,1,5,9,7,9
	.half	.L329-.L18
	.byte	3,2,1,5,5,9
	.half	.L19-.L329
	.byte	3,10,1,4,8,5,38,9
	.half	.L20-.L19
	.byte	3,253,126,1,5,5,9
	.half	.L700-.L20
	.byte	1,4,2,5,10,9
	.half	.L22-.L700
	.byte	3,152,1,1,5,9,7,9
	.half	.L701-.L22
	.byte	3,2,1,5,63,9
	.half	.L23-.L701
	.byte	3,3,1,5,5,9
	.half	.L552-.L23
	.byte	1,4,1,9
	.half	.L24-.L552
	.byte	3,160,126,1,5,105,7,9
	.half	.L702-.L24
	.byte	3,2,1,4,8,5,22,9
	.half	.L351-.L702
	.byte	3,132,4,1,5,4,9
	.half	.L703-.L351
	.byte	1,4,1,5,119,9
	.half	.L27-.L703
	.byte	3,252,123,1,5,103,9
	.half	.L558-.L27
	.byte	1,5,10,9
	.half	.L26-.L558
	.byte	3,4,1,5,3,9
	.half	.L704-.L26
	.byte	1,5,2,9
	.half	.L28-.L704
	.byte	3,3,1,5,1,9
	.half	.L6-.L28
	.byte	3,1,1,7,9
	.half	.L225-.L6
	.byte	0,1,1
.L678:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DltGetAllExtendedDataRecords')
	.sect	'.debug_ranges'
.L224:
	.word	-1,.L194,0,.L225-.L194,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_DltGetMostRecentFreezeFrameRecordData')
	.sect	'.debug_info'
.L226:
	.word	862
	.half	3
	.word	.L227
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L229,.L228
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_DltGetMostRecentFreezeFrameRecordData',0,1,50,16
	.word	.L281
	.byte	1,1,1
	.word	.L196,.L355,.L195
	.byte	4
	.byte	'EventId',0,1,50,74
	.word	.L283,.L356
	.byte	4
	.byte	'DestBuffer',0,1,50,90
	.word	.L285,.L357
	.byte	4
	.byte	'BufSize',0,1,50,110
	.word	.L287,.L358
	.byte	5
	.word	.L196,.L355
	.byte	6
	.byte	'ffIndex',0,1,53,15
	.word	.L322,.L359
	.byte	6
	.byte	'returnValue',0,1,54,17
	.word	.L281,.L360
	.byte	6
	.byte	'ReaderCopy',0,1,55,27
	.word	.L290,.L361
	.byte	7
	.word	.L292,.L362,.L363
	.byte	8
	.word	.L295,.L364
	.byte	9
	.word	.L297,.L362,.L363
	.byte	0,7
	.word	.L298,.L34,.L365
	.byte	8
	.word	.L300,.L366
	.byte	10
	.word	.L302,.L34,.L365
	.byte	7
	.word	.L303,.L367,.L37
	.byte	8
	.word	.L305,.L368
	.byte	8
	.word	.L307,.L369
	.byte	10
	.word	.L309,.L367,.L37
	.byte	7
	.word	.L310,.L367,.L36
	.byte	8
	.word	.L311,.L370
	.byte	8
	.word	.L313,.L371
	.byte	9
	.word	.L315,.L367,.L36
	.byte	0,0,0,0,0,7
	.word	.L316,.L44,.L53
	.byte	8
	.word	.L317,.L372
	.byte	8
	.word	.L319,.L373
	.byte	10
	.word	.L321,.L44,.L53
	.byte	6
	.byte	'MemId',0,2,128,2,18
	.word	.L322,.L374
	.byte	7
	.word	.L324,.L44,.L49
	.byte	8
	.word	.L325,.L375
	.byte	10
	.word	.L327,.L44,.L49
	.byte	7
	.word	.L328,.L44,.L376
	.byte	8
	.word	.L330,.L377
	.byte	10
	.word	.L332,.L44,.L376
	.byte	7
	.word	.L333,.L378,.L46
	.byte	8
	.word	.L335,.L379
	.byte	8
	.word	.L337,.L380
	.byte	10
	.word	.L339,.L378,.L46
	.byte	7
	.word	.L340,.L378,.L45
	.byte	8
	.word	.L341,.L381
	.byte	8
	.word	.L343,.L382
	.byte	9
	.word	.L345,.L378,.L45
	.byte	0,0,0,0,0,0,0,7
	.word	.L346,.L49,.L51
	.byte	8
	.word	.L347,.L383
	.byte	9
	.word	.L349,.L49,.L51
	.byte	0,0,0,7
	.word	.L384,.L385,.L56
	.byte	8
	.word	.L386,.L387
	.byte	9
	.word	.L388,.L385,.L56
	.byte	0,7
	.word	.L350,.L389,.L59
	.byte	8
	.word	.L352,.L390
	.byte	9
	.word	.L354,.L389,.L59
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_DltGetMostRecentFreezeFrameRecordData')
	.sect	'.debug_abbrev'
.L227:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_DltGetMostRecentFreezeFrameRecordData')
	.sect	'.debug_line'
.L228:
	.word	.L706-.L705
.L705:
	.half	3
	.word	.L708-.L707
.L707:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L708:
	.byte	5,16,7,0,5,2
	.word	.L196
	.byte	3,49,1,4,3,5,26,9
	.half	.L362-.L196
	.byte	3,100,1,5,12,9
	.half	.L709-.L362
	.byte	1,5,38,7,9
	.half	.L710-.L709
	.byte	1,5,26,9
	.half	.L711-.L710
	.byte	1,5,4,9
	.half	.L31-.L711
	.byte	1,4,1,5,7,9
	.half	.L33-.L31
	.byte	3,35,1,5,10,7,9
	.half	.L363-.L33
	.byte	3,2,1,5,3,9
	.half	.L712-.L363
	.byte	1,4,4,5,33,9
	.half	.L34-.L712
	.byte	3,187,4,1,5,51,9
	.half	.L713-.L34
	.byte	1,5,60,9
	.half	.L714-.L713
	.byte	1,5,68,9
	.half	.L715-.L714
	.byte	1,4,5,5,28,9
	.half	.L367-.L715
	.byte	3,200,123,1,5,47,9
	.half	.L716-.L367
	.byte	1,5,5,9
	.half	.L717-.L716
	.byte	1,5,73,9
	.half	.L36-.L717
	.byte	3,4,1,5,5,9
	.half	.L718-.L36
	.byte	1,4,4,5,3,9
	.half	.L37-.L718
	.byte	3,180,4,1,4,1,5,2,9
	.half	.L38-.L37
	.byte	3,200,123,1,5,13,7,9
	.half	.L365-.L38
	.byte	3,2,1,5,6,9
	.half	.L719-.L365
	.byte	1,5,9,9
	.half	.L39-.L719
	.byte	3,3,1,5,43,7,9
	.half	.L720-.L39
	.byte	1,5,16,7,9
	.half	.L41-.L720
	.byte	3,2,1,5,9,9
	.half	.L721-.L41
	.byte	1,5,55,9
	.half	.L42-.L721
	.byte	3,4,1,4,6,5,32,9
	.half	.L44-.L42
	.byte	3,5,1,5,47,9
	.half	.L722-.L44
	.byte	1,5,53,9
	.half	.L723-.L722
	.byte	1,5,75,9
	.half	.L724-.L723
	.byte	1,4,7,5,29,9
	.half	.L378-.L724
	.byte	3,112,1,5,46,9
	.half	.L725-.L378
	.byte	1,5,5,9
	.half	.L726-.L725
	.byte	1,5,74,9
	.half	.L45-.L726
	.byte	3,5,1,5,5,9
	.half	.L727-.L45
	.byte	1,4,6,5,2,9
	.half	.L46-.L727
	.byte	3,11,1,4,2,5,5,9
	.half	.L47-.L46
	.byte	3,146,1,1,5,9,7,9
	.half	.L376-.L47
	.byte	3,2,1,5,5,9
	.half	.L48-.L376
	.byte	3,10,1,4,8,5,38,9
	.half	.L49-.L48
	.byte	3,253,126,1,5,5,9
	.half	.L728-.L49
	.byte	1,4,2,5,10,9
	.half	.L51-.L728
	.byte	3,152,1,1,5,9,7,9
	.half	.L729-.L51
	.byte	3,2,1,5,63,9
	.half	.L52-.L729
	.byte	3,3,1,5,5,9
	.half	.L562-.L52
	.byte	1,4,1,9
	.half	.L53-.L562
	.byte	3,195,126,1,4,8,5,36,7,9
	.half	.L385-.L53
	.byte	3,170,3,1,5,4,9
	.half	.L730-.L385
	.byte	1,4,1,5,9,9
	.half	.L56-.L730
	.byte	3,219,124,1,5,20,7,9
	.half	.L731-.L56
	.byte	3,2,1,5,13,9
	.half	.L732-.L731
	.byte	1,5,128,1,9
	.half	.L57-.L732
	.byte	3,2,1,4,8,5,22,9
	.half	.L389-.L57
	.byte	3,218,3,1,5,4,9
	.half	.L733-.L389
	.byte	1,4,1,5,90,9
	.half	.L59-.L733
	.byte	3,166,124,1,5,142,1,9
	.half	.L734-.L59
	.byte	1,5,126,9
	.half	.L568-.L734
	.byte	1,5,15,9
	.half	.L55-.L568
	.byte	3,4,1,5,2,9
	.half	.L60-.L55
	.byte	3,2,1,5,1,9
	.half	.L35-.L60
	.byte	3,1,1,7,9
	.half	.L230-.L35
	.byte	0,1,1
.L706:
	.sdecl	'.debug_ranges',debug,cluster('Dem_DltGetMostRecentFreezeFrameRecordData')
	.sect	'.debug_ranges'
.L229:
	.word	-1,.L196,0,.L230-.L196,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventExtendedDataRecordEx')
	.sect	'.debug_info'
.L231:
	.word	313
	.half	3
	.word	.L232
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L234,.L233
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventExtendedDataRecordEx',0,1,168,1,16
	.word	.L281
	.byte	1,1,1
	.word	.L204,.L391,.L203
	.byte	4
	.byte	'EventId',0,1,168,1,65
	.word	.L283,.L392
	.byte	4
	.byte	'RecordNumber',0,1,168,1,80
	.word	.L281,.L393
	.byte	4
	.byte	'DestBuffer',0,1,168,1,101
	.word	.L285,.L394
	.byte	4
	.byte	'BufSize',0,1,168,1,121
	.word	.L287,.L395
	.byte	5
	.word	.L204,.L391
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventExtendedDataRecordEx')
	.sect	'.debug_abbrev'
.L232:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventExtendedDataRecordEx')
	.sect	'.debug_line'
.L233:
	.word	.L736-.L735
.L735:
	.half	3
	.word	.L738-.L737
.L737:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0,0
.L738:
	.byte	5,78,7,0,5,2
	.word	.L204
	.byte	3,169,1,1,5,5,9
	.half	.L608-.L204
	.byte	1,5,1,9
	.half	.L116-.L608
	.byte	3,1,1,7,9
	.half	.L235-.L116
	.byte	0,1,1
.L736:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventExtendedDataRecordEx')
	.sect	'.debug_ranges'
.L234:
	.word	-1,.L204,0,.L235-.L204,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventFreezeFrameDataEx')
	.sect	'.debug_info'
.L236:
	.word	363
	.half	3
	.word	.L237
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L239,.L238
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventFreezeFrameDataEx',0,1,183,2,16
	.word	.L281
	.byte	1,1,1
	.word	.L212,.L396,.L211
	.byte	4
	.byte	'EventId',0,1,183,2,62
	.word	.L283,.L397
	.byte	4
	.byte	'RecordNumber',0,1,183,2,77
	.word	.L281,.L398
	.byte	4
	.byte	'DataId',0,1,183,2,98
	.word	.L283,.L399
	.byte	4
	.byte	'DestBuffer',0,1,183,2,113
	.word	.L285,.L400
	.byte	4
	.byte	'BufSize',0,1,183,2,133,1
	.word	.L287,.L401
	.byte	5
	.word	.L212,.L396
	.byte	6
	.byte	'ReportTotalRecord',0,1,185,2,13
	.word	.L281,.L402
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventFreezeFrameDataEx')
	.sect	'.debug_abbrev'
.L237:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventFreezeFrameDataEx')
	.sect	'.debug_line'
.L238:
	.word	.L740-.L739
.L739:
	.half	3
	.word	.L742-.L741
.L741:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0,0
.L742:
	.byte	5,16,7,0,5,2
	.word	.L212
	.byte	3,182,2,1,5,31,9
	.half	.L667-.L212
	.byte	3,2,1,5,102,9
	.half	.L666-.L667
	.byte	3,1,1,5,5,9
	.half	.L665-.L666
	.byte	1,5,1,9
	.half	.L190-.L665
	.byte	3,1,1,7,9
	.half	.L240-.L190
	.byte	0,1,1
.L740:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventFreezeFrameDataEx')
	.sect	'.debug_ranges'
.L239:
	.word	-1,.L212,0,.L240-.L212,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventExtendedDataRecord')
	.sect	'.debug_info'
.L241:
	.word	958
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L244,.L243
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventExtendedDataRecord',0,1,91,16
	.word	.L281
	.byte	1,1,1
	.word	.L198,.L403,.L197
	.byte	4
	.byte	'EventId',0,1,92,19
	.word	.L283,.L404
	.byte	4
	.byte	'RecordNumber',0,1,93,9
	.word	.L281,.L405
	.byte	4
	.byte	'DestBuffer',0,1,94,10
	.word	.L285,.L406
	.byte	4
	.byte	'BufSize',0,1,95,11
	.word	.L287,.L407
	.byte	5
	.word	.L198,.L403
	.byte	6
	.byte	'returnValue',0,1,99,17
	.word	.L281,.L408
	.byte	6
	.byte	'Trigger',0,1,100,18
	.word	.L281,.L409
	.byte	6
	.byte	'ReaderCopy',0,1,102,27
	.word	.L290,.L410
	.byte	7
	.word	.L292,.L69,.L411
	.byte	8
	.word	.L295,.L412
	.byte	9
	.word	.L297,.L69,.L411
	.byte	0,7
	.word	.L298,.L76,.L413
	.byte	8
	.word	.L300,.L414
	.byte	10
	.word	.L302,.L76,.L413
	.byte	7
	.word	.L303,.L415,.L78
	.byte	8
	.word	.L305,.L416
	.byte	8
	.word	.L307,.L417
	.byte	10
	.word	.L309,.L415,.L78
	.byte	7
	.word	.L310,.L415,.L77
	.byte	8
	.word	.L311,.L418
	.byte	8
	.word	.L313,.L419
	.byte	9
	.word	.L315,.L415,.L77
	.byte	0,0,0,0,0,7
	.word	.L316,.L92,.L101
	.byte	8
	.word	.L317,.L420
	.byte	8
	.word	.L319,.L421
	.byte	10
	.word	.L321,.L92,.L101
	.byte	6
	.byte	'MemId',0,2,128,2,18
	.word	.L322,.L422
	.byte	7
	.word	.L324,.L92,.L97
	.byte	8
	.word	.L325,.L423
	.byte	10
	.word	.L327,.L92,.L97
	.byte	7
	.word	.L328,.L92,.L424
	.byte	8
	.word	.L330,.L425
	.byte	10
	.word	.L332,.L92,.L424
	.byte	7
	.word	.L333,.L426,.L94
	.byte	8
	.word	.L335,.L427
	.byte	8
	.word	.L337,.L428
	.byte	10
	.word	.L339,.L426,.L94
	.byte	7
	.word	.L340,.L426,.L93
	.byte	8
	.word	.L341,.L429
	.byte	8
	.word	.L343,.L430
	.byte	9
	.word	.L345,.L426,.L93
	.byte	0,0,0,0,0,0,0,7
	.word	.L346,.L97,.L99
	.byte	8
	.word	.L347,.L431
	.byte	9
	.word	.L349,.L97,.L99
	.byte	0,0,0,7
	.word	.L432,.L433,.L104
	.byte	8
	.word	.L434,.L435
	.byte	9
	.word	.L436,.L433,.L104
	.byte	0,7
	.word	.L437,.L438,.L439
	.byte	8
	.word	.L440,.L441
	.byte	8
	.word	.L442,.L443
	.byte	10
	.word	.L444,.L438,.L439
	.byte	7
	.word	.L445,.L446,.L105
	.byte	8
	.word	.L447,.L448
	.byte	9
	.word	.L449,.L446,.L105
	.byte	0,0,0,7
	.word	.L350,.L450,.L109
	.byte	8
	.word	.L352,.L451
	.byte	9
	.word	.L354,.L450,.L109
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventExtendedDataRecord')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventExtendedDataRecord')
	.sect	'.debug_line'
.L243:
	.word	.L744-.L743
.L743:
	.half	3
	.word	.L746-.L745
.L745:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0,0
.L746:
	.byte	5,16,7,0,5,2
	.word	.L198
	.byte	3,218,0,1,5,29,9
	.half	.L576-.L198
	.byte	3,8,1,5,2,9
	.half	.L64-.L576
	.byte	3,6,1,4,3,5,26,9
	.half	.L69-.L64
	.byte	3,173,127,1,5,12,9
	.half	.L580-.L69
	.byte	1,5,38,7,9
	.half	.L747-.L580
	.byte	1,5,26,9
	.half	.L581-.L747
	.byte	1,5,4,9
	.half	.L70-.L581
	.byte	1,4,1,5,2,9
	.half	.L72-.L70
	.byte	3,211,0,1,7,9
	.half	.L411-.L72
	.byte	1,4,4,5,33,9
	.half	.L76-.L411
	.byte	3,141,4,1,5,51,9
	.half	.L585-.L76
	.byte	1,5,60,9
	.half	.L586-.L585
	.byte	1,5,68,9
	.half	.L748-.L586
	.byte	1,4,5,5,28,9
	.half	.L415-.L748
	.byte	3,200,123,1,5,47,9
	.half	.L749-.L415
	.byte	1,5,5,9
	.half	.L750-.L749
	.byte	1,5,73,9
	.half	.L77-.L750
	.byte	3,4,1,5,5,9
	.half	.L751-.L77
	.byte	1,4,4,5,3,9
	.half	.L78-.L751
	.byte	3,180,4,1,4,1,5,2,9
	.half	.L79-.L78
	.byte	3,243,123,1,7,9
	.half	.L413-.L79
	.byte	1,9
	.half	.L83-.L413
	.byte	3,1,1,7,9
	.half	.L752-.L83
	.byte	1,9
	.half	.L87-.L752
	.byte	3,1,1,7,9
	.half	.L753-.L87
	.byte	1,5,56,9
	.half	.L88-.L753
	.byte	3,2,1,5,7,9
	.half	.L590-.L88
	.byte	1,5,10,7,9
	.half	.L754-.L590
	.byte	3,2,1,5,3,9
	.half	.L755-.L754
	.byte	1,5,55,9
	.half	.L90-.L755
	.byte	3,3,1,4,6,5,32,9
	.half	.L92-.L90
	.byte	3,92,1,5,47,9
	.half	.L593-.L92
	.byte	1,5,53,9
	.half	.L594-.L593
	.byte	1,5,75,9
	.half	.L756-.L594
	.byte	1,4,7,5,29,9
	.half	.L426-.L756
	.byte	3,112,1,5,46,9
	.half	.L757-.L426
	.byte	1,5,5,9
	.half	.L758-.L757
	.byte	1,5,74,9
	.half	.L93-.L758
	.byte	3,5,1,5,5,9
	.half	.L759-.L93
	.byte	1,4,6,5,2,9
	.half	.L94-.L759
	.byte	3,11,1,4,2,5,5,9
	.half	.L95-.L94
	.byte	3,146,1,1,5,9,7,9
	.half	.L424-.L95
	.byte	3,2,1,5,5,9
	.half	.L96-.L424
	.byte	3,10,1,4,8,5,38,9
	.half	.L97-.L96
	.byte	3,253,126,1,5,5,9
	.half	.L760-.L97
	.byte	1,4,2,5,10,9
	.half	.L99-.L760
	.byte	3,152,1,1,5,9,7,9
	.half	.L761-.L99
	.byte	3,2,1,5,63,9
	.half	.L100-.L761
	.byte	3,3,1,5,5,9
	.half	.L597-.L100
	.byte	1,4,1,9
	.half	.L101-.L597
	.byte	3,236,126,1,4,8,5,22,7,9
	.half	.L433-.L101
	.byte	3,160,3,1,5,4,9
	.half	.L762-.L433
	.byte	1,4,1,5,81,9
	.half	.L104-.L762
	.byte	3,227,124,1,4,9,5,40,9
	.half	.L438-.L104
	.byte	3,168,127,1,5,42,9
	.half	.L446-.L438
	.byte	3,123,1,5,2,9
	.half	.L763-.L446
	.byte	1,9
	.half	.L105-.L763
	.byte	3,5,1,4,1,5,14,9
	.half	.L106-.L105
	.byte	3,216,0,1,5,11,7,9
	.half	.L439-.L106
	.byte	3,2,1,5,4,9
	.half	.L764-.L439
	.byte	1,5,110,9
	.half	.L107-.L764
	.byte	3,4,1,4,8,5,22,9
	.half	.L450-.L107
	.byte	3,177,3,1,5,4,9
	.half	.L765-.L450
	.byte	1,4,1,5,124,9
	.half	.L109-.L765
	.byte	3,207,124,1,5,9,9
	.half	.L602-.L109
	.byte	1,5,26,9
	.half	.L766-.L602
	.byte	3,2,1,5,19,9
	.half	.L110-.L766
	.byte	3,4,1,5,3,9
	.half	.L111-.L110
	.byte	3,126,1,5,2,9
	.half	.L112-.L111
	.byte	3,11,1,5,1,9
	.half	.L66-.L112
	.byte	3,9,1,7,9
	.half	.L245-.L66
	.byte	0,1,1
.L744:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventExtendedDataRecord')
	.sect	'.debug_ranges'
.L244:
	.word	-1,.L198,0,.L245-.L198,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventFreezeFrameData')
	.sect	'.debug_info'
.L246:
	.word	1251
	.half	3
	.word	.L247
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L249,.L248
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventFreezeFrameData',0,1,178,1,16
	.word	.L281
	.byte	1,1,1
	.word	.L208,.L452,.L207
	.byte	4
	.byte	'EventId',0,1,179,1,19
	.word	.L283,.L453
	.byte	4
	.byte	'RecordNumber',0,1,180,1,9
	.word	.L281,.L454
	.byte	4
	.byte	'ReportTotalRecord',0,1,181,1,11
	.word	.L281,.L455
	.byte	4
	.byte	'DataId',0,1,182,1,10
	.word	.L283,.L456
	.byte	4
	.byte	'DestBuffer',0,1,183,1,10
	.word	.L285,.L457
	.byte	4
	.byte	'BufSize',0,1,184,1,11
	.word	.L287,.L458
	.byte	5
	.word	.L208,.L452
	.byte	6
	.byte	'returnValue',0,1,188,1,17
	.word	.L281,.L459
	.byte	6
	.byte	'ffIndex',0,1,189,1,15
	.word	.L322,.L460
	.byte	6
	.byte	'ReaderCopy',0,1,190,1,27
	.word	.L290,.L461
	.byte	7
	.word	.L292,.L125,.L462
	.byte	8
	.word	.L295,.L463
	.byte	9
	.word	.L297,.L125,.L462
	.byte	0,7
	.word	.L298,.L132,.L464
	.byte	8
	.word	.L300,.L465
	.byte	10
	.word	.L302,.L132,.L464
	.byte	7
	.word	.L303,.L466,.L134
	.byte	8
	.word	.L305,.L467
	.byte	8
	.word	.L307,.L468
	.byte	10
	.word	.L309,.L466,.L134
	.byte	7
	.word	.L310,.L466,.L133
	.byte	8
	.word	.L311,.L469
	.byte	8
	.word	.L313,.L470
	.byte	9
	.word	.L315,.L466,.L133
	.byte	0,0,0,0,0,7
	.word	.L471,.L144,.L472
	.byte	8
	.word	.L473,.L474
	.byte	8
	.word	.L475,.L476
	.byte	10
	.word	.L477,.L144,.L472
	.byte	7
	.word	.L478,.L147,.L149
	.byte	8
	.word	.L479,.L480
	.byte	10
	.word	.L481,.L147,.L149
	.byte	7
	.word	.L482,.L483,.L148
	.byte	8
	.word	.L484,.L485
	.byte	8
	.word	.L486,.L487
	.byte	8
	.word	.L488,.L489
	.byte	10
	.word	.L490,.L483,.L148
	.byte	6
	.byte	'bit2shift',0,2,72,12
	.word	.L283,.L491
	.byte	0,0,0,0,0,0,7
	.word	.L316,.L156,.L165
	.byte	8
	.word	.L317,.L492
	.byte	8
	.word	.L319,.L493
	.byte	10
	.word	.L321,.L156,.L165
	.byte	6
	.byte	'MemId',0,3,128,2,18
	.word	.L322,.L494
	.byte	7
	.word	.L324,.L156,.L161
	.byte	8
	.word	.L325,.L495
	.byte	10
	.word	.L327,.L156,.L161
	.byte	7
	.word	.L328,.L156,.L496
	.byte	8
	.word	.L330,.L497
	.byte	10
	.word	.L332,.L156,.L496
	.byte	7
	.word	.L333,.L498,.L158
	.byte	8
	.word	.L335,.L499
	.byte	8
	.word	.L337,.L500
	.byte	10
	.word	.L339,.L498,.L158
	.byte	7
	.word	.L340,.L498,.L157
	.byte	8
	.word	.L341,.L501
	.byte	8
	.word	.L343,.L502
	.byte	9
	.word	.L345,.L498,.L157
	.byte	0,0,0,0,0,0,0,7
	.word	.L346,.L161,.L163
	.byte	8
	.word	.L347,.L503
	.byte	9
	.word	.L349,.L161,.L163
	.byte	0,0,0,7
	.word	.L384,.L504,.L169
	.byte	8
	.word	.L386,.L505
	.byte	9
	.word	.L388,.L504,.L169
	.byte	0,7
	.word	.L506,.L174,.L173
	.byte	8
	.word	.L507,.L508
	.byte	8
	.word	.L509,.L510
	.byte	9
	.word	.L511,.L174,.L173
	.byte	0,7
	.word	.L478,.L179,.L181
	.byte	8
	.word	.L479,.L480
	.byte	10
	.word	.L481,.L179,.L181
	.byte	7
	.word	.L482,.L512,.L180
	.byte	8
	.word	.L484,.L485
	.byte	8
	.word	.L486,.L487
	.byte	8
	.word	.L488,.L489
	.byte	10
	.word	.L490,.L512,.L180
	.byte	6
	.byte	'bit2shift',0,2,72,12
	.word	.L283,.L513
	.byte	0,0,0,0,7
	.word	.L350,.L514,.L183
	.byte	8
	.word	.L352,.L515
	.byte	9
	.word	.L354,.L514,.L183
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventFreezeFrameData')
	.sect	'.debug_abbrev'
.L247:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventFreezeFrameData')
	.sect	'.debug_line'
.L248:
	.word	.L768-.L767
.L767:
	.half	3
	.word	.L770-.L769
.L769:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvFFRecNumeration.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0,0
.L770:
	.byte	5,16,7,0,5,2
	.word	.L208
	.byte	3,177,1,1,5,29,9
	.half	.L616-.L208
	.byte	3,10,1,5,25,9
	.half	.L617-.L616
	.byte	3,1,1,5,2,9
	.half	.L120-.L617
	.byte	3,3,1,4,4,5,26,9
	.half	.L125-.L120
	.byte	3,214,126,1,5,12,9
	.half	.L622-.L125
	.byte	1,5,38,7,9
	.half	.L771-.L622
	.byte	1,5,26,9
	.half	.L623-.L771
	.byte	1,5,4,9
	.half	.L126-.L623
	.byte	1,4,1,5,2,9
	.half	.L128-.L126
	.byte	3,170,1,1,7,9
	.half	.L462-.L128
	.byte	1,4,5,5,33,9
	.half	.L132-.L462
	.byte	3,182,3,1,5,51,9
	.half	.L628-.L132
	.byte	1,5,60,9
	.half	.L629-.L628
	.byte	1,5,68,9
	.half	.L772-.L629
	.byte	1,4,6,5,28,9
	.half	.L466-.L772
	.byte	3,200,123,1,5,47,9
	.half	.L773-.L466
	.byte	1,5,5,9
	.half	.L774-.L773
	.byte	1,5,73,9
	.half	.L133-.L774
	.byte	3,4,1,5,5,9
	.half	.L775-.L133
	.byte	1,4,5,5,3,9
	.half	.L134-.L775
	.byte	3,180,4,1,4,1,5,2,9
	.half	.L135-.L134
	.byte	3,202,124,1,7,9
	.half	.L464-.L135
	.byte	1,9
	.half	.L139-.L464
	.byte	3,1,1,7,9
	.half	.L776-.L139
	.byte	1,9
	.half	.L143-.L776
	.byte	3,1,1,7,9
	.half	.L777-.L143
	.byte	1,4,7,5,26,9
	.half	.L144-.L777
	.byte	3,208,126,1,5,10,9
	.half	.L635-.L144
	.byte	1,4,8,5,39,7,9
	.half	.L147-.L635
	.byte	3,179,1,1,5,54,9
	.half	.L636-.L147
	.byte	1,5,60,9
	.half	.L637-.L636
	.byte	1,4,2,5,22,9
	.half	.L483-.L637
	.byte	3,131,127,1,5,19,9
	.half	.L638-.L483
	.byte	3,1,1,5,42,9
	.half	.L778-.L638
	.byte	3,1,1,5,19,9
	.half	.L639-.L778
	.byte	1,5,5,9
	.half	.L779-.L639
	.byte	3,1,1,4,8,5,9,9
	.half	.L148-.L779
	.byte	3,250,0,1,5,2,9
	.half	.L780-.L148
	.byte	1,4,7,5,40,9
	.half	.L149-.L780
	.byte	3,205,126,1,5,26,9
	.half	.L640-.L149
	.byte	1,5,2,9
	.half	.L146-.L640
	.byte	1,4,1,5,12,9
	.half	.L151-.L146
	.byte	3,178,1,1,5,78,7,9
	.half	.L472-.L151
	.byte	1,5,75,9
	.half	.L641-.L472
	.byte	1,5,15,7,9
	.half	.L154-.L641
	.byte	3,9,1,5,8,9
	.half	.L781-.L154
	.byte	1,5,54,9
	.half	.L152-.L781
	.byte	3,3,1,4,8,5,32,9
	.half	.L156-.L152
	.byte	3,254,126,1,5,47,9
	.half	.L642-.L156
	.byte	1,5,53,9
	.half	.L643-.L642
	.byte	1,5,75,9
	.half	.L782-.L643
	.byte	1,4,2,5,29,9
	.half	.L498-.L782
	.byte	3,112,1,5,46,9
	.half	.L783-.L498
	.byte	1,5,5,9
	.half	.L784-.L783
	.byte	1,5,74,9
	.half	.L157-.L784
	.byte	3,5,1,5,5,9
	.half	.L785-.L157
	.byte	1,4,8,5,2,9
	.half	.L158-.L785
	.byte	3,11,1,4,3,5,5,9
	.half	.L159-.L158
	.byte	3,146,1,1,5,9,7,9
	.half	.L496-.L159
	.byte	3,2,1,5,5,9
	.half	.L160-.L496
	.byte	3,10,1,4,9,5,38,9
	.half	.L161-.L160
	.byte	3,253,126,1,5,5,9
	.half	.L645-.L161
	.byte	1,4,3,5,10,9
	.half	.L163-.L645
	.byte	3,152,1,1,5,9,7,9
	.half	.L786-.L163
	.byte	3,2,1,5,63,9
	.half	.L164-.L786
	.byte	3,3,1,5,5,9
	.half	.L634-.L164
	.byte	1,4,1,5,4,9
	.half	.L165-.L634
	.byte	3,74,1,5,27,7,9
	.half	.L787-.L165
	.byte	3,2,1,5,8,9
	.half	.L647-.L787
	.byte	1,4,9,5,36,7,9
	.half	.L504-.L647
	.byte	3,161,2,1,5,4,9
	.half	.L788-.L504
	.byte	1,4,1,9
	.half	.L169-.L788
	.byte	3,229,125,1,5,12,7,9
	.half	.L789-.L169
	.byte	3,2,1,5,14,9
	.half	.L648-.L789
	.byte	1,5,12,9
	.half	.L170-.L648
	.byte	3,5,1,5,5,9
	.half	.L790-.L170
	.byte	1,5,4,9
	.half	.L171-.L790
	.byte	3,125,1,5,12,9
	.half	.L168-.L171
	.byte	3,6,1,5,17,7,9
	.half	.L649-.L168
	.byte	3,17,1,5,10,9
	.half	.L791-.L649
	.byte	1,4,7,5,20,9
	.half	.L174-.L791
	.byte	3,165,126,1,5,2,9
	.half	.L650-.L174
	.byte	1,4,1,5,3,9
	.half	.L173-.L650
	.byte	3,229,1,1,5,4,7,9
	.half	.L652-.L173
	.byte	3,2,1,5,11,9
	.half	.L792-.L652
	.byte	3,1,1,5,4,9
	.half	.L793-.L792
	.byte	1,4,8,5,54,9
	.half	.L179-.L793
	.byte	3,69,1,5,60,9
	.half	.L653-.L179
	.byte	1,4,2,5,22,9
	.half	.L512-.L653
	.byte	3,131,127,1,5,19,9
	.half	.L655-.L512
	.byte	3,1,1,5,42,9
	.half	.L794-.L655
	.byte	3,1,1,5,19,9
	.half	.L656-.L794
	.byte	1,5,5,9
	.half	.L795-.L656
	.byte	3,1,1,4,8,5,9,9
	.half	.L180-.L795
	.byte	3,250,0,1,5,2,9
	.half	.L796-.L180
	.byte	1,4,1,5,4,9
	.half	.L181-.L796
	.byte	3,192,0,1,5,121,7,9
	.half	.L797-.L181
	.byte	3,5,1,4,9,5,22,9
	.half	.L514-.L797
	.byte	3,162,2,1,5,4,9
	.half	.L798-.L514
	.byte	1,4,1,5,135,1,9
	.half	.L183-.L798
	.byte	3,222,125,1,5,8,9
	.half	.L654-.L183
	.byte	1,5,28,9
	.half	.L799-.L654
	.byte	3,2,1,5,18,9
	.half	.L184-.L799
	.byte	3,4,1,5,5,9
	.half	.L185-.L184
	.byte	3,126,1,5,4,9
	.half	.L186-.L185
	.byte	3,5,1,5,2,9
	.half	.L187-.L186
	.byte	3,11,1,5,1,9
	.half	.L122-.L187
	.byte	3,11,1,7,9
	.half	.L250-.L122
	.byte	0,1,1
.L768:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventFreezeFrameData')
	.sect	'.debug_ranges'
.L249:
	.word	-1,.L208,0,.L250-.L208,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo')
	.sect	'.debug_info'
.L251:
	.word	329
	.half	3
	.word	.L252
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L254,.L253
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo',0,1,173,1,16
	.word	.L281
	.byte	1,1,1
	.word	.L206,.L516,.L205
	.byte	4
	.byte	'EventId',0,1,173,1,80
	.word	.L283,.L517
	.byte	4
	.byte	'RecordNumber',0,1,173,1,95
	.word	.L281,.L518
	.byte	4
	.byte	'DestBuffer',0,1,173,1,116
	.word	.L285,.L519
	.byte	4
	.byte	'BufSize',0,1,173,1,136,1
	.word	.L287,.L520
	.byte	5
	.word	.L206,.L516
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo')
	.sect	'.debug_abbrev'
.L252:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo')
	.sect	'.debug_line'
.L253:
	.word	.L801-.L800
.L800:
	.half	3
	.word	.L803-.L802
.L802:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0,0
.L803:
	.byte	5,78,7,0,5,2
	.word	.L206
	.byte	3,174,1,1,5,5,9
	.half	.L609-.L206
	.byte	1,5,1,9
	.half	.L117-.L609
	.byte	3,1,1,7,9
	.half	.L255-.L117
	.byte	0,1,1
.L801:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo')
	.sect	'.debug_ranges'
.L254:
	.word	-1,.L206,0,.L255-.L206,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventExtendedDataRecordForRTE')
	.sect	'.debug_info'
.L256:
	.word	318
	.half	3
	.word	.L257
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L259,.L258
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventExtendedDataRecordForRTE',0,1,149,1,16
	.word	.L281
	.byte	1,1,1
	.word	.L200,.L521,.L199
	.byte	4
	.byte	'EventId',0,1,150,1,25
	.word	.L283,.L522
	.byte	4
	.byte	'RecordNumber',0,1,151,1,15
	.word	.L281,.L523
	.byte	4
	.byte	'DestBuffer',0,1,152,1,16
	.word	.L285,.L524
	.byte	5
	.word	.L200,.L521
	.byte	6
	.byte	'bufSize',0,1,155,1,12
	.word	.L283,.L525
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventExtendedDataRecordForRTE')
	.sect	'.debug_abbrev'
.L257:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventExtendedDataRecordForRTE')
	.sect	'.debug_line'
.L258:
	.word	.L805-.L804
.L804:
	.half	3
	.word	.L807-.L806
.L806:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0,0
.L807:
	.byte	5,16,7,0,5,2
	.word	.L200
	.byte	3,148,1,1,5,22,9
	.half	.L605-.L200
	.byte	3,6,1,5,20,9
	.half	.L808-.L605
	.byte	1,5,79,9
	.half	.L809-.L808
	.byte	3,1,1,5,5,9
	.half	.L606-.L809
	.byte	1,5,1,9
	.half	.L114-.L606
	.byte	3,1,1,7,9
	.half	.L260-.L114
	.byte	0,1,1
.L805:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventExtendedDataRecordForRTE')
	.sect	'.debug_ranges'
.L259:
	.word	-1,.L200,0,.L260-.L200,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventExtendedDataRecord_GeneralEvtInfo')
	.sect	'.debug_info'
.L261:
	.word	305
	.half	3
	.word	.L262
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L264,.L263
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventExtendedDataRecord_GeneralEvtInfo',0,1,159,1,16
	.word	.L281
	.byte	1,1,1
	.word	.L202,.L526,.L201
	.byte	4
	.byte	'EventId',0,1,160,1,25
	.word	.L283,.L527
	.byte	4
	.byte	'RecordNumber',0,1,161,1,15
	.word	.L281,.L528
	.byte	4
	.byte	'DestBuffer',0,1,162,1,16
	.word	.L285,.L529
	.byte	5
	.word	.L202,.L526
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventExtendedDataRecord_GeneralEvtInfo')
	.sect	'.debug_abbrev'
.L262:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventExtendedDataRecord_GeneralEvtInfo')
	.sect	'.debug_line'
.L263:
	.word	.L811-.L810
.L810:
	.half	3
	.word	.L813-.L812
.L812:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0,0
.L813:
	.byte	5,72,7,0,5,2
	.word	.L202
	.byte	3,164,1,1,5,5,9
	.half	.L607-.L202
	.byte	1,5,1,9
	.half	.L115-.L607
	.byte	3,1,1,7,9
	.half	.L265-.L115
	.byte	0,1,1
.L811:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventExtendedDataRecord_GeneralEvtInfo')
	.sect	'.debug_ranges'
.L264:
	.word	-1,.L202,0,.L265-.L202,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo')
	.sect	'.debug_info'
.L266:
	.word	379
	.half	3
	.word	.L267
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L269,.L268
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo',0,1,189,2,16
	.word	.L281
	.byte	1,1,1
	.word	.L214,.L530,.L213
	.byte	4
	.byte	'EventId',0,1,189,2,77
	.word	.L283,.L531
	.byte	4
	.byte	'RecordNumber',0,1,189,2,92
	.word	.L281,.L532
	.byte	4
	.byte	'DataId',0,1,189,2,113
	.word	.L283,.L533
	.byte	4
	.byte	'DestBuffer',0,1,189,2,128,1
	.word	.L285,.L534
	.byte	4
	.byte	'BufSize',0,1,189,2,148,1
	.word	.L287,.L535
	.byte	5
	.word	.L214,.L530
	.byte	6
	.byte	'ReportTotalRecord',0,1,191,2,13
	.word	.L281,.L536
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo')
	.sect	'.debug_abbrev'
.L267:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo')
	.sect	'.debug_line'
.L268:
	.word	.L815-.L814
.L814:
	.half	3
	.word	.L817-.L816
.L816:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0,0
.L817:
	.byte	5,16,7,0,5,2
	.word	.L214
	.byte	3,188,2,1,5,31,9
	.half	.L670-.L214
	.byte	3,2,1,5,102,9
	.half	.L669-.L670
	.byte	3,1,1,5,5,9
	.half	.L668-.L669
	.byte	1,5,1,9
	.half	.L191-.L668
	.byte	3,1,1,7,9
	.half	.L270-.L191
	.byte	0,1,1
.L815:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo')
	.sect	'.debug_ranges'
.L269:
	.word	-1,.L214,0,.L270-.L214,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventFreezeFrameDataForRTE')
	.sect	'.debug_info'
.L271:
	.word	366
	.half	3
	.word	.L272
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L274,.L273
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventFreezeFrameDataForRTE',0,1,171,2,16
	.word	.L281
	.byte	1,1,1
	.word	.L210,.L537,.L209
	.byte	4
	.byte	'EventId',0,1,172,2,25
	.word	.L283,.L538
	.byte	4
	.byte	'RecordNumber',0,1,173,2,15
	.word	.L281,.L539
	.byte	4
	.byte	'ReportTotalRecord',0,1,174,2,17
	.word	.L281,.L540
	.byte	4
	.byte	'DataId',0,1,175,2,16
	.word	.L283,.L541
	.byte	4
	.byte	'DestBuffer',0,1,176,2,30
	.word	.L542,.L543
	.byte	5
	.word	.L210,.L537
	.byte	6
	.byte	'bufSize',0,1,179,2,12
	.word	.L283,.L544
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventFreezeFrameDataForRTE')
	.sect	'.debug_abbrev'
.L272:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventFreezeFrameDataForRTE')
	.sect	'.debug_line'
.L273:
	.word	.L819-.L818
.L818:
	.half	3
	.word	.L821-.L820
.L820:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0,0
.L821:
	.byte	5,16,7,0,5,2
	.word	.L210
	.byte	3,170,2,1,5,22,9
	.half	.L663-.L210
	.byte	3,8,1,5,20,9
	.half	.L822-.L663
	.byte	1,5,103,9
	.half	.L823-.L822
	.byte	3,1,1,5,5,9
	.half	.L664-.L823
	.byte	1,5,1,9
	.half	.L189-.L664
	.byte	3,1,1,7,9
	.half	.L275-.L189
	.byte	0,1,1
.L819:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventFreezeFrameDataForRTE')
	.sect	'.debug_ranges'
.L274:
	.word	-1,.L210,0,.L275-.L210,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventFreezeFrameData_GeneralEvtInfo')
	.sect	'.debug_info'
.L276:
	.word	353
	.half	3
	.word	.L277
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L279,.L278
	.byte	2
	.word	.L217
	.byte	3
	.byte	'Dem_GetEventFreezeFrameData_GeneralEvtInfo',0,1,195,2,16
	.word	.L281
	.byte	1,1,1
	.word	.L216,.L545,.L215
	.byte	4
	.byte	'EventId',0,1,196,2,25
	.word	.L283,.L546
	.byte	4
	.byte	'RecordNumber',0,1,197,2,15
	.word	.L281,.L547
	.byte	4
	.byte	'ReportTotalRecord',0,1,198,2,17
	.word	.L281,.L548
	.byte	4
	.byte	'DataId',0,1,199,2,16
	.word	.L283,.L549
	.byte	4
	.byte	'DestBuffer',0,1,200,2,30
	.word	.L542,.L550
	.byte	5
	.word	.L216,.L545
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventFreezeFrameData_GeneralEvtInfo')
	.sect	'.debug_abbrev'
.L277:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventFreezeFrameData_GeneralEvtInfo')
	.sect	'.debug_line'
.L278:
	.word	.L825-.L824
.L824:
	.half	3
	.word	.L827-.L826
.L826:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EvtRelatedData.c',0,0,0,0,0
.L827:
	.byte	5,96,7,0,5,2
	.word	.L216
	.byte	3,202,2,1,5,5,9
	.half	.L671-.L216
	.byte	1,5,1,9
	.half	.L192-.L671
	.byte	3,1,1,7,9
	.half	.L280-.L192
	.byte	0,1,1
.L825:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventFreezeFrameData_GeneralEvtInfo')
	.sect	'.debug_ranges'
.L279:
	.word	-1,.L216,0,.L280-.L216,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DltGetAllExtendedDataRecords')
	.sect	'.debug_loc'
.L288:
	.word	-1,.L194,0,.L552-.L194
	.half	1
	.byte	101
	.word	.L293-.L194,.L282-.L194
	.half	1
	.byte	109
	.word	.L560-.L194,.L558-.L194
	.half	1
	.byte	101
	.word	0,0
.L193:
	.word	-1,.L194,0,.L551-.L194
	.half	2
	.byte	138,0
	.word	.L551-.L194,.L282-.L194
	.half	2
	.byte	138,24
	.word	.L282-.L194,.L282-.L194
	.half	2
	.byte	138,0
	.word	0,0
.L286:
	.word	-1,.L194,0,.L15-.L194
	.half	1
	.byte	100
	.word	.L554-.L194,.L282-.L194
	.half	1
	.byte	108
	.word	.L559-.L194,.L558-.L194
	.half	1
	.byte	100
	.word	0,0
.L284:
	.word	-1,.L194,0,.L552-.L194
	.half	1
	.byte	84
	.word	.L553-.L194,.L282-.L194
	.half	1
	.byte	88
	.word	.L557-.L194,.L558-.L194
	.half	1
	.byte	84
	.word	0,0
.L326:
	.word	0,0
.L320:
	.word	0,0
.L301:
	.word	0,0
.L353:
	.word	0,0
.L348:
	.word	0,0
.L323:
	.word	-1,.L194,.L555-.L194,.L19-.L194
	.half	1
	.byte	85
	.word	.L556-.L194,.L552-.L194
	.half	1
	.byte	85
	.word	0,0
.L291:
	.word	-1,.L194,0,.L282-.L194
	.half	2
	.byte	145,104
	.word	0,0
.L318:
	.word	0,0
.L314:
	.word	0,0
.L344:
	.word	0,0
.L308:
	.word	0,0
.L338:
	.word	0,0
.L296:
	.word	0,0
.L331:
	.word	0,0
.L289:
	.word	-1,.L194,.L558-.L194,.L26-.L194
	.half	1
	.byte	82
	.word	.L28-.L194,.L6-.L194
	.half	1
	.byte	82
	.word	0,0
.L312:
	.word	0,0
.L342:
	.word	0,0
.L306:
	.word	0,0
.L336:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_DltGetMostRecentFreezeFrameRecordData')
	.sect	'.debug_loc'
.L358:
	.word	-1,.L196,0,.L562-.L196
	.half	1
	.byte	101
	.word	.L362-.L196,.L355-.L196
	.half	1
	.byte	109
	.word	.L570-.L196,.L568-.L196
	.half	1
	.byte	101
	.word	0,0
.L195:
	.word	-1,.L196,0,.L561-.L196
	.half	2
	.byte	138,0
	.word	.L561-.L196,.L355-.L196
	.half	2
	.byte	138,24
	.word	.L355-.L196,.L355-.L196
	.half	2
	.byte	138,0
	.word	0,0
.L357:
	.word	-1,.L196,0,.L44-.L196
	.half	1
	.byte	100
	.word	.L564-.L196,.L355-.L196
	.half	1
	.byte	108
	.word	.L569-.L196,.L568-.L196
	.half	1
	.byte	100
	.word	0,0
.L356:
	.word	-1,.L196,0,.L562-.L196
	.half	1
	.byte	84
	.word	.L563-.L196,.L355-.L196
	.half	1
	.byte	88
	.word	.L567-.L196,.L568-.L196
	.half	1
	.byte	84
	.word	0,0
.L375:
	.word	0,0
.L373:
	.word	0,0
.L366:
	.word	0,0
.L387:
	.word	0,0
.L390:
	.word	0,0
.L383:
	.word	0,0
.L374:
	.word	-1,.L196,.L565-.L196,.L48-.L196
	.half	1
	.byte	85
	.word	.L566-.L196,.L562-.L196
	.half	1
	.byte	85
	.word	0,0
.L361:
	.word	-1,.L196,0,.L355-.L196
	.half	2
	.byte	145,104
	.word	0,0
.L372:
	.word	0,0
.L371:
	.word	0,0
.L382:
	.word	0,0
.L369:
	.word	0,0
.L380:
	.word	0,0
.L364:
	.word	0,0
.L359:
	.word	0,0
.L377:
	.word	0,0
.L360:
	.word	-1,.L196,.L568-.L196,.L55-.L196
	.half	1
	.byte	82
	.word	.L60-.L196,.L35-.L196
	.half	1
	.byte	82
	.word	0,0
.L370:
	.word	0,0
.L381:
	.word	0,0
.L368:
	.word	0,0
.L379:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventExtendedDataRecord')
	.sect	'.debug_loc'
.L407:
	.word	-1,.L198,0,.L572-.L198
	.half	1
	.byte	101
	.word	.L576-.L198,.L110-.L198
	.half	1
	.byte	109
	.word	.L69-.L198,.L577-.L198
	.half	1
	.byte	101
	.word	.L76-.L198,.L582-.L198
	.half	1
	.byte	101
	.word	.L87-.L198,.L587-.L198
	.half	1
	.byte	101
	.word	.L88-.L198,.L590-.L198
	.half	1
	.byte	101
	.word	.L603-.L198,.L602-.L198
	.half	1
	.byte	101
	.word	.L111-.L198,.L403-.L198
	.half	1
	.byte	109
	.word	0,0
.L197:
	.word	-1,.L198,0,.L571-.L198
	.half	2
	.byte	138,0
	.word	.L571-.L198,.L403-.L198
	.half	2
	.byte	138,24
	.word	.L403-.L198,.L403-.L198
	.half	2
	.byte	138,0
	.word	0,0
.L406:
	.word	-1,.L198,0,.L572-.L198
	.half	1
	.byte	100
	.word	.L575-.L198,.L110-.L198
	.half	1
	.byte	108
	.word	.L69-.L198,.L577-.L198
	.half	1
	.byte	100
	.word	.L76-.L198,.L582-.L198
	.half	1
	.byte	100
	.word	.L87-.L198,.L587-.L198
	.half	1
	.byte	100
	.word	.L88-.L198,.L591-.L198
	.half	1
	.byte	100
	.word	.L601-.L198,.L602-.L198
	.half	1
	.byte	100
	.word	.L111-.L198,.L403-.L198
	.half	1
	.byte	108
	.word	0,0
.L404:
	.word	-1,.L198,0,.L573-.L198
	.half	1
	.byte	84
	.word	.L69-.L198,.L578-.L198
	.half	1
	.byte	84
	.word	.L580-.L198,.L581-.L198
	.half	1
	.byte	88
	.word	.L76-.L198,.L583-.L198
	.half	1
	.byte	84
	.word	.L585-.L198,.L586-.L198
	.half	1
	.byte	88
	.word	.L87-.L198,.L588-.L198
	.half	1
	.byte	84
	.word	.L88-.L198,.L592-.L198
	.half	1
	.byte	84
	.word	.L591-.L198,.L592-.L198
	.half	1
	.byte	88
	.word	.L593-.L198,.L594-.L198
	.half	1
	.byte	88
	.word	.L100-.L198,.L598-.L198
	.half	1
	.byte	88
	.word	.L598-.L198,.L597-.L198
	.half	1
	.byte	84
	.word	.L599-.L198,.L600-.L198
	.half	1
	.byte	88
	.word	0,0
.L423:
	.word	0,0
.L421:
	.word	0,0
.L414:
	.word	0,0
.L435:
	.word	0,0
.L451:
	.word	0,0
.L431:
	.word	0,0
.L422:
	.word	-1,.L198,.L595-.L198,.L96-.L198
	.half	1
	.byte	85
	.word	.L596-.L198,.L597-.L198
	.half	1
	.byte	85
	.word	0,0
.L410:
	.word	-1,.L198,0,.L110-.L198
	.half	2
	.byte	145,108
	.word	.L111-.L198,.L403-.L198
	.half	2
	.byte	145,108
	.word	0,0
.L420:
	.word	0,0
.L405:
	.word	-1,.L198,0,.L574-.L198
	.half	1
	.byte	85
	.word	.L69-.L198,.L579-.L198
	.half	1
	.byte	85
	.word	.L76-.L198,.L584-.L198
	.half	1
	.byte	85
	.word	.L87-.L198,.L589-.L198
	.half	1
	.byte	85
	.word	.L88-.L198,.L592-.L198
	.half	1
	.byte	85
	.word	.L591-.L198,.L592-.L198
	.half	1
	.byte	89
	.word	.L599-.L198,.L600-.L198
	.half	1
	.byte	89
	.word	0,0
.L409:
	.word	-1,.L198,0,.L110-.L198
	.half	2
	.byte	145,104
	.word	.L111-.L198,.L403-.L198
	.half	2
	.byte	145,104
	.word	0,0
.L419:
	.word	0,0
.L430:
	.word	0,0
.L417:
	.word	0,0
.L428:
	.word	0,0
.L412:
	.word	0,0
.L425:
	.word	0,0
.L408:
	.word	-1,.L198,.L64-.L198,.L110-.L198
	.half	1
	.byte	90
	.word	.L111-.L198,.L403-.L198
	.half	1
	.byte	90
	.word	.L604-.L198,.L66-.L198
	.half	1
	.byte	82
	.word	0,0
.L441:
	.word	0,0
.L448:
	.word	0,0
.L443:
	.word	0,0
.L418:
	.word	0,0
.L429:
	.word	0,0
.L416:
	.word	0,0
.L427:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventExtendedDataRecordEx')
	.sect	'.debug_loc'
.L395:
	.word	-1,.L204,0,.L608-.L204
	.half	1
	.byte	101
	.word	0,0
.L203:
	.word	-1,.L204,0,.L391-.L204
	.half	2
	.byte	138,0
	.word	0,0
.L394:
	.word	-1,.L204,0,.L608-.L204
	.half	1
	.byte	100
	.word	0,0
.L392:
	.word	-1,.L204,0,.L608-.L204
	.half	1
	.byte	84
	.word	0,0
.L393:
	.word	-1,.L204,0,.L608-.L204
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo')
	.sect	'.debug_loc'
.L520:
	.word	-1,.L206,0,.L609-.L206
	.half	1
	.byte	101
	.word	0,0
.L205:
	.word	-1,.L206,0,.L516-.L206
	.half	2
	.byte	138,0
	.word	0,0
.L519:
	.word	-1,.L206,0,.L609-.L206
	.half	1
	.byte	100
	.word	0,0
.L517:
	.word	-1,.L206,0,.L609-.L206
	.half	1
	.byte	84
	.word	0,0
.L518:
	.word	-1,.L206,0,.L609-.L206
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventExtendedDataRecordForRTE')
	.sect	'.debug_loc'
.L199:
	.word	-1,.L200,0,.L605-.L200
	.half	2
	.byte	138,0
	.word	.L605-.L200,.L521-.L200
	.half	2
	.byte	138,8
	.word	.L521-.L200,.L521-.L200
	.half	2
	.byte	138,0
	.word	0,0
.L524:
	.word	-1,.L200,0,.L606-.L200
	.half	1
	.byte	100
	.word	0,0
.L522:
	.word	-1,.L200,0,.L606-.L200
	.half	1
	.byte	84
	.word	0,0
.L523:
	.word	-1,.L200,0,.L606-.L200
	.half	1
	.byte	85
	.word	0,0
.L525:
	.word	-1,.L200,0,.L521-.L200
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventExtendedDataRecord_GeneralEvtInfo')
	.sect	'.debug_loc'
.L201:
	.word	-1,.L202,0,.L526-.L202
	.half	2
	.byte	138,0
	.word	0,0
.L529:
	.word	-1,.L202,0,.L607-.L202
	.half	1
	.byte	100
	.word	0,0
.L527:
	.word	-1,.L202,0,.L607-.L202
	.half	1
	.byte	84
	.word	0,0
.L528:
	.word	-1,.L202,0,.L607-.L202
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventFreezeFrameData')
	.sect	'.debug_loc'
.L458:
	.word	-1,.L208,0,.L611-.L208
	.half	1
	.byte	101
	.word	.L616-.L208,.L184-.L208
	.half	1
	.byte	109
	.word	.L125-.L208,.L618-.L208
	.half	1
	.byte	101
	.word	.L132-.L208,.L624-.L208
	.half	1
	.byte	101
	.word	.L143-.L208,.L630-.L208
	.half	1
	.byte	101
	.word	.L144-.L208,.L634-.L208
	.half	1
	.byte	101
	.word	.L660-.L208,.L654-.L208
	.half	1
	.byte	101
	.word	.L185-.L208,.L452-.L208
	.half	1
	.byte	109
	.word	0,0
.L456:
	.word	-1,.L208,0,.L612-.L208
	.half	1
	.byte	87
	.word	.L125-.L208,.L619-.L208
	.half	1
	.byte	87
	.word	.L132-.L208,.L625-.L208
	.half	1
	.byte	87
	.word	.L143-.L208,.L631-.L208
	.half	1
	.byte	87
	.word	.L144-.L208,.L634-.L208
	.half	1
	.byte	87
	.word	.L660-.L208,.L661-.L208
	.half	1
	.byte	91
	.word	.L661-.L208,.L654-.L208
	.half	1
	.byte	86
	.word	0,0
.L207:
	.word	-1,.L208,0,.L610-.L208
	.half	2
	.byte	138,0
	.word	.L610-.L208,.L452-.L208
	.half	2
	.byte	138,24
	.word	.L452-.L208,.L452-.L208
	.half	2
	.byte	138,0
	.word	0,0
.L457:
	.word	-1,.L208,0,.L611-.L208
	.half	1
	.byte	100
	.word	.L615-.L208,.L184-.L208
	.half	1
	.byte	108
	.word	.L125-.L208,.L618-.L208
	.half	1
	.byte	100
	.word	.L132-.L208,.L624-.L208
	.half	1
	.byte	100
	.word	.L143-.L208,.L630-.L208
	.half	1
	.byte	100
	.word	.L144-.L208,.L156-.L208
	.half	1
	.byte	100
	.word	.L659-.L208,.L654-.L208
	.half	1
	.byte	100
	.word	.L185-.L208,.L452-.L208
	.half	1
	.byte	108
	.word	0,0
.L474:
	.word	0,0
.L508:
	.word	0,0
.L453:
	.word	-1,.L208,0,.L613-.L208
	.half	1
	.byte	84
	.word	.L125-.L208,.L620-.L208
	.half	1
	.byte	84
	.word	.L622-.L208,.L623-.L208
	.half	1
	.byte	88
	.word	.L132-.L208,.L626-.L208
	.half	1
	.byte	84
	.word	.L628-.L208,.L629-.L208
	.half	1
	.byte	88
	.word	.L143-.L208,.L632-.L208
	.half	1
	.byte	84
	.word	.L144-.L208,.L634-.L208
	.half	1
	.byte	84
	.word	.L636-.L208,.L637-.L208
	.half	1
	.byte	88
	.word	.L642-.L208,.L643-.L208
	.half	1
	.byte	88
	.word	.L164-.L208,.L646-.L208
	.half	1
	.byte	88
	.word	.L179-.L208,.L653-.L208
	.half	1
	.byte	88
	.word	.L657-.L208,.L658-.L208
	.half	1
	.byte	88
	.word	.L658-.L208,.L654-.L208
	.half	1
	.byte	84
	.word	0,0
.L495:
	.word	0,0
.L493:
	.word	0,0
.L465:
	.word	0,0
.L505:
	.word	0,0
.L515:
	.word	0,0
.L503:
	.word	0,0
.L494:
	.word	-1,.L208,.L644-.L208,.L160-.L208
	.half	1
	.byte	85
	.word	.L161-.L208,.L645-.L208
	.half	1
	.byte	85
	.word	.L646-.L208,.L634-.L208
	.half	1
	.byte	85
	.word	0,0
.L461:
	.word	-1,.L208,0,.L184-.L208
	.half	2
	.byte	145,104
	.word	.L185-.L208,.L452-.L208
	.half	2
	.byte	145,104
	.word	0,0
.L492:
	.word	0,0
.L476:
	.word	0,0
.L510:
	.word	0,0
.L454:
	.word	-1,.L208,0,.L120-.L208
	.half	1
	.byte	85
	.word	.L635-.L208,.L147-.L208
	.half	1
	.byte	89
	.word	.L149-.L208,.L640-.L208
	.half	1
	.byte	89
	.word	.L641-.L208,.L154-.L208
	.half	1
	.byte	89
	.word	.L647-.L208,.L504-.L208
	.half	1
	.byte	89
	.word	.L168-.L208,.L649-.L208
	.half	1
	.byte	89
	.word	.L174-.L208,.L650-.L208
	.half	1
	.byte	89
	.word	0,0
.L455:
	.word	-1,.L208,0,.L614-.L208
	.half	1
	.byte	86
	.word	.L125-.L208,.L621-.L208
	.half	1
	.byte	86
	.word	.L132-.L208,.L627-.L208
	.half	1
	.byte	86
	.word	.L143-.L208,.L633-.L208
	.half	1
	.byte	86
	.word	.L144-.L208,.L634-.L208
	.half	1
	.byte	86
	.word	.L173-.L208,.L652-.L208
	.half	1
	.byte	90
	.word	0,0
.L513:
	.word	-1,.L208,.L655-.L208,.L656-.L208
	.half	1
	.byte	95
	.word	0,0
.L491:
	.word	-1,.L208,.L638-.L208,.L639-.L208
	.half	1
	.byte	95
	.word	0,0
.L470:
	.word	0,0
.L502:
	.word	0,0
.L468:
	.word	0,0
.L500:
	.word	0,0
.L487:
	.word	0,0
.L463:
	.word	0,0
.L460:
	.word	-1,.L208,.L648-.L208,.L170-.L208
	.half	1
	.byte	85
	.word	.L171-.L208,.L168-.L208
	.half	1
	.byte	85
	.word	.L650-.L208,.L651-.L208
	.half	1
	.byte	85
	.word	.L179-.L208,.L654-.L208
	.half	1
	.byte	85
	.word	0,0
.L497:
	.word	0,0
.L480:
	.word	0,0
.L489:
	.word	0,0
.L459:
	.word	-1,.L208,.L617-.L208,.L184-.L208
	.half	1
	.byte	92
	.word	.L185-.L208,.L452-.L208
	.half	1
	.byte	92
	.word	.L662-.L208,.L122-.L208
	.half	1
	.byte	82
	.word	0,0
.L469:
	.word	0,0
.L501:
	.word	0,0
.L467:
	.word	0,0
.L499:
	.word	0,0
.L485:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventFreezeFrameDataEx')
	.sect	'.debug_loc'
.L401:
	.word	-1,.L212,0,.L665-.L212
	.half	1
	.byte	101
	.word	0,0
.L399:
	.word	-1,.L212,0,.L666-.L212
	.half	1
	.byte	86
	.word	.L667-.L212,.L665-.L212
	.half	1
	.byte	87
	.word	0,0
.L211:
	.word	-1,.L212,0,.L396-.L212
	.half	2
	.byte	138,0
	.word	0,0
.L400:
	.word	-1,.L212,0,.L665-.L212
	.half	1
	.byte	100
	.word	0,0
.L397:
	.word	-1,.L212,0,.L665-.L212
	.half	1
	.byte	84
	.word	0,0
.L398:
	.word	-1,.L212,0,.L665-.L212
	.half	1
	.byte	85
	.word	0,0
.L402:
	.word	-1,.L212,.L666-.L212,.L665-.L212
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo')
	.sect	'.debug_loc'
.L535:
	.word	-1,.L214,0,.L668-.L214
	.half	1
	.byte	101
	.word	0,0
.L533:
	.word	-1,.L214,0,.L669-.L214
	.half	1
	.byte	86
	.word	.L670-.L214,.L668-.L214
	.half	1
	.byte	87
	.word	0,0
.L213:
	.word	-1,.L214,0,.L530-.L214
	.half	2
	.byte	138,0
	.word	0,0
.L534:
	.word	-1,.L214,0,.L668-.L214
	.half	1
	.byte	100
	.word	0,0
.L531:
	.word	-1,.L214,0,.L668-.L214
	.half	1
	.byte	84
	.word	0,0
.L532:
	.word	-1,.L214,0,.L668-.L214
	.half	1
	.byte	85
	.word	0,0
.L536:
	.word	-1,.L214,.L669-.L214,.L668-.L214
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventFreezeFrameDataForRTE')
	.sect	'.debug_loc'
.L541:
	.word	-1,.L210,0,.L664-.L210
	.half	1
	.byte	87
	.word	0,0
.L209:
	.word	-1,.L210,0,.L663-.L210
	.half	2
	.byte	138,0
	.word	.L663-.L210,.L537-.L210
	.half	2
	.byte	138,8
	.word	.L537-.L210,.L537-.L210
	.half	2
	.byte	138,0
	.word	0,0
.L543:
	.word	-1,.L210,0,.L664-.L210
	.half	1
	.byte	100
	.word	0,0
.L538:
	.word	-1,.L210,0,.L664-.L210
	.half	1
	.byte	84
	.word	0,0
.L539:
	.word	-1,.L210,0,.L664-.L210
	.half	1
	.byte	85
	.word	0,0
.L540:
	.word	-1,.L210,0,.L664-.L210
	.half	1
	.byte	86
	.word	0,0
.L544:
	.word	-1,.L210,0,.L537-.L210
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventFreezeFrameData_GeneralEvtInfo')
	.sect	'.debug_loc'
.L549:
	.word	-1,.L216,0,.L671-.L216
	.half	1
	.byte	87
	.word	0,0
.L215:
	.word	-1,.L216,0,.L545-.L216
	.half	2
	.byte	138,0
	.word	0,0
.L550:
	.word	-1,.L216,0,.L671-.L216
	.half	1
	.byte	100
	.word	0,0
.L546:
	.word	-1,.L216,0,.L671-.L216
	.half	1
	.byte	84
	.word	0,0
.L547:
	.word	-1,.L216,0,.L671-.L216
	.half	1
	.byte	85
	.word	0,0
.L548:
	.word	-1,.L216,0,.L671-.L216
	.half	1
	.byte	86
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L828:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_DltGetAllExtendedDataRecords')
	.sect	'.debug_frame'
	.word	36
	.word	.L828,.L194,.L282-.L194
	.byte	4
	.word	(.L551-.L194)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L282-.L551)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_DltGetMostRecentFreezeFrameRecordData')
	.sect	'.debug_frame'
	.word	36
	.word	.L828,.L196,.L355-.L196
	.byte	4
	.word	(.L561-.L196)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L355-.L561)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventExtendedDataRecord')
	.sect	'.debug_frame'
	.word	36
	.word	.L828,.L198,.L403-.L198
	.byte	4
	.word	(.L571-.L198)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L403-.L571)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventExtendedDataRecordForRTE')
	.sect	'.debug_frame'
	.word	36
	.word	.L828,.L200,.L521-.L200
	.byte	4
	.word	(.L605-.L200)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L521-.L605)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventExtendedDataRecord_GeneralEvtInfo')
	.sect	'.debug_frame'
	.word	12
	.word	.L828,.L202,.L526-.L202
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventExtendedDataRecordEx')
	.sect	'.debug_frame'
	.word	12
	.word	.L828,.L204,.L391-.L204
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventExtendedDataRecordEx_GeneralEvtInfo')
	.sect	'.debug_frame'
	.word	12
	.word	.L828,.L206,.L516-.L206
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventFreezeFrameData')
	.sect	'.debug_frame'
	.word	36
	.word	.L828,.L208,.L452-.L208
	.byte	4
	.word	(.L610-.L208)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L452-.L610)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventFreezeFrameDataForRTE')
	.sect	'.debug_frame'
	.word	36
	.word	.L828,.L210,.L537-.L210
	.byte	4
	.word	(.L663-.L210)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L537-.L663)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventFreezeFrameDataEx')
	.sect	'.debug_frame'
	.word	12
	.word	.L828,.L212,.L396-.L212
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventFreezeFrameDataEx_GeneralEvtInfo')
	.sect	'.debug_frame'
	.word	12
	.word	.L828,.L214,.L530-.L214
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventFreezeFrameData_GeneralEvtInfo')
	.sect	'.debug_frame'
	.word	12
	.word	.L828,.L216,.L545-.L216

; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   333  
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   334  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\env\Dem_EvtRelatedData.c	   335  #include "Dem_Cfg_MemMap.h"

	; Module end
