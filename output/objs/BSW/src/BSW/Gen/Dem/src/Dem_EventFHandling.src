	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc15576a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Dem\\src\\Dem_EventFHandling.src BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c'

	
$TC16X
	
	.sdecl	'.text.Dem_EventFHandling.Dem_SetEventStatus',code,cluster('Dem_SetEventStatus')
	.sect	'.text.Dem_EventFHandling.Dem_SetEventStatus'
	.align	2
	
	.global	Dem_SetEventStatus

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     3  #include "Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     4  #include "Rte_Dem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     6  #include "Dem_EventFHandling.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     7  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     8  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	     9  #include "Dem_Cfg_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    10  #include "Dem_Cfg_Nodes.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    11  #include "Dem_Dependencies.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    12  #include "Dem_EventRecheck.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    13  #include "Dem_EvBuff.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    14  #include "Dem_Deb.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    15  #include "Dem_Main.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    16  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    17  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    18  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    19  #include "Dem_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    20  #if (DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    21  #include "FiM.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    22  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    23  #include "Dem_EvMemGen.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    24  #include "Dem_DTCGroup.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    25  #include "Dem_Prv_CallEvtStChngdCbk.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    26  #include "Dem_Obd.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    27  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    28  #include "Dem_RingBuffer.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    29  #if (DEM_CFG_EVT_PROJECT_EXTENSION)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    30  #include "Dem_PrjEvtProjectExtension.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    31  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    32  #include "Dem_Lib.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    33  #include "Dem_Cfg_Events_DataStructures.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    34  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    35  /***** REPORT ERRORSTATUS *****************************************************/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    37  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    38  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    39     Dem_EventStatusType EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    40     Dem_EventIdType EventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    41  #if(DEM_CFG_DEBUGDATA_BEFOREINIT == DEM_CFG_DEBUGDATA_BEFOREINIT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    42     Dem_DebugDataType debug0;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    43     Dem_DebugDataType debug1;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    44  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    45  } Dem_ErrorQueueType;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    46  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    47  #if(DEM_CFG_DEBUGDATA_BEFOREINIT == DEM_CFG_DEBUGDATA_BEFOREINIT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    48  #define DEM_ERRORQUEUETYPE_INIT {0,DEM_EVENTID_INVALID,0,0}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    49  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    50  #define DEM_ERRORQUEUETYPE_INIT {0,DEM_EVENTID_INVALID}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    53  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    54  typedef struct
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    55  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    56     uint8 overflowcounter;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    57     boolean isQueueEnabled;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    58  } Dem_ErrorQueueControlType;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    59  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    60  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    61  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    62  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    63  /* Variable which holds the indexing information of the ring buffer */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    64  DEM_DEFINE_RINGBUFFER(Dem_ErrorQueueType, Dem_ErrorQueue, DEM_CFG_BSWERRORBUFFERSIZE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    66  static Dem_ErrorQueueControlType Dem_ErrorQueueControl;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    67  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    68  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    69  static boolean Dem_HistoryStatusAllowed;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    70  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    71  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    72  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    73  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    75  #if (DEM_CFG_TESTMODE_SUPPORT == DEM_CFG_TESTMODE_SUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    76  /* Offset to increment EventId in case Test Mode is active */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    77  #define DEM_TESTMODE_EVENTID_OFFSET     10000
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    78  #define DEM_DECODE_SUCCESSFULL         TRUE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    79  #define DEM_DECODE_NOT_SUCCESSFULL     FALSE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    80  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    81  #define DEM_START_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    82  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    83  /* Variable which provides information on the reporting - Normal reporting (FALSE)/ Test Mode reporting (TRUE)*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    84  static boolean Dem_TestModeActive=FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    85  #define DEM_STOP_SEC_RAM_INIT
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    86  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    87  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    88  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    89  #if (DEM_CFG_TESTMODE_SUPPORT == DEM_CFG_TESTMODE_SUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    90  DEM_INLINE boolean Dem_DecodeTestModeEventId (Dem_EventIdType *EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    91  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    92      if(Dem_TestModeActive)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    93      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    94          /* Check if event ID is valid for Test Mode */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    95          if(*EventId >= DEM_TESTMODE_EVENTID_OFFSET)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    96          {   /* Remove Offset from EventId in Test Mode*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    97              *EventId = *EventId-DEM_TESTMODE_EVENTID_OFFSET;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    98              return DEM_DECODE_SUCCESSFULL;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	    99          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   100          else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   101          {   /* Event ID sent is invalid */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   102              return DEM_DECODE_NOT_SUCCESSFULL;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   103          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   104      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   105      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   106      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   107          /* Check if event ID is valid for Test Mode */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   108          if(*EventId >= DEM_TESTMODE_EVENTID_OFFSET)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   109          {   /* Event ID sent is invalid in Normal mode */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   110              return DEM_DECODE_NOT_SUCCESSFULL;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   111          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   112          else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   113          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   114              return DEM_DECODE_SUCCESSFULL;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   115          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   116      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   117  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   119  /* This API needs to be called only for Test Mode */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   120  DEM_INLINE void Dem_EncodeTestModeEventId (Dem_EventIdType *EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   121  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   122      *EventId = (*EventId + DEM_TESTMODE_EVENTID_OFFSET);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   123  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   124  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   125  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   126  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   127  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   128  Std_ReturnType  Dem_SetEventStatus(Dem_EventIdType     EventId,
; Function Dem_SetEventStatus
.L468:
Dem_SetEventStatus:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   129                                                Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   130  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   131     return Dem_SetEventStatusWithEnvData (EventId, EventStatus, 0, 0);
	mov	d6,#0
.L1748:
	mov	d7,#0
	call	Dem_SetEventStatusWithEnvData
.L1502:
	j	.L2

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   132  }
.L2:
	ret
.L788:
	
__Dem_SetEventStatus_function_end:
	.size	Dem_SetEventStatus,__Dem_SetEventStatus_function_end-Dem_SetEventStatus
.L521:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_ReportErrorStatus',code,cluster('Dem_ReportErrorStatus')
	.sect	'.text.Dem_EventFHandling.Dem_ReportErrorStatus'
	.align	2
	
	.global	Dem_ReportErrorStatus

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   133  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   134  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   135  void Dem_ReportErrorStatus( Dem_EventIdType EventId, Dem_EventStatusType EventStatus )
; Function Dem_ReportErrorStatus
.L470:
Dem_ReportErrorStatus:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   136  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   137  	Dem_ReportErrorStatusWithEnvData (EventId, EventStatus, 0, 0);
	mov	d6,#0
.L1793:
	mov	d7,#0
	call	Dem_ReportErrorStatusWithEnvData
.L1503:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   138  }
	ret
.L817:
	
__Dem_ReportErrorStatus_function_end:
	.size	Dem_ReportErrorStatus,__Dem_ReportErrorStatus_function_end-Dem_ReportErrorStatus
.L556:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_SetEventStatusWithEnvData',code,cluster('Dem_SetEventStatusWithEnvData')
	.sect	'.text.Dem_EventFHandling.Dem_SetEventStatusWithEnvData'
	.align	2
	
	.global	Dem_SetEventStatusWithEnvData

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   141  /*-- FAILURE HANDLING --------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   142  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   143  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   144  Std_ReturnType Dem_SetEventStatusWithEnvData (Dem_EventIdType EventId,
; Function Dem_SetEventStatusWithEnvData
.L472:
Dem_SetEventStatusWithEnvData:	.type	func
	sub.a	a10,#8
.L1504:
	mov	d8,d4
.L1509:
	st.b	[a10],d5
	mov	d9,d6
.L1510:
	mov	d10,d7

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   145                                                Dem_EventStatusType EventStatus,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   146                                                Dem_DebugDataType debug0,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   147                                                Dem_DebugDataType debug1)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   148  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   149  	uint8_least debAction;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   150  	Dem_boolean_least continueProcessing = TRUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   151  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   152  #if (DEM_CFG_DEBUGDATA == DEM_CFG_DEBUGDATA_OFF)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   153  		DEM_UNUSED_PARAM(debug0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   154  		DEM_UNUSED_PARAM(debug1);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   155  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   156  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   157      #if (DEM_CFG_TESTMODE_SUPPORT == DEM_CFG_TESTMODE_SUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   158      /* Decode the Event ID depending on whether Test mode is active/inactive */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   159      if(Dem_DecodeTestModeEventId(&EventId) == DEM_DECODE_NOT_SUCCESSFULL)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   160      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   161          return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   162      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   163  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   164  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   165  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   166  #if(DEM_CFG_LOCK_ALLFAILUREINFO == DEM_CFG_LOCK_ALLFAILUREINFO_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   167  	if (Dem_OpMoIsAllFailureInfoLocked())
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   168  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   169  		return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   170  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   171  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   172  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   173      DEM_ENTRY_CONDITION_CHECK_INIT_EVTIDVALID_EVTAVAILABLE(EventId, DEM_DET_APIID_SETEVENTSTATUS,E_NOT_OK);
.L3:
.L4:
.L5:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L6
	mov	d4,#54
.L1505:
	mov	d5,#0
.L1506:
	mov	d6,#4
.L1507:
	mov	d7,#32
.L1508:
	call	Det_ReportError
	mov	d2,#1
	j	.L7
.L6:
.L8:
.L9:
.L10:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d0,#0
.L1872:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d8,#0,.L11
.L1873:
	ge.u	d15,d8,#6
.L1874:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L12:
.L11:
	j	.L13

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L13:
	jne	d0,#0,.L14
.L989:
	mov	d4,#54
.L1511:
	mov	d5,#0
.L1512:
	mov	d6,#4
.L1513:
	mov	d7,#16
.L1514:
	call	Det_ReportError
	mov	d2,#1
	j	.L15
.L14:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a12,#@his(Dem_AllEventsState)
	lea	a12,[a12]@los(Dem_AllEventsState)
.L16:
.L17:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	addsc.a	a15,a12,d8,#2
.L1875:
	ld.bu	d0,[a15]
.L1876:
	mov	d1,#2
.L993:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L1877:
	and	d15,d0,#1
.L1878:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L18

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L18:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1879:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L19

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L19:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L20

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L20:
	jeq	d15,#0,.L21
.L991:
	mov	d2,#1
	j	.L22
.L21:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   175  	if (Dem_IsPendingClearEvent(EventId))
	mov	d4,d8
	call	Dem_IsPendingClearEvent
.L1515:
	jeq	d2,#0,.L23
.L1880:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   176      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   177          return E_NOT_OK;
	mov	d2,#1
.L1881:
	j	.L24
.L23:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   178      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   179  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   180  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   181  	continueProcessing = Dem_DebHandleResetConditions(EventId);
	mov	d4,d8
.L1516:
	call	Dem_DebHandleResetConditions
.L1517:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   182  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   183      if(!continueProcessing)
	jne	d2,#0,.L25
.L1882:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   184      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   185          return E_NOT_OK;
	mov	d2,#1
.L1518:
	j	.L26
.L25:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L27:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;      (inlined)
	j	.L28

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }      (inlined)
.L28:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   186      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   187  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   188  	if (!Dem_IsOperationCycleStarted(Dem_EvtParam_GetOperationCycleID(EventId)))
	mov	d0,#0
.L1003:

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     3  #ifndef DEM_OPERATIONCYCLE_H
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     4  #define DEM_OPERATIONCYCLE_H
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     6  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     7  #include "Dem_Cfg_OperationCycle_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    10  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    11  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    13  extern Dem_OperationCycleList Dem_OperationCycleStates;
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    15  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    16  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    18  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    19  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    21  DEM_INLINE boolean Dem_IsOperationCycleStarted(Dem_OperationCycleIdType OperationCycleId)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    22  {
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    23      return DEM_OPERATIONCYCLE_ISBITSET(Dem_OperationCycleStates, OperationCycleId);
	movh.a	a15,#@his(Dem_OperationCycleStates)
	lea	a15,[a15]@los(Dem_OperationCycleStates)
	ld.bu	d15,[a15]
.L1008:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L1883:
	and	d15,#1
.L1884:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L29

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L29:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1885:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L30

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L30:

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    23      return DEM_OPERATIONCYCLE_ISBITSET(Dem_OperationCycleStates, OperationCycleId);      (inlined)
	j	.L31

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    24  }      (inlined)
.L31:
	jne	d15,#0,.L32
.L1004:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   189  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   190  		return E_NOT_OK;
	mov	d2,#1
.L1519:
	j	.L33
.L32:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   191  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   192  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   193  	debAction = Dem_DebCallFilter(EventId, &EventStatus);
	lea	a13,[a10]0
.L1009:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     4  #ifndef DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     5  #define DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     8  #include "Dem_DebBase.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     9  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    10  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    11  #include "Dem_Dependencies.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    12  #include "Dem_DisturbanceMemory.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    13  #include "Dem_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    14  #include "Dem_EventFHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    15  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    16  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    19  Std_ReturnType Dem_DebGetDebounceCounter4Calculation (Dem_EventIdType EventId, sint16 *debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    20  sint8 Dem_DebCalculateFaultDetectionCounter(Dem_EventIdType EventId, sint16 debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    21  boolean Dem_DebHandleResetConditions (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    23  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    24  /* Duplicate of Dem_GetDebouncingOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    25  Std_ReturnType Dem_GetDebouncingOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DebouncingStateType* DebouncingState);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    26  /* Duplicate of Dem_GetFaultDetectionCounter to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    27  Std_ReturnType Dem_GetFaultDetectionCounter_GeneralEvtInfo(Dem_EventIdType EventId, sint8* FaultDetectionCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    28  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    31  DEM_INLINE Dem_DebouncedActionType Dem_DebCallFilter (Dem_EventIdType EventId, Dem_EventStatusType* status)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    33  	Dem_DebFilter funcPoint;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    34  	const void* paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    35      uint8_least debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    36      debAction = DEM_DEBACTION_NOOP;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    38  #if (DEM_CFG_DEBMONINTERNAL == DEM_CFG_DEBMONINTERNAL_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    40      if(Dem_EvtParam_GetDebounceMethodIndex(EventId) == DEM_DEBMETH_IDX_MONINTERNAL)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    41      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    42          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREPASSED, DEM_DET_APIID_DEBCALLFILTER, 0);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    43          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREFAILED, DEM_DET_APIID_DEBCALLFILTER, 1);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    45  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    46          if((*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED) || (*status == DEM_EVENT_STATUS_FAILED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    47          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    48              debAction |= DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    49          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    50          else if(*status == DEM_EVENT_STATUS_PASSED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    51          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    52              debAction |= DEM_DEBACTION_RESETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    53          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    54          else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    55          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    56              /* do nothing */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    57          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    59  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    60          if(*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    61          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    62              debAction |= DEM_DEBACTION_ALLOW_BUFFER_INSERT|DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    63          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    64  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    65          return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    66      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    67  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    69  /* Status Changed to Passed in case - in a system which is working fine(Passed reported earlier), if Pre-passed is reported,
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    70  * the status is changed to Passed here to gain run-time Optimization */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    71  #if((DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD != DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    72          (!DEM_CFG_SUSPICIOUS_SUPPORT) && !DEM_CFG_ALTERNATIVEDEBDEFINED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))
	ld.bu	d15,[a13]
.L1886:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))      (inlined)
	jeq	d15,#2,.L34
.L1887:
	jne	d15,#0,.L35
.L34:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
	movh.a	a15,#@his(Dem_AllEventsState8)
	lea	a15,[a15]@los(Dem_AllEventsState8)
.L1888:
	addsc.a	a15,a15,d8,#0
.L1889:
	ld.bu	d15,[a15]
.L1890:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;      (inlined)
	j	.L36

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }      (inlined)
.L36:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \       (inlined)
	jne	d15,#0,.L37
.L1016:
	addsc.a	a15,a12,d8,#2
.L1891:
	ld.h	d15,[a15]2
.L1892:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;      (inlined)
	j	.L38

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }      (inlined)
.L38:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))      (inlined)
	jeq	d15,#0,.L39
.L1893:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    74      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    75  		/* Debounce level is compared with zero, as in case of Clear, the debounce level will get reset to zero irrespective of the previous report*/
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    79          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    80  #if (DEM_CFG_DEBARTIMEBASE != DEM_CFG_DEBARTIMEBASE_OFF)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    81              if(Dem_EvtParam_GetDebounceMethodIndex(EventId) != DEM_DEBMETH_IDX_ARTIME)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    83              {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    84                  *status = DEM_EVENT_STATUS_PASSED;
	mov	d15,#0
.L1894:
	st.b	[a13],d15
.L1895:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    85              }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    86              return debAction;
	mov	d2,#0
.L1520:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    86              return debAction;      (inlined)
	j	.L40

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \       (inlined)
.L39:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))      (inlined)
.L37:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))      (inlined)
.L35:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L41:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;      (inlined)
	j	.L42

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }      (inlined)
.L42:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    88          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    90  #else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    91      DEM_UNUSED_PARAM(debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    94  	funcPoint = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].funcPointer_Filter;
	movh.a	a2,#@his(Dem_Cfg_DebClasses)
	lea	a2,[a2]@los(Dem_Cfg_DebClasses)
.L1896:
	mul	d15,d15,#20
	addsc.a	a15,a2,d15,#0
.L1897:
	ld.a	a12,[a15]16

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L43:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;      (inlined)
	j	.L44

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }      (inlined)
.L44:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    95  	paramSet = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramSet;
	mul	d15,d15,#20
	addsc.a	a15,a2,d15,#0
.L1898:
	ld.a	a14,[a15]8
.L1019:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);      (inlined)
.L45:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L46:
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;      (inlined)
	j	.L47

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }      (inlined)
.L47:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);
	mul	d15,d15,#20
	addsc.a	a2,a2,d15,#0
	ld.hu	d0,[a2]12

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L48:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
	addsc.a	a2,a15,d8,#1
.L1899:
	ld.hu	d15,[a2]0
.L1023:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d1,#1
.L1522:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d15,#-4
.L1900:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d1,#3
.L1523:
	div.u	e2,d15,d1
.L1521:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L49

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L49:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));      (inlined)
	j	.L50

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }      (inlined)
.L50:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);      (inlined)
	jlt.u	d3,d0,.L51
.L1022:
	mov	d4,#54
	mov	d5,#0
	mov	d6,#160
	mov	d7,#2
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);      (inlined)
.L51:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L52:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
	addsc.a	a15,a15,d8,#1
.L1901:
	ld.hu	d15,[a15]0
.L1031:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d0,#1
.L1524:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d15,#-4
.L1902:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d0,#3
.L1525:
	div.u	e0,d15,d0
.L1903:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L53

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L53:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));      (inlined)
	j	.L54

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }      (inlined)
.L54:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    97  	return (*funcPoint) (EventId, status, paramSet, Dem_EvtParam_GetDebounceParamSettingIndex(EventId));
	mov	d4,d8
.L1526:
	mov.aa	a4,a13
	mov.aa	a5,a14
.L1029:
	mov	d5,d1
.L1030:
	calli	a12
.L1527:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    97  	return (*funcPoint) (EventId, status, paramSet, Dem_EvtParam_GetDebounceParamSettingIndex(EventId));      (inlined)
	j	.L55

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    98  }      (inlined)
.L55:
.L40:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   194  	/*set the last reported event status*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   195  	Dem_EvtSetLastReportedEvent (EventId, EventStatus);
	ld.bu	d15,[a10]
.L1033:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
	movh.a	a15,#@his(Dem_AllEventsState8)
	lea	a15,[a15]@los(Dem_AllEventsState8)
.L1904:
	addsc.a	a15,a15,d8,#0
.L1905:
	st.b	[a15],d15
.L1034:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   196  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   197  	if (debAction != DEM_DEBACTION_NOOP)
	jeq	d2,#0,.L56

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   108      DEM_ASSERT_ISLOCKED();      (inlined)
.L57:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     4  #ifndef DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     5  #define DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     8  #include "Dem_DebBase.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     9  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    10  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    11  #include "Dem_Dependencies.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    12  #include "Dem_DisturbanceMemory.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    13  #include "Dem_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    14  #include "Dem_EventFHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    15  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    16  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    19  Std_ReturnType Dem_DebGetDebounceCounter4Calculation (Dem_EventIdType EventId, sint16 *debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    20  sint8 Dem_DebCalculateFaultDetectionCounter(Dem_EventIdType EventId, sint16 debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    21  boolean Dem_DebHandleResetConditions (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    23  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    24  /* Duplicate of Dem_GetDebouncingOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    25  Std_ReturnType Dem_GetDebouncingOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DebouncingStateType* DebouncingState);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    26  /* Duplicate of Dem_GetFaultDetectionCounter to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    27  Std_ReturnType Dem_GetFaultDetectionCounter_GeneralEvtInfo(Dem_EventIdType EventId, sint8* FaultDetectionCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    28  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    31  DEM_INLINE Dem_DebouncedActionType Dem_DebCallFilter (Dem_EventIdType EventId, Dem_EventStatusType* status)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    33  	Dem_DebFilter funcPoint;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    34  	const void* paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    35      uint8_least debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    36      debAction = DEM_DEBACTION_NOOP;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    38  #if (DEM_CFG_DEBMONINTERNAL == DEM_CFG_DEBMONINTERNAL_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    40      if(Dem_EvtParam_GetDebounceMethodIndex(EventId) == DEM_DEBMETH_IDX_MONINTERNAL)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    41      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    42          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREPASSED, DEM_DET_APIID_DEBCALLFILTER, 0);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    43          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREFAILED, DEM_DET_APIID_DEBCALLFILTER, 1);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    45  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    46          if((*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED) || (*status == DEM_EVENT_STATUS_FAILED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    47          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    48              debAction |= DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    49          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    50          else if(*status == DEM_EVENT_STATUS_PASSED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    51          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    52              debAction |= DEM_DEBACTION_RESETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    53          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    54          else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    55          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    56              /* do nothing */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    57          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    59  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    60          if(*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    61          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    62              debAction |= DEM_DEBACTION_ALLOW_BUFFER_INSERT|DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    63          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    64  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    65          return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    66      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    67  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    69  /* Status Changed to Passed in case - in a system which is working fine(Passed reported earlier), if Pre-passed is reported,
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    70  * the status is changed to Passed here to gain run-time Optimization */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    71  #if((DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD != DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    72          (!DEM_CFG_SUSPICIOUS_SUPPORT) && !DEM_CFG_ALTERNATIVEDEBDEFINED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    74      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    75  		/* Debounce level is compared with zero, as in case of Clear, the debounce level will get reset to zero irrespective of the previous report*/
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    79          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    80  #if (DEM_CFG_DEBARTIMEBASE != DEM_CFG_DEBARTIMEBASE_OFF)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    81              if(Dem_EvtParam_GetDebounceMethodIndex(EventId) != DEM_DEBMETH_IDX_ARTIME)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    83              {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    84                  *status = DEM_EVENT_STATUS_PASSED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    85              }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    86              return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    88          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    90  #else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    91      DEM_UNUSED_PARAM(debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    94  	funcPoint = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].funcPointer_Filter;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    95  	paramSet = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    97  	return (*funcPoint) (EventId, status, paramSet, Dem_EvtParam_GetDebounceParamSettingIndex(EventId));
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   100  /* this split of functionality is supposed as preliminary workaround; a final clean-up (conceptual rework of muticore handling) is planned */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   101  DEM_INLINE Dem_boolean_least Dem_DebHandleDebounceAction__processBits(Dem_EventIdType EventId, Dem_DebouncedActionType debAction)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   102  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   103      Dem_boolean_least insertToEvBuffer = FALSE;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   105      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   106      DEM_UNUSED_PARAM(debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   108      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   110  #if((DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON) ||\ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   111          (DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   113      if( (debAction & DEM_DEBACTION_SETFDCTHRESHOLDREACHED) != 0u )
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   114      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   115  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   116          if((!Dem_EvtGetFDCThresholdReachedTOC(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   117          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   118              //Set the FDC threshold reached flag
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   119              Dem_EvtSetFDCThresholdReachedTOC(EventId,TRUE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   121              if(Dem_OpMoIsInitialized() && ((debAction & DEM_DEBACTION_ALLOW_BUFFER_INSERT) != 0u))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   122              {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   123                  /*  Check the Causality of the event*/
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   124                  if (Dem_StoCoAreAllFulfilled(Dem_EvtParam_GetStorageConditions(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   125                  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   126                      insertToEvBuffer = TRUE;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   127                  }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   128              }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   130          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   131  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   132          Dem_EvtSetFDCThresholdReached(EventId,TRUE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   133      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   134      else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   135      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   136          if((debAction & DEM_DEBACTION_RESETFDCTHRESHOLDREACHED) != 0u )
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   137          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   138              Dem_EvtSetFDCThresholdReached(EventId,FALSE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   139          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   140      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   142  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   144  #if(DEM_CFG_SUSPICIOUS_SUPPORT)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   145     if(((debAction & DEM_DEBACTION_SETSUSPICIOUS) != 0u) && (!Dem_EvtIsSuspicious(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   146     {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   147         Dem_SetEventSuspicion_Internal(EventId,TRUE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   148     }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   149     else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   150     {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   151        if(((debAction & DEM_DEBACTION_RESETSUSPICIOUS) != 0u) && (Dem_EvtIsSuspicious(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   152        {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   153            Dem_SetEventSuspicion_Internal(EventId,FALSE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   154        }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   155     }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   156  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   159     return (insertToEvBuffer);
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   159     return (insertToEvBuffer);      (inlined)
	j	.L58

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   160  }      (inlined)
.L58:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   169      if (insertUnrobustToEvBuffer)      (inlined)
	jeq	d15,#0,.L59
.L1906:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   162  DEM_INLINE void Dem_DebHandleDebounceAction(Dem_EventIdType EventId, Dem_DebouncedActionType debAction, Dem_DebugDataType debug0 ,Dem_DebugDataType debug1)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   163  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   164      Dem_boolean_least insertUnrobustToEvBuffer;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   165      DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   166      insertUnrobustToEvBuffer = Dem_DebHandleDebounceAction__processBits(EventId, debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   167      DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   169      if (insertUnrobustToEvBuffer)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   170      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   171          (void)Dem_EvBuffInsert(C_EVENTTYPE_UNROBUST, EventId DEM_DEBUGDATA_PARAM(debug0, debug1));
	mov	d4,#7
.L1907:
	mov	d5,d8
.L1529:
	mov	e6,d10,d9
	call	Dem_EvBuffInsert
.L1528:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   171          (void)Dem_EvBuffInsert(C_EVENTTYPE_UNROBUST, EventId DEM_DEBUGDATA_PARAM(debug0, debug1));      (inlined)
	j	.L60

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   169      if (insertUnrobustToEvBuffer)      (inlined)
.L59:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   173      else      (inlined)
.L60:
.L56:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   198  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   199  		Dem_DebHandleDebounceAction(EventId, debAction, debug0, debug1);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   200  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   201  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   202  #if (DEM_CFG_EVT_PROJECT_EXTENSION)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   203  	Dem_EvtProjectExtensionSetEventStatus(EventId, EventStatus, debAction);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   204  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   206  	if ((EventStatus == DEM_EVENT_STATUS_PASSED) || (EventStatus == DEM_EVENT_STATUS_FAILED))
	ld.bu	d15,[a10]
.L1908:
	jeq	d15,#0,.L61
.L1909:
	ld.bu	d15,[a10]
.L1910:
	jne	d15,#1,.L62
.L61:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   207  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   208  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   209  #if (DEM_CFG_SETEVENTSTATUSALLOWEDCALLBACK == DEM_CFG_SETEVENTSTATUSALLOWEDCALLBACK_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   210  		if (Dem_SetEventStatusAllowedHook(EventId, EventStatus) == E_OK)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   212  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   213  			Dem_EvtProcessPassedAndFailed (EventId, EventStatus
	ld.bu	d5,[a10]
.L1911:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   214  					DEM_DEBUGDATA_PARAM(debug0 ,debug1));
	mov	d4,d8
.L1530:
	mov	e6,d10,d9
	call	Dem_EvtProcessPassedAndFailed
.L62:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   215  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   216  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   217  #if (DEM_CFG_SETEVENTSTATUSCALLNOTIFICATION == DEM_CFG_SETEVENTSTATUSCALLNOTIFICATION_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   218  			Dem_SetEventStatusCallNotification (EventId, faultlevel, debug0, debug1);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   219  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   220  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   221  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   222  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   223  	/*--------DISTURBANCE_MEMORY---------------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   224  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   225  	if(Dem_DistMemIsReportFailedNecessary(EventId, EventStatus))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   226  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   227  		Dem_DistMemReportFailed(EventId
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   228  				DEM_DEBUGDATA_PARAM(debug0 ,debug1));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   229  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   230  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   231  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   232  	if (EventStatus == DEM_EVENT_STATUS_FAILED)
	ld.bu	d15,[a10]
.L1912:
	jne	d15,#1,.L63
.L1913:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   233  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   234  		Dem_EvMemGenReportFailedEvent(EventId);
	mov	d15,d8
.L1046:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     4  #ifndef DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     5  #define DEM_EVMEM_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	     9  #include "Dem_Cfg_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    10  #include "Dem_Cfg_EnvMain.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    11  #include "Dem_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    13  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    14  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    16  #include "Dem_EvMemApi.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    17  #include "Dem_EvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    18  #if (DEM_CFG_EVMEM_AGING_METHOD == DEM_CFG_EVMEM_AGING_METHOD_USER)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    19  #include "Dem_PrjEvMemAging.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    21  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    23  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    24      uint8 evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    25      boolean originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    26  } Dem_EvMemMapOrigin2IdType;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    28  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    29  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    30  DEM_ARRAY_DECLARE_CONST(Dem_EvMemMapOrigin2IdType, Dem_EvMemMapOrigin2Id, 5);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    31  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    35  DEM_INLINE boolean Dem_EvMemIsOriginSupported (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    36  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    37      return Dem_EvMemMapOrigin2Id[origin].originSupported;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    38  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    40  DEM_INLINE uint8 Dem_EvMemGetEvMemIdFromOrigin (Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    41  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    42      return Dem_EvMemMapOrigin2Id[origin].evMemId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    46  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    47     Interface Functions
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    48     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    49  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    50  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    51  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    52  void          Dem_EvMemInit(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    53  void          Dem_EvMemInitCausality(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    54  void          Dem_EvMemMainFunction(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    56  void          Dem_EvMemClearEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    57  void          Dem_EvMemEraseEventMemory(uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    59  void          Dem_EvMemSetEventPassed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    60  void          Dem_EvMemSetEventFailed(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    61  void          Dem_EvMemSetEventUnRobust(Dem_EventIdType EventId, uint16_least MemId, const uint8 *EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    62  void          Dem_EvMemStartOperationCycle(Dem_OperationCycleList operationCycleList, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    64  uint16_least  Dem_EvMemGetEventMemoryLocIdOfDtcWithVisibility(Dem_DtcIdType DtcId, uint16_least MemId, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    65  uint16_least  Dem_EvMemGetEventMemoryStatusOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    66  uint16_least  Dem_EvMemGetEventMemoryStatusOfEvent(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    67  uint16_least  Dem_EvMemGetEventMemoryLocIdOfEvent (Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    68  Std_ReturnType Dem_EvMemGetReaderCopyOfEvent(Dem_EvMemEventMemoryType* ReaderCopy, Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    69  void          Dem_EvMemSetStatusWithNotifications(uint16_least LocId, uint16_least StatusNew, uint16_least WriteSts, Dem_EvMemActionType actionType);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    71  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    72  void          Dem_EvMemClearShadowMemory(Dem_EventIdType EventId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    73  uint16_least  Dem_EvMemGetShadowMemoryLocIdOfDtc(Dem_DtcIdType DtcId, uint16_least MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    74  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    76  uint16_least  Dem_EvMemGetMemoryLocIdOfDtcAndOriginWithVisibility(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin, Dem_boolean_least ShadowEntriesVisible);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    79  Dem_NvmBlockIdType     Dem_EvMemGetNvmIdFromLocId(uint16_least LocId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    81  #if (DEM_CFG_READDEM_MAX_FDC_DURING_CURRENT_CYCLE_SUPPORTED || DEM_CFG_READDEM_MAX_FDC_SINCE_LAST_CLEAR_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    82  void            Dem_EvMemFdcUpdate(void);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    83  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    84  DEM_INLINE void Dem_EvMemFdcUpdate(void) {}
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    85  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    86  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    87  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    88  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    89  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    90  extern boolean Dem_EvMemIsLocked;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    91  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    92  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    93  /* ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    94     Inline
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    95     ----------------------------------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    96  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    98  DEM_INLINE void Dem_EvMemSetEventFailedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	    99  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   100     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   101     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   102        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   103     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   104  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   105     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   106     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   107        Dem_EvMemSetEventFailed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   108     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   109  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   110  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   113  DEM_INLINE void Dem_EvMemSetEventPassedAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   114  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   115     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   116     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   117        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   118     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   119  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   120     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   121     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   122        Dem_EvMemSetEventPassed(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   123     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   128  DEM_INLINE void Dem_EvMemSetEventUnRobustAllMem(Dem_EventIdType EventId, const uint8 *EnvData)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   130     if (Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   131     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   132        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_PRIMARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   133     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   134  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   135     if (Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   136     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   137        Dem_EvMemSetEventUnRobust(EventId,DEM_CFG_EVMEM_MEMID_SECONDARY,EnvData);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   138     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   139  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   140  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   142  DEM_INLINE void Dem_EvMemStartOperationCycleAllMem(Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   144      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_PRIMARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   145  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   146      Dem_EvMemStartOperationCycle(operationCycleList, DEM_CFG_EVMEM_MEMID_SECONDARY);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   147  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   148  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   150  DEM_INLINE uint16_least Dem_EvMemGetMemIdForDTCOrigin(Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   152      switch (DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   153      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   154          case DEM_DTC_ORIGIN_PRIMARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   155              return DEM_CFG_EVMEM_MEMID_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   157  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   158          case DEM_DTC_ORIGIN_SECONDARY_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   159              return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   160  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   162  #if (DEM_CFG_MAX_NUMBER_EVENT_ENTRY_MIRROR > 0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   163          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   164              return DEM_CFG_EVMEM_MEMID_MIRROR;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   165  #elif DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   166          case DEM_DTC_ORIGIN_MIRROR_MEMORY:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   167              return DEM_CFG_EVMEM_MEMID_SHADOW;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   168  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   170          default:
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   171              return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   172      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   175  DEM_INLINE void Dem_EvMemClearEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   176  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   177      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   178      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   179      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   180          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   181      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   183  #if DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   184      if (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   185      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   186          Dem_EvMemClearShadowMemory(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   187          return;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   188      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   189  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   191      Dem_EvMemClearEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   195  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   196  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfDtcAndOrigin(Dem_DtcIdType DtcId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   197  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   198      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   199      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   200              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   201         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   202      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   203          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   204      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   206      return Dem_EvMemGetEventMemoryStatusOfDtc(DtcId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   207  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   208  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   209  DEM_INLINE uint16_least  Dem_EvMemGetEventMemoryStatusOfEventAndOrigin(Dem_EventIdType EventId, Dem_DTCOriginType DTCOrigin)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   210  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   211      uint16_least MemId = Dem_EvMemGetMemIdForDTCOrigin(DTCOrigin);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   212      if (!Dem_EvMemIsMemIdValid(MemId) ||
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   213              (Dem_LibGetParamBool(DEM_CFG_EVMEM_SHADOW_MEMORY_SUPPORTED) && (DTCOrigin == DEM_DTC_ORIGIN_MIRROR_MEMORY))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   214         )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   215      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   216          return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   217      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   219      return Dem_EvMemGetEventMemoryStatusOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   222  DEM_INLINE uint16_least Dem_EvMemGetMemIdForEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   224      if(Dem_EvtParam_GetEventIsStoredInPrimary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   225      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   226          return DEM_CFG_EVMEM_MEMID_PRIMARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   227      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   228  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   229  #if DEM_CFG_MAX_NUMBER_EVENT_ENTRY_SECONDARY > 0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   230      if(Dem_EvtParam_GetEventIsStoredInSecondary(EventId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   231      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   232          return DEM_CFG_EVMEM_MEMID_SECONDARY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   233      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   234  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   235  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   236      return DEM_EVMEM_INVALID_MEMID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   237  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   238  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   239  DEM_INLINE uint16_least Dem_EvMemGetLocationOfEventFromEventMemory(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   240  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   241      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   242      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   243      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   244          return DEM_EVMEM_INVALID_LOCID;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   245      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   247      return Dem_EvMemGetEventMemoryLocIdOfEvent(EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   249  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   251  DEM_INLINE Std_ReturnType Dem_EvMemGetReaderCopyOfEventFromEventMemory(
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   252          Dem_EvMemEventMemoryType* ReaderCopy,
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   253          Dem_EventIdType EventId
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   254  )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   256      uint16_least MemId = Dem_EvMemGetMemIdForEvent(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   257      if (!Dem_EvMemIsMemIdValid(MemId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   258      {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   259          return E_NOT_OK;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   260      }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   262      return Dem_EvMemGetReaderCopyOfEvent(ReaderCopy, EventId, MemId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   263  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   265  DEM_INLINE boolean Dem_GetEvMemLockInternal(void)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   266  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   267      return Dem_EvMemIsLocked;
	movh.a	a15,#@his(Dem_EvMemIsLocked)
	lea	a15,[a15]@los(Dem_EvMemIsLocked)
	ld.bu	d0,[a15]
.L1914:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   267      return Dem_EvMemIsLocked;      (inlined)
	j	.L64

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMem.h	   268  }      (inlined)
.L64:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   111  	if(!Dem_GetEvMemLockInternal())      (inlined)
	jne	d0,#0,.L65

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L66:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)
.L1915:
	addsc.a	a15,a15,d15,#1
.L1916:
	ld.hu	d15,[a15]0
.L1917:
	mov	d0,#0
.L1058:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L1918:
	and	d15,#1
.L1919:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);      (inlined)
	j	.L67

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }      (inlined)
.L67:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1920:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L68

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }      (inlined)
.L68:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);      (inlined)
	j	.L69

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }      (inlined)
.L69:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   114  	    if ( Dem_EvtParam_GetEventIsStoredInPrimary(EventId) )      (inlined)
	jeq	d15,#0,.L70
.L1053:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     3  #ifndef DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     4  #define DEM_EVMEMGEN_H
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     6  #include "Dem_EvMemGenTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     7  #include "Dem_EvMemTypes.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     8  #include "Dem_EvMemBase.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	     9  #include "Dem_DTCs.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    10  #include "Dem_GenericNvData.h"
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    13  #define DEM_EVMEMGEN_MEMORY_BASE   Dem_GenericNvData
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    15  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    16     #define DEM_EVMEMGEN_GET(OBJ)      (OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    17     #define DEM_EVMEMGEN_SET(OBJ,VAL)  (OBJ) = (VAL)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    18     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) DEM_EVMEM_CLEAROBJ(OBJ)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    19  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    20     #define DEM_EVMEMGEN_GET(OBJ)      0
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    21     #define DEM_EVMEMGEN_SET(OBJ,VAL)  do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    22     #define DEM_EVMEMGEN_CLEAROBJ(OBJ) do {} while (0)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    23  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    25  /* -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    26     service Dem_GetDTCByOccurrenceTime
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    27     -------------------------------------------------
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    28   */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    30  /* Get stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    31  DEM_INLINE Dem_DtcIdType Dem_EvMemGenGetDtcIdByOccIndex(uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    33  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    35  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    36      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    37      return 0;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    41  /* Set stored DtcId by occurrence */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    42  DEM_INLINE void Dem_EvMemGenSetDtcByOccIndex(Dem_DtcIdType DtcId,uint32 OccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    43  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    44  #if DEM_CFG_EVMEMGENERIC_SUPPORTED
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    45      DEM_EVMEMGEN_SET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex],DtcId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    46  #else
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    47      DEM_UNUSED_PARAM(DtcId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    48      DEM_UNUSED_PARAM(OccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    49  #endif
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    52  /* Translates MemId to DtcOrigin  */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    53  DEM_INLINE Dem_DTCOriginType Dem_EvMemGenGetDtcOrginFromMemId(uint16_least MemId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    55     Dem_DTCOriginType DtcOrigin = DEM_DTC_ORIGIN_PRIMARY_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    57     if (Dem_LibGetParamBool(DEM_CFG_EVMEM_SECONDARY_MEMORY_SUPPORTED))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    58     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    59        if (MemId == DEM_CFG_EVMEM_MEMID_SECONDARY)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    60        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    61           DtcOrigin = DEM_DTC_ORIGIN_SECONDARY_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    62        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    63     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    65     if (Dem_LibGetParamBool(DEM_CFG_EVMEM_MIRROR_MEMORY_SUPPORTED))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    66     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    67  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    68        if (MemId == DEM_CFG_EVMEM_MEMID_MIRROR)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    69        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    70           DtcOrigin = DEM_DTC_ORIGIN_MIRROR_MEMORY;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    71        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    72     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    74     return DtcOrigin;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    76  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    78  /* Report event prototype function */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    79  DEM_INLINE void Dem_EvMemGenReportEvent(Dem_EventIdType EventId, uint32 FirstOccIndex, uint32 RecntOccIndex)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    80  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    81     Dem_DtcIdType DtcId;
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    83     /* get the DtcId of the reported event */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    84     DtcId = Dem_DtcIdFromEventId (EventId);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    85     /* Is the DtcId valid ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    86     if (Dem_isDtcIdValid (DtcId))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    87     {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    88        /* Is stored DtcId of First Entry is invalid ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    89        /* HINT: the initial value is zero and therefore invalid! */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    90        if (!Dem_isDtcIdValid(Dem_EvMemGenGetDtcIdByOccIndex(FirstOccIndex)))
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    91        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    92           /* replace first entry */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    93           Dem_EvMemGenSetDtcByOccIndex(DtcId,FirstOccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    94           /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    95           Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    96        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    97        /* Is stored DtcId of Most Recent Entry is not yet stored ? */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    98        if (Dem_EvMemGenGetDtcIdByOccIndex(RecntOccIndex) != DtcId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    99        {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   100           /* replace most recent entry */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   101           Dem_EvMemGenSetDtcByOccIndex(DtcId,RecntOccIndex);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   102           /* notify to store in NVM */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   103           Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_DEM_GENERIC_NV_DATA);
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   104        }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   105     }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   106  }
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   108  /* report function to report failed events */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   109  DEM_INLINE void Dem_EvMemGenReportFailedEvent(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   110  {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   111  	if(!Dem_GetEvMemLockInternal())
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   112  	{
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   113  	    /* service Dem_GetDTCByOccurrenceTime has implicit origin DEM_DTC_ORIGIN_PRIMARY_MEMORY */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   114  	    if ( Dem_EvtParam_GetEventIsStoredInPrimary(EventId) )
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   115  	    {
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   116  	        /* call prototype function with first and recent FAILED indices */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   117  	        /* This call needs to be locked to avoid a simultaneous access in the Dem_Main task */
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   118  	        DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   119  	        Dem_EvMemGenReportEvent(EventId,DEM_FIRST_FAILED_DTC,DEM_MOST_RECENT_FAILED_DTC);
	mov	d15,d8
.L1921:
	mov	d0,#1
.L1922:
	mov	d1,#2
.L1071:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
	movh.a	a15,#@his(Dem_MapEventIdToDtcId)
	lea	a15,[a15]@los(Dem_MapEventIdToDtcId)
.L1923:
	addsc.a	a15,a15,d15,#1
	ld.hu	d2,[a15]0
.L1531:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];      (inlined)
	j	.L71

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }      (inlined)
.L71:
	mov	d3,#0
.L1924:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d2,#0,.L72
.L1925:
	ge.u	d15,d2,#5
.L1926:
	cmovn	d3,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L73:
.L72:
	j	.L74

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L74:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    86     if (Dem_isDtcIdValid (DtcId))      (inlined)
	jeq	d3,#0,.L75
.L1085:
	movh.a	a15,#@his(Dem_GenericNvData)
	lea	a15,[a15]@los(Dem_GenericNvData)
	lea	a2,[a15]8
	addsc.a	a15,a2,d0,#1
	ld.hu	d15,[a15]0
.L1927:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);      (inlined)
	j	.L76

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }      (inlined)
.L76:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d3,#0
.L1928:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d15,#0,.L77
.L1929:
	ge.u	d15,d15,#5
.L1930:
	cmovn	d3,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L78:
.L77:
	j	.L79

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L79:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    90        if (!Dem_isDtcIdValid(Dem_EvMemGenGetDtcIdByOccIndex(FirstOccIndex)))      (inlined)
	jne	d3,#0,.L80
.L1093:
	addsc.a	a15,a2,d0,#1
	st.h	[a15],d2
.L1095:
	mov	d15,#0
.L1102:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L1931:
	mul	d15,d15,#5
	addsc.a	a15,a15,d15,#0
.L1932:
	mov	d15,#1
.L1933:
	st.b	[a15]1,d15

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    90        if (!Dem_isDtcIdValid(Dem_EvMemGenGetDtcIdByOccIndex(FirstOccIndex)))      (inlined)
.L80:
	addsc.a	a15,a2,d1,#1
	ld.hu	d15,[a15]0
.L1934:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    34      return DEM_EVMEMGEN_GET(DEM_EVMEMGEN_MEMORY_BASE.DtcIdsByOccurrenceTime[OccIndex]);      (inlined)
	j	.L81

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    39  }      (inlined)
.L81:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    98        if (Dem_EvMemGenGetDtcIdByOccIndex(RecntOccIndex) != DtcId)      (inlined)
	jeq	d15,d2,.L82
.L1106:
	addsc.a	a15,a2,d1,#1
	st.h	[a15],d2
.L1107:
	mov	d15,#0
.L1108:

; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     1   
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     4  #ifndef DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     5  #define DEM_NVM_H
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     7  #include "NvM.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     8  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	     9  #include "Dem_Nvm_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    11  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    12  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    13  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    16  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    17  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    19  DEM_ARRAY_DECLARE(Dem_NvMBlockStatusDoubleBufferType, Dem_NvMBlockStatusDoubleBuffer, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    20  DEM_ARRAY_DECLARE(Dem_NvMStorageBufferType, Dem_NvMStorageBuffer, DEM_NVM_CFG_NUM_STORAGEBUFFER);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    22  extern Dem_EraseAllStatusType Dem_EraseAllNvMDataStatus;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    23  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    24  DEM_ARRAY_DECLARE(Dem_NvmHashIdType, Dem_HashIdInNvm, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    25  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    26  extern boolean Dem_NvMAnyClearFailed;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    27  #if(DEM_CFG_TRIGGER_TO_STORE_NVM_SUPPORTED)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    28  extern boolean Dem_NvMImmediateStorageRequested;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    29  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    31  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    32  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    35  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    38  DEM_ARRAY_DECLARE_CONST(NvM_BlockIdType, Dem_NvMBlockMap2NvmId, DEM_NVM_CFG_NUM_BLOCKS_TOTAL);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    39  DEM_ARRAY_DECLARE_CONST(Dem_NvmBlockIdExtendedType, Dem_NvmBlockIdExtended, DEM_NVM_CFG_NUM_BLOCKS_EXTENDED);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    40  DEM_ARRAY_DECLARE_CONST(Dem_NvmCopyFunction, DemCopyFctPtrTable, DEM_NVM_CFG_COPYFCT_NUM);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    41  #if (DEM_CFG_ERASE_ALL_DATA_SUPPORTED == DEM_CFG_ERASE_ALL_WITH_HASHID_CHECK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    42  DEM_ARRAY_DECLARE_CONST(Dem_NvmHashIdType, Dem_HashIdInRom, DEM_NVM_HASH_ID_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    45  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    46  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    49  DEM_INLINE NvM_BlockIdType Dem_NvMGetNvMBlocKId(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    50  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    51      return Dem_NvMBlockMap2NvmId[id];
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    52  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    54  DEM_INLINE Dem_NvmResultType Dem_NvmGetStatus (Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    55  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    56      NvM_RequestResultType result;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    57      if (NvM_GetErrorStatus (Dem_NvMGetNvMBlocKId(id), &result) == E_NOT_OK)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    58      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    59          return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    60      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    62      switch (result)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    63      {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    64          case NVM_REQ_CANCELED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    65              return DEM_NVM_CANCELED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    67          case NVM_REQ_OK:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    68          case NVM_REQ_REDUNDANCY_FAILED:     /* Driver could trigger correction of the damaged part of the redundant block; data is read correctly nevertheless */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    69          case NVM_REQ_RESTORED_FROM_ROM:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    70              return DEM_NVM_SUCCESS;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    72          case NVM_REQ_PENDING:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    73              return DEM_NVM_PENDING;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    75          case NVM_REQ_NV_INVALIDATED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    76              return DEM_NVM_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    78          case NVM_REQ_INTEGRITY_FAILED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    79              return DEM_NVM_INTEGRITY_FAILED;    /* NVM_REQ_INTEGRITY_FAILED: description in NVM-doc: Indicates that the latest read operation did not find any valid data for this block on the persistent media. */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    80  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    81          case NVM_REQ_BLOCK_SKIPPED:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    82              return DEM_NVM_BLOCK_SKIPPED;       /* NVM_REQ_BLOCK_SKIPPED: if readall would be skipped, it is treated as failure for DEM, because all NVM data has to be available
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    83                                                 at init (ErrorQueue is flushed and event status / eventMemory content needs to be available)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    84                                                 This is ensured as the checks during init are checked to be DEM_NVM_SUCCESS. All other states are handled as error */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    86          default:
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    87              /*   NVM_REQ_NOT_OK: Indicates that the latest operation failed due to an unexpected event.  */
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    88              return DEM_NVM_FAILED;
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    90  }
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    92  DEM_INLINE void Dem_NvMWriteBlockOnShutdown(Dem_NvmBlockIdType id)
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    93  {
; .\BSW\src\BSW\Gen\Dem\src\nvm\Dem_Nvm.h	    94      Dem_NvMBlockStatusDoubleBuffer[id][DEM_NVM_STATUSINDEX_SHUTDOWN] = DEM_NVM_STATUSBITMASK_SHUTDOWN;
	movh.a	a15,#@his(Dem_NvMBlockStatusDoubleBuffer)
	lea	a15,[a15]@los(Dem_NvMBlockStatusDoubleBuffer)
.L1935:
	mul	d15,d15,#5
	addsc.a	a15,a15,d15,#0
.L1936:
	mov	d15,#1
.L1937:
	st.b	[a15]1,d15

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    98        if (Dem_EvMemGenGetDtcIdByOccIndex(RecntOccIndex) != DtcId)      (inlined)
.L82:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	    86     if (Dem_isDtcIdValid (DtcId))      (inlined)
.L75:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   114  	    if ( Dem_EvtParam_GetEventIsStoredInPrimary(EventId) )      (inlined)
.L70:

; .\BSW\src\BSW\Gen\Dem\src\evmem\Dem_EvMemGen.h	   111  	if(!Dem_GetEvMemLockInternal())      (inlined)
.L65:
.L63:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   235  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   236  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   237  	return E_OK;
	mov	d2,#0
.L1938:
	j	.L83

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   238  }
.L83:
.L33:
.L26:
.L24:
.L22:
.L15:
.L7:
	ret
.L982:
	
__Dem_SetEventStatusWithEnvData_function_end:
	.size	Dem_SetEventStatusWithEnvData,__Dem_SetEventStatusWithEnvData_function_end-Dem_SetEventStatusWithEnvData
.L566:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_GetEventFailed',code,cluster('Dem_GetEventFailed')
	.sect	'.text.Dem_EventFHandling.Dem_GetEventFailed'
	.align	2
	
	.global	Dem_GetEventFailed

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   239  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   240  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   241  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   242  Std_ReturnType Dem_GetEventFailed(Dem_EventIdType EventId, boolean* EventFailed)
; Function Dem_GetEventFailed
Dem_GetEventFailed:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   243  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   244      DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EventId,DEM_DET_APIID_DEM_GETEVENTFAILED,E_NOT_OK);
.L84:
.L85:
.L86:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L1689:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L87
.L1690:
	ge.u	d0,d4,#6
.L1691:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L88:
.L87:
	j	.L89

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L89:
	jne	d15,#0,.L90
.L615:
	mov	d4,#54
.L1533:
	mov	d5,#0
	mov	d6,#11
	mov	d7,#16
	call	Det_ReportError
.L1532:
	mov	d2,#1
	j	.L91
.L90:
.L92:
.L93:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L1692:
	addsc.a	a15,a15,d4,#2
.L1693:
	ld.bu	d15,[a15]
.L1694:
	mov	d0,#2
.L625:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L1695:
	and	d15,#1
.L1696:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L94

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L94:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1697:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L95

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L95:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L96

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L96:
	jeq	d15,#0,.L97
.L620:
	mov	d2,#1
	j	.L98
.L97:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   245      DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(EventFailed,DEM_DET_APIID_DEM_GETEVENTFAILED,E_NOT_OK);
.L99:
.L100:
	jnz.a	a4,.L101
.L1698:
	mov	d4,#54
.L1535:
	mov	d5,#0
	mov	d6,#11
	mov	d7,#17
	call	Det_ReportError
.L1534:
	mov	d2,#1
	j	.L102
.L101:

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     4  #ifndef DEM_MAIN_H
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     5  #define DEM_MAIN_H
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	     9  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    10  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    12  /* Indicates Operational States of Dem */
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    13  typedef uint8 Dem_OpMoStateType;
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    14  #define  DEM_OPMO_STATE_NOTINITIALIZED                  0
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    15  #define  DEM_OPMO_STATE_PREINITIALIZED                  1
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    16  #define  DEM_OPMO_STATE_INITIALIZED                     2
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    18  #if(DEM_CFG_LOCK_ALLFAILUREINFO == DEM_CFG_LOCK_ALLFAILUREINFO_ON)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    19  #define  DEM_OPMO_STATE_LOCK_ALL_FAILURE_INFO           3
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    20  #endif
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    22  /* Indicates the State of Fim */
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    23  typedef uint8 Dem_FimStateType;
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    24  #define DEM_FIM_STATE_NOTINITIALIZED                    0
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    25  #define DEM_FIM_STATE_IS_IN_INITIALIZATION              1
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    26  #define DEM_FIM_STATE_INITIALIZED                       2
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    29  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    30  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    31  extern Dem_OpMoStateType Dem_OpMoState;
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    32  extern Dem_FimStateType Dem_FimState;
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    33  extern Dem_boolean_least Dem_TestFailedStatusInitialized;
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    35  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    36  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    38  /* Dem States and Entry conditions */
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    39  #define DEM_ENTRY_CONDITION_CHECK_DEM_INITIALIZED(APIID,RETURNVALUE)                    do {DEM_ASSERT_ISNOTLOCKED(); if(Dem_OpMoState != DEM_OPMO_STATE_INITIALIZED) {DEM_DET(APIID, DEM_E_UNINIT); return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    41  #define DEM_ENTRY_CONDITION_CHECK_DEM_INITIALIZED_OR_FIM_IS_IN_INIT(APIID,RETURNVALUE)   do{DEM_ASSERT_ISNOTLOCKED(); if((Dem_OpMoState != DEM_OPMO_STATE_INITIALIZED) && (Dem_FimState != DEM_FIM_STATE_IS_IN_INITIALIZATION))  \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    42                                                                                              {DEM_DET(APIID, DEM_E_UNINIT); return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    44  #define DEM_ENTRY_CONDITION_CHECK_DEM_PREINITIALIZED(APIID,RETURNVALUE)                 do {DEM_ASSERT_ISNOTLOCKED(); if(Dem_OpMoState == DEM_OPMO_STATE_NOTINITIALIZED) {DEM_DET(APIID, DEM_E_UNINIT); return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    45  #define DEM_ENTRY_CONDITION_CHECK_VOID_API_DEM_PREINITIALIZED(APIID)                    do {DEM_ASSERT_ISNOTLOCKED(); if(Dem_OpMoState == DEM_OPMO_STATE_NOTINITIALIZED) {DEM_DET(APIID, DEM_E_UNINIT); return ; }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    47  #define DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID(EVTID,APIID,RETURNVALUE)       do {DEM_ASSERT_ISNOTLOCKED(); if(!Dem_isEventIdValid(EVTID)) {DEM_DET(APIID, DEM_E_WRONG_CONFIGURATION); return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    48  #define DEM_ENTRY_CONDITION_CHECK_VOID_API_EVENT_ID_VALID(EVTID,APIID)       do {DEM_ASSERT_ISNOTLOCKED(); if(!Dem_isEventIdValid(EVTID)) {DEM_DET(APIID, DEM_E_WRONG_CONFIGURATION); return ; }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    49  #define DEM_ENTRY_CONDITION_CHECK_COMPONENT_ID_VALID(COMPID,APIID,RETURNVALUE)  do {DEM_ASSERT_ISNOTLOCKED(); if (!Dem_NodeIdIsValid(COMPID)) {DEM_DET(APIID, DEM_E_WRONG_CONFIGURATION); return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    51  #define DEM_ENTRY_CONDITION_CHECK_EVENT_AVAILABLE(EVTID,APIID,RETURNVALUE)      do {DEM_ASSERT_ISNOTLOCKED(); if(Dem_EvtIsSuppressed(EVTID)) {return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    53  #define DEM_ENTRY_CONDITION_CHECK_VOID_API_EVENT_AVAILABLE(EVTID,APIID)      do {DEM_ASSERT_ISNOTLOCKED(); if(Dem_EvtIsSuppressed(EVTID)) {return ; }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    54  #define DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EVTID,APIID,RETURNVALUE) do {    DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID(EVTID,APIID,RETURNVALUE);   \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    55                                                                                              DEM_ENTRY_CONDITION_CHECK_EVENT_AVAILABLE(EVTID,APIID,RETURNVALUE); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    57  #define DEM_ENTRY_CONDITION_CHECK_NOT_NULL_PTR(POINTER,APIID,RETURNVALUE)       do {DEM_ASSERT_ISNOTLOCKED(); if((POINTER)==NULL_PTR) { DEM_DET(APIID, DEM_E_PARAM_POINTER); return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    59  #define DEM_ENTRY_CONDITION_CHECK_INIT_EVTIDVALID_EVTAVAILABLE(EVTID,APIID,RETURNVALUE)   do { DEM_ENTRY_CONDITION_CHECK_DEM_INITIALIZED(APIID,RETURNVALUE);    \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    60                                                                                                   DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EVTID,APIID,RETURNVALUE); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    61  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    63  #define DEM_ENTRY_CONDITION_CHECK_PREINIT_EVTIDVALID_EVTAVAILABLE(EVTID,APIID,RETURNVALUE) do { DEM_ENTRY_CONDITION_CHECK_DEM_PREINITIALIZED(APIID,RETURNVALUE);    \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    64                                                                                                    DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EVTID,APIID,RETURNVALUE); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    66  #define DEM_ENTRY_CONDITION_CHECK_VOID_API_PREINIT_EVTIDVALID_EVTAVAILABLE(EVTID,APIID) do {   DEM_ENTRY_CONDITION_CHECK_VOID_API_DEM_PREINITIALIZED(APIID);    \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    67                                                                                                    DEM_ENTRY_CONDITION_CHECK_VOID_API_EVENT_ID_VALID(EVTID,APIID);  \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    68                                                                                                    DEM_ENTRY_CONDITION_CHECK_VOID_API_EVENT_AVAILABLE(EVTID,APIID); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    70  #define DEM_ENTRY_CONDITION_CHECK_INIT_EVTIDVALID(EVTID,APIID,RETURNVALUE)                do { DEM_ENTRY_CONDITION_CHECK_DEM_INITIALIZED(APIID,RETURNVALUE);    \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    71                                                                                                   DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID(EVTID,APIID,RETURNVALUE); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    73  #define DEM_ENTRY_CONDITION_CHECK_PREINIT_EVTIDVALID(EVTID,APIID,RETURNVALUE)                do { DEM_ENTRY_CONDITION_CHECK_DEM_PREINITIALIZED(APIID,RETURNVALUE);    \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    74                                                                                                   DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID(EVTID,APIID,RETURNVALUE); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    76  #define DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_OPMO_ALLFAILUREINFOLOCKED(APIID,RETURNVALUE)  do { DEM_ASSERT_ISNOTLOCKED(); if((Dem_OpMoState != DEM_OPMO_STATE_INITIALIZED) && (Dem_OpMoState != DEM_OPMO_STATE_LOCK_ALL_FAILURE_INFO)) \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    77                                                                                                      {DEM_DET(APIID, DEM_E_UNINIT); return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    79  #define DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_FIM_IS_IN_INIT_OR_OPMO_ALLFAILUREINFOLOCKED(APIID,RETURNVALUE)  do { DEM_ASSERT_ISNOTLOCKED(); \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    80                                                                                                              if((Dem_OpMoState != DEM_OPMO_STATE_INITIALIZED) && \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    81                                                                                                                  (Dem_OpMoState != DEM_OPMO_STATE_LOCK_ALL_FAILURE_INFO) &&  \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    82                                                                                                                  (Dem_FimState != DEM_FIM_STATE_IS_IN_INITIALIZATION))   \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    83                                                                                                              {DEM_DET(APIID, DEM_E_UNINIT); return (RETURNVALUE); }} while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    84  #if(DEM_CFG_LOCK_ALLFAILUREINFO == DEM_CFG_LOCK_ALLFAILUREINFO_ON)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    85  #define DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_OPMO_ALLFAILUREINFOLOCKED_EVTIDVALID_EVTAVAILABLE(EVTID,APIID,RETURNVALUE)   do { DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_OPMO_ALLFAILUREINFOLOCKED(APIID,RETURNVALUE);    \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    86                                                                                                                              DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EVTID,APIID,RETURNVALUE); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    88  #define DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_FIM_IS_IN_INIT_OR_OPMO_ALLFAILUREINFOLOCKED_EVTIDVALID_EVTAVAILABLE(EVTID,APIID,RETURNVALUE)    do { DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_FIM_IS_IN_INIT_OR_OPMO_ALLFAILUREINFOLOCKED(APIID, RETURNVALUE);   \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    89                                                                                                                                               DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EVTID,APIID,RETURNVALUE); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    90  #else
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    91  #define DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_OPMO_ALLFAILUREINFOLOCKED_EVTIDVALID_EVTAVAILABLE(EVTID,APIID,RETURNVALUE)    DEM_ENTRY_CONDITION_CHECK_INIT_EVTIDVALID_EVTAVAILABLE(EVTID,APIID,RETURNVALUE)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    92  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    93  #define DEM_ENTRY_CONDITION_CHECK_DEMINIT_OR_FIM_IS_IN_INIT_OR_OPMO_ALLFAILUREINFOLOCKED_EVTIDVALID_EVTAVAILABLE(EVTID,APIID,RETURNVALUE)  do { DEM_ENTRY_CONDITION_CHECK_DEM_INITIALIZED_OR_FIM_IS_IN_INIT(APIID,RETURNVALUE);    \ 
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    94                                                                                                                                              DEM_ENTRY_CONDITION_CHECK_EVENT_ID_VALID_AVAILABLE(EVTID,APIID,RETURNVALUE); } while(0)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    97  DEM_INLINE Dem_boolean_least Dem_OpMoIsInitialized(void)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    98  {
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	    99     return (Dem_OpMoState == DEM_OPMO_STATE_INITIALIZED);
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   100  }
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   102  DEM_INLINE Dem_boolean_least Dem_Is_Fim_Initialized(void)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   103  {
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   104      return (Dem_FimState == DEM_FIM_STATE_INITIALIZED);
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   105  }
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   107  #if(DEM_CFG_LOCK_ALLFAILUREINFO == DEM_CFG_LOCK_ALLFAILUREINFO_ON)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   108  DEM_INLINE Dem_boolean_least Dem_OpMoIsAllFailureInfoLocked(void)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   109  {
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   110     return (Dem_OpMoState == DEM_OPMO_STATE_LOCK_ALL_FAILURE_INFO);
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   111  }
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   112  #endif
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   114  DEM_INLINE Dem_boolean_least Dem_GetTestFailedInitState(void)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   115  {
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   116      return Dem_TestFailedStatusInitialized;
	movh.a	a15,#@his(Dem_TestFailedStatusInitialized)
	lea	a15,[a15]@los(Dem_TestFailedStatusInitialized)
	ld.bu	d15,[a15]
.L1699:

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   116      return Dem_TestFailedStatusInitialized;      (inlined)
	j	.L103

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_Main.h	   117  }      (inlined)
.L103:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   246  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   247      if(Dem_GetTestFailedInitState() == FALSE)
	jne	d15,#0,.L104
.L1700:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   248      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   249          DEM_DET(DEM_DET_APIID_DEM_GETEVENTFAILED, DEM_E_UNINIT);
	mov	d4,#54
.L1537:
	mov	d5,#0
	mov	d6,#11
	mov	d7,#32
	call	Det_ReportError
.L1536:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   250          return E_NOT_OK;
	mov	d2,#1
.L1701:
	j	.L105
.L104:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   193  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   194      Dem_EvtSt_CustomResetEventStatus(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   195  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   196  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   197  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   198  DEM_INLINE void Dem_EvtSt_HandleEvtAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   199  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   200      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   201  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   202      Dem_EvtSt_CustomEvtAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   203  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   204  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   205  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   206  DEM_INLINE void Dem_EvtSt_HandleEvtNotAvailable(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   207  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   208      Dem_AllEventsStatusByte[EventId] = DEM_STATUSBYTE_EVENT_UNAVAILABLE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   209  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   210      Dem_EvtSt_CustomEvtNotAvailable(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   211  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   212  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   213  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   214  DEM_INLINE void Dem_EvtSt_HandleClear(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   215  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   216  #if DEM_CFG_CLEARDTCCLEARSALLBITS
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   217      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   218  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   219      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   220      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   221      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   222      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   223      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   224      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   225      if(!(Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId])))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   226      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   227          Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   228      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   229  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   230  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   231  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   232      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   233      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   234  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   235  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   236  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   237      Dem_EvtSt_CustomClear(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   238  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   239  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   240  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   241  DEM_INLINE void Dem_EvtSt_HandleClear_OnlyThisCycleAndReadiness(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   242  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   243      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   244      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   245      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   246      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   247  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   248  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   249      Dem_EvtSt_CustomClear_OnlyThisCycleAndReadiness(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   250  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   251  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   252      /* Hint : As Events mapped to OBD DTCs are not allowed to configure ClearAllowedBehavior as ONLY_THIS_CYCLE_AND_READINESS,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   253       * no additional functions are called when DEM_CFG_OBD == DEM_CFG_OBD_ON */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   254  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   255  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   256  DEM_INLINE void Dem_EvtSt_HandleNewOperationCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   257  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   258      if(!Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   259      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   260          /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   261      if (Dem_ISO14229ByteIsTestCompleteTOC(Dem_AllEventsStatusByte[EventId]) && !Dem_ISO14229ByteIsTestFailedTOC(Dem_AllEventsStatusByte[EventId]))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   262      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   263          Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   264      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   265           */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   266          Dem_AllEventsStatusByte[EventId] &= (Dem_UdsStatusByteType)(~DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   267          Dem_AllEventsStatusByte[EventId] |= DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   268  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   269          Dem_EvtSt_CustomNewOperationCycle(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   270  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   271      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   272  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   273  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   274  DEM_INLINE void Dem_EvtSt_HandleNewFailureCycle(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   275  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   276  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   277      Dem_EvtSetTestFailedTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   278      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   279  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   280      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   281  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   282  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   283  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   284  DEM_INLINE void Dem_EvtSt_HandleIndicatorOn(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   285  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   286      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   287  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   288      Dem_EvtSt_CustomIndicatorOn(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   289  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   290  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   291  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   292  DEM_INLINE void Dem_EvtSt_HandleIndicatorOff(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   293  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   294      Dem_ISO14229ByteSetWarningIndicatorRequested(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   295  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   296      Dem_EvtSt_CustomIndicatorOff(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   297  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   298  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   299  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   300  DEM_INLINE void Dem_EvtSt_HandleDTCSettingOn(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   301  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   302  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   303      Dem_EvtSt_CustomDTCSettingOn(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   304  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   305      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   306  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   307  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   308  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   309  DEM_INLINE void Dem_EvtSt_HandleConfirmation(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   310  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   311      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   312      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   313  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   314      Dem_EvtSt_CustomConfirmation(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   315  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   316  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   317  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   318  DEM_INLINE void Dem_EvtSt_HandleAging(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   319  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   320      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   321      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   322          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   323      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   324      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   325  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   326  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   327      Dem_EvtSt_CustomAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   328  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   329  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   331  DEM_INLINE void Dem_EvtSt_HandleAgingOfConfirmed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   332  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   333  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   334      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   335  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   336  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   337      Dem_EvtSt_CustomAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   338  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   339  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   340  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   341  #if (DEM_CFG_PRJSPECIFICEVENTSTATUSHANDLING == FALSE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   342  DEM_INLINE void Dem_EvtSt_HandleImmediateAging(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   343  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   344      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   345      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   346          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   347      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   348      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   349      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   350  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   351      Dem_EvtSt_CustomSetImmediateAging(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   352  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   353  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   354  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   355  #include "Dem_PrjEventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   356  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   357  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   358  DEM_INLINE void Dem_EvtSt_HandleDisplacement(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   359  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   360      if ( Dem_LibGetParamBool(DEM_CFG_EVMEM_RESET_CONFIRMED_BIT_ON_OVERFLOW) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   361      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   362          if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   363          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   364              Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   365          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   366          Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   367      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   368      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   369  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   370  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   371      Dem_EvtSt_CustomDisplacement(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   372  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   373  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   374  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   375  DEM_INLINE void Dem_EvtSt_HandleEvCombinationReplacement(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   376  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   377      /* this function is used for event combination "on storage" for the event of a dtc, which is replaced by another event of the same dtc */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   378      if ( Dem_LibGetParamBool(DEM_CFG_TFSLC_RESET_AFTER_AGING_AND_DISPLACEMENT) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   379      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   380          Dem_ISO14229ByteSetTestFailedSLC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   381      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   382      Dem_ISO14229ByteSetConfirmedDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   383  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   384      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   385  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   386  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   387      Dem_EvtSt_CustomEvCombinationReplacement(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   388  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   389  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   390  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   391  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   392  DEM_INLINE void Dem_EvtSt_HandlePendingDTC(Dem_EventIdType EventId, Dem_boolean_least setBit)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   393  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   394      Dem_ISO14229ByteSetPendingDTC(&(Dem_AllEventsStatusByte[EventId]), setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   395  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   396      Dem_EvtSt_CustomSetPending(EventId, &(Dem_AllEventsStatusByteCust[EventId]), setBit);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   397  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   398  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   399  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   400  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   401  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   402  /****** ATTENTION: May only be used by consistency checks; otherwise use the HandleXXX functions! ******/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   403  DEM_INLINE Dem_boolean_least Dem_EvtSt_GetTestFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   404  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   405      return Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId]);
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L1702:
	addsc.a	a15,a15,d4,#0
	ld.bu	d15,[a15]
.L645:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
	mov	d0,#0
.L650:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L1703:
	and	d15,#1
.L1704:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L106

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L106:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1705:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L107

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L107:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);      (inlined)
	j	.L108

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }      (inlined)
.L108:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   405      return Dem_ISO14229ByteIsTestFailed(Dem_AllEventsStatusByte[EventId]);      (inlined)
	j	.L109

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   406  }      (inlined)
.L109:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   251      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   252      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   253      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   254          *EventFailed = (boolean)Dem_EvtSt_GetTestFailed(EventId);
	st.b	[a4],d15
.L640:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   255          return E_OK;
	mov	d2,#0
.L1706:
	j	.L110

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   256      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   257  }
.L110:
.L105:
.L102:
.L98:
.L91:
	ret
.L609:
	
__Dem_GetEventFailed_function_end:
	.size	Dem_GetEventFailed,__Dem_GetEventFailed_function_end-Dem_GetEventFailed
.L511:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_GetEventFailed_GeneralEvtInfo',code,cluster('Dem_GetEventFailed_GeneralEvtInfo')
	.sect	'.text.Dem_EventFHandling.Dem_GetEventFailed_GeneralEvtInfo'
	.align	2
	
	.global	Dem_GetEventFailed_GeneralEvtInfo

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   258  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   259  Std_ReturnType Dem_GetEventFailed_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventFailed)
; Function Dem_GetEventFailed_GeneralEvtInfo
.L475:
Dem_GetEventFailed_GeneralEvtInfo:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   260  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   261      return Dem_GetEventFailed(EventId, EventFailed);
	call	Dem_GetEventFailed
.L1538:
	j	.L111

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   262  }
.L111:
	ret
.L1176:
	
__Dem_GetEventFailed_GeneralEvtInfo_function_end:
	.size	Dem_GetEventFailed_GeneralEvtInfo,__Dem_GetEventFailed_GeneralEvtInfo_function_end-Dem_GetEventFailed_GeneralEvtInfo
.L581:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_GetEventFdcThresholdReached',code,cluster('Dem_GetEventFdcThresholdReached')
	.sect	'.text.Dem_EventFHandling.Dem_GetEventFdcThresholdReached'
	.align	2
	
	.global	Dem_GetEventFdcThresholdReached

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   263  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   264  Std_ReturnType Dem_GetEventFdcThresholdReached(Dem_EventIdType EventId, boolean* FdcThresholdReached)
; Function Dem_GetEventFdcThresholdReached
.L477:
Dem_GetEventFdcThresholdReached:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   265  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   266  #if (DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   267      if(Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   268      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   269          return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   270      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   271  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   272      *FdcThresholdReached = (boolean)Dem_EvtGetFDCThresholdReached(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   273      return E_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   274  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   275      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   276      DEM_UNUSED_PARAM(FdcThresholdReached);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   277      return E_NOT_OK;
	mov	d2,#1
.L1778:
	j	.L112

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   278  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   279  }
.L112:
	ret
.L808:
	
__Dem_GetEventFdcThresholdReached_function_end:
	.size	Dem_GetEventFdcThresholdReached,__Dem_GetEventFdcThresholdReached_function_end-Dem_GetEventFdcThresholdReached
.L541:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_PreInitErrorQueue',code,cluster('Dem_PreInitErrorQueue')
	.sect	'.text.Dem_EventFHandling.Dem_PreInitErrorQueue'
	.align	2
	
	.global	Dem_PreInitErrorQueue

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   280  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   281  void Dem_PreInitErrorQueue(void)
; Function Dem_PreInitErrorQueue
.L479:
Dem_PreInitErrorQueue:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   282  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   283      //Initialize the Dem_ErrorQueue ring buffer
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   284      Dem_RingBuffer__Init(Dem_ErrorQueue);
	movh.a	a15,#@his(Dem_ErrorQueue_Handler)
	lea	a15,[a15]@los(Dem_ErrorQueue_Handler)
	mov	d15,#11
	st.h	[a15],d15
	mov	d15,#1
	rsub	d15,d15,#11
	st.h	[a15]2,d15
.L2040:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   285  }
	ret
.L1251:
	
__Dem_PreInitErrorQueue_function_end:
	.size	Dem_PreInitErrorQueue,__Dem_PreInitErrorQueue_function_end-Dem_PreInitErrorQueue
.L596:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_ReportErrorStatusDisableQueue',code,cluster('Dem_ReportErrorStatusDisableQueue')
	.sect	'.text.Dem_EventFHandling.Dem_ReportErrorStatusDisableQueue'
	.align	2
	
	.global	Dem_ReportErrorStatusDisableQueue

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   286  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   287  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   288  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   289  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   290  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   291  DEM_INLINE boolean Dem_CompareFuncForEvents (const Dem_ErrorQueueType *bufferElement, Dem_EventIdType evtId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   292  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   293  	return (bufferElement->EventId == evtId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   294  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   295  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   296  DEM_INLINE void Dem_ReportErrorStatusEnqueue( Dem_EventIdType EventId, Dem_EventStatusType EventStatus,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   297          Dem_DebugDataType debug0, Dem_DebugDataType debug1)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   298  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   299      uint16 loc;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   300      boolean islocationvalid = TRUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   301      boolean isInBuffer;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   302  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   303      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   304  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   305      //Check if the event already exists in the queue or get the next the insertion index
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   306      Dem_RingBufferIndex__ISINBUFFER(Dem_ErrorQueue,Dem_CompareFuncForEvents, EventId, isInBuffer, loc);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   307      if(!isInBuffer)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   308      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   309          if(!Dem_RingBuffer__insert(&Dem_ErrorQueue_Handler, &loc))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   310          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   311              Dem_ErrorQueueControl.overflowcounter++;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   312              DEM_DET(DEM_DET_APIID_REPORERRORSTATUSQUEUE,Dem_ErrorQueueControl.overflowcounter);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   313              islocationvalid = FALSE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   314          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   315      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   316  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   317      if(islocationvalid)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   318      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   319          Dem_ErrorQueue[loc].EventId = EventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   320          Dem_ErrorQueue[loc].EventStatus = EventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   321  #if(DEM_CFG_DEBUGDATA_BEFOREINIT == DEM_CFG_DEBUGDATA_BEFOREINIT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   322          Dem_ErrorQueue[loc].debug0 = debug0;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   323          Dem_ErrorQueue[loc].debug1 = debug1;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   324  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   325          DEM_UNUSED_PARAM(debug0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   326          DEM_UNUSED_PARAM(debug1);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   327  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   328      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   329  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   330  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   331  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   332  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   333  void Dem_ReportErrorStatusDisableQueue(void)
; Function Dem_ReportErrorStatusDisableQueue
.L481:
Dem_ReportErrorStatusDisableQueue:	.type	func
	sub.a	a10,#16
.L1539:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   334  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   335      Dem_ErrorQueueType tmpErrorEvent = DEM_ERRORQUEUETYPE_INIT;
	movh.a	a15,#@his(.1.ini)
	lea	a15,[a15]@los(.1.ini)
	lea	a15,[a15]0
.L1990:
	lea	a2,[a10]0
	mov.a	a4,#2
.L113:
	ld.w	d15,[a15+]
	st.w	[a2+],d15
	loop	a4,.L113
.L1991:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   336      uint16 removedIndex = 0;
	mov	d15,#0
.L1992:
	st.h	[a10]12,d15
.L1993:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   337      boolean eventAvailableForProcessing = TRUE;
	mov	d8,#1
.L1540:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   338  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   339      while (Dem_ErrorQueueControl.isQueueEnabled)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   340      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   341          /*Check whether the event is removed or not from RingBuffer*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   342          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   343          if(Dem_RingBuffer__remove(&Dem_ErrorQueue_Handler,&removedIndex))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   344          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   345              /* an event was removed and now is copied for processing*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   346              DEM_MEMCPY( &tmpErrorEvent, &Dem_ErrorQueue[removedIndex], DEM_SIZEOF_TYPE(Dem_ErrorQueueType) );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   347          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   348          else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   349          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   350              /* there was no further event in the queue (remove failed)*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   351              Dem_ErrorQueueControl.isQueueEnabled = FALSE;
	movh.a	a12,#@his(Dem_ErrorQueueControl)
	lea	a12,[a12]@los(Dem_ErrorQueueControl)
.L1994:
	mov.aa	a13,a12
	add.a	a13,#1
.L1995:
	j	.L114
.L115:
	movh.a	a15,#@his(Dem_ErrorQueue_Handler)
	lea	a15,[a15]@los(Dem_ErrorQueue_Handler)
.L1996:
	lea	a2,[a10]12
.L1185:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     4  #ifndef DEM_RINGBUFFER_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     5  #define DEM_RINGBUFFER_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     7  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     9  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    10     uint16 end;             /* pointer to last buffer-place */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    11     uint16 lastEmptyLoc;    /* last empty buffer location */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    12     uint16 nextEmptyLoc;    /* next empty location */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    13     uint16 RingBuffLocIt;   /* location iterator shall not be used outside the ring buffer as there must be only one iterator at a time*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    14  } Dem_RingBuffer;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    16  /* MR12 RULE 20.7 VIOLATION: the makro is expanded into several commans/lines, this cannot be encapsulated with braces */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    17  #define DEM_DEFINE_RINGBUFFER(DATATYPE, NAME, SIZE)                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    18    static Dem_RingBuffer  NAME##_Handler; \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    19    static DEM_ARRAY_DEFINE(DATATYPE, NAME, SIZE+1u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    22  /*This remove function may be considered in future. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    23  /* #define  Dem_RingBuffer__REMOVE(NAME, REMOVED_DATA)                                      \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    24          ((boolean)Dem_RingBufferIndex__isEmpty (&(NAME##_Handler))) ?                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    25              (                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    26                  FALSE                                                                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    27              )                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    28          :   (                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    29                  (NAME##_Handler).lastEmptyLoc = Dem_RingBuffer__next (&(NAME##_Handler), (NAME##_Handler).lastEmptyLoc),              \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    30                  DEM_MEMCPY(&(REMOVED_DATA), &(NAME[(NAME##_Handler).lastEmptyLoc]), DEM_SIZEOF_VAR(REMOVED_DATA)) != NULL_PTR || TRUE     \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    31              )                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    32          ;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    33  */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    34  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    36  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    37   * initialize the ringbuffer
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    38   * Parameters
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    39   *   ringBufferMemory: RAM-Array for buffer elements
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    40   *   buffersize: number of elements in buffer
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    41   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    42  /* MR12 RULE 20.7 VIOLATION : Macro parameter may not be enclosed in (). */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    43  #define Dem_RingBuffer__Init(NAME)                                      \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    44  {                                                                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    45     NAME##_Handler.end = (uint16)(DEM_SIZEOF_VAR(NAME) / DEM_SIZEOF_VAR(NAME[0])); \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    46     NAME##_Handler.lastEmptyLoc = NAME##_Handler.end - 1;                \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    47  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    49  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    51  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    52   * move position pointer to next position (if new position is larger than end, reset to begin)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    53   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    54  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    55  DEM_INLINE uint16 Dem_RingBuffer__next (const Dem_RingBuffer* rb, uint16 idx)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    56  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    57     uint16 result = idx + 1;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    59     {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    60        result = 0;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    61     }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    65  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    67  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    68   * returns whether the buffer is empty or not
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    69   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    71  DEM_INLINE boolean Dem_RingBuffer__isEmpty (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    72  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    73     return (Dem_RingBuffer__next (rb, rb->lastEmptyLoc) == rb->nextEmptyLoc);
	ld.hu	d0,[a15]2
.L1195:
	add	d0,#1
	extr.u	d0,d0,#0,#16
.L1541:
	ld.hu	d1,[a15]0
.L1997:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
	lt.u	d15,d0,d1
.L1998:
	cmovn	d0,d15,#0

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
.L116:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;      (inlined)
	j	.L117

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }      (inlined)
.L117:
	ld.hu	d1,[a15]4
.L1199:
	eq	d15,d0,d1
.L1200:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    73     return (Dem_RingBuffer__next (rb, rb->lastEmptyLoc) == rb->nextEmptyLoc);      (inlined)
	j	.L118

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    74  }      (inlined)
.L118:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   116     if (Dem_RingBuffer__isEmpty (rb)) return FALSE;      (inlined)
	jeq	d15,#0,.L119
.L1999:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    74  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    76  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    78  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    79   * returns whether the buffer is full or not
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    80   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    81  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    82  DEM_INLINE boolean Dem_RingBuffer__isFull (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    83  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    84     return (rb->lastEmptyLoc == rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    85  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    86  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    88  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    90  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    91   * insert element to ringbuffer (Queue behaviour: FIFO)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    92   * returns TRUE: if value was inserted
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    93   *         FALSE: if buffer was full
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    94   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    96  DEM_INLINE boolean Dem_RingBuffer__insert (Dem_RingBuffer* rb, uint16* insertionIndex)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    97  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    98     if (Dem_RingBuffer__isFull (rb)) return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   100     *insertionIndex = rb->nextEmptyLoc;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   101     rb->nextEmptyLoc = Dem_RingBuffer__next (rb, rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   103     return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   104  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   106  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   108  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   109   * remove element from ringbuffer (Queue behaviour: FIFO)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   110   * returns TRUE: if value was returned
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   111   *         FALSE: if buffer was empty
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   112   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   114  DEM_INLINE boolean Dem_RingBuffer__remove (Dem_RingBuffer* rb, uint16* removedIndex)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   115  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   116     if (Dem_RingBuffer__isEmpty (rb)) return FALSE;
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   116     if (Dem_RingBuffer__isEmpty (rb)) return FALSE;      (inlined)
	j	.L120
.L119:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   118     rb->lastEmptyLoc = Dem_RingBuffer__next (rb, rb->lastEmptyLoc);
	ld.hu	d15,[a15]2
.L1202:
	add	d15,#1
	extr.u	d0,d15,#0,#16
.L1542:
	ld.hu	d15,[a15]0
.L2000:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
	lt.u	d15,d0,d15
.L2001:
	cmovn	d0,d15,#0

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
.L121:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;      (inlined)
	j	.L122

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }      (inlined)
.L122:
	st.h	[a15]2,d0
.L2002:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   119     *removedIndex = rb->lastEmptyLoc;
	st.h	[a2],d0
.L1203:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   121     return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   121     return TRUE;      (inlined)
	j	.L123

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   122  }      (inlined)
.L123:
.L120:
	jeq	d15,#0,.L124
.L2003:
	lea	a4,[a10]0
	ld.hu	d15,[a10]12
	mul	d15,d15,#12
	movh.a	a15,#@his(Dem_ErrorQueue)
	lea	a15,[a15]@los(Dem_ErrorQueue)
	addsc.a	a5,a15,d15,#0
	mov	d4,#12
.L1206:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     3  #ifndef RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     4  #define RBA_DIAGLIB_MEMUTILS_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     7  #include "rba_BswSrv.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	     9  #define RBA_DIAGLIB_MEMCPY(xDest_p, xSrc_pc, numBytes_u32)                  rba_DiagLib_MemUtils_MemCpy((uint8*)(xDest_p),(const uint8*)(xSrc_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    10  #define RBA_DIAGLIB_MEMSET(xDest_p, xPattern_u32, numBytes_u32)             rba_DiagLib_MemUtils_MemSet((uint8*)(xDest_p),(sint32)(xPattern_u32),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    11  #define RBA_DIAGLIB_MEMCMP(xSrc1_pc, xSrc2_pc, numBytes_u32)                rba_DiagLib_MemUtils_MemCmp((const uint8*)(xSrc1_pc),(const uint8*)(xSrc2_pc),(uint32)(numBytes_u32))
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    12  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    13  #define RBA_DIAGLIB_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    14  #include "rba_DiagLib_MemMap.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    15  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    16  /**
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    17   * Utility functions for MEMCPY, MEMSET, MEMCOMP.
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    18   */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    19  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    20  LOCAL_INLINE void rba_DiagLib_MemUtils_MemCpy(uint8* xDest_p, const uint8* xSrc_pc, uint32 numBytes_s32)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    21  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    22      /* MR12 DIR 1.1 VIOLATION: Function rba_BswSrv_MemCopy converts argument 1 and 2 to pointer to void, function has no side effects */
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_MemUtils.h	    23      (void) rba_BswSrv_MemCopy(xDest_p, xSrc_pc, numBytes_s32);
	call	rba_BswSrv_MemCopy
.L1207:
	j	.L125
.L124:
	mov	d15,#0
.L2004:
	st.b	[a13],d15
.L2005:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   352              Dem_ErrorQueueControl.overflowcounter = 0;
	mov	d15,#0
.L2006:
	st.b	[a12],d15
.L2007:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   353  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   354              /*Set the flag to FALSE as there are no further events to be processed*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   355              eventAvailableForProcessing = FALSE;
	mov	d8,#0
.L125:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   356          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   357          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   358  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   359          if(eventAvailableForProcessing && !Dem_EvtIsSuppressed(tmpErrorEvent.EventId))
	jeq	d8,#0,.L126
.L2008:
	ld.hu	d4,[a10]2
.L1215:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L2009:
	addsc.a	a15,a15,d4,#2
.L2010:
	ld.bu	d15,[a15]
.L2011:
	mov	d0,#2
.L1217:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2012:
	and	d15,#1
.L2013:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L127

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L127:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2014:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L128

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L128:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L129

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L129:
	jne	d15,#0,.L130

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L131:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;      (inlined)
	j	.L132

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }      (inlined)
.L132:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   360          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   361              if (Dem_IsOperationCycleStarted(Dem_EvtParam_GetOperationCycleID(tmpErrorEvent.EventId)))
	mov	d0,#0
.L1223:

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     3  #ifndef DEM_OPERATIONCYCLE_H
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     4  #define DEM_OPERATIONCYCLE_H
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     6  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     7  #include "Dem_Cfg_OperationCycle_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    10  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    11  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    13  extern Dem_OperationCycleList Dem_OperationCycleStates;
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    15  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    16  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    18  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    19  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    21  DEM_INLINE boolean Dem_IsOperationCycleStarted(Dem_OperationCycleIdType OperationCycleId)
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    22  {
; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    23      return DEM_OPERATIONCYCLE_ISBITSET(Dem_OperationCycleStates, OperationCycleId);
	movh.a	a15,#@his(Dem_OperationCycleStates)
	lea	a15,[a15]@los(Dem_OperationCycleStates)
	ld.bu	d15,[a15]
.L1226:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2015:
	and	d15,#1
.L2016:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L133

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L133:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2017:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L134

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L134:

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    23      return DEM_OPERATIONCYCLE_ISBITSET(Dem_OperationCycleStates, OperationCycleId);      (inlined)
	j	.L135

; .\BSW\src\BSW\Gen\Dem\src\main\Dem_OperationCycle.h	    24  }      (inlined)
.L135:
	jeq	d15,#0,.L136
.L1224:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   362              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   363  #if(DEM_CFG_DEBUGDATA_BEFOREINIT == DEM_CFG_DEBUGDATA_BEFOREINIT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   364                  Dem_EvtProcessPassedAndFailed (tmpErrorEvent.EventId, tmpErrorEvent.EventStatus
	ld.bu	d5,[a10]
.L2018:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   365                          DEM_DEBUGDATA_PARAM(tmpErrorEvent.debug0,tmpErrorEvent.debug1));
	ld.w	d6,[a10]4
	ld.w	d7,[a10]8
	call	Dem_EvtProcessPassedAndFailed
.L2019:
	j	.L137
.L136:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   366  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   367                  Dem_EvtProcessPassedAndFailed (tmpErrorEvent.EventId, tmpErrorEvent.EventStatus
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   368                          DEM_DEBUGDATA_PARAM(0 ,0));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   369  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   370              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   371              else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   372              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   373                  DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   374                  Dem_EvtRequestResetFailureFilter(tmpErrorEvent.EventId, TRUE);
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();      (inlined)
.L138:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
	movh.a	a15,#@his(Dem_AllEventsResetDebouncerRequested)
	lea	a15,[a15]@los(Dem_AllEventsResetDebouncerRequested)
.L1229:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
	jeq	d15,#0,.L139
.L1233:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d4,#-5
.L1543:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,d4,#31
.L1544:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L2020:
	sh	d1,d1,d15
.L1546:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1545:
	or	d15,d1
	st.w	[a15],d15
.L2021:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;      (inlined)
	j	.L140

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }      (inlined)
.L140:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    65          Dem_BitArraySetBit(buffer, bit_position);      (inlined)
	j	.L141

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
.L139:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    46  DEM_INLINE void Dem_BitArrayClearBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    48      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    49      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d4,#-5
.L1547:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    50      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,d4,#31
.L1549:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    51      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    52              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L2022:
	sh	d1,d1,d15
.L1551:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    54      buffer[element_pos] &= (uint32) ~ mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1550:
	mov	d0,#-1
.L1548:
	xor	d1,d0
.L1552:
	and	d15,d1
	st.w	[a15],d15
.L2023:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    55      return;      (inlined)
	j	.L142

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    56  }      (inlined)
.L142:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    66      } else {      (inlined)
.L141:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    69      return;      (inlined)
	j	.L143

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    70  }      (inlined)
.L143:
.L137:
.L130:
.L126:
.L114:
	ld.bu	d15,[a13]
.L2024:
	jne	d15,#0,.L115
.L2025:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   375                  DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   376              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   377  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   378  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   379              if(Dem_DistMemIsReportFailedNecessary(tmpErrorEvent.EventId, tmpErrorEvent.EventStatus))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   380              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   381  #if(DEM_CFG_DEBUGDATA_BEFOREINIT == DEM_CFG_DEBUGDATA_BEFOREINIT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   382                  Dem_DistMemReportFailed(tmpErrorEvent.EventId
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   383                          DEM_DEBUGDATA_PARAM(tmpErrorEvent.debug0,tmpErrorEvent.debug1));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   384  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   385                  Dem_DistMemReportFailed(tmpErrorEvent.EventId
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   386                          DEM_DEBUGDATA_PARAM(0 ,0));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   387  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   388              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   389  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   390          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   391      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   392  }
	ret
.L1179:
	
__Dem_ReportErrorStatusDisableQueue_function_end:
	.size	Dem_ReportErrorStatusDisableQueue,__Dem_ReportErrorStatusDisableQueue_function_end-Dem_ReportErrorStatusDisableQueue
.L586:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_ReportErrorStatusEnableQueue',code,cluster('Dem_ReportErrorStatusEnableQueue')
	.sect	'.text.Dem_EventFHandling.Dem_ReportErrorStatusEnableQueue'
	.align	2
	
	.global	Dem_ReportErrorStatusEnableQueue

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   393  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   394  void Dem_ReportErrorStatusEnableQueue(void)
; Function Dem_ReportErrorStatusEnableQueue
.L483:
Dem_ReportErrorStatusEnableQueue:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   395  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   396  	if (!Dem_ErrorQueueControl.isQueueEnabled)
	movh.a	a15,#@his(Dem_ErrorQueueControl)
	lea	a15,[a15]@los(Dem_ErrorQueueControl)
.L2030:
	mov.aa	a2,a15
	add.a	a2,#1
	ld.bu	d15,[a2]
.L2031:
	jne	d15,#0,.L144
.L2032:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   397  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   398  		DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   399  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   400  		Dem_ErrorQueueControl.isQueueEnabled = TRUE;
	mov	d15,#1
.L2033:
	st.b	[a2],d15
.L2034:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   401  		Dem_ErrorQueueControl.overflowcounter = 0;
	mov	d15,#0
.L2035:
	st.b	[a15],d15
.L144:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   402  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   403  		DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   404  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   405  }
	ret
.L1250:
	
__Dem_ReportErrorStatusEnableQueue_function_end:
	.size	Dem_ReportErrorStatusEnableQueue,__Dem_ReportErrorStatusEnableQueue_function_end-Dem_ReportErrorStatusEnableQueue
.L591:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_ReportErrorStatusWithEnvData',code,cluster('Dem_ReportErrorStatusWithEnvData')
	.sect	'.text.Dem_EventFHandling.Dem_ReportErrorStatusWithEnvData'
	.align	2
	
	.global	Dem_ReportErrorStatusWithEnvData

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   406  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   407  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   408  /*----------------------------------------------------------------------------*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   409  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   410  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   411  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   412  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   413  void Dem_ReportErrorStatusWithEnvData( Dem_EventIdType EventId,
; Function Dem_ReportErrorStatusWithEnvData
.L485:
Dem_ReportErrorStatusWithEnvData:	.type	func
	sub.a	a10,#8
.L1553:
	mov	d8,d4
.L1558:
	st.b	[a10],d5
	mov	d9,d6
.L1559:
	mov	d10,d7

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   414  		                               Dem_EventStatusType EventStatus,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   415                                         Dem_DebugDataType debug0,
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   416                                         Dem_DebugDataType debug1)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   417  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   418  	uint8_least debAction;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   419  	Dem_boolean_least callSetEventStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   420  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   421      #if (DEM_CFG_TESTMODE_SUPPORT == DEM_CFG_TESTMODE_SUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   422  	/* Decode the Event ID depending on whether Test mode is active/inactive */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   423  	if(Dem_DecodeTestModeEventId(&EventId) == DEM_DECODE_NOT_SUCCESSFULL)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   424  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   425  	    return;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   426  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   427      #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   428  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   429  	DEM_ENTRY_CONDITION_CHECK_VOID_API_PREINIT_EVTIDVALID_EVTAVAILABLE(EventId, DEM_DET_APIID_REPORTERRORSTATUS);
.L145:
.L146:
.L147:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jne	d15,#0,.L148
	mov	d4,#54
.L1554:
	mov	d5,#0
.L1555:
	mov	d6,#15
.L1556:
	mov	d7,#32
.L1557:
	call	Det_ReportError
	j	.L149
.L148:
.L150:
.L151:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d0,#0
.L1798:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d8,#0,.L152
.L1799:
	ge.u	d15,d8,#6
.L1800:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L153:
.L152:
	j	.L154

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L154:
	jne	d0,#0,.L155
.L829:
	mov	d4,#54
.L1560:
	mov	d5,#0
.L1561:
	mov	d6,#15
.L1562:
	mov	d7,#16
.L1563:
	call	Det_ReportError
	j	.L156
.L155:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a12,#@his(Dem_AllEventsState)
	lea	a12,[a12]@los(Dem_AllEventsState)
.L157:
.L158:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	addsc.a	a15,a12,d8,#2
.L1801:
	ld.bu	d0,[a15]
.L1802:
	mov	d1,#2
.L833:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L1803:
	and	d15,d0,#1
.L1804:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L159

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L159:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1805:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L160

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L160:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L161

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L161:
	jeq	d15,#0,.L162
.L831:
	j	.L163
.L162:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   430     /* due to runtime issues during normal operation, the case isInit shall be checked first */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   431     if(!Dem_ErrorQueueControl.isQueueEnabled)
	movh.a	a13,#@his(Dem_ErrorQueueControl)
	lea	a13,[a13]@los(Dem_ErrorQueueControl)
	st.a	[a10]4,a13
.L1806:
	add.a	a13,#1
	ld.bu	d15,[a13]
.L1807:
	jne	d15,#0,.L164
.L1808:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   432     {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   433          #if (DEM_CFG_TESTMODE_SUPPORT == DEM_CFG_TESTMODE_SUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   434          if(Dem_TestModeActive)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   435  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   436  		    Dem_EncodeTestModeEventId(&EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   437  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   438          #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   439          (void)Dem_SetEventStatusWithEnvData (EventId,EventStatus,debug0,debug1);
	ld.bu	d5,[a10]
.L1565:
	mov	d4,d8
	mov	e6,d10,d9
.L1566:
	call	Dem_SetEventStatusWithEnvData
.L1564:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   440          return;
	j	.L165
.L164:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   210  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L166:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   211  	return 0; /* feature deactivated */      (inlined)
	j	.L167

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   212  }      (inlined)
.L167:

; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    38     return TRUE;      (inlined)
	j	.L168

; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    40  }      (inlined)
.L168:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));      (inlined)
	j	.L169

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }      (inlined)
.L169:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   441     } else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   442     {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   443        if(Dem_EvtAllEnableConditionsFulfilled(EventId) &&
	jeq	d15,#0,.L170
.L845:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   282  DEM_INLINE Dem_boolean_least Dem_DtcUsesOrigin (Dem_DtcIdType dtcId, Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   283  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   284      Dem_EventIdType eventId = Dem_DtcIdGetFirstEventId(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   285      return Dem_EventUsesOrigin(eventId, origin);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   288  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   289  /*************************Enable & DiableDTCGroup****************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   290  void Dem_DtcSetDTCSetting (Dem_DtcIdType dtcId, Dem_boolean_least setBit);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   293  DEM_INLINE Dem_boolean_least Dem_DtcIsDTCSettingEnabled(Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   294  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   296  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   297  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   298  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   299  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   300  /*************************CheckDTCSettingStatus****************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   301  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   302  Dem_boolean_least Dem_IsEventEnabledByDtcSetting(Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   304  DEM_INLINE Dem_boolean_least Dem_IsEventReportingEnabledByDtcSetting(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   305  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   306  #if (DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   307      return Dem_IsEventEnabledByDtcSetting(EventId);
	mov	d4,d8
	call	Dem_IsEventEnabledByDtcSetting
.L1567:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   307      return Dem_IsEventEnabledByDtcSetting(EventId);      (inlined)
	j	.L171

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   312  }      (inlined)
.L171:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   444                Dem_IsEventReportingEnabledByDtcSetting(EventId))
	jeq	d2,#0,.L172
.L1809:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   445        {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   446           debAction = Dem_DebCallFilter(EventId, &EventStatus);
	lea	a2,[a10]0
.L850:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     4  #ifndef DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     5  #define DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     8  #include "Dem_DebBase.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     9  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    10  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    11  #include "Dem_Dependencies.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    12  #include "Dem_DisturbanceMemory.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    13  #include "Dem_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    14  #include "Dem_EventFHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    15  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    16  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    19  Std_ReturnType Dem_DebGetDebounceCounter4Calculation (Dem_EventIdType EventId, sint16 *debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    20  sint8 Dem_DebCalculateFaultDetectionCounter(Dem_EventIdType EventId, sint16 debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    21  boolean Dem_DebHandleResetConditions (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    23  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    24  /* Duplicate of Dem_GetDebouncingOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    25  Std_ReturnType Dem_GetDebouncingOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DebouncingStateType* DebouncingState);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    26  /* Duplicate of Dem_GetFaultDetectionCounter to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    27  Std_ReturnType Dem_GetFaultDetectionCounter_GeneralEvtInfo(Dem_EventIdType EventId, sint8* FaultDetectionCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    28  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    31  DEM_INLINE Dem_DebouncedActionType Dem_DebCallFilter (Dem_EventIdType EventId, Dem_EventStatusType* status)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    33  	Dem_DebFilter funcPoint;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    34  	const void* paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    35      uint8_least debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    36      debAction = DEM_DEBACTION_NOOP;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    38  #if (DEM_CFG_DEBMONINTERNAL == DEM_CFG_DEBMONINTERNAL_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    40      if(Dem_EvtParam_GetDebounceMethodIndex(EventId) == DEM_DEBMETH_IDX_MONINTERNAL)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    41      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    42          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREPASSED, DEM_DET_APIID_DEBCALLFILTER, 0);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    43          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREFAILED, DEM_DET_APIID_DEBCALLFILTER, 1);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    45  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    46          if((*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED) || (*status == DEM_EVENT_STATUS_FAILED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    47          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    48              debAction |= DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    49          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    50          else if(*status == DEM_EVENT_STATUS_PASSED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    51          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    52              debAction |= DEM_DEBACTION_RESETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    53          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    54          else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    55          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    56              /* do nothing */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    57          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    59  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    60          if(*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    61          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    62              debAction |= DEM_DEBACTION_ALLOW_BUFFER_INSERT|DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    63          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    64  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    65          return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    66      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    67  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    69  /* Status Changed to Passed in case - in a system which is working fine(Passed reported earlier), if Pre-passed is reported,
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    70  * the status is changed to Passed here to gain run-time Optimization */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    71  #if((DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD != DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    72          (!DEM_CFG_SUSPICIOUS_SUPPORT) && !DEM_CFG_ALTERNATIVEDEBDEFINED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))
	ld.bu	d15,[a2]
.L1810:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))      (inlined)
	jeq	d15,#2,.L173
.L1811:
	jne	d15,#0,.L174
.L173:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
	movh.a	a2,#@his(Dem_AllEventsState8)
	lea	a2,[a2]@los(Dem_AllEventsState8)
.L1812:
	addsc.a	a15,a2,d8,#0
.L1813:
	ld.bu	d15,[a15]
.L1814:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;      (inlined)
	j	.L175

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }      (inlined)
.L175:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \       (inlined)
	jne	d15,#0,.L176
.L871:
	addsc.a	a15,a12,d8,#2
.L1815:
	ld.h	d15,[a15]2
.L1816:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;      (inlined)
	j	.L177

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }      (inlined)
.L177:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))      (inlined)
	jeq	d15,#0,.L178
.L1817:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    74      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    75  		/* Debounce level is compared with zero, as in case of Clear, the debounce level will get reset to zero irrespective of the previous report*/
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    79          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    80  #if (DEM_CFG_DEBARTIMEBASE != DEM_CFG_DEBARTIMEBASE_OFF)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    81              if(Dem_EvtParam_GetDebounceMethodIndex(EventId) != DEM_DEBMETH_IDX_ARTIME)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    83              {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    84                  *status = DEM_EVENT_STATUS_PASSED;
	mov	d15,#0
.L851:
	lea	a15,[a10]0
.L858:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     4  #ifndef DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     5  #define DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     8  #include "Dem_DebBase.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     9  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    10  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    11  #include "Dem_Dependencies.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    12  #include "Dem_DisturbanceMemory.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    13  #include "Dem_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    14  #include "Dem_EventFHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    15  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    16  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    19  Std_ReturnType Dem_DebGetDebounceCounter4Calculation (Dem_EventIdType EventId, sint16 *debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    20  sint8 Dem_DebCalculateFaultDetectionCounter(Dem_EventIdType EventId, sint16 debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    21  boolean Dem_DebHandleResetConditions (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    23  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    24  /* Duplicate of Dem_GetDebouncingOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    25  Std_ReturnType Dem_GetDebouncingOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DebouncingStateType* DebouncingState);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    26  /* Duplicate of Dem_GetFaultDetectionCounter to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    27  Std_ReturnType Dem_GetFaultDetectionCounter_GeneralEvtInfo(Dem_EventIdType EventId, sint8* FaultDetectionCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    28  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    31  DEM_INLINE Dem_DebouncedActionType Dem_DebCallFilter (Dem_EventIdType EventId, Dem_EventStatusType* status)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    33  	Dem_DebFilter funcPoint;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    34  	const void* paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    35      uint8_least debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    36      debAction = DEM_DEBACTION_NOOP;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    38  #if (DEM_CFG_DEBMONINTERNAL == DEM_CFG_DEBMONINTERNAL_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    40      if(Dem_EvtParam_GetDebounceMethodIndex(EventId) == DEM_DEBMETH_IDX_MONINTERNAL)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    41      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    42          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREPASSED, DEM_DET_APIID_DEBCALLFILTER, 0);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    43          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREFAILED, DEM_DET_APIID_DEBCALLFILTER, 1);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    45  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    46          if((*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED) || (*status == DEM_EVENT_STATUS_FAILED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    47          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    48              debAction |= DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    49          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    50          else if(*status == DEM_EVENT_STATUS_PASSED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    51          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    52              debAction |= DEM_DEBACTION_RESETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    53          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    54          else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    55          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    56              /* do nothing */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    57          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    59  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    60          if(*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    61          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    62              debAction |= DEM_DEBACTION_ALLOW_BUFFER_INSERT|DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    63          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    64  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    65          return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    66      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    67  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    69  /* Status Changed to Passed in case - in a system which is working fine(Passed reported earlier), if Pre-passed is reported,
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    70  * the status is changed to Passed here to gain run-time Optimization */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    71  #if((DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD != DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    72          (!DEM_CFG_SUSPICIOUS_SUPPORT) && !DEM_CFG_ALTERNATIVEDEBDEFINED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    74      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    75  		/* Debounce level is compared with zero, as in case of Clear, the debounce level will get reset to zero irrespective of the previous report*/
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    79          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    80  #if (DEM_CFG_DEBARTIMEBASE != DEM_CFG_DEBARTIMEBASE_OFF)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    81              if(Dem_EvtParam_GetDebounceMethodIndex(EventId) != DEM_DEBMETH_IDX_ARTIME)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    83              {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    84                  *status = DEM_EVENT_STATUS_PASSED;
	st.b	[a15],d15
.L1818:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    85              }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    86              return debAction;
	mov	d2,#0
.L1568:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    86              return debAction;      (inlined)
	j	.L179

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \       (inlined)
.L178:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))      (inlined)
.L176:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))      (inlined)
.L174:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L180:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
	mov	d0,#1

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;      (inlined)
	j	.L181

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }      (inlined)
.L181:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    88          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    90  #else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    91      DEM_UNUSED_PARAM(debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    94  	funcPoint = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].funcPointer_Filter;
	movh.a	a2,#@his(Dem_Cfg_DebClasses)
	lea	a2,[a2]@los(Dem_Cfg_DebClasses)
.L1819:
	mul	d15,d0,#20
	addsc.a	a15,a2,d15,#0
.L1820:
	ld.a	a12,[a15]16

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L182:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;      (inlined)
	j	.L183

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }      (inlined)
.L183:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    95  	paramSet = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramSet;
	mul	d15,d15,#20
	addsc.a	a15,a2,d15,#0
.L1821:
	ld.a	a14,[a15]8
.L880:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
	movh.a	a15,#@his(Dem_EvtParam_16)
	lea	a15,[a15]@los(Dem_EvtParam_16)

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);      (inlined)
.L184:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L185:
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;      (inlined)
	j	.L186

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }      (inlined)
.L186:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);
	mul	d15,d15,#20
	addsc.a	a2,a2,d15,#0
	ld.hu	d0,[a2]12

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L187:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
	addsc.a	a2,a15,d8,#1
.L1822:
	ld.hu	d15,[a2]0
.L887:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d1,#1
.L1569:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d15,#-4
.L1823:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d1,#3
.L1570:
	div.u	e2,d15,d1
.L1824:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L188

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L188:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));      (inlined)
	j	.L189

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }      (inlined)
.L189:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);      (inlined)
	jlt.u	d3,d0,.L190
.L885:
	mov	d4,#54
	mov	d5,#0
	mov	d6,#160
	mov	d7,#2
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);      (inlined)
.L190:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L191:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    53  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    54  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    55  LOCAL_INLINE boolean Dem_EvtParam_GetStoreTestFailedToNextOC(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    56  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    57  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    58  	return TRUE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    59  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    60  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    61  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    62  LOCAL_INLINE boolean Dem_EvtParam_GetRequestsWarningIndicator(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    63  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    64  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    65  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    66  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    67  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    68  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    69  LOCAL_INLINE Dem_EventCategoryType Dem_EvtParam_GetCategory(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    70  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    71  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    72  	return 0; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    73  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    74  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    75  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInPrimary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    76  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    77  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    78  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 0);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    79  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    80  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    81  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    82  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInSecondary(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    83  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    84  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    85  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    86  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    87  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    88  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    89  LOCAL_INLINE boolean Dem_EvtParam_GetEventIsStoredInMirror(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    90  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    91  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    92  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    93  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    94  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    95  LOCAL_INLINE boolean Dem_EvtParam_GetAgingAllowed(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    96  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    97  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    98  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 1);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    99  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   100  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   101  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   102  LOCAL_INLINE boolean Dem_EvtParam_GetIsGlobalFDCCallbackConfigured(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   103  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   104  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   105  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   106  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   107  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   108  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   109  LOCAL_INLINE boolean Dem_EvtParam_GetTriggersDataChangedCallback(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   110  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   111  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   112  	return FALSE; /* feature deactivated */
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   113  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   114  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   115  LOCAL_INLINE uint8 Dem_EvtParam_GetSignificance(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   116  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   117  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   118  	return (uint8)(RBA_DIAGLIB_GETSINGLEBIT16(Dem_EvtParam_16[indx].dataDataContainer_2, 2));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   119  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   120  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   121  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   122  LOCAL_INLINE uint8 Dem_EvtParam_GetOperationCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   123  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   124  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   125  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   126  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   127  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   128  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   129  LOCAL_INLINE uint8 Dem_EvtParam_GetAgingCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   130  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   131  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   132  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   133  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   134  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   135  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   136  LOCAL_INLINE uint8 Dem_EvtParam_GetFailureCycleID(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   137  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   138  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   139  	return DemConf_DemOperationCycle_DemOperationCycle_0;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   140  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   141  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   142  LOCAL_INLINE boolean Dem_EvtParam_GetInitialSuppressionStatus(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   143  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   144  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   145  	return RBA_DIAGLIB_ISBITSET16(Dem_EvtParam_16[indx].dataDataContainer_2, 3);
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   146  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   147  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   148  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   149  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceMethodIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   150  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   151  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   152  	return DEM_DEBMETH_IDX_ARCTRBASECLASS;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   153  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   154  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   155  LOCAL_INLINE uint16 Dem_EvtParam_GetDebounceParamSettingIndex(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   156  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   157  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));
	addsc.a	a15,a15,d8,#1
.L1825:
	ld.hu	d15,[a15]0
.L899:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     3  #ifndef RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     4  #define RBA_DIAGLIB_BITS16_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	     9  #define RBA_DIAGLIB_ISBITSET16       rba_DiagLib_Bit16IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT16   rba_DiagLib_Bit16GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    11  #define RBA_DIAGLIB_GETBITS16        rba_DiagLib_Bit16GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT16   rba_DiagLib_Bit16OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS16  rba_DiagLib_Bit16OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    15  LOCAL_INLINE uint16 rba_DiagLib_Bit16Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    17      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    21  LOCAL_INLINE void rba_DiagLib_Bit16SetBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    26  LOCAL_INLINE void rba_DiagLib_Bit16ClearBitMask(uint16 *buffer, uint16 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    28      *buffer &= ((uint16) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    31  LOCAL_INLINE void rba_DiagLib_Bit16MergeBitmask(uint16 *buffer, uint16 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    36  LOCAL_INLINE void rba_DiagLib_Bit16SetBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    38      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    39      *buffer |= ((uint16) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    42  LOCAL_INLINE void rba_DiagLib_Bit16ClearBit(uint16 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    44      uint16 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    45      *buffer &= ((uint16) (~((uint16) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    48  LOCAL_INLINE void rba_DiagLib_Bit16OverwriteBit(uint16 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    52          rba_DiagLib_Bit16SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    56          rba_DiagLib_Bit16ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    60  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetSingleBit(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    62      return (uint16) ((value >> bit_position) & 1u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    64  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    65  LOCAL_INLINE boolean rba_DiagLib_Bit16IsBitSet(uint16 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    66  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    67      return (boolean) (rba_DiagLib_Bit16GetSingleBit(value, bit_position) != 0u);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    68  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    69  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    70  LOCAL_INLINE uint16 rba_DiagLib_Bit16GetBits(uint16 value, uint8 bit_position, uint8 number_of_bits)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    71  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    72      uint16 bit2shift = 1;
	mov	d0,#1
.L1571:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    73      value = value >> bit_position;
	sha	d15,#-4
.L1826:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    74      value = value % ((uint16) (bit2shift << number_of_bits));
	sha	d0,#3
.L1572:
	div.u	e0,d15,d0
.L1827:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    75      return value;      (inlined)
	j	.L192

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits16.h	    76  }      (inlined)
.L192:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   158  	return (uint16)(RBA_DIAGLIB_GETBITS16(Dem_EvtParam_16[indx].dataDataContainer_2, 4, 3));      (inlined)
	j	.L193

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   159  }      (inlined)
.L193:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    97  	return (*funcPoint) (EventId, status, paramSet, Dem_EvtParam_GetDebounceParamSettingIndex(EventId));
	mov	d4,d8
.L859:
	lea	a4,[a10]0
.L860:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     4  #ifndef DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     5  #define DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     8  #include "Dem_DebBase.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     9  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    10  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    11  #include "Dem_Dependencies.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    12  #include "Dem_DisturbanceMemory.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    13  #include "Dem_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    14  #include "Dem_EventFHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    15  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    16  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    19  Std_ReturnType Dem_DebGetDebounceCounter4Calculation (Dem_EventIdType EventId, sint16 *debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    20  sint8 Dem_DebCalculateFaultDetectionCounter(Dem_EventIdType EventId, sint16 debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    21  boolean Dem_DebHandleResetConditions (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    23  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    24  /* Duplicate of Dem_GetDebouncingOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    25  Std_ReturnType Dem_GetDebouncingOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DebouncingStateType* DebouncingState);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    26  /* Duplicate of Dem_GetFaultDetectionCounter to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    27  Std_ReturnType Dem_GetFaultDetectionCounter_GeneralEvtInfo(Dem_EventIdType EventId, sint8* FaultDetectionCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    28  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    31  DEM_INLINE Dem_DebouncedActionType Dem_DebCallFilter (Dem_EventIdType EventId, Dem_EventStatusType* status)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    33  	Dem_DebFilter funcPoint;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    34  	const void* paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    35      uint8_least debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    36      debAction = DEM_DEBACTION_NOOP;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    38  #if (DEM_CFG_DEBMONINTERNAL == DEM_CFG_DEBMONINTERNAL_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    40      if(Dem_EvtParam_GetDebounceMethodIndex(EventId) == DEM_DEBMETH_IDX_MONINTERNAL)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    41      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    42          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREPASSED, DEM_DET_APIID_DEBCALLFILTER, 0);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    43          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREFAILED, DEM_DET_APIID_DEBCALLFILTER, 1);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    45  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    46          if((*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED) || (*status == DEM_EVENT_STATUS_FAILED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    47          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    48              debAction |= DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    49          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    50          else if(*status == DEM_EVENT_STATUS_PASSED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    51          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    52              debAction |= DEM_DEBACTION_RESETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    53          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    54          else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    55          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    56              /* do nothing */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    57          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    59  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    60          if(*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    61          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    62              debAction |= DEM_DEBACTION_ALLOW_BUFFER_INSERT|DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    63          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    64  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    65          return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    66      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    67  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    69  /* Status Changed to Passed in case - in a system which is working fine(Passed reported earlier), if Pre-passed is reported,
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    70  * the status is changed to Passed here to gain run-time Optimization */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    71  #if((DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD != DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    72          (!DEM_CFG_SUSPICIOUS_SUPPORT) && !DEM_CFG_ALTERNATIVEDEBDEFINED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    74      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    75  		/* Debounce level is compared with zero, as in case of Clear, the debounce level will get reset to zero irrespective of the previous report*/
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    79          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    80  #if (DEM_CFG_DEBARTIMEBASE != DEM_CFG_DEBARTIMEBASE_OFF)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    81              if(Dem_EvtParam_GetDebounceMethodIndex(EventId) != DEM_DEBMETH_IDX_ARTIME)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    83              {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    84                  *status = DEM_EVENT_STATUS_PASSED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    85              }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    86              return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    88          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    90  #else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    91      DEM_UNUSED_PARAM(debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    94  	funcPoint = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].funcPointer_Filter;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    95  	paramSet = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    97  	return (*funcPoint) (EventId, status, paramSet, Dem_EvtParam_GetDebounceParamSettingIndex(EventId));
	mov.aa	a5,a14
.L897:
	mov	d5,d1
.L898:
	calli	a12
.L1573:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    97  	return (*funcPoint) (EventId, status, paramSet, Dem_EvtParam_GetDebounceParamSettingIndex(EventId));      (inlined)
	j	.L194

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    98  }      (inlined)
.L194:
.L179:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   447           /*set the last reported event status*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   448           Dem_EvtSetLastReportedEvent (EventId, EventStatus);
	ld.bu	d15,[a10]
.L901:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
	movh.a	a15,#@his(Dem_AllEventsState8)
	lea	a15,[a15]@los(Dem_AllEventsState8)
.L1828:
	addsc.a	a15,a15,d8,#0
.L1829:
	st.b	[a15],d15
.L902:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   449  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   450           if (debAction != DEM_DEBACTION_NOOP)
	jeq	d2,#0,.L195

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   108      DEM_ASSERT_ISLOCKED();      (inlined)
.L196:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     4  #ifndef DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     5  #define DEM_DEB_H
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     8  #include "Dem_DebBase.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	     9  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    10  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    11  #include "Dem_Dependencies.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    12  #include "Dem_DisturbanceMemory.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    13  #include "Dem_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    14  #include "Dem_EventFHandling.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    15  #include "Dem_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    16  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    19  Std_ReturnType Dem_DebGetDebounceCounter4Calculation (Dem_EventIdType EventId, sint16 *debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    20  sint8 Dem_DebCalculateFaultDetectionCounter(Dem_EventIdType EventId, sint16 debounceCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    21  boolean Dem_DebHandleResetConditions (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    23  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    24  /* Duplicate of Dem_GetDebouncingOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    25  Std_ReturnType Dem_GetDebouncingOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DebouncingStateType* DebouncingState);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    26  /* Duplicate of Dem_GetFaultDetectionCounter to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    27  Std_ReturnType Dem_GetFaultDetectionCounter_GeneralEvtInfo(Dem_EventIdType EventId, sint8* FaultDetectionCounter);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    28  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    31  DEM_INLINE Dem_DebouncedActionType Dem_DebCallFilter (Dem_EventIdType EventId, Dem_EventStatusType* status)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    33  	Dem_DebFilter funcPoint;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    34  	const void* paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    35      uint8_least debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    36      debAction = DEM_DEBACTION_NOOP;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    38  #if (DEM_CFG_DEBMONINTERNAL == DEM_CFG_DEBMONINTERNAL_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    40      if(Dem_EvtParam_GetDebounceMethodIndex(EventId) == DEM_DEBMETH_IDX_MONINTERNAL)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    41      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    42          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREPASSED, DEM_DET_APIID_DEBCALLFILTER, 0);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    43          DEM_ASSERT (*status != DEM_EVENT_STATUS_PREFAILED, DEM_DET_APIID_DEBCALLFILTER, 1);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    45  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    46          if((*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED) || (*status == DEM_EVENT_STATUS_FAILED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    47          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    48              debAction |= DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    49          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    50          else if(*status == DEM_EVENT_STATUS_PASSED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    51          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    52              debAction |= DEM_DEBACTION_RESETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    53          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    54          else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    55          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    56              /* do nothing */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    57          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    59  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    60          if(*status == DEM_EVENT_STATUS_FDC_THRESHOLD_REACHED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    61          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    62              debAction |= DEM_DEBACTION_ALLOW_BUFFER_INSERT|DEM_DEBACTION_SETFDCTHRESHOLDREACHED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    63          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    64  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    65          return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    66      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    67  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    68  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    69  /* Status Changed to Passed in case - in a system which is working fine(Passed reported earlier), if Pre-passed is reported,
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    70  * the status is changed to Passed here to gain run-time Optimization */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    71  #if((DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD != DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    72          (!DEM_CFG_SUSPICIOUS_SUPPORT) && !DEM_CFG_ALTERNATIVEDEBDEFINED)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    73      if((*status == DEM_EVENT_STATUS_PREPASSED) || (*status == DEM_EVENT_STATUS_PASSED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    74      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    75  		/* Debounce level is compared with zero, as in case of Clear, the debounce level will get reset to zero irrespective of the previous report*/
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    76          if((Dem_EvtGetLastReportedEvent (EventId) == DEM_EVENT_STATUS_PASSED) && \ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    77                  (Dem_EvtGetDebounceLevel (EventId) != 0 ))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    79          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    80  #if (DEM_CFG_DEBARTIMEBASE != DEM_CFG_DEBARTIMEBASE_OFF)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    81              if(Dem_EvtParam_GetDebounceMethodIndex(EventId) != DEM_DEBMETH_IDX_ARTIME)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    82  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    83              {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    84                  *status = DEM_EVENT_STATUS_PASSED;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    85              }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    86              return debAction;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    88          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    89      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    90  #else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    91      DEM_UNUSED_PARAM(debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    94  	funcPoint = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].funcPointer_Filter;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    95  	paramSet = Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramSet;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    96  	DEM_ASSERT (Dem_EvtParam_GetDebounceParamSettingIndex(EventId) < Dem_Cfg_DebClasses[Dem_EvtParam_GetDebounceMethodIndex(EventId)].paramCount, DEM_DET_APIID_DEBCALLFILTER, 2);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    97  	return (*funcPoint) (EventId, status, paramSet, Dem_EvtParam_GetDebounceParamSettingIndex(EventId));
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   100  /* this split of functionality is supposed as preliminary workaround; a final clean-up (conceptual rework of muticore handling) is planned */
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   101  DEM_INLINE Dem_boolean_least Dem_DebHandleDebounceAction__processBits(Dem_EventIdType EventId, Dem_DebouncedActionType debAction)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   102  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   103      Dem_boolean_least insertToEvBuffer = FALSE;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   105      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   106      DEM_UNUSED_PARAM(debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   108      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   110  #if((DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON) ||\ 
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   111          (DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   113      if( (debAction & DEM_DEBACTION_SETFDCTHRESHOLDREACHED) != 0u )
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   114      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   115  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   116          if((!Dem_EvtGetFDCThresholdReachedTOC(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   117          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   118              //Set the FDC threshold reached flag
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   119              Dem_EvtSetFDCThresholdReachedTOC(EventId,TRUE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   121              if(Dem_OpMoIsInitialized() && ((debAction & DEM_DEBACTION_ALLOW_BUFFER_INSERT) != 0u))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   122              {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   123                  /*  Check the Causality of the event*/
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   124                  if (Dem_StoCoAreAllFulfilled(Dem_EvtParam_GetStorageConditions(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   125                  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   126                      insertToEvBuffer = TRUE;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   127                  }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   128              }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   130          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   131  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   132          Dem_EvtSetFDCThresholdReached(EventId,TRUE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   133      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   134      else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   135      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   136          if((debAction & DEM_DEBACTION_RESETFDCTHRESHOLDREACHED) != 0u )
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   137          {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   138              Dem_EvtSetFDCThresholdReached(EventId,FALSE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   139          }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   140      }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   142  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   144  #if(DEM_CFG_SUSPICIOUS_SUPPORT)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   145     if(((debAction & DEM_DEBACTION_SETSUSPICIOUS) != 0u) && (!Dem_EvtIsSuspicious(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   146     {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   147         Dem_SetEventSuspicion_Internal(EventId,TRUE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   148     }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   149     else
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   150     {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   151        if(((debAction & DEM_DEBACTION_RESETSUSPICIOUS) != 0u) && (Dem_EvtIsSuspicious(EventId)))
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   152        {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   153            Dem_SetEventSuspicion_Internal(EventId,FALSE);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   154        }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   155     }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   156  #endif
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   159     return (insertToEvBuffer);
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   159     return (insertToEvBuffer);      (inlined)
	j	.L197

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   160  }      (inlined)
.L197:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   169      if (insertUnrobustToEvBuffer)      (inlined)
	jeq	d15,#0,.L198
.L1830:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   162  DEM_INLINE void Dem_DebHandleDebounceAction(Dem_EventIdType EventId, Dem_DebouncedActionType debAction, Dem_DebugDataType debug0 ,Dem_DebugDataType debug1)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   163  {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   164      Dem_boolean_least insertUnrobustToEvBuffer;
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   165      DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   166      insertUnrobustToEvBuffer = Dem_DebHandleDebounceAction__processBits(EventId, debAction);
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   167      DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   169      if (insertUnrobustToEvBuffer)
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   170      {
; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   171          (void)Dem_EvBuffInsert(C_EVENTTYPE_UNROBUST, EventId DEM_DEBUGDATA_PARAM(debug0, debug1));
	mov	d4,#7
.L1831:
	mov	d5,d8
.L1575:
	mov	e6,d10,d9
	call	Dem_EvBuffInsert
.L1574:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   171          (void)Dem_EvBuffInsert(C_EVENTTYPE_UNROBUST, EventId DEM_DEBUGDATA_PARAM(debug0, debug1));      (inlined)
	j	.L199

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   169      if (insertUnrobustToEvBuffer)      (inlined)
.L198:

; .\BSW\src\BSW\Gen\Dem\src\deb\Dem_Deb.h	   173      else      (inlined)
.L199:
.L195:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   451           {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   452             Dem_DebHandleDebounceAction(EventId, debAction, debug0, debug1);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   453           }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   454  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   455           if ((EventStatus == DEM_EVENT_STATUS_PASSED) || (EventStatus == DEM_EVENT_STATUS_FAILED))
	ld.bu	d15,[a10]
.L1832:
	jeq	d15,#0,.L200
.L1833:
	ld.bu	d15,[a10]
.L1834:
	jne	d15,#1,.L201
.L200:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   456           {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   457          	 DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   458  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   459              /* insert to FIFO and check preinit-status again => needs to be atomic */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   460              if(Dem_ErrorQueueControl.isQueueEnabled)
	ld.bu	d15,[a13]
.L1835:
	jeq	d15,#0,.L202
.L1836:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   461              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   462              	Dem_ReportErrorStatusEnqueue(EventId, EventStatus, debug0, debug1);
	ld.bu	d11,[a10]
.L924:
	mov	d2,#1

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   303      DEM_ASSERT_ISLOCKED();      (inlined)
.L203:
	mov	d3,#0
.L1577:
	movh.a	a15,#@his(Dem_ErrorQueue_Handler)
	lea	a15,[a15]@los(Dem_ErrorQueue_Handler)
.L938:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     4  #ifndef DEM_RINGBUFFER_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     5  #define DEM_RINGBUFFER_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     7  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     9  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    10     uint16 end;             /* pointer to last buffer-place */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    11     uint16 lastEmptyLoc;    /* last empty buffer location */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    12     uint16 nextEmptyLoc;    /* next empty location */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    13     uint16 RingBuffLocIt;   /* location iterator shall not be used outside the ring buffer as there must be only one iterator at a time*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    14  } Dem_RingBuffer;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    16  /* MR12 RULE 20.7 VIOLATION: the makro is expanded into several commans/lines, this cannot be encapsulated with braces */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    17  #define DEM_DEFINE_RINGBUFFER(DATATYPE, NAME, SIZE)                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    18    static Dem_RingBuffer  NAME##_Handler; \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    19    static DEM_ARRAY_DEFINE(DATATYPE, NAME, SIZE+1u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    22  /*This remove function may be considered in future. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    23  /* #define  Dem_RingBuffer__REMOVE(NAME, REMOVED_DATA)                                      \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    24          ((boolean)Dem_RingBufferIndex__isEmpty (&(NAME##_Handler))) ?                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    25              (                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    26                  FALSE                                                                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    27              )                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    28          :   (                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    29                  (NAME##_Handler).lastEmptyLoc = Dem_RingBuffer__next (&(NAME##_Handler), (NAME##_Handler).lastEmptyLoc),              \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    30                  DEM_MEMCPY(&(REMOVED_DATA), &(NAME[(NAME##_Handler).lastEmptyLoc]), DEM_SIZEOF_VAR(REMOVED_DATA)) != NULL_PTR || TRUE     \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    31              )                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    32          ;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    33  */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    34  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    36  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    37   * initialize the ringbuffer
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    38   * Parameters
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    39   *   ringBufferMemory: RAM-Array for buffer elements
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    40   *   buffersize: number of elements in buffer
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    41   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    42  /* MR12 RULE 20.7 VIOLATION : Macro parameter may not be enclosed in (). */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    43  #define Dem_RingBuffer__Init(NAME)                                      \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    44  {                                                                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    45     NAME##_Handler.end = (uint16)(DEM_SIZEOF_VAR(NAME) / DEM_SIZEOF_VAR(NAME[0])); \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    46     NAME##_Handler.lastEmptyLoc = NAME##_Handler.end - 1;                \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    47  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    49  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    51  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    52   * move position pointer to next position (if new position is larger than end, reset to begin)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    53   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    54  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    55  DEM_INLINE uint16 Dem_RingBuffer__next (const Dem_RingBuffer* rb, uint16 idx)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    56  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    57     uint16 result = idx + 1;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    59     {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    60        result = 0;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    61     }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    65  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    67  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    68   * returns whether the buffer is empty or not
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    69   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    71  DEM_INLINE boolean Dem_RingBuffer__isEmpty (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    72  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    73     return (Dem_RingBuffer__next (rb, rb->lastEmptyLoc) == rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    74  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    76  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    78  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    79   * returns whether the buffer is full or not
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    80   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    81  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    82  DEM_INLINE boolean Dem_RingBuffer__isFull (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    83  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    84     return (rb->lastEmptyLoc == rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    85  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    86  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    88  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    90  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    91   * insert element to ringbuffer (Queue behaviour: FIFO)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    92   * returns TRUE: if value was inserted
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    93   *         FALSE: if buffer was full
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    94   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    96  DEM_INLINE boolean Dem_RingBuffer__insert (Dem_RingBuffer* rb, uint16* insertionIndex)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    97  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    98     if (Dem_RingBuffer__isFull (rb)) return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   100     *insertionIndex = rb->nextEmptyLoc;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   101     rb->nextEmptyLoc = Dem_RingBuffer__next (rb, rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   103     return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   104  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   106  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   108  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   109   * remove element from ringbuffer (Queue behaviour: FIFO)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   110   * returns TRUE: if value was returned
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   111   *         FALSE: if buffer was empty
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   112   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   114  DEM_INLINE boolean Dem_RingBuffer__remove (Dem_RingBuffer* rb, uint16* removedIndex)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   115  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   116     if (Dem_RingBuffer__isEmpty (rb)) return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   118     rb->lastEmptyLoc = Dem_RingBuffer__next (rb, rb->lastEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   119     *removedIndex = rb->lastEmptyLoc;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   121     return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   122  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   124  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   125  /* Iterator Functions for fetching and validating the ring buffer indices */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   127  DEM_INLINE void Dem_RingBuffer__NewIterator (Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   129      rb->RingBuffLocIt = Dem_RingBuffer__next (rb, rb->lastEmptyLoc);
	ld.hu	d0,[a15]2
.L944:
	add	d0,#1
	extr.u	d0,d0,#0,#16
.L1578:
	ld.hu	d1,[a15]0
.L1837:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
	lt.u	d15,d0,d1
.L1838:
	cmovn	d0,d15,#0

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
.L204:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;      (inlined)
	j	.L205

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }      (inlined)
.L205:
	st.h	[a15]6,d0
.L939:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   306      Dem_RingBufferIndex__ISINBUFFER(Dem_ErrorQueue,Dem_CompareFuncForEvents, EventId, isInBuffer, loc);      (inlined)
	j	.L206
.L207:
	ld.hu	d0,[a15]6
	mul	d15,d0,#12
	movh.a	a2,#@his(Dem_ErrorQueue)
	lea	a2,[a2]@los(Dem_ErrorQueue)
	addsc.a	a2,a2,d15,#0
.L952:
	ld.hu	d1,[a2]2
.L1839:
	eq	d15,d1,d8
.L1840:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   293  	return (bufferElement->EventId == evtId);      (inlined)
	j	.L208

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   294  }      (inlined)
.L208:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   306      Dem_RingBufferIndex__ISINBUFFER(Dem_ErrorQueue,Dem_CompareFuncForEvents, EventId, isInBuffer, loc);      (inlined)
	jeq	d15,#0,.L209
.L1841:
	st.h	[a10]2,d0
	mov	d3,#1

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   306      Dem_RingBufferIndex__ISINBUFFER(Dem_ErrorQueue,Dem_CompareFuncForEvents, EventId, isInBuffer, loc);      (inlined)
	j	.L210
.L209:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     4  #ifndef DEM_RINGBUFFER_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     5  #define DEM_RINGBUFFER_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     7  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     9  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    10     uint16 end;             /* pointer to last buffer-place */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    11     uint16 lastEmptyLoc;    /* last empty buffer location */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    12     uint16 nextEmptyLoc;    /* next empty location */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    13     uint16 RingBuffLocIt;   /* location iterator shall not be used outside the ring buffer as there must be only one iterator at a time*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    14  } Dem_RingBuffer;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    16  /* MR12 RULE 20.7 VIOLATION: the makro is expanded into several commans/lines, this cannot be encapsulated with braces */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    17  #define DEM_DEFINE_RINGBUFFER(DATATYPE, NAME, SIZE)                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    18    static Dem_RingBuffer  NAME##_Handler; \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    19    static DEM_ARRAY_DEFINE(DATATYPE, NAME, SIZE+1u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    22  /*This remove function may be considered in future. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    23  /* #define  Dem_RingBuffer__REMOVE(NAME, REMOVED_DATA)                                      \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    24          ((boolean)Dem_RingBufferIndex__isEmpty (&(NAME##_Handler))) ?                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    25              (                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    26                  FALSE                                                                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    27              )                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    28          :   (                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    29                  (NAME##_Handler).lastEmptyLoc = Dem_RingBuffer__next (&(NAME##_Handler), (NAME##_Handler).lastEmptyLoc),              \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    30                  DEM_MEMCPY(&(REMOVED_DATA), &(NAME[(NAME##_Handler).lastEmptyLoc]), DEM_SIZEOF_VAR(REMOVED_DATA)) != NULL_PTR || TRUE     \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    31              )                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    32          ;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    33  */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    34  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    36  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    37   * initialize the ringbuffer
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    38   * Parameters
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    39   *   ringBufferMemory: RAM-Array for buffer elements
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    40   *   buffersize: number of elements in buffer
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    41   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    42  /* MR12 RULE 20.7 VIOLATION : Macro parameter may not be enclosed in (). */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    43  #define Dem_RingBuffer__Init(NAME)                                      \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    44  {                                                                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    45     NAME##_Handler.end = (uint16)(DEM_SIZEOF_VAR(NAME) / DEM_SIZEOF_VAR(NAME[0])); \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    46     NAME##_Handler.lastEmptyLoc = NAME##_Handler.end - 1;                \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    47  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    49  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    51  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    52   * move position pointer to next position (if new position is larger than end, reset to begin)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    53   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    54  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    55  DEM_INLINE uint16 Dem_RingBuffer__next (const Dem_RingBuffer* rb, uint16 idx)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    56  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    57     uint16 result = idx + 1;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    59     {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    60        result = 0;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    61     }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    65  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    67  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    68   * returns whether the buffer is empty or not
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    69   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    71  DEM_INLINE boolean Dem_RingBuffer__isEmpty (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    72  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    73     return (Dem_RingBuffer__next (rb, rb->lastEmptyLoc) == rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    74  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    76  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    78  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    79   * returns whether the buffer is full or not
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    80   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    81  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    82  DEM_INLINE boolean Dem_RingBuffer__isFull (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    83  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    84     return (rb->lastEmptyLoc == rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    85  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    86  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    88  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    90  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    91   * insert element to ringbuffer (Queue behaviour: FIFO)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    92   * returns TRUE: if value was inserted
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    93   *         FALSE: if buffer was full
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    94   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    96  DEM_INLINE boolean Dem_RingBuffer__insert (Dem_RingBuffer* rb, uint16* insertionIndex)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    97  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    98     if (Dem_RingBuffer__isFull (rb)) return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   100     *insertionIndex = rb->nextEmptyLoc;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   101     rb->nextEmptyLoc = Dem_RingBuffer__next (rb, rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   103     return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   104  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   106  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   108  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   109   * remove element from ringbuffer (Queue behaviour: FIFO)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   110   * returns TRUE: if value was returned
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   111   *         FALSE: if buffer was empty
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   112   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   114  DEM_INLINE boolean Dem_RingBuffer__remove (Dem_RingBuffer* rb, uint16* removedIndex)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   115  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   116     if (Dem_RingBuffer__isEmpty (rb)) return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   118     rb->lastEmptyLoc = Dem_RingBuffer__next (rb, rb->lastEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   119     *removedIndex = rb->lastEmptyLoc;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   121     return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   122  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   124  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   125  /* Iterator Functions for fetching and validating the ring buffer indices */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   127  DEM_INLINE void Dem_RingBuffer__NewIterator (Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   128  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   129      rb->RingBuffLocIt = Dem_RingBuffer__next (rb, rb->lastEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   130  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   131  DEM_INLINE boolean Dem_RingBuffer__IteratorIsValid (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   132  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   133      return (rb->RingBuffLocIt != rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   135  DEM_INLINE void Dem_RingBuffer__IteratorNext (Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   136  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   137      rb->RingBuffLocIt = Dem_RingBuffer__next(rb, rb->RingBuffLocIt);
	ld.hu	d0,[a15]6
.L962:
	add	d0,#1
	extr.u	d0,d0,#0,#16
.L1579:
	ld.hu	d15,[a15]0
.L1842:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
	lt.u	d15,d0,d15
.L1843:
	cmovn	d0,d15,#0

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
.L211:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;      (inlined)
	j	.L212

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }      (inlined)
.L212:
	st.h	[a15]6,d0

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   306      Dem_RingBufferIndex__ISINBUFFER(Dem_ErrorQueue,Dem_CompareFuncForEvents, EventId, isInBuffer, loc);      (inlined)
.L206:
	ld.hu	d15,[a15]6
.L1844:
	ld.hu	d0,[a15]4
.L1845:
	ne	d15,d15,d0
.L1846:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   133      return (rb->RingBuffLocIt != rb->nextEmptyLoc);      (inlined)
	j	.L213

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   134  }      (inlined)
.L213:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   306      Dem_RingBufferIndex__ISINBUFFER(Dem_ErrorQueue,Dem_CompareFuncForEvents, EventId, isInBuffer, loc);      (inlined)
	jne	d15,#0,.L207
.L210:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   307      if(!isInBuffer)      (inlined)
	jne	d3,#0,.L214
.L1847:
	lea	a2,[a10]2
.L969:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     4  #ifndef DEM_RINGBUFFER_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     5  #define DEM_RINGBUFFER_LIB_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     7  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	     9  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    10     uint16 end;             /* pointer to last buffer-place */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    11     uint16 lastEmptyLoc;    /* last empty buffer location */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    12     uint16 nextEmptyLoc;    /* next empty location */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    13     uint16 RingBuffLocIt;   /* location iterator shall not be used outside the ring buffer as there must be only one iterator at a time*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    14  } Dem_RingBuffer;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    15  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    16  /* MR12 RULE 20.7 VIOLATION: the makro is expanded into several commans/lines, this cannot be encapsulated with braces */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    17  #define DEM_DEFINE_RINGBUFFER(DATATYPE, NAME, SIZE)                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    18    static Dem_RingBuffer  NAME##_Handler; \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    19    static DEM_ARRAY_DEFINE(DATATYPE, NAME, SIZE+1u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    22  /*This remove function may be considered in future. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    23  /* #define  Dem_RingBuffer__REMOVE(NAME, REMOVED_DATA)                                      \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    24          ((boolean)Dem_RingBufferIndex__isEmpty (&(NAME##_Handler))) ?                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    25              (                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    26                  FALSE                                                                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    27              )                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    28          :   (                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    29                  (NAME##_Handler).lastEmptyLoc = Dem_RingBuffer__next (&(NAME##_Handler), (NAME##_Handler).lastEmptyLoc),              \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    30                  DEM_MEMCPY(&(REMOVED_DATA), &(NAME[(NAME##_Handler).lastEmptyLoc]), DEM_SIZEOF_VAR(REMOVED_DATA)) != NULL_PTR || TRUE     \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    31              )                                                                               \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    32          ;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    33  */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    34  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    36  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    37   * initialize the ringbuffer
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    38   * Parameters
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    39   *   ringBufferMemory: RAM-Array for buffer elements
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    40   *   buffersize: number of elements in buffer
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    41   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    42  /* MR12 RULE 20.7 VIOLATION : Macro parameter may not be enclosed in (). */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    43  #define Dem_RingBuffer__Init(NAME)                                      \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    44  {                                                                       \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    45     NAME##_Handler.end = (uint16)(DEM_SIZEOF_VAR(NAME) / DEM_SIZEOF_VAR(NAME[0])); \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    46     NAME##_Handler.lastEmptyLoc = NAME##_Handler.end - 1;                \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    47  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    48  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    49  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    51  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    52   * move position pointer to next position (if new position is larger than end, reset to begin)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    53   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    54  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    55  DEM_INLINE uint16 Dem_RingBuffer__next (const Dem_RingBuffer* rb, uint16 idx)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    56  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    57     uint16 result = idx + 1;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    59     {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    60        result = 0;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    61     }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    65  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    66  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    67  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    68   * returns whether the buffer is empty or not
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    69   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    71  DEM_INLINE boolean Dem_RingBuffer__isEmpty (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    72  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    73     return (Dem_RingBuffer__next (rb, rb->lastEmptyLoc) == rb->nextEmptyLoc);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    74  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    76  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    78  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    79   * returns whether the buffer is full or not
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    80   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    81  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    82  DEM_INLINE boolean Dem_RingBuffer__isFull (const Dem_RingBuffer* rb)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    83  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    84     return (rb->lastEmptyLoc == rb->nextEmptyLoc);
	ld.hu	d15,[a15]2
.L1848:
	ld.hu	d0,[a15]4
.L1849:
	eq	d15,d15,d0
.L1850:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    84     return (rb->lastEmptyLoc == rb->nextEmptyLoc);      (inlined)
	j	.L215

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    85  }      (inlined)
.L215:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    98     if (Dem_RingBuffer__isFull (rb)) return FALSE;      (inlined)
	jeq	d15,#0,.L216
.L1851:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    85  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    86  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    88  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    90  /**
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    91   * insert element to ringbuffer (Queue behaviour: FIFO)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    92   * returns TRUE: if value was inserted
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    93   *         FALSE: if buffer was full
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    94   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    95  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    96  DEM_INLINE boolean Dem_RingBuffer__insert (Dem_RingBuffer* rb, uint16* insertionIndex)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    97  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    98     if (Dem_RingBuffer__isFull (rb)) return FALSE;
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    98     if (Dem_RingBuffer__isFull (rb)) return FALSE;      (inlined)
	j	.L217
.L216:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   100     *insertionIndex = rb->nextEmptyLoc;
	ld.hu	d15,[a15]4
.L1852:
	st.h	[a2],d15
.L979:
	add	d15,#1
	extr.u	d0,d15,#0,#16
.L1580:
	ld.hu	d15,[a15]0
.L1853:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
	lt.u	d15,d0,d15
.L1854:
	cmovn	d0,d15,#0

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    58     if (result >= rb->end)      (inlined)
.L218:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    62     return result;      (inlined)
	j	.L219

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	    63  }      (inlined)
.L219:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   101     rb->nextEmptyLoc = Dem_RingBuffer__next (rb, rb->nextEmptyLoc);
	st.h	[a15]4,d0
.L980:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   103     return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   103     return TRUE;      (inlined)
	j	.L220

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_RingBuffer.h	   104  }      (inlined)
.L220:
.L217:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   309          if(!Dem_RingBuffer__insert(&Dem_ErrorQueue_Handler, &loc))      (inlined)
	jne	d15,#0,.L221
.L1855:
	ld.a	a15,[a10]4
	ld.bu	d15,[a15]
.L1856:
	add	d15,#1
	st.b	[a15],d15
.L1857:
	mov	d4,#54
	mov	d5,#0
	mov	d6,#210
	ld.bu	d7,[a15]
	call	Det_ReportError
.L1576:
	mov	d2,#0

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   309          if(!Dem_RingBuffer__insert(&Dem_ErrorQueue_Handler, &loc))      (inlined)
.L221:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   307      if(!isInBuffer)      (inlined)
.L214:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   317      if(islocationvalid)      (inlined)
	jeq	d2,#0,.L222
.L1858:
	ld.hu	d15,[a10]2
.L1859:
	mul	d15,d15,#12
.L1860:
	movh.a	a15,#@his(Dem_ErrorQueue)
	lea	a15,[a15]@los(Dem_ErrorQueue)
.L1861:
	addsc.a	a15,a15,d15,#0
.L1862:
	st.h	[a15]2,d8
.L1863:
	st.b	[a15],d11
.L1864:
	st.w	[a15]4,d9
.L1865:
	st.w	[a15]8,d10

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   317      if(islocationvalid)      (inlined)
.L222:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   463  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   464              	/* do not call Dem_DistMemReportFailed as the NVM probably was not read yet */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   465              	callSetEventStatus = FALSE;
	mov	d15,#0
.L1581:
	j	.L223
.L202:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   466              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   467              else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   468              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   469              	callSetEventStatus = TRUE;
	mov	d15,#1
.L223:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   470              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   471  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   472          	 DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   473  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   474          	 if (callSetEventStatus)
	jeq	d15,#0,.L224
.L1866:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   475          	 {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   476          		 (void)Dem_SetEventStatusWithEnvData (EventId,EventStatus,debug0,debug1);
	ld.bu	d5,[a10]
.L1867:
	mov	d4,d8
.L1582:
	mov	e6,d10,d9
	call	Dem_SetEventStatusWithEnvData
.L224:
.L201:
.L172:
.L170:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   477          	 }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   478           }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   479        }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   480     }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   481  }
.L165:
.L163:
.L156:
.L149:
	ret
.L820:
	
__Dem_ReportErrorStatusWithEnvData_function_end:
	.size	Dem_ReportErrorStatusWithEnvData,__Dem_ReportErrorStatusWithEnvData_function_end-Dem_ReportErrorStatusWithEnvData
.L561:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_ResetEventStatus',code,cluster('Dem_ResetEventStatus')
	.sect	'.text.Dem_EventFHandling.Dem_ResetEventStatus'
	.align	2
	
	.global	Dem_ResetEventStatus

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   482  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   483  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   484  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   485  Std_ReturnType Dem_ResetEventStatus(Dem_EventIdType EventId)
; Function Dem_ResetEventStatus
.L487:
Dem_ResetEventStatus:	.type	func
	sub.a	a10,#8
.L1583:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   486  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   487  	Dem_UdsStatusByteType isoByteOld, isoByteNew, evtStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   488  	Dem_UdsStatusByteType dtcStByteOld = 0;
	mov	d15,#0
.L1711:
	st.b	[a10]1,d15

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   489  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   490  #if(DEM_CFG_LOCK_ALLFAILUREINFO == DEM_CFG_LOCK_ALLFAILUREINFO_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   491  	if (Dem_OpMoIsAllFailureInfoLocked())
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   492  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   493  		return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   494  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   495  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   496  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   497  	DEM_ENTRY_CONDITION_CHECK_INIT_EVTIDVALID_EVTAVAILABLE(EventId, DEM_DET_APIID_RESETEVENTSTATUS,E_NOT_OK);
.L225:
.L226:
.L227:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jeq	d15,#2,.L228
	mov	d4,#54
.L1584:
	mov	d5,#0
	mov	d6,#5
	mov	d7,#32
	call	Det_ReportError
	mov	d2,#1
	j	.L229
.L228:
.L230:
.L231:
.L232:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L1712:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L233
.L1713:
	ge.u	d0,d4,#6
.L1714:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L234:
.L233:
	j	.L235

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L235:
	jne	d15,#0,.L236
.L657:
	mov	d4,#54
.L1585:
	mov	d5,#0
	mov	d6,#5
	mov	d7,#16
	call	Det_ReportError
	mov	d2,#1
	j	.L237
.L236:
.L238:
.L239:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L1715:
	addsc.a	a15,a15,d4,#2
.L1716:
	ld.bu	d15,[a15]
.L1717:
	mov	d0,#2
.L661:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L1718:
	and	d15,#1
.L1719:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L240

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L240:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1720:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L241

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L241:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L242

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L242:
	jeq	d15,#0,.L243
.L659:
	mov	d2,#1
	j	.L244
.L243:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	movh.a	a5,#@his(Dem_AllEventsStatusByte)
	lea	a5,[a5]@los(Dem_AllEventsStatusByte)
.L1721:
	addsc.a	a15,a5,d4,#0
	ld.bu	d15,[a15]
.L1586:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L245

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L245:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
	mov	d0,#6
.L674:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L1587:
	and	d15,#1
.L1722:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L246

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L246:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1723:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L247

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L247:
	eq	d15,d15,#0
.L1724:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);      (inlined)
	j	.L248

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }      (inlined)
.L248:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   498  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   499  	evtStatus = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   500  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   501  	if(Dem_ISO14229ByteIsTestCompleteTOC(evtStatus))
	jeq	d15,#0,.L249
.L1725:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   502  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   503  	    return E_NOT_OK;
	mov	d2,#1
.L1726:
	j	.L250
.L249:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   210  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L251:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   211  	return 0; /* feature deactivated */      (inlined)
	j	.L252

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   212  }      (inlined)
.L252:

; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     4  #ifndef DEM_ENABLECONDITION_H
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     5  #define DEM_ENABLECONDITION_H
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	     9  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    12  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    14  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    15     Dem_EnCoList isActive;
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    16  } Dem_EnCoState;
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    18  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    19  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    20  extern Dem_EnCoState Dem_EnCoAllStates;
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    21  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    22  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    24  #endif
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    25  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    26  /* Dem449: If one enable condition is not fulfilled, all status reports from SW-Cs
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    27     (Dem_SetEventStatus and Dem_ResetEventStatus) and BSW modules (Dem_ReportErrorStatus)
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    28     for those events being assigned to this condition shall be ignored (no change of
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    29     UDS DTC status byte) by the DEM.
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    30   */
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    32  DEM_INLINE Dem_boolean_least Dem_EnCoAreAllFulfilled (Dem_EnCoList enableConditionList)
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    33  {
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    34  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    35     return ((enableConditionList & Dem_EnCoAllStates.isActive) == enableConditionList);
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    36  #else
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    37     DEM_UNUSED_PARAM(enableConditionList);
; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    38     return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    38     return TRUE;      (inlined)
	j	.L253

; .\BSW\src\BSW\Gen\Dem\src\enco\Dem_EnableCondition.h	    40  }      (inlined)
.L253:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   504  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   505  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   506  	if (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)))
	jeq	d15,#0,.L254
.L1727:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   507  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   508  		DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   509  		Dem_StatusChange_GetOldStatus(EventId, &isoByteOld, &dtcStByteOld);
	lea	a15,[a10]0
.L1728:
	lea	a2,[a10]1
.L684:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	addsc.a	a4,a5,d4,#0
	ld.bu	d15,[a4]
.L1729:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L255

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L255:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     3  #ifndef DEM_PRV_CALLEVTSTCHNGDCBK_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     4  #define DEM_PRV_CALLEVTSTCHNGDCBK_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     6  #if(DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     7  #include "FiM.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     8  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     9  #if (DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    10  #include "Dlt.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    11  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    12  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    13  #include "Dem_Cfg_EventsCallback.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    14  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    17  DEM_INLINE void Dem_CallBackTriggerOnEventStatus (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    18  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    19  		Dem_UdsStatusByteType EventStatusOld,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    20  		Dem_UdsStatusByteType EventStatusNew,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    21  		Dem_UdsStatusByteType dtcStByteOld
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    22  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    23  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    24  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    25      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    26      Dem_UdsStatusByteType dtcStByteNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    27      Dem_DtcCodeType dtcCode;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    28  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    31      DEM_UNUSED_PARAM(dtcStByteOld);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    32      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    33      DEM_UNUSED_PARAM(EventStatusOld);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    34      DEM_UNUSED_PARAM(EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    35  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    36  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    37      Dem_CallEventStatusChangedCallBack(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    38  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    39  #if ( DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    40      Dlt_DemTriggerOnEventStatus(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    41  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    42  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    43      if ( Dem_EventIdIsDtcAssigned(EventId) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    44      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    45          dtcId = Dem_DtcIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    46          if ( Dem_DtcIsSupported(dtcId) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    47          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    48              dtcStByteNew = (uint8)(Dem_DtcStatusByteRetrieve (dtcId) & DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    49              if (dtcStByteNew != dtcStByteOld)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    50              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    51                  dtcCode = Dem_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    52                  Dem_CallbackDTCStatusChangedIndication( dtcCode, dtcStByteOld, dtcStByteNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    53              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    54          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    55      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    56  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    57  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    59  DEM_INLINE void Dem_StatusChange_GetOldStatus (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    60  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    61  		Dem_UdsStatusByteType *isoByteOld,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    62  		Dem_UdsStatusByteType *dtcStByteOld
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    63  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    64  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    65  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    66  	Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    67  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    68  	*(isoByteOld) = Dem_EvtGetIsoByte(EventId);
	st.b	[a15],d15
.L1730:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    69      *dtcStByteOld = 0;
	mov	d15,#0
.L1731:
	st.b	[a2],d15
.L685:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   510  		Dem_EvtRequestResetFailureFilter(EventId, TRUE);
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();      (inlined)
.L256:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
	movh.a	a15,#@his(Dem_AllEventsResetDebouncerRequested)
	lea	a15,[a15]@los(Dem_AllEventsResetDebouncerRequested)
.L700:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
	jeq	d15,#0,.L257
.L709:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d4,#-5
.L1588:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,d4,#31
.L1589:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L1732:
	sh	d1,d1,d15
.L1591:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1590:
	or	d15,d1
	st.w	[a15],d15
.L1733:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;      (inlined)
	j	.L258

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }      (inlined)
.L258:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    65          Dem_BitArraySetBit(buffer, bit_position);      (inlined)
	j	.L259

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
.L257:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    46  DEM_INLINE void Dem_BitArrayClearBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    48      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    49      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d4,#-5
.L1592:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    50      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,d4,#31
.L1594:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    51      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    52              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L1734:
	sh	d1,d1,d15
.L1596:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    54      buffer[element_pos] &= (uint32) ~ mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1595:
	mov	d0,#-1
.L1593:
	xor	d1,d0
.L1597:
	and	d15,d1
	st.w	[a15],d15
.L1735:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    55      return;      (inlined)
	j	.L260

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    56  }      (inlined)
.L260:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    66      } else {      (inlined)
.L259:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    69      return;      (inlined)
	j	.L261

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    70  }      (inlined)
.L261:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   511  		Dem_EvtSetLastReportedEvent(EventId, DEM_EVENT_STATUS_INVALIDREPORT);
	mov	d15,#255
.L734:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
	movh.a	a15,#@his(Dem_AllEventsState8)
	lea	a15,[a15]@los(Dem_AllEventsState8)
.L1736:
	addsc.a	a15,a15,d4,#0
.L1737:
	st.b	[a15],d15
.L735:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   180  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   181  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   182      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   183  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   184  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   185  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   186      Dem_EvtSt_CustomPassed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   187  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   188  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   189  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   190  DEM_INLINE void Dem_EvtSt_HandleResetEventStatus(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   191  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   192      Dem_ISO14229ByteSetTestFailed(&(Dem_AllEventsStatusByte[EventId]), FALSE);
	addsc.a	a15,a5,d4,#0
.L1738:
	mov	d15,#0
.L746:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
	mov	d0,#0
.L753:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L262
.L762:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1598:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L1739:
	sha	d15,d15,d0
.L1599:
	or	d1,d15
	st.b	[a15],d1
.L763:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L263

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L262:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1600:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L1740:
	sha	d15,d15,d0
.L1601:
	xor	d15,d15,#255
.L1741:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L263:
	addsc.a	a15,a5,d4,#0
	ld.bu	d15,[a15]
.L1602:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L264

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L264:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   512  		Dem_EvtSt_HandleResetEventStatus(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   513  		isoByteNew = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   514  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   515  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   516  		DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   517  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   518  		Dem_TriggerOn_EventStatusChange(EventId,isoByteOld,isoByteNew,dtcStByteOld);
	ld.bu	d0,[a10]
.L778:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
	jeq	d15,d0,.L265

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();      (inlined)
.L266:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
.L265:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   519  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   520  		return E_OK;
	mov	d2,#0
.L1742:
	j	.L267
.L254:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   521  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   522  	else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   523  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   524  		return E_NOT_OK;
	mov	d2,#1
.L1743:
	j	.L268

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   525  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   526  }
.L268:
.L267:
.L250:
.L244:
.L237:
.L229:
	ret
.L651:
	
__Dem_ResetEventStatus_function_end:
	.size	Dem_ResetEventStatus,__Dem_ResetEventStatus_function_end-Dem_ResetEventStatus
.L516:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_EvtProcessPassedAndFailed',code,cluster('Dem_EvtProcessPassedAndFailed')
	.sect	'.text.Dem_EventFHandling.Dem_EvtProcessPassedAndFailed'
	.align	2
	
	.global	Dem_EvtProcessPassedAndFailed

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   527  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   528  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   529  DEM_INLINE void Dem_SetHistoryStatus (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   530  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   531  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   532      if (Dem_HistoryStatusAllowed && (!Dem_EvtGetHistoryStatus(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   533      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   534          DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   535          Dem_EvtSetHistoryStatus(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   536          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   537      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   538  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   539      DEM_UNUSED_PARAM (EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   540  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   541  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   542  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   543  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   544  void Dem_EvtProcessPassedAndFailed (Dem_EventIdType EventId, Dem_EventStatusType EventStatus
; Function Dem_EvtProcessPassedAndFailed
.L489:
Dem_EvtProcessPassedAndFailed:	.type	func
	sub.a	a10,#8
.L1603:
	mov	d12,d4
.L1605:
	mov	e10,d6,d7
.L2045:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   545                        DEM_DEBUGDATA_PARAM(Dem_DebugDataType debug0_ul, Dem_DebugDataType debug1_ul))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   546  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   547      Dem_ComponentIdType NodeId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   548      Dem_boolean_least reportIsFailed = FALSE;
	mov	d8,#0
.L1606:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   549      boolean oldCausal, newCausal, storageFiltered;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   550  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   551      Dem_EvBuffEventType eventType = C_EVENTTYPE_NOEVENT;
	mov	d9,#0
.L1608:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   552  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   553      Dem_UdsStatusByteType isoByteOld, isoByteNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   554      Dem_UdsStatusByteType dtcStByteOld = 0;
	mov	d15,#0
.L2046:
	st.b	[a10]1,d15
.L2047:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   555  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   556      if (EventStatus != DEM_EVENT_STATUS_PASSED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   557      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   558          reportIsFailed = TRUE;
	seln	d8,d5,d8,#1
.L269:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   559          Dem_SetHistoryStatus(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   560      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   561  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   562  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   563      if (   (!Dem_EvtSt_IsUpdateNeeded(EventId, reportIsFailed))
	mov	d15,d12
.L1267:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
	mov	d2,#0
.L1274:
	movh.a	a12,#@his(Dem_AllEventsStatusByte)
	lea	a12,[a12]@los(Dem_AllEventsStatusByte)
.L2048:
	addsc.a	a15,a12,d15,#0
	ld.bu	d0,[a15]
.L2049:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L270

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L270:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
	mov	d1,#0
.L1278:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L2050:
	and	d0,d0,#1
.L2051:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L271

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L271:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d0,d0,#0
.L2052:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L272

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L272:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);      (inlined)
	j	.L273

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }      (inlined)
.L273:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)      (inlined)
	jne	d0,d8,.L274
.L1276:
	addsc.a	a15,a12,d15,#0
	ld.bu	d0,[a15]
.L2053:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L275

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L275:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
	mov	d1,#6
.L1284:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d0,d0,d1
.L2054:
	and	d15,d0,#1
.L2055:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L276

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L276:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2056:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L277

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L277:
	eq	d15,d15,#0
.L2057:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);      (inlined)
	j	.L278

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }      (inlined)
.L278:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))      (inlined)
	jne	d15,#0,.L279
.L274:
	mov	d2,#1

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))      (inlined)
.L279:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (      (inlined)
	j	.L280

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }      (inlined)
.L280:
	jne	d2,#0,.L281
.L1268:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;      (inlined)
	j	.L282

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }      (inlined)
.L282:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   564          && (!Dem_EvtIsStorageFiltered(EventId))
	jne	d15,#0,.L283
.L1290:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;      (inlined)
	j	.L284

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }      (inlined)
.L284:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   565          && (!Dem_EvtIsRecheckedAndWaitingForMonResult(EventId))
	jne	d15,#0,.L285
.L1295:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   632  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   633  /*------NextReportRelevantForMemories----------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   634  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   635  DEM_INLINE Dem_boolean_least Dem_EvtIsNextReportRelevantForMemories (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   636  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L2058:
	addsc.a	a15,a15,d12,#2
.L2059:
	ld.bu	d15,[a15]
.L2060:
	mov	d0,#7
.L1302:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2061:
	and	d15,#1
.L2062:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L286

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L286:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2063:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L287

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L287:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);      (inlined)
	j	.L288

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   638  }      (inlined)
.L288:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   566          && (!Dem_EvtIsNextReportRelevantForMemories(EventId))
	jne	d15,#0,.L289
.L1296:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   567         )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   568      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   569          /* no status change will happen and no further storage will be triggered */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   570          return;
	j	.L290
.L289:
.L285:
.L283:
.L281:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   632  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   633  /*------NextReportRelevantForMemories----------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   634  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   635  DEM_INLINE Dem_boolean_least Dem_EvtIsNextReportRelevantForMemories (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   636  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);
	movh.a	a13,#@his(Dem_AllEventsState)
	lea	a13,[a13]@los(Dem_AllEventsState)
.L1301:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
	mov	d13,#0

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;      (inlined)
	j	.L291

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }      (inlined)
.L291:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   571      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   572  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   573  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   574      NodeId = Dem_NodeIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   575      Dem_StatusChange_GetOldStatus(EventId, &isoByteOld, &dtcStByteOld);
	mov	d15,d12
.L2064:
	lea	a15,[a10]0
.L2065:
	lea	a2,[a10]1
.L1307:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	addsc.a	a4,a12,d15,#0
	ld.bu	d15,[a4]
.L2066:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L292

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L292:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     3  #ifndef DEM_PRV_CALLEVTSTCHNGDCBK_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     4  #define DEM_PRV_CALLEVTSTCHNGDCBK_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     5  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     6  #if(DEM_CFG_TRIGGERFIMREPORTS == DEM_CFG_TRIGGERFIMREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     7  #include "FiM.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     8  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	     9  #if (DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    10  #include "Dlt.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    11  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    12  #include "Dem_DTCs.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    13  #include "Dem_Cfg_EventsCallback.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    14  #include "Dem_EventStatus.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    17  DEM_INLINE void Dem_CallBackTriggerOnEventStatus (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    18  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    19  		Dem_UdsStatusByteType EventStatusOld,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    20  		Dem_UdsStatusByteType EventStatusNew,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    21  		Dem_UdsStatusByteType dtcStByteOld
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    22  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    23  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    24  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    25      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    26      Dem_UdsStatusByteType dtcStByteNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    27      Dem_DtcCodeType dtcCode;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    28  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    31      DEM_UNUSED_PARAM(dtcStByteOld);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    32      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    33      DEM_UNUSED_PARAM(EventStatusOld);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    34      DEM_UNUSED_PARAM(EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    35  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    36  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    37      Dem_CallEventStatusChangedCallBack(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    38  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    39  #if ( DEM_CFG_TRIGGERDLTREPORTS == DEM_CFG_TRIGGERDLTREPORTS_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    40      Dlt_DemTriggerOnEventStatus(EventId, EventStatusOld, EventStatusNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    41  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    42  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    43      if ( Dem_EventIdIsDtcAssigned(EventId) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    44      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    45          dtcId = Dem_DtcIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    46          if ( Dem_DtcIsSupported(dtcId) )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    47          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    48              dtcStByteNew = (uint8)(Dem_DtcStatusByteRetrieve (dtcId) & DEM_CFG_DTCSTATUS_AVAILABILITYMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    49              if (dtcStByteNew != dtcStByteOld)
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    50              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    51                  dtcCode = Dem_GetDtcCode(dtcId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    52                  Dem_CallbackDTCStatusChangedIndication( dtcCode, dtcStByteOld, dtcStByteNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    53              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    54          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    55      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    56  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    57  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    58  
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    59  DEM_INLINE void Dem_StatusChange_GetOldStatus (
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    60  		Dem_EventIdType EventId,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    61  		Dem_UdsStatusByteType *isoByteOld,
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    62  		Dem_UdsStatusByteType *dtcStByteOld
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    63  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    64  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    65  #if ( DEM_CFG_DTC_STATUSCHANGEDCALLBACK == DEM_CFG_DTC_STATUSCHANGEDCALLBACK_ON )
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    66  	Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    67  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    68  	*(isoByteOld) = Dem_EvtGetIsoByte(EventId);
	st.b	[a15],d15
.L2067:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    69      *dtcStByteOld = 0;
	mov	d15,#0
.L2068:
	st.b	[a2],d15
.L1308:
	addsc.a	a15,a12,d12,#0
	ld.bu	d15,[a15]
.L2069:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L293

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L293:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   576  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   577      /* TODO: move hint to uml diagram
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   578       * HINT: CausalFailure influences failure recovery.
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   579       *       If causalfailure is not set, an unrecoverable failure may be healed
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   580       */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   581  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   582      /*********************************************************
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   583       * isobyte-calculation and status change notification
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   584       */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   585  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   586      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   587  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   588      isoByteOld = Dem_EvtGetIsoByte(EventId);  // capture oldstatus again to have it atomic; repeated dtc status capture too expensive
	st.b	[a10],d15
.L1312:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	addsc.a	a15,a13,d12,#2
.L2070:
	ld.bu	d15,[a15]
.L2071:
	mov	d0,#2
.L1315:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2072:
	and	d15,#1
.L2073:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L294

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L294:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2074:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L295

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L295:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L296

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L296:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   589  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   590      /* check event suppression here again to avoid race-conditions to SetEventSuppression */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   591      if (!Dem_EvtIsSuppressed(EventId))
	jne	d15,#0,.L297
.L1313:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   592      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   593          if (reportIsFailed)
	jeq	d8,#0,.L298
.L1317:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
	addsc.a	a15,a12,d12,#0
.L2075:
	mov	d15,#1
.L1321:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
	mov	d0,#0
.L1324:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L299
.L1328:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1609:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L2076:
	sha	d15,d15,d0
.L1610:
	or	d1,d15
	st.b	[a15],d1
.L1329:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L300

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L299:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1611:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L2077:
	sha	d15,d15,d0
.L1612:
	xor	d15,d15,#255
.L2078:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L300:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
	mov	d15,#1
.L1337:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
	mov	d0,#1
.L1343:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L301
.L1344:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1613:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L2079:
	sha	d15,d15,d0
.L1614:
	or	d1,d15
	st.b	[a15],d1
.L1345:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L302

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L301:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1615:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L2080:
	sha	d15,d15,d0
.L1616:
	xor	d15,d15,#255
.L2081:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L302:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
	mov	d15,#1
.L1349:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
	mov	d0,#5
.L1355:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L303
.L1356:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1617:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L2082:
	sha	d15,d15,d0
.L1618:
	or	d1,d15
	st.b	[a15],d1
.L1357:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L304

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L303:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1619:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L2083:
	sha	d15,d15,d0
.L1620:
	xor	d15,d15,#255
.L2084:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L304:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
	mov	d15,#1
.L1361:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
	mov	d0,#6
.L2085:
	eq	d15,d15,#0
.L1367:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L305
.L1368:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1621:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L2086:
	sha	d15,d15,d0
.L1622:
	or	d1,d15
	st.b	[a15],d1
.L1369:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L306

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L305:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1623:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L2087:
	sha	d15,d15,d0
.L1624:
	xor	d15,d15,#255
.L2088:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L306:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
	mov	d15,#1
.L1373:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   217  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   221  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   223      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC, !setOrReset);
	mov	d0,#4
.L2089:
	eq	d15,d15,#0
.L1379:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L307
.L1380:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1625:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L2090:
	sha	d15,d15,d0
.L1626:
	or	d1,d15
	st.b	[a15],d1
.L1381:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L308

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L307:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1627:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L2091:
	sha	d15,d15,d0
.L1628:
	xor	d15,d15,#255
.L2092:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L308:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   594          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   595              Dem_EvtSt_HandleFailed(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   596  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   597              Dem_SetIndicatorActivation(EventId,isoByteOld,Dem_EvtGetIsoByte(EventId));
.L309:
	j	.L310
.L298:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   598          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   599          else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   600          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   601              if (Dem_EvtIsRecoverable(EventId))
	mov	d4,d12
	call	Dem_EvtIsRecoverable
.L1604:
	jeq	d2,#0,.L311
.L1385:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    46  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    47  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetCustIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    48  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    49      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    50  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    51  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    52  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    53  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    54  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    55  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    56  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    57  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    58  #include "Dem_CustomStatusByte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    59  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    60  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    61  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    62  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    63  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    64  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    65  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    66  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    67  #define DEM_STATUSBYTE_EVENT_UNAVAILABLE                   (0x00)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    68  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_SETMASK          (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    69  #define DEM_STATUSBYTE_NEW_OPERATIONCYCLE_CLEARMASK        (DEM_ISO14229_BM_TESTFAILED_TOC)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    70  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    71  #define DEM_INIT_ISOBITS_CLEARMASK									(DEM_ISO14229_BM_TESTFAILED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    72  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    73  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    74  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    75  void Dem_EventStatusInitCheckNvM(void);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    76  void Dem_ClearEvent(Dem_EventIdType eventId, boolean ClearFully);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    77  void Dem_EvtAdvanceOperationCycle(Dem_OperationCycleList operationCycleList);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    78  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    79  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    80  /* Duplicate of Dem_GetEventStatus to make it also available in the GeneralDiagnosticInfo RTE interface */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    81  Std_ReturnType Dem_GetEventStatus_GeneralEvtInfo(Dem_EventIdType EventId, Dem_UdsStatusByteType* EventStatusExtended);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    82  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    83  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    84  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    85  DEM_INLINE void Dem_InitEventStatusTestFailed(void)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    86  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    87  #if (!DEM_CFG_EVMEM_STORAGE_TESTFAILED_SUPPORTED)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    88  	Dem_EventIdIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    89  	Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    90  	Dem_UdsStatusByteType statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    91  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    92  	for (Dem_EventIdIteratorNew(&eventIt); Dem_EventIdIteratorIsValid(&eventIt); Dem_EventIdIteratorNext(&eventIt))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    93  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    94  		eventId = Dem_EventIdIteratorCurrent(&eventIt);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    95  		statusNew = Dem_EvtGetIsoByte(eventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    96  		if (!Dem_EvtParam_GetStoreTestFailedToNextOC(eventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    97  		{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    98  			statusNew &= (Dem_UdsStatusByteType)(~DEM_INIT_ISOBITS_CLEARMASK);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    99  		}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   100  		Dem_AllEventsStatusByte[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   101  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   102  		Dem_AllEventsStatusByteCust[eventId] = statusNew;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   103  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   104  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   105  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   106  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   107  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   108  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   109  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte4DtcCalculation (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   110  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   111  #if !DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   112      return Dem_AllEventsStatusByte[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   113  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   114      return Dem_AllEventsStatusByteCust[EventId];
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   115  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   116  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   117  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   118  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   119  /*
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   120   * Called in Dem_EvtProcessPassedAndFailed() to check whether the reported status would change the event status information
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   121   */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   122  DEM_INLINE Dem_boolean_least Dem_EvtSt_IsUpdateNeeded(Dem_EventIdType EventId, Dem_boolean_least reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   123  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   124      return (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   125             (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   126          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   127  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   128  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   129          || (reportIsFailed && !Dem_EvtGetTestFailedTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   130          || (!Dem_EvtGetTestCompleteTFCSincePreinit(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   131  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   132  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   133  #if (DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   134          || (Dem_ISO14229ByteIsTestFailed(Dem_EvtGetCustIsoByte(EventId)) != reportIsFailed)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   135          || (!Dem_ISO14229ByteIsTestCompleteTOC(Dem_EvtGetCustIsoByte(EventId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   136  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   137      );
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   138  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   139  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   140  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   141  DEM_INLINE void Dem_EvtSt_HandleInitialization (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   142  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   143      Dem_AllEventsStatusByte[EventId] = DEM_ISO14229BYTE_INITVALUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   144  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   145      /* We don't need to reset Test*TFCSincePreinit here because it is already properly initialized by static
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   146       * initialization with zeros on ECU startup */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   147  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   148  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   149      Dem_EvtSt_CustomInitialization(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   150  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   151  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   152  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   153  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   154  DEM_INLINE void Dem_EvtSt_HandleFailed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   155  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   156      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   157      Dem_ISO14229ByteSetTestFailedTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   158      Dem_ISO14229ByteSetTestFailedSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   159      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   160      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   161      /* only valid with failurecycle=operationcycle
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   162      Dem_ISO14229ByteSetPendingDTC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   163      */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   164  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   165  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   166      Dem_EvtSetTestFailedTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   167      Dem_EvtSetTestCompleteTFCSincePreinit(EventId, TRUE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   168  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   169  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   170  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   171      Dem_EvtSt_CustomFailed(EventId, &(Dem_AllEventsStatusByteCust[EventId]));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   172  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   173  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   174  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   175  DEM_INLINE void Dem_EvtSt_HandlePassed(Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   176  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   177      Dem_ISO14229ByteSetTestFailed (&(Dem_AllEventsStatusByte[EventId]), FALSE);
	addsc.a	a15,a12,d12,#0
.L2093:
	mov	d15,#0
.L1389:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
	mov	d0,#0
.L1390:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L312
.L1391:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1629:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L2094:
	sha	d15,d15,d0
.L1630:
	or	d1,d15
	st.b	[a15],d1
.L1392:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L313

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L312:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1631:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L2095:
	sha	d15,d15,d0
.L1632:
	xor	d15,d15,#255
.L2096:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L313:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   178      Dem_ISO14229ByteSetTestCompleteTOC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
	mov	d15,#1
.L1395:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
	mov	d0,#6
.L2097:
	eq	d15,d15,#0
.L1396:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L314
.L1397:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1633:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L2098:
	sha	d15,d15,d0
.L1634:
	or	d1,d15
	st.b	[a15],d1
.L1398:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L315

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L314:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1635:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L2099:
	sha	d15,d15,d0
.L1636:
	xor	d15,d15,#255
.L2100:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L315:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	   179      Dem_ISO14229ByteSetTestCompleteSLC (&(Dem_AllEventsStatusByte[EventId]), TRUE);
	mov	d15,#1
.L1401:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   181  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   183  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   184  /* set methods */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   186  DEM_INLINE void Dem_ISO14229ByteSetTestFailed (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   188      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   189  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   193  DEM_INLINE void Dem_ISO14229ByteSetTestFailedTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   195      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   199  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   200  DEM_INLINE void Dem_ISO14229ByteSetTestFailedSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   201  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   202      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTFAILED_SLC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   203  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   205  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   207  DEM_INLINE void Dem_ISO14229ByteSetTestNotCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   209      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   213  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   214  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteTOC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   215  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   216      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC, !setOrReset);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   217  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   220  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   221  DEM_INLINE void Dem_ISO14229ByteSetTestCompleteSLC (uint8 *self, Dem_boolean_least setOrReset)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   222  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   223      rba_DiagLib_Bit8OverwriteBit (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC, !setOrReset);
	mov	d0,#4
.L2101:
	eq	d15,d15,#0
.L1402:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
	jeq	d15,#0,.L316
.L1403:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
	mov	d15,#1
.L1637:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
	ld.bu	d1,[a15]
.L2102:
	sha	d15,d15,d0
.L1638:
	or	d1,d15
	st.b	[a15],d1
.L1404:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);      (inlined)
	j	.L317

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)      (inlined)
.L316:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
	mov	d15,#1
.L1639:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
	ld.bu	d1,[a15]
.L2103:
	sha	d15,d15,d0
.L1640:
	xor	d15,d15,#255
.L2104:
	and	d1,d15
	st.b	[a15],d1

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else      (inlined)
.L317:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   602              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   603                  Dem_EvtSt_HandlePassed(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   604                  Dem_SetIndicatorDeActivation(EventId, isoByteOld, Dem_EvtGetIsoByte(EventId));
.L318:
.L311:
.L310:
	j	.L319
.L297:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   605              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   606          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   607      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   608      else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   609      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   610          DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   611          return;
	j	.L320
.L319:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	addsc.a	a15,a12,d12,#0
	ld.bu	d0,[a15]
.L1641:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L321

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L321:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   612      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   613  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   614      isoByteNew = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   615      //Dem_EvtOverwriteFailedCompleteAndWIR(EventId, isoByteNew);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   616  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   617      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   618  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   619      Dem_TriggerOn_EventStatusChange(EventId,isoByteOld,isoByteNew,dtcStByteOld);
	ld.bu	d15,[a10]
.L1407:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
	jeq	d15,d0,.L322

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    30      DEM_ASSERT_ISNOTLOCKED();      (inlined)
.L323:

; BSW\src\BSW\Gen\Dem\src\event\Dem_Prv_CallEvtStChngdCbk.h	    91      if ( isoByteNew != isoByteOld )      (inlined)
.L322:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   620  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   621      if (    reportIsFailed
	jeq	d8,#0,.L324
.L1413:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
	addsc.a	a15,a13,d12,#2
.L2105:
	ld.bu	d15,[a15]
.L2106:
	mov	d1,#0
.L1417:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d1,#0
	sha	d15,d15,d1
.L2107:
	and	d15,#1
.L2108:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L325

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L325:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2109:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L326

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L326:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);      (inlined)
	j	.L327

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }      (inlined)
.L327:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   622           && Dem_EvtIsCausal(EventId)
	jeq	d15,#0,.L328

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   203  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L329:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   204  	return 0; /* feature deactivated */      (inlined)
	j	.L330

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   205  }      (inlined)
.L330:

; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     4  #ifndef DEM_STORAGECONDITION_H
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     5  #define DEM_STORAGECONDITION_H
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     8  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     9  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    11  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    12  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    15  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    18  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    19     Dem_StoCoList isActive;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    20     Dem_StoCoList isReplacementEventRequested;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    21     Dem_StoCoList isReplacementEventStored;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    23  #if (DEM_CFG_DEBUGDATA != DEM_CFG_DEBUGDATA_OFF)
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    24     Dem_EventIdType eventId[DEM_STORAGECONDITION_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    25     Dem_DebugDataType debug1[DEM_STORAGECONDITION_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    26  #endif
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    27  } Dem_StoCoState;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    30  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    31     Dem_EventIdType replacementEvent[DEM_STORAGECONDITION_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    32  } Dem_StoCoParam;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    34  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    37  extern Dem_StoCoState Dem_StoCoAllStates;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    39  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    51  /*** INTERNAL FUNCTIONS *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    53  DEM_INLINE boolean Dem_StoCoAreAllFulfilled(Dem_StoCoList storageConditionList)
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    55  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    56     return ((storageConditionList & Dem_StoCoAllStates.isActive) == storageConditionList);
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    57  #else
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    58     DEM_UNUSED_PARAM(storageConditionList);
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    59     return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    59     return TRUE;      (inlined)
	j	.L331

; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    61  }      (inlined)
.L331:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   623           && !Dem_StoCoAreAllFulfilled(Dem_EvtParam_GetStorageConditions(EventId))
	jne	d15,#0,.L332
.L2110:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   624         )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   625      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   626          /* Do not consider failure report if monitoring already is causal and currently
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   627           * storageconditions are not fulfilled;     Do consider reset-fault   => CSCRM00213362
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   628           */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   629          return;
	j	.L333
.L332:
.L328:
.L324:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	addsc.a	a15,a12,d12,#0
	ld.bu	d15,[a15]
.L2111:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L334

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L334:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   630      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   631  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   632  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   633      /*********************************************************
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   634       * failure dependency related calculation
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   635       */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   636  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   637      DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   638      if (isoByteNew == Dem_EvtGetIsoByte(EventId)) /* consider multitasking: event might be cleared inbetween */
	jne	d15,d0,.L335
.L2112:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   639      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   640  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   641          if (reportIsFailed)
	jeq	d8,#0,.L336
.L1426:

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     3  #ifndef DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     4  #define DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     8  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     9  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    10  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    11  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    15  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    18  #define DEM_NODE_INFINITE_RECOVERIES  255
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    19  #define DEM_NODE_NO_RECOVERIES          0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    21  #define DEM_NODESTATUS_FAILED                   0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    22  #define DEM_NODESTATUS_SUSPICIOUS               1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    23  #define DEM_NODESTATUS_NOTINIT                  2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    24  #define DEM_NODESTATUS_NOTAVAILABLE             3
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    25  #define DEM_NODESTATUS_FAILEDFILTERED           4
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    26  #define DEM_NODESTATUS_FAILEDNOTRECOVERABLE     5
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    27  #define DEM_NODESTATUS_PENDING                  6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    29  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    30  #define DEM_NODESTATUS_COUNT                    7
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    31  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    32  #define DEM_NODESTATUS_COUNT                    6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    33  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    35  #define DEM_NODESTATUS__NODEMASK               ((uint8)0x80)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    36  #define DEM_NODESTATUS__ANCESTORMASK           ((uint8)0x7F)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    39  DEM_INLINE void Dem_NodeStatusSet(uint8 *status)            { (*status) |= DEM_NODESTATUS__NODEMASK;  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    40  DEM_INLINE void Dem_NodeStatusReset(uint8 *status)          { (*status) &= (uint8)~DEM_NODESTATUS__NODEMASK; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    41  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsSet(uint8 status)  { return ((status) & DEM_NODESTATUS__NODEMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    42  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsAnyAncestorSet (uint8 status) { return ((status) & DEM_NODESTATUS__ANCESTORMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    45  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    46  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    47  	uint8 status[DEM_NODESTATUS_COUNT];
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    48  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    49  	uint8 performedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    51  	uint8 stateFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    52  } Dem_NodeState;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    54  #define DEM_NODE_STATEFLAG_RECHECKONCLEAR    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    55  #define DEM_NODE_STATEFLAG_HASCAUSALFAULT    1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    56  #define DEM_NODE_STATEFLAG_RECOVERYBLOCKED    2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    59  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    61  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    62  	uint8 allowedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    63  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    64  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    65  	uint8 nodeFailedCallbackIdx;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    66  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    67  	uint8 paramFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    68  } Dem_NodeParam;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    70  typedef Std_ReturnType (*Dem_NodeFailedCallbackType)(boolean testFailed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    73  #define DEM_NODE_PARAMFLAG_IGNOREPRIORITY    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    75  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    76  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    77  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    78  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    79  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    80  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    81  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    83  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    86  #define DEM_NODES_INIT(ALLOWEDRECOVERIES,IGNORES_PRIO,NODEFAILEDCALLBACK)        \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    87      {                                              			  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    88  		DEM_NODES_INIT_ALLOWEDRECOVERIES(ALLOWEDRECOVERIES)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    89  		DEM_NODES_INIT_NODEFAILEDCALLBACK(NODEFAILEDCALLBACK)  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    90  		((IGNORES_PRIO) << DEM_NODE_PARAMFLAG_IGNOREPRIORITY)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    91      }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    92  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    95  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    96  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    98  DEM_ARRAY_DECLARE(      Dem_NodeState, Dem_AllNodesState, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   100  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   101  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   105  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   106  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   108  DEM_ARRAY_DECLARE_CONST(Dem_NodeParam, Dem_AllNodesParam, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   109  DEM_ARRAY_DECLARE_CONST(Dem_NodeFailedCallbackType, Dem_NodeFailedCallbacks, DEM_CFG_NODEFAILEDCALLBACK_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   111  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   112  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   115  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   116  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   117  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   119  void Dem_SetNodeStatus (const Dem_ComponentIdType NodeId, uint8 statusIndex);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   121  Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   123  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   124  Dem_boolean_least Dem_Dependencies_CheckEventIsCausalPending(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   125  void Dem_Dependencies_SetNodePending(Dem_EventIdType EventId , Dem_boolean_least setBit);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   126  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   129  /*************   Status Querries   ***************/
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   130  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   131  DEM_INLINE boolean Dem_NodeIsFailed(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   132  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   133  	return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   136  DEM_INLINE boolean Dem_NodeIsFailedItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   138  	return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   142  DEM_INLINE boolean Dem_NodeIsSuspicious(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   144     return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   145  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   146  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   147  DEM_INLINE boolean Dem_NodeIsSuspiciousItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   148  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   149     return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   150  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   152  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   153  DEM_INLINE boolean Dem_NodeIsFailedFilteredItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   154  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   155     return (Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDFILTERED]));
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   156  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   159  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   160  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   161      return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   162  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   164  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverableItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   166      return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   170  DEM_INLINE boolean Dem_NodeIsAvailable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   172  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTAVAILABLE] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   176  DEM_INLINE boolean Dem_NodeIsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   178  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   179  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   181  DEM_INLINE boolean Dem_NodeAreAncestorsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   183  	return !Dem_NodeStatusIsAnyAncestorSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   186  DEM_INLINE boolean Dem_NodeIsRestrictedUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   188  	return (   (Dem_NodeIsInitialized(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   189  			&& (Dem_NodeIsAvailable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   190  			&& (!Dem_NodeIsFailed(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   191  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   194  DEM_INLINE boolean Dem_NodeIsUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   195  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   196  	return (   (Dem_NodeIsRestrictedUsable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   197  			&& (!Dem_NodeIsSuspicious(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   198  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   199  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   200  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   202  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   203  DEM_INLINE boolean Dem_NodeRecoveryAllowed (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   204  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   205      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   207      return (TRUE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   208  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   209              && (    (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   210                   || (DEM_NODE_INFINITE_RECOVERIES == Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   211                 )
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   213  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   214             );
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   217  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   218  DEM_INLINE void Dem_NodeCallFailedCallback (Dem_ComponentIdType NodeId, boolean failed)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   219  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   220  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   221  	if (Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx != 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   222  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   223  		(Dem_NodeFailedCallbacks[Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx])(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   224  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   225  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   226  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   227  	DEM_UNUSED_PARAM(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   228  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   229  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   232  void Dem_Dependencies_SetNodeFailed(Dem_ComponentIdType NodeId, boolean EventIsCausal, boolean EventStorageFiltered, boolean EventIsRecoverable);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   233  void Dem_Dependencies_ResetNodeFailed(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   234  void Dem_Dependencies_ResetNodeFailedFiltered(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   235  void Dem_Dependencies_ResetNodeFailedNotRecoverable(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   237  void Dem_NodeSetSuspicious(Dem_ComponentIdType NodeId, Dem_boolean_least suspicious);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   238  void Dem_NodeSetHasCausalFault (const Dem_ComponentIdType NodeId, Dem_boolean_least causalFault);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   240  void Dem_NodeSetAvailable(Dem_ComponentIdType ComponentId, boolean AvailableStatus);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   242  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   243  DEM_INLINE void Dem_NodeSetRecovered(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   244  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   245  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   246  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   247  	if (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   248  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   249  		Dem_AllNodesState[NodeId].performedRecoveries++;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   250  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   251  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   252  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   253  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   254  DEM_INLINE void Dem_NodeSetRecheckOnClear (Dem_ComponentIdType NodeId, Dem_boolean_least newRecheckOnClear)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   256      rba_DiagLib_Bit8OverwriteBit(&(Dem_AllNodesState[NodeId].stateFlags), DEM_NODE_STATEFLAG_RECHECKONCLEAR, newRecheckOnClear);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   257  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   258  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   259  DEM_INLINE Dem_boolean_least Dem_NodeIsRecheckOnClear (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   260  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   261  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesState[NodeId].stateFlags, DEM_NODE_STATEFLAG_RECHECKONCLEAR);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   262  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   263  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   264  DEM_INLINE Dem_boolean_least Dem_NodeIgnorePriority(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   265  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   266  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesParam[NodeId].paramFlags, DEM_NODE_PARAMFLAG_IGNOREPRIORITY);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   267  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   268  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   269  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   271  void Dem_NodeRecheckOnClear (void);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   272  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   273  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   274  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   276  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   278  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   279  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   282  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   283  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   284  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   285  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   286  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   288  DEM_INLINE Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   289  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   290      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   291      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   292      return TRUE;
	mov	d8,#1
.L1607:

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   292      return TRUE;      (inlined)
	j	.L337

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   293  }      (inlined)
.L337:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   642          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   643              boolean checkIsCausal = Dem_Dependencies_CheckEventIsCausal(EventId, NodeId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   644              storageFiltered = !Dem_StoCoAreAllFulfilled(Dem_EvtParam_GetStorageConditions(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   645                              || (Dem_NodeAreAllFailedFiltered(NodeId) && !checkIsCausal);
	mov	d14,#0

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   203  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L338:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   204  	return 0; /* feature deactivated */      (inlined)
	j	.L339

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   205  }      (inlined)
.L339:

; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     4  #ifndef DEM_STORAGECONDITION_H
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     5  #define DEM_STORAGECONDITION_H
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     8  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	     9  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    11  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    12  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    15  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    18  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    19     Dem_StoCoList isActive;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    20     Dem_StoCoList isReplacementEventRequested;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    21     Dem_StoCoList isReplacementEventStored;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    23  #if (DEM_CFG_DEBUGDATA != DEM_CFG_DEBUGDATA_OFF)
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    24     Dem_EventIdType eventId[DEM_STORAGECONDITION_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    25     Dem_DebugDataType debug1[DEM_STORAGECONDITION_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    26  #endif
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    27  } Dem_StoCoState;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    30  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    31     Dem_EventIdType replacementEvent[DEM_STORAGECONDITION_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    32  } Dem_StoCoParam;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    33  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    34  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    35  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    37  extern Dem_StoCoState Dem_StoCoAllStates;
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    39  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    40  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    41  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    42  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    43  #endif
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    47  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    48  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    49  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    51  /*** INTERNAL FUNCTIONS *******************************************************/
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    53  DEM_INLINE boolean Dem_StoCoAreAllFulfilled(Dem_StoCoList storageConditionList)
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    54  {
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    55  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    56     return ((storageConditionList & Dem_StoCoAllStates.isActive) == storageConditionList);
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    57  #else
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    58     DEM_UNUSED_PARAM(storageConditionList);
; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    59     return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    59     return TRUE;      (inlined)
	j	.L340

; .\BSW\src\BSW\Gen\Dem\src\stoco\Dem_StorageCondition.h	    61  }      (inlined)
.L340:
	jeq	d15,#0,.L341
.L2113:
	mov	d4,d13
	call	Dem_NodeAreAllFailedFiltered
.L1642:
	jeq	d2,#0,.L342
.L2114:
	jne	d8,#0,.L343
.L341:
	mov	d14,#1
.L343:
.L342:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
	addsc.a	a15,a13,d12,#2
.L2115:
	ld.bu	d15,[a15]
.L2116:
	mov	d0,#0
.L1438:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2117:
	and	d15,#1
.L2118:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L344

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L344:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d13,d15,#0
.L1643:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L345

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L345:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);      (inlined)
	j	.L346

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }      (inlined)
.L346:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   646              oldCausal = Dem_EvtIsCausal(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   647              newCausal = oldCausal || (checkIsCausal && !storageFiltered);
	mov	d5,#0
.L1435:
	jne	d13,#0,.L347
.L1436:
	jeq	d8,#0,.L348
.L2119:
	jne	d14,#0,.L349
.L347:
	mov	d5,#1
.L349:
.L348:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   648  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   649              Dem_EvtSetStorageFiltered (EventId, storageFiltered);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   650              Dem_EvtSetCausal (EventId, newCausal);
	mov	d4,d12
.L1644:
	call	Dem_EvtSetCausal

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L350:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     1  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     2  #ifndef DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     3  #define DEM_CFG_EVENTS_DATASTRUCTURES_H
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     4  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     5  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     6  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     7  #include "rba_DiagLib.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     8  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	     9  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    10  #include "Dem_Cfg_EnableCondition.h"
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    11  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    12  typedef Std_ReturnType (*Dem_EvtClearAllowedFncType) ( boolean* Allowed );
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    13  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    14  #define DEM_RECOV    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    15  #define DEM_NOTREC   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    16  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    17  #define DEM_DEBOUNCE_RESET    (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    18  #define DEM_DEBOUNCE_FREEZE   (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    19  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    20  #define DEM_NO_TF_RESET   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    21  #define DEM_TF_RESET      (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    22  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    23  #define DEM_ONLY_THIS_CYCLE_AND_READINESS   (1u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    24  #define DEM_NO_STATUS_BYTE_CHANGE           (0u)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    25  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    26  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    27  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    28  	uint8 dataDataContainer_1;  // AgingThreshold
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    29  } Dem_EvtParam_8Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    30  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    31  typedef struct
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    32  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    33  	uint16 dataDataContainer_2;  // EventIsStoredInPrimary, AgingAllowed, Significance, InitialSuppressionStatus, DebounceParamSettingIndex, EventPriority, MaxNumberFreezeFrameRecords
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    34  } Dem_EvtParam_16Type;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    35  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    36  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    37  extern const Dem_EvtParam_8Type Dem_EvtParam_8[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    38  extern const Dem_EvtParam_16Type Dem_EvtParam_16[6];
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    39  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    40  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    41  LOCAL_INLINE uint8 Dem_EvtParam_GetDebounceBehavior(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    42  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    43  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    44  	return DEM_DEBOUNCE_FREEZE;
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    45  }
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    46  
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    47  /* MR12 RULE 2.7 VIOLATION: the parameter 'indx' is not used because the retrun value is the same for all indices due to the config, it is kept because the code calling the function is not config base but static */ 
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    48  LOCAL_INLINE boolean Dem_EvtParam_GetIsRecoverable(Dem_EventIdType indx)
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    49  {
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    50  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));
; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    51  	return DEM_RECOV;      (inlined)
	j	.L351

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	    52  }      (inlined)
.L351:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   651              Dem_Dependencies_SetNodeFailed ( NodeId, newCausal, storageFiltered, (Dem_EvtParam_GetIsRecoverable(EventId) && Dem_NodeRecoveryAllowed(Dem_NodeIdFromEventId(EventId))) );
	jeq	d15,#0,.L352
.L1443:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;      (inlined)
	j	.L353

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }      (inlined)
.L353:

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     3  #ifndef DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     4  #define DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     8  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     9  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    10  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    11  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    15  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    18  #define DEM_NODE_INFINITE_RECOVERIES  255
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    19  #define DEM_NODE_NO_RECOVERIES          0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    21  #define DEM_NODESTATUS_FAILED                   0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    22  #define DEM_NODESTATUS_SUSPICIOUS               1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    23  #define DEM_NODESTATUS_NOTINIT                  2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    24  #define DEM_NODESTATUS_NOTAVAILABLE             3
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    25  #define DEM_NODESTATUS_FAILEDFILTERED           4
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    26  #define DEM_NODESTATUS_FAILEDNOTRECOVERABLE     5
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    27  #define DEM_NODESTATUS_PENDING                  6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    29  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    30  #define DEM_NODESTATUS_COUNT                    7
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    31  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    32  #define DEM_NODESTATUS_COUNT                    6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    33  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    35  #define DEM_NODESTATUS__NODEMASK               ((uint8)0x80)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    36  #define DEM_NODESTATUS__ANCESTORMASK           ((uint8)0x7F)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    39  DEM_INLINE void Dem_NodeStatusSet(uint8 *status)            { (*status) |= DEM_NODESTATUS__NODEMASK;  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    40  DEM_INLINE void Dem_NodeStatusReset(uint8 *status)          { (*status) &= (uint8)~DEM_NODESTATUS__NODEMASK; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    41  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsSet(uint8 status)  { return ((status) & DEM_NODESTATUS__NODEMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    42  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsAnyAncestorSet (uint8 status) { return ((status) & DEM_NODESTATUS__ANCESTORMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    45  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    46  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    47  	uint8 status[DEM_NODESTATUS_COUNT];
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    48  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    49  	uint8 performedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    51  	uint8 stateFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    52  } Dem_NodeState;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    54  #define DEM_NODE_STATEFLAG_RECHECKONCLEAR    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    55  #define DEM_NODE_STATEFLAG_HASCAUSALFAULT    1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    56  #define DEM_NODE_STATEFLAG_RECOVERYBLOCKED    2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    59  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    61  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    62  	uint8 allowedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    63  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    64  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    65  	uint8 nodeFailedCallbackIdx;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    66  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    67  	uint8 paramFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    68  } Dem_NodeParam;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    70  typedef Std_ReturnType (*Dem_NodeFailedCallbackType)(boolean testFailed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    73  #define DEM_NODE_PARAMFLAG_IGNOREPRIORITY    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    75  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    76  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    77  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    78  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    79  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    80  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    81  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    83  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    86  #define DEM_NODES_INIT(ALLOWEDRECOVERIES,IGNORES_PRIO,NODEFAILEDCALLBACK)        \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    87      {                                              			  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    88  		DEM_NODES_INIT_ALLOWEDRECOVERIES(ALLOWEDRECOVERIES)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    89  		DEM_NODES_INIT_NODEFAILEDCALLBACK(NODEFAILEDCALLBACK)  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    90  		((IGNORES_PRIO) << DEM_NODE_PARAMFLAG_IGNOREPRIORITY)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    91      }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    92  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    95  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    96  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    98  DEM_ARRAY_DECLARE(      Dem_NodeState, Dem_AllNodesState, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   100  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   101  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   105  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   106  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   108  DEM_ARRAY_DECLARE_CONST(Dem_NodeParam, Dem_AllNodesParam, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   109  DEM_ARRAY_DECLARE_CONST(Dem_NodeFailedCallbackType, Dem_NodeFailedCallbacks, DEM_CFG_NODEFAILEDCALLBACK_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   111  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   112  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   115  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   116  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   117  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   119  void Dem_SetNodeStatus (const Dem_ComponentIdType NodeId, uint8 statusIndex);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   121  Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   123  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   124  Dem_boolean_least Dem_Dependencies_CheckEventIsCausalPending(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   125  void Dem_Dependencies_SetNodePending(Dem_EventIdType EventId , Dem_boolean_least setBit);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   126  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   129  /*************   Status Querries   ***************/
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   130  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   131  DEM_INLINE boolean Dem_NodeIsFailed(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   132  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   133  	return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   136  DEM_INLINE boolean Dem_NodeIsFailedItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   138  	return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   142  DEM_INLINE boolean Dem_NodeIsSuspicious(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   144     return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   145  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   146  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   147  DEM_INLINE boolean Dem_NodeIsSuspiciousItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   148  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   149     return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   150  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   152  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   153  DEM_INLINE boolean Dem_NodeIsFailedFilteredItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   154  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   155     return (Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDFILTERED]));
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   156  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   159  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   160  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   161      return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   162  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   164  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverableItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   166      return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   170  DEM_INLINE boolean Dem_NodeIsAvailable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   172  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTAVAILABLE] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   176  DEM_INLINE boolean Dem_NodeIsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   178  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   179  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   181  DEM_INLINE boolean Dem_NodeAreAncestorsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   183  	return !Dem_NodeStatusIsAnyAncestorSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   186  DEM_INLINE boolean Dem_NodeIsRestrictedUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   188  	return (   (Dem_NodeIsInitialized(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   189  			&& (Dem_NodeIsAvailable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   190  			&& (!Dem_NodeIsFailed(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   191  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   194  DEM_INLINE boolean Dem_NodeIsUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   195  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   196  	return (   (Dem_NodeIsRestrictedUsable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   197  			&& (!Dem_NodeIsSuspicious(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   198  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   199  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   200  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   202  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   203  DEM_INLINE boolean Dem_NodeRecoveryAllowed (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   204  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   205      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   207      return (TRUE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   208  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   209              && (    (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   210                   || (DEM_NODE_INFINITE_RECOVERIES == Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   211                 )
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   213  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   214             );
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   217  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   218  DEM_INLINE void Dem_NodeCallFailedCallback (Dem_ComponentIdType NodeId, boolean failed)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   219  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   220  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   221  	if (Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx != 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   222  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   223  		(Dem_NodeFailedCallbacks[Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx])(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   224  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   225  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   226  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   227  	DEM_UNUSED_PARAM(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   228  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   229  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   232  void Dem_Dependencies_SetNodeFailed(Dem_ComponentIdType NodeId, boolean EventIsCausal, boolean EventStorageFiltered, boolean EventIsRecoverable);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   233  void Dem_Dependencies_ResetNodeFailed(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   234  void Dem_Dependencies_ResetNodeFailedFiltered(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   235  void Dem_Dependencies_ResetNodeFailedNotRecoverable(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   237  void Dem_NodeSetSuspicious(Dem_ComponentIdType NodeId, Dem_boolean_least suspicious);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   238  void Dem_NodeSetHasCausalFault (const Dem_ComponentIdType NodeId, Dem_boolean_least causalFault);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   240  void Dem_NodeSetAvailable(Dem_ComponentIdType ComponentId, boolean AvailableStatus);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   242  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   243  DEM_INLINE void Dem_NodeSetRecovered(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   244  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   245  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   246  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   247  	if (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   248  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   249  		Dem_AllNodesState[NodeId].performedRecoveries++;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   250  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   251  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   252  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   253  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   254  DEM_INLINE void Dem_NodeSetRecheckOnClear (Dem_ComponentIdType NodeId, Dem_boolean_least newRecheckOnClear)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   256      rba_DiagLib_Bit8OverwriteBit(&(Dem_AllNodesState[NodeId].stateFlags), DEM_NODE_STATEFLAG_RECHECKONCLEAR, newRecheckOnClear);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   257  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   258  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   259  DEM_INLINE Dem_boolean_least Dem_NodeIsRecheckOnClear (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   260  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   261  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesState[NodeId].stateFlags, DEM_NODE_STATEFLAG_RECHECKONCLEAR);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   262  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   263  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   264  DEM_INLINE Dem_boolean_least Dem_NodeIgnorePriority(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   265  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   266  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesParam[NodeId].paramFlags, DEM_NODE_PARAMFLAG_IGNOREPRIORITY);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   267  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   268  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   269  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   271  void Dem_NodeRecheckOnClear (void);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   272  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   273  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   274  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   276  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   278  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   279  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   282  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   283  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   284  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   285  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   286  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   288  DEM_INLINE Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   289  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   290      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   291      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   292      return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   293  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   294  DEM_INLINE void Dem_Dependencies_ResetNodeFailed(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   295  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   296      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   297  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   299  DEM_INLINE void Dem_Dependencies_SetNodeFailed(Dem_ComponentIdType NodeId, boolean EventIsCausal, boolean EventStorageFiltered, boolean EventIsRecoverable)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   300  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   301      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   302      DEM_UNUSED_PARAM(EventIsCausal);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   303      DEM_UNUSED_PARAM(EventStorageFiltered);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   304      DEM_UNUSED_PARAM(EventIsRecoverable);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   305  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   306  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   307  DEM_INLINE void Dem_Dependencies_ResetNodeFailedFiltered(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   308  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   309      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   310  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   311  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   312  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   313  DEM_INLINE boolean Dem_NodeIsAvailable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   314  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   315      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   316      return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   317  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   318  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   319  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   320  DEM_INLINE boolean Dem_NodeRecoveryAllowed (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   321  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   322      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   323      return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   323      return TRUE;      (inlined)
	j	.L354

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   324  }      (inlined)
.L354:
	jeq	d15,#0,.L355
.L355:
.L352:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   652  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   653              if (checkIsCausal)
	jeq	d8,#0,.L356
.L2120:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   654              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   655                  if (!storageFiltered)
	jne	d14,#0,.L357
.L2121:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   656                  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   657                      eventType = C_EVENTTYPE_SET;
	mov	d9,#1
.L1437:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   658                      if (oldCausal)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   659                      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   660                          eventType = C_EVENTTYPE_SET_RECONFIRMED;
	seln	d9,d13,d9,#4
.L358:
	j	.L359
.L357:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   203  	DEM_ASSERT_RANGECHECK((0 < indx) && (indx < 6));      (inlined)
.L360:

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   204  	return 0; /* feature deactivated */      (inlined)
	j	.L361

; .\BSW\src\BSW\Gen\Dem\Dem_Cfg_Events_DataStructures.h	   205  }      (inlined)
.L361:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   661                      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   662                  } else
.L359:
	j	.L362
.L356:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   663                  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   664                      Dem_StoCoSetHasFilteredEvent(Dem_EvtParam_GetStorageConditions(EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   665                              DEM_DEBUGDATA_PARAM(EventId,debug1_ul));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   666                  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   667              } else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   668              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   669                  if (oldCausal) {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   670                      eventType = C_EVENTTYPE_SET_RECONFIRMED;
	seln	d9,d13,d9,#4
.L363:
.L362:
	j	.L364
.L336:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
	mov	d15,#0
.L1449:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d15,#0
	sha	d0,d0,d15
.L1645:
	and	d15,d0,#1
.L2122:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L365

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L365:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2123:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L366

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L366:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);      (inlined)
	j	.L367

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }      (inlined)
.L367:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   671                  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   672              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   673          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   674          else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   675          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   676              if (!Dem_ISO14229ByteIsTestFailed(isoByteNew))
	jne	d15,#0,.L368
.L1448:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
	addsc.a	a15,a13,d12,#2
.L2124:
	ld.bu	d15,[a15]
.L2125:
	mov	d0,#0
.L1451:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2126:
	and	d15,#1
.L2127:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L369

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L369:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2128:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L370

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L370:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);      (inlined)
	j	.L371

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }      (inlined)
.L371:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   677              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   678                  if (Dem_EvtIsCausal(EventId))
	jeq	d15,#0,.L372
.L1450:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   679                  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   680                      Dem_EvtSetCausal (EventId, FALSE);
	mov	d5,#0
	mov	d4,d12
.L1646:
	call	Dem_EvtSetCausal
.L372:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   681                      Dem_NodeSetRecovered(NodeId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   682                  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   683                  /* if event is stored from prev OC and testfailed was not stored */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   684                  if (        (
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   685                                    (Dem_ISO14229ByteIsTestFailed(isoByteOld)
	ld.bu	d15,[a10]
.L1452:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
	mov	d0,#0
.L1454:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2129:
	and	d15,#1
.L2130:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L373

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L373:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2131:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L374

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L374:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);      (inlined)
	j	.L375

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }      (inlined)
.L375:
	jne	d15,#0,.L376
.L1453:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   686                                      || Dem_ISO14229ByteIsConfirmedDTC(isoByteOld)
	ld.bu	d15,[a10]
.L1455:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
	mov	d0,#3
.L1458:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2132:
	and	d15,#1
.L2133:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L377

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L377:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2134:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L378

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L378:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);      (inlined)
	j	.L379

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }      (inlined)
.L379:
	jne	d15,#0,.L380
.L1456:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   687                                      || Dem_ISO14229ByteIsPendingDTC(isoByteOld))
	ld.bu	d15,[a10]
.L1459:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
	mov	d0,#2
.L1461:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2135:
	and	d15,#1
.L2136:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L381

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L381:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2137:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L382

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L382:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);      (inlined)
	j	.L383

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }      (inlined)
.L383:
	jeq	d15,#0,.L384
.L380:
.L376:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
	mov	d15,#0

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;      (inlined)
	j	.L385

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }      (inlined)
.L385:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   688                                      && (!Dem_EvtIsStorageFiltered(EventId))
	jeq	d15,#0,.L386
.L384:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   632  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   633  /*------NextReportRelevantForMemories----------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   634  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   635  DEM_INLINE Dem_boolean_least Dem_EvtIsNextReportRelevantForMemories (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   636  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);
	addsc.a	a15,a13,d12,#2
.L2138:
	ld.bu	d15,[a15]
.L2139:
	mov	d0,#7
.L1462:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L2140:
	and	d15,#1
.L2141:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L387

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L387:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L2142:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L388

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L388:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);      (inlined)
	j	.L389

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   638  }      (inlined)
.L389:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   689                              )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   690                              ||Dem_EvtIsNextReportRelevantForMemories(EventId)
	jeq	d15,#0,.L390
.L386:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   691                  )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   692                  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   693                      eventType = C_EVENTTYPE_RESET;
	mov	d9,#3
.L390:
.L368:
.L364:
.L335:

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     3  #ifndef DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     4  #define DEM_NODES_H
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     8  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	     9  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    10  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    11  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    15  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    18  #define DEM_NODE_INFINITE_RECOVERIES  255
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    19  #define DEM_NODE_NO_RECOVERIES          0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    20  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    21  #define DEM_NODESTATUS_FAILED                   0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    22  #define DEM_NODESTATUS_SUSPICIOUS               1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    23  #define DEM_NODESTATUS_NOTINIT                  2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    24  #define DEM_NODESTATUS_NOTAVAILABLE             3
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    25  #define DEM_NODESTATUS_FAILEDFILTERED           4
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    26  #define DEM_NODESTATUS_FAILEDNOTRECOVERABLE     5
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    27  #define DEM_NODESTATUS_PENDING                  6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    29  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    30  #define DEM_NODESTATUS_COUNT                    7
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    31  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    32  #define DEM_NODESTATUS_COUNT                    6
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    33  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    35  #define DEM_NODESTATUS__NODEMASK               ((uint8)0x80)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    36  #define DEM_NODESTATUS__ANCESTORMASK           ((uint8)0x7F)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    38  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    39  DEM_INLINE void Dem_NodeStatusSet(uint8 *status)            { (*status) |= DEM_NODESTATUS__NODEMASK;  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    40  DEM_INLINE void Dem_NodeStatusReset(uint8 *status)          { (*status) &= (uint8)~DEM_NODESTATUS__NODEMASK; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    41  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsSet(uint8 status)  { return ((status) & DEM_NODESTATUS__NODEMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    42  DEM_INLINE Dem_boolean_least Dem_NodeStatusIsAnyAncestorSet (uint8 status) { return ((status) & DEM_NODESTATUS__ANCESTORMASK) > 0; }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    45  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    46  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    47  	uint8 status[DEM_NODESTATUS_COUNT];
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    48  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    49  	uint8 performedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    51  	uint8 stateFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    52  } Dem_NodeState;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    54  #define DEM_NODE_STATEFLAG_RECHECKONCLEAR    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    55  #define DEM_NODE_STATEFLAG_HASCAUSALFAULT    1
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    56  #define DEM_NODE_STATEFLAG_RECOVERYBLOCKED    2
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    57  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    59  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    60  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    61  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    62  	uint8 allowedRecoveries;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    63  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    64  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    65  	uint8 nodeFailedCallbackIdx;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    66  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    67  	uint8 paramFlags;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    68  } Dem_NodeParam;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    70  typedef Std_ReturnType (*Dem_NodeFailedCallbackType)(boolean testFailed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    73  #define DEM_NODE_PARAMFLAG_IGNOREPRIORITY    0
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    75  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    76  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    77  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    78  	#define DEM_NODES_INIT_ALLOWEDRECOVERIES(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    79  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    80  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    81  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)    (X),
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    83  	#define DEM_NODES_INIT_NODEFAILEDCALLBACK(X)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    86  #define DEM_NODES_INIT(ALLOWEDRECOVERIES,IGNORES_PRIO,NODEFAILEDCALLBACK)        \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    87      {                                              			  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    88  		DEM_NODES_INIT_ALLOWEDRECOVERIES(ALLOWEDRECOVERIES)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    89  		DEM_NODES_INIT_NODEFAILEDCALLBACK(NODEFAILEDCALLBACK)  \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    90  		((IGNORES_PRIO) << DEM_NODE_PARAMFLAG_IGNOREPRIORITY)   \ 
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    91      }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    92  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    95  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    96  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    98  DEM_ARRAY_DECLARE(      Dem_NodeState, Dem_AllNodesState, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   100  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   101  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   105  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   106  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   108  DEM_ARRAY_DECLARE_CONST(Dem_NodeParam, Dem_AllNodesParam, DEM_NODEID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   109  DEM_ARRAY_DECLARE_CONST(Dem_NodeFailedCallbackType, Dem_NodeFailedCallbacks, DEM_CFG_NODEFAILEDCALLBACK_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   111  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   112  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   115  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   116  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   117  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   119  void Dem_SetNodeStatus (const Dem_ComponentIdType NodeId, uint8 statusIndex);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   121  Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   123  #if DEM_CFG_DEPENDENCY_PENDING_ON
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   124  Dem_boolean_least Dem_Dependencies_CheckEventIsCausalPending(Dem_EventIdType EventId, Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   125  void Dem_Dependencies_SetNodePending(Dem_EventIdType EventId , Dem_boolean_least setBit);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   126  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   129  /*************   Status Querries   ***************/
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   130  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   131  DEM_INLINE boolean Dem_NodeIsFailed(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   132  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   133  	return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   134  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   136  DEM_INLINE boolean Dem_NodeIsFailedItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   138  	return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILED]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   142  DEM_INLINE boolean Dem_NodeIsSuspicious(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   143  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   144     return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   145  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   146  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   147  DEM_INLINE boolean Dem_NodeIsSuspiciousItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   148  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   149     return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_SUSPICIOUS]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   150  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   152  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   153  DEM_INLINE boolean Dem_NodeIsFailedFilteredItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   154  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   155     return (Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDFILTERED]));
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   156  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   159  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   160  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   161      return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE] != 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   162  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   164  DEM_INLINE boolean Dem_NodeIsFailedNotRecoverableItself(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   166      return Dem_NodeStatusIsSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_FAILEDNOTRECOVERABLE]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   170  DEM_INLINE boolean Dem_NodeIsAvailable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   171  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   172  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTAVAILABLE] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   176  DEM_INLINE boolean Dem_NodeIsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   178  	   return (Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT] == 0);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   179  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   180  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   181  DEM_INLINE boolean Dem_NodeAreAncestorsInitialized(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   182  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   183  	return !Dem_NodeStatusIsAnyAncestorSet(Dem_AllNodesState[NodeId].status[DEM_NODESTATUS_NOTINIT]);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   184  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   185  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   186  DEM_INLINE boolean Dem_NodeIsRestrictedUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   187  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   188  	return (   (Dem_NodeIsInitialized(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   189  			&& (Dem_NodeIsAvailable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   190  			&& (!Dem_NodeIsFailed(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   191  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   194  DEM_INLINE boolean Dem_NodeIsUsable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   195  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   196  	return (   (Dem_NodeIsRestrictedUsable(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   197  			&& (!Dem_NodeIsSuspicious(NodeId))
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   198  			);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   199  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   200  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   202  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   203  DEM_INLINE boolean Dem_NodeRecoveryAllowed (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   204  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   205      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   207      return (TRUE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   208  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   209              && (    (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   210                   || (DEM_NODE_INFINITE_RECOVERIES == Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   211                 )
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   212  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   213  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   214             );
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   217  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   218  DEM_INLINE void Dem_NodeCallFailedCallback (Dem_ComponentIdType NodeId, boolean failed)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   219  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   220  #if (DEM_CFG_NODEFAILEDCALLBACK_COUNT > 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   221  	if (Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx != 0)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   222  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   223  		(Dem_NodeFailedCallbacks[Dem_AllNodesParam[NodeId].nodeFailedCallbackIdx])(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   224  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   225  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   226  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   227  	DEM_UNUSED_PARAM(failed);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   228  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   229  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   232  void Dem_Dependencies_SetNodeFailed(Dem_ComponentIdType NodeId, boolean EventIsCausal, boolean EventStorageFiltered, boolean EventIsRecoverable);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   233  void Dem_Dependencies_ResetNodeFailed(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   234  void Dem_Dependencies_ResetNodeFailedFiltered(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   235  void Dem_Dependencies_ResetNodeFailedNotRecoverable(Dem_ComponentIdType NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   237  void Dem_NodeSetSuspicious(Dem_ComponentIdType NodeId, Dem_boolean_least suspicious);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   238  void Dem_NodeSetHasCausalFault (const Dem_ComponentIdType NodeId, Dem_boolean_least causalFault);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   239  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   240  void Dem_NodeSetAvailable(Dem_ComponentIdType ComponentId, boolean AvailableStatus);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   242  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   243  DEM_INLINE void Dem_NodeSetRecovered(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   244  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   245  	DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   246  #if (DEM_CFG_DEPRECOVERYLIMIT == DEM_CFG_DEPRECOVERYLIMIT_ON)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   247  	if (Dem_AllNodesState[NodeId].performedRecoveries < Dem_AllNodesParam[NodeId].allowedRecoveries)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   248  	{
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   249  		Dem_AllNodesState[NodeId].performedRecoveries++;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   250  	}
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   251  #endif
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   252  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   253  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   254  DEM_INLINE void Dem_NodeSetRecheckOnClear (Dem_ComponentIdType NodeId, Dem_boolean_least newRecheckOnClear)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   255  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   256      rba_DiagLib_Bit8OverwriteBit(&(Dem_AllNodesState[NodeId].stateFlags), DEM_NODE_STATEFLAG_RECHECKONCLEAR, newRecheckOnClear);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   257  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   258  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   259  DEM_INLINE Dem_boolean_least Dem_NodeIsRecheckOnClear (Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   260  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   261  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesState[NodeId].stateFlags, DEM_NODE_STATEFLAG_RECHECKONCLEAR);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   262  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   263  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   264  DEM_INLINE Dem_boolean_least Dem_NodeIgnorePriority(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   265  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   266  	return rba_DiagLib_Bit8IsBitSet(Dem_AllNodesParam[NodeId].paramFlags, DEM_NODE_PARAMFLAG_IGNOREPRIORITY);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   267  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   268  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   269  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   271  void Dem_NodeRecheckOnClear (void);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   272  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   273  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   274  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   276  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   278  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   279  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   282  #else
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   283  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   284  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   285  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   286  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   288  DEM_INLINE Dem_boolean_least Dem_Dependencies_CheckEventIsCausal(Dem_EventIdType EventId, Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   289  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   290      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   291      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   292      return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   293  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   294  DEM_INLINE void Dem_Dependencies_ResetNodeFailed(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   295  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   296      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   297  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   299  DEM_INLINE void Dem_Dependencies_SetNodeFailed(Dem_ComponentIdType NodeId, boolean EventIsCausal, boolean EventStorageFiltered, boolean EventIsRecoverable)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   300  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   301      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   302      DEM_UNUSED_PARAM(EventIsCausal);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   303      DEM_UNUSED_PARAM(EventStorageFiltered);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   304      DEM_UNUSED_PARAM(EventIsRecoverable);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   305  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   306  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   307  DEM_INLINE void Dem_Dependencies_ResetNodeFailedFiltered(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   308  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   309      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   310  }
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   311  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   312  
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   313  DEM_INLINE boolean Dem_NodeIsAvailable(Dem_ComponentIdType NodeId)
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   314  {
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   315      DEM_UNUSED_PARAM(NodeId);
; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   316      return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   316      return TRUE;      (inlined)
	j	.L391

; .\BSW\src\BSW\Gen\Dem\src\evdep\Dem_Dependencies.h	   317  }      (inlined)
.L391:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   694                  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   695                  Dem_EvtSetStorageFiltered (EventId, FALSE);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   696                  Dem_Dependencies_ResetNodeFailed (NodeId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   697              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   698          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   699  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   700      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   701  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   702      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   703  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   704  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   705      /*********************************************************
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   706       * storage to event memory
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   707       */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   708  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   709      if (Dem_NodeIsAvailable (NodeId))
	jeq	d15,#0,.L392
.L2143:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   710      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   711          if ((eventType != C_EVENTTYPE_NOEVENT) && (Dem_IsEventStorageEnabledByDtcSetting (EventId)))
	jeq	d9,#0,.L393
.L1468:

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     4  #ifndef DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     5  #define DEM_DTCS_H
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     8  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	     9  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    10  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    11  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    12  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    13  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    14  #include "Dem_Cfg_DTC_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    15  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    16  #include "Dem_Mapping.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    17  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    18  #include "Dem_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    19  #include "Dem_DTCStatusByte.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    20  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    21  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    22  #include "Dem_Helpers.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    23  #include "Dem_EvMem.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    25  #define DEM_DTC_SETTING_ENABLED     FALSE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    26  #define DEM_DTC_SETTING_DISABLED    TRUE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    29  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    30  	Dem_DtcStateType state;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    31  } Dem_DtcState;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    33  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    34  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    37  #define DEM_DTCS_NVSTORAGE_BP    2u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    38  #define DEM_DTCS_ALTERNATIVEDTC_FLAG_BP    3u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    40  #define DEM_DTCS_SEVERITYMASK    0xE0u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    41  #define DEM_DTCS_KINDMASK        0x03u
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    42  #define DEM_DTCS_NVSTORAGEMASK   ((uint8)(1u<<DEM_DTCS_NVSTORAGE_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    43  #define DEM_DTCS_ALTERNATIVEDTC_FLAG   ((uint8)(1u<<DEM_DTCS_ALTERNATIVEDTC_FLAG_BP))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    46  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    47  #define DEM_DTCS_INIT8(KIND, SEVERITY, NVSTORAGE, FUNC_UNIT, INDEXOF_ALTERNATIVE_DTCID) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    48  {   ((KIND) & (DEM_DTCS_KINDMASK))|((SEVERITY) & (DEM_DTCS_SEVERITYMASK)) | ((uint8)(((NVSTORAGE) & (0x01u)) << DEM_DTCS_NVSTORAGE_BP)) | ((uint8)((DEM_BOOL2BIT(INDEXOF_ALTERNATIVE_DTCID) & (0x01u)) << DEM_DTCS_ALTERNATIVEDTC_FLAG_BP)) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    49      ,(FUNC_UNIT) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    50  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    52  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    53  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    54  #define DEM_DTCS_INIT16(OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    55  {   (OBDCODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    56  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    57  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    58  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    60  #define DEM_DTCS_INIT32(CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    61  {   (CODE) \ 
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    62  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    66  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    67     uint8 kind_severity_storage;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    68     uint8 Functional_Unit;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    69  } Dem_DtcParam8;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    70  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    71  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    72  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    73  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    74     uint16 ObdCode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    75  } Dem_DtcParam16;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    76  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    77  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    78  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    79  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    80     Dem_DtcCodeType code;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    81  } Dem_DtcParam32;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    82  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    83  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    84      Dem_DtcCodeType AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    85      Dem_DtcCodeType Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    86  }Dem_DtcAltParam;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    87  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    88  /******************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    89  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    90  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    92      DEM_ARRAY_DECLARE(Dem_DtcState, Dem_AllDTCsState, DEM_DTCID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    93  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    94  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    95  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    96  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    97  #define DEM_START_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    98  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   100      #if(DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   101      extern boolean Dem_AlternativeDTCEnabled;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   102      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   104  #define DEM_STOP_SEC_RAM_INIT
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   105  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   107  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   108  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   110      #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   111      DEM_ARRAY_DECLARE_CONST(Dem_DtcAltParam, Dem_AllAlternativeDTCsParam, DEM_ALTERNATIVE_DTCCODE_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   112      #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   114  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   115  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   117  /********DTC SUPPRESSION************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   118  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressed (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   119  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   120  #if (DEM_CFG_SUPPRESSION != DEM_NO_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   121      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   122  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   123      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   124      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   125  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   126  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   128  DEM_INLINE Dem_boolean_least Dem_DtcIsSuppressedDirectly (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   129  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   130  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   131      return DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   132  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   133      DEM_UNUSED_PARAM(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   134      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   136  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   138  DEM_INLINE Dem_boolean_least Dem_DtcIsSupported (Dem_DtcIdType dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   139  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   140      return (Dem_isDtcIdValid(dtcID)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   141              && (!Dem_DtcIsSuppressed(dtcID))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   142      );
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   143  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   145  #if ((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   146  DEM_INLINE void Dem_DtcHandleEventSuppression (Dem_DtcIdType dtcId, Dem_boolean_least eventUnsuppressed)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   148      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   150      if (!Dem_DtcIsSuppressedDirectly(dtcId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   151      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   152          Dem_EventIdListIterator it;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   153  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   154          if (!eventUnsuppressed)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   155          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   156              for (Dem_EventIdListIteratorNewFromDtcId(&it, dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   157                      Dem_EventIdListIteratorIsValid(&it);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   158                      Dem_EventIdListIteratorNext(&it))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   159              {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   160                  if ( !Dem_EvtIsSuppressed(Dem_EventIdListIteratorCurrent(&it)) )
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   161                  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   162                      eventUnsuppressed = TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   163                      break;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   164                  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   165              }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   166          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   167  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   168          DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED, !eventUnsuppressed);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   169      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   170  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   173  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   174  DEM_INLINE void Dem_DtcSuppressionApply (Dem_DtcIdType dtcId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   176  	DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   177  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   178  	DEM_DTCSTATE_OVERWRITEBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED_DIRECTLY, setBit);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   179  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   180  	if (setBit)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   181  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   182  	    DEM_DTCSTATE_SETBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   183  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   184  	else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   185  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   186  # if (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   187  	    Dem_DtcHandleEventSuppression (dtcId, FALSE);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   188  # else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   189  	    DEM_DTCSTATE_CLEARBIT (&Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_STATE_SUPPRESSED);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   190  # endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   191  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   193  	DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   194  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   195  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   197  #if ((DEM_CFG_SUPPRESSION == DEM_DTC_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   198  DEM_INLINE Dem_boolean_least Dem_IsEventMemoryEntryExistForDTC (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   199  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   200  	uint8 DtcStatusByte = Dem_DtcStatusByteRetrieve(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   202  	/**
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   203  	 * Checking, whether TestFailed or TestFailedSLC bit is set
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   204  	 * (To make sure that corresponding DTC already processed and available in Event memory)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   205  	 */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   206  	if(Dem_ISO14229ByteIsTestFailed(DtcStatusByte) || Dem_ISO14229ByteIsTestFailedSLC(DtcStatusByte))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   207  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   208  		return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   209  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   210  	else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   211  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   212  		return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   213  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   214  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   215  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   217  /***********************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   219  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   220  /*-- DTC CODE ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   222  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   223  DEM_INLINE Dem_DtcCodeType Dem_GetDtcCode (Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   224  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   225  #if (DEM_CFG_ALTERNATIVEDTC == DEM_CFG_ALTERNATIVEDTC_ON)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   226      if(Dem_Cfg_Dtc_GetDtcCode_Is_Index(dtcId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   227      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   228          if (Dem_AlternativeDTCEnabled)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   229          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   230              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].AltDtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   231          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   232          else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   233          {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   234              return Dem_AllAlternativeDTCsParam[Dem_Cfg_Dtc_GetDtcCode(dtcId)].Dtccode;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   235          }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   236      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   237      else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   238  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   239      {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   240          return Dem_Cfg_Dtc_GetDtcCode(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   241      }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   242  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   244  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   245  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   247  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   248  #if (DEM_CFG_OBD == DEM_CFG_OBD_ON) && (DEM_CFG_OBD_DTC_CONFIG != DEM_CFG_OBD_DTC_CONFIG_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   250  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   251  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   252  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   253  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   254  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   256  Dem_DtcIdType Dem_DtcIdFromDtcCode (Dem_DtcCodeType dtcCode);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   257  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   258  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   259  /* Duplicate of Dem_GetDTCOfEvent to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   260  Std_ReturnType Dem_GetDTCOfEvent_GeneralEvtInfo(Dem_EventIdType EventId, Dem_DTCFormatType DTCFormat, uint32* DTCOfEvent);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   261  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   262  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   263  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   264  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   265  DEM_INLINE Dem_boolean_least Dem_EventUsesOrigin (Dem_EventIdType eventId, Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   266  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   267  	if (   ((origin == DEM_DTC_ORIGIN_PRIMARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInPrimary(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   268  			|| ((origin == DEM_DTC_ORIGIN_SECONDARY_MEMORY) && Dem_EvtParam_GetEventIsStoredInSecondary(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   269  			|| ((origin == DEM_DTC_ORIGIN_MIRROR_MEMORY) && Dem_EvtParam_GetEventIsStoredInMirror(eventId))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   270  /* FC_VariationPoint_START */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   271  #if (DEM_CFG_OBD != DEM_CFG_OBD_OFF)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   272  			|| ((origin == DEM_DTC_ORIGIN_PERMANENT_MEMORY) && (Dem_Cfg_Dtc_GetKind(Dem_DtcIdFromEventId(eventId)) == DEM_DTC_KIND_EMISSION_REL_DTCS))
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   273  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   274  /* FC_VariationPoint_END */
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   275  	)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   276  	{
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   277  		return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   278  	}
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   279  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   280  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   282  DEM_INLINE Dem_boolean_least Dem_DtcUsesOrigin (Dem_DtcIdType dtcId, Dem_DTCOriginType origin)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   283  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   284      Dem_EventIdType eventId = Dem_DtcIdGetFirstEventId(dtcId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   285      return Dem_EventUsesOrigin(eventId, origin);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   286  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   288  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   289  /*************************Enable & DiableDTCGroup****************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   290  void Dem_DtcSetDTCSetting (Dem_DtcIdType dtcId, Dem_boolean_least setBit);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   292  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   293  DEM_INLINE Dem_boolean_least Dem_DtcIsDTCSettingEnabled(Dem_DtcIdType dtcId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   294  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   295  	return (!(DEM_DTCSTATE_ISBITSET (Dem_AllDTCsState[dtcId].state, DEM_DTC_BP_GROUP_DTCSETTING_DISABLED)));
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   296  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   297  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   298  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   299  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   300  /*************************CheckDTCSettingStatus****************************************************/
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   301  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   302  Dem_boolean_least Dem_IsEventEnabledByDtcSetting(Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   304  DEM_INLINE Dem_boolean_least Dem_IsEventReportingEnabledByDtcSetting(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   305  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   306  #if (DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   307      return Dem_IsEventEnabledByDtcSetting(EventId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   308  #else
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   309      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   310      return TRUE;
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   311  #endif
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   312  }
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   313  
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   314  DEM_INLINE Dem_boolean_least Dem_IsEventStorageEnabledByDtcSetting(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   315  {
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   316  #if (DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   317      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   318      return TRUE;
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   318      return TRUE;      (inlined)
	j	.L394

; .\BSW\src\BSW\Gen\Dem\src\dtc\Dem_DTCs.h	   322  }      (inlined)
.L394:
	jeq	d15,#0,.L395
.L2144:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   712          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   713              if (!Dem_EvBuffInsert (eventType, EventId DEM_DEBUGDATA_PARAM(debug0_ul, debug1_ul)))
	mov	e4,d12,d9
.L1647:
	mov	e6,d10,d11
.L1648:
	call	Dem_EvBuffInsert
.L2145:
	jne	d2,#0,.L396
.L2146:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   714              {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   715                  DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   716                  Dem_EvtSetCausal (EventId, FALSE);
	mov	d5,#0
	mov	d4,d12
.L1649:
	call	Dem_EvtSetCausal
.L1650:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   717                  if (eventType == C_EVENTTYPE_RESET)
	jne	d9,#3,.L397
.L2147:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   718                  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   719                      Dem_EvtSetPassedWasReported (EventId, TRUE);
	mov	d15,#1

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   717      DEM_ASSERT_ISLOCKED();      (inlined)
.L398:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   632  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   633  /*------NextReportRelevantForMemories----------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   634  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   635  DEM_INLINE Dem_boolean_least Dem_EvtIsNextReportRelevantForMemories (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   636  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   637     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   638  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   639  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   640  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   641  DEM_INLINE void Dem_EvtSetNextReportRelevantForMemories (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   642  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   643     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NXT_REPORT_IS_RELEVANT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   644  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   645  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   646  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   647  /*------ Failure Cycle Event Status Bits -----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   648  #if DEM_CFG_OBD == DEM_CFG_OBD_ON
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   649  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   650   * Whether the event was reported as failed in this failure cycle, not respecting reports before startup of the ECU
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   651   *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   652   * This status information is needed for OBD permanent memory handling and is stored only in RAM. If ever move the
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   653   * TestFailedTFC state handling from EvMem to an "extended event status byte", then we can use that instead and also
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   654   * simplify some code in OBD.
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   655   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   656  DEM_INLINE Dem_boolean_least Dem_EvtGetTestFailedTFCSincePreinit(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   657  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   658      return DEM_EVTSTATE_ISBITSET(Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_TFTFC_SINCE_PREINIT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   659  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   660  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   661  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   662   * Whether the event was reported as failed in this failure cycle, not respecting reports before startup of the ECU
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   663   *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   664   * This status information is needed for OBD permanent memory handling and is stored only in RAM. If ever move the
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   665   * TestFailedTFC state handling from EvMem to an "extended event status byte", then we can use that instead and also
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   666   * simplify some code in OBD.
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   667   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   668  DEM_INLINE void Dem_EvtSetTestFailedTFCSincePreinit(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   669  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   670      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   671      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_TFTFC_SINCE_PREINIT, newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   672  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   673  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   674  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   675   * Whether the event was tested in this failure cycle, not respecting reports before startup of the ECU
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   676   *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   677   * This status information is needed for OBD permanent memory handling and is stored only in RAM. If ever move the
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   678   * TestCompleteTFC state handling from EvMem to an "extended event status byte", then we can use that instead and also
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   679   * simplify some code in OBD.
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   680   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   681  DEM_INLINE Dem_boolean_least Dem_EvtGetTestCompleteTFCSincePreinit(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   682  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   683      return DEM_EVTSTATE_ISBITSET(Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_TCTFC_SINCE_PREINIT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   684  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   685  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   686  /*
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   687   * Whether the event was tested in this failure cycle, not respecting reports before startup of the ECU
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   688   *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   689   * This status information is needed for OBD permanent memory handling and is stored only in RAM. If ever move the
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   690   * TestCompleteTFC state handling from EvMem to an "extended event status byte", then we can use that instead and also
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   691   * simplify some code in OBD.
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   692   */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   693  DEM_INLINE void Dem_EvtSetTestCompleteTFCSincePreinit(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   694  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   695      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   696      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_TCTFC_SINCE_PREINIT, newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   697  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   698  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   699  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   700  /*-- COMBINED FUNCTIONS 4 DTC ------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   701  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   702  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   703  /* checks if the failure is set and may not be reset, used for DTC status calc *
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   704  DEM_INLINE Dem_boolean_least Dem_EvtIsActiveFailure (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   705  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   706     return (Dem_EvtSt_GetTestFailed (EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   707             && (   !Dem_EvtIsGoodCheckRequested(EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   708                 || !Dem_EvtIsGoodCheckTriggerSupported(EventId))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   709            );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   710  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   711  */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   712  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   713  /*-- REPORTING STATE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   714  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   715  DEM_INLINE void Dem_EvtSetPassedWasReported (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   716  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   717      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   718      Dem_BitArrayOverwriteBit (Dem_EventWasPassedReported, EventId, setBit);
	movh.a	a15,#@his(Dem_EventWasPassedReported)
	lea	a15,[a15]@los(Dem_EventWasPassedReported)
.L1478:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
	jeq	d15,#0,.L399
.L1482:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     4  #ifndef DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     5  #define DEM_BITARRAY_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	     9  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    10  #include "Dem_Lock.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    11  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    13  #define DEM_BITARRAY_DATAELEMENTS( BITCOUNT )            ((((BITCOUNT)-1u) >> 5u)+1UL)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    14  /* #define DEM_BITARRAY_ELEMENTINDEX( BITNO )               ((BITNO) >> 5)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    15     #define DEM_BITARRAY_BITMASK( BITNO )                    ((UL)(1 << (((BITNO)) & 31)))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    16     #define DEM_BITARRAY_BYTESIZE( VARNAME, BITCOUNT )       (DEM_BITARRAY_DATAELEMENTS(BITCOUNT)*DEM_SIZEOF_VAR(uint32))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    17     #define DEM_BITARRAY_ADDRESS(VARNAME)                    DEM_ARRAY_ADDRESS(VARNAME) */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    18  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    19  #define DEM_BITARRAY_DECLARE( VARNAME, BITCOUNT )        DEM_ARRAY_DECLARE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    20  #define DEM_BITARRAY_DECLARE_CONST( VARNAME, BITCOUNT )  DEM_ARRAY_DECLARE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    21  #define DEM_BITARRAY_DEFINE( VARNAME, BITCOUNT )         DEM_ARRAY_DEFINE(uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    22  #define DEM_BITARRAY_DEFINE_CONST( VARNAME, BITCOUNT )   DEM_ARRAY_DEFINE(const uint32, VARNAME, DEM_BITARRAY_DATAELEMENTS(BITCOUNT))
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    23  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    24  #define DEM_BITARRAY_FUNCPARAM(VARNAME)                  DEM_ARRAY_FUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    25  #define DEM_BITARRAY_CONSTFUNCPARAM(VARNAME)             DEM_ARRAY_CONSTFUNCPARAM(uint32,VARNAME)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    27  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    28  /** The size of an element of a bitfield in bits. */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    29  #define DEM_BITARRAY_ELEMENT_BITSIZE \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    30      (DEM_SIZEOF_TYPE(uint32) * 8u)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    33  DEM_INLINE void Dem_BitArraySetBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    34  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    35      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    36      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d12,#-5
.L1651:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    37      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,d12,#31
.L1652:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    38      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    39              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L2148:
	sh	d1,d1,d15
.L1654:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    41      buffer[element_pos] |= mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1653:
	or	d15,d1
	st.w	[a15],d15
.L2149:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;      (inlined)
	j	.L400

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }      (inlined)
.L400:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    65          Dem_BitArraySetBit(buffer, bit_position);      (inlined)
	j	.L401

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    64      if (will_bit_be_set) {      (inlined)
.L399:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    42      return;
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    43  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    44  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    46  DEM_INLINE void Dem_BitArrayClearBit(DEM_BITARRAY_FUNCPARAM(buffer), uint32 bit_position)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    48      /* Assume that bit_position is within buffer */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    49      const uint32 element_pos = ((uint32)(bit_position / DEM_BITARRAY_ELEMENT_BITSIZE));
	sh	d0,d12,#-5
.L1655:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    50      const uint32 local_bitpos = ((uint32)(bit_position % DEM_BITARRAY_ELEMENT_BITSIZE));
	and	d15,d12,#31
.L1657:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    51      const uint32 mask =
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    52              ((uint32) 1) << local_bitpos;
	mov	d1,#1
.L2150:
	sh	d1,d1,d15
.L1659:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    53  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    54      buffer[element_pos] &= (uint32) ~ mask;
	addsc.a	a15,a15,d0,#2
	ld.w	d15,[a15]
.L1658:
	mov	d0,#-1
.L1656:
	xor	d1,d0
.L1660:
	and	d15,d1
	st.w	[a15],d15
.L2151:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    55      return;      (inlined)
	j	.L402

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    56  }      (inlined)
.L402:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    66      } else {      (inlined)
.L401:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    69      return;      (inlined)
	j	.L403

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_BitArray.h	    70  }      (inlined)
.L403:
.L397:
.L396:
.L395:
.L393:
.L392:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   720                  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   721                  DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   722              }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   723          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   724      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   725  }
.L333:
.L320:
.L290:
	ret
.L1252:
	
__Dem_EvtProcessPassedAndFailed_function_end:
	.size	Dem_EvtProcessPassedAndFailed,__Dem_EvtProcessPassedAndFailed_function_end-Dem_EvtProcessPassedAndFailed
.L601:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_GetEventSuspicious',code,cluster('Dem_GetEventSuspicious')
	.sect	'.text.Dem_EventFHandling.Dem_GetEventSuspicious'
	.align	2
	
	.global	Dem_GetEventSuspicious

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   726  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   727  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   728  #if(DEM_CFG_SUSPICIOUS_SUPPORT)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   729  void Dem_SetEventSuspicion_Internal (Dem_EventIdType EventId, boolean suspicion)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   730  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   731      Dem_ComponentIdType NodeId = Dem_NodeIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   732  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   733      DEM_ASSERT_ISLOCKED();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   734  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   735      /* do not set suspicion if the event is suppressed*/
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   736      if(Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   737      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   738          return;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   739      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   740  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   741      /* do not set supicion, if the event is already set as failed (optimization); suspicious is not required when testfailed is already set */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   742      if (suspicion && Dem_EvtSt_GetTestFailed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   743      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   744          return;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   745      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   746      if((Dem_EvtIsSuspicious(EventId)) == suspicion)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   747      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   748          return;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   749      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   750  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   751      Dem_EvtSetSuspicionLevel(EventId,suspicion);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   752  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   753      if (Dem_NodeIdIsValid(NodeId) && Dem_NodeIsAvailable (NodeId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   754      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   755          Dem_NodeSetSuspicious(NodeId, suspicion);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   756      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   757  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   758  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   759  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   760  void Dem_SetEventSuspicion (Dem_EventIdType EventId, boolean suspicion)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   761  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   762  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   763  	Dem_SetEventSuspicion_Internal(EventId, suspicion);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   764      DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   765  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   766  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   767  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   768  /* MR12 RULE 8.13 VIOLATION: the parameters might be unused due to the configuration */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   769  Std_ReturnType Dem_GetEventSuspicious(Dem_EventIdType EventId, boolean* EventSuspicious)
; Function Dem_GetEventSuspicious
.L491:
Dem_GetEventSuspicious:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   770  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   771  #if(DEM_CFG_SUSPICIOUS_SUPPORT)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   772      if(Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   773      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   774          return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   775      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   776  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   777      *EventSuspicious = (boolean)Dem_EvtIsSuspicious(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   778      return E_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   779  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   780      DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   781      DEM_UNUSED_PARAM(EventSuspicious);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   782      return E_NOT_OK;
	mov	d2,#1
.L1783:
	j	.L404

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   783  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   784  }
.L404:
	ret
.L811:
	
__Dem_GetEventSuspicious_function_end:
	.size	Dem_GetEventSuspicious,__Dem_GetEventSuspicious_function_end-Dem_GetEventSuspicious
.L546:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_SetEventAvailable',code,cluster('Dem_SetEventAvailable')
	.sect	'.text.Dem_EventFHandling.Dem_SetEventAvailable'
	.align	2
	
	.global	Dem_SetEventAvailable

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   785  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   786  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   787  Std_ReturnType Dem_SetEventAvailable(Dem_EventIdType EventId, boolean AvailableStatus)
; Function Dem_SetEventAvailable
.L493:
Dem_SetEventAvailable:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   788  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   789  	Std_ReturnType retval;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   790  	retval = Dem_SetEventSuppression(EventId, !AvailableStatus);
	eq	d5,d5,#0
.L1661:
	call	Dem_SetEventSuppression
.L1662:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   791      return retval;
	j	.L405

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   792  }
.L405:
	ret
.L791:
	
__Dem_SetEventAvailable_function_end:
	.size	Dem_SetEventAvailable,__Dem_SetEventAvailable_function_end-Dem_SetEventAvailable
.L526:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_GetEventAvailable',code,cluster('Dem_GetEventAvailable')
	.sect	'.text.Dem_EventFHandling.Dem_GetEventAvailable'
	.align	2
	
	.global	Dem_GetEventAvailable

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   793  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   794  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   795  Std_ReturnType Dem_GetEventAvailable(Dem_EventIdType EventId, boolean* AvailableStatus)
; Function Dem_GetEventAvailable
.L495:
Dem_GetEventAvailable:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   796  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   797      if(AvailableStatus == NULL_PTR)
	jnz.a	a4,.L406
.L1757:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   798      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   799          return E_NOT_OK;
	mov	d2,#1
.L1758:
	j	.L407
.L406:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L1759:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L408
.L1760:
	ge.u	d0,d4,#6
.L1761:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L409:
.L408:
	j	.L410

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L410:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   800      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   801      if(!Dem_isEventIdValid(EventId))
	jne	d15,#0,.L411
.L798:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   802      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   803          return E_NOT_OK;
	mov	d2,#1
.L1762:
	j	.L412
.L411:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     3  #ifndef DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     4  #define DEM_EVENTS_H
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     5  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     6  #include "Dem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     8  #include "Dem_Array.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	     9  #include "Dem_BitArray.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    10  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    11  #include "rba_DiagLib_Bits16.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    12  #include "rba_DiagLib_Bits32.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    13  #include "Dem_ISO14229Byte.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    14  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    15  #include "Dem_Clear.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    16  #include "Dem_Cfg_Events.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    17  #include "Dem_Cfg_Deb.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    18  #include "Dem_Cfg_EvBuff.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    19  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    20  #include "Dem_EventCategory.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    21  #include "Dem_StorageCondition.h"       // -> situationfilterCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    22  #include "Dem_EnableCondition.h"         // -> enableconditionCFG
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    23  #include "Dem_Cfg_Main.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    24  #include "Dem_Cfg_OperationCycle.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    25  #include "Dem_Cfg_DistMem.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    26  #include "Dem_Cfg_StorageCondition.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    27  #include "Dem_Nvm.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    28  #include "Dem_IndicatorAttributes.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    29  #include "Dem_Indicator.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    30  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    31  #include "Dem_Cfg_Events_DataStructures.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    32  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    33  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    34  #include "Dem_EventAttribute.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    35  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    36  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    37  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    38  typedef Std_ReturnType (* Dem_InitMForEAllowedFncType) (Dem_InitMonitorReasonType InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    39  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    40  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    41  /* Pointer to InitMonitorForEvent Callback */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    42    uint16 Eventid;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    43    Dem_InitMForEAllowedFncType InitMForEAllwdCBFnc;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    44  }Dem_InitMonitorForE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    46  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    48      Dem_EvtStateType  state;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    49      sint16 debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    50  } Dem_EvtState;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    52  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    53  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    54      Dem_EventStatusType lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    55  } Dem_EvtState8;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    56  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    57  typedef void (* Dem_EvtStatusChangeFncType) ( Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    58  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    60  #define DEM_EVTPARAM_DEBPARAM_SHIFT   4u
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    61  #define DEM_EVTPARAM_DEBMETHOD_MASK   0x0Fu
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    62  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    63  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    65  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    66  typedef struct
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    67  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    68      Dem_EvtCategoryPrioType evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    69  } Dem_EvtCategoryPriority;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    70  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    72  /*----------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    74  #if(DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    75  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)    ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    76  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    77  #define DEM_EVTS_INIT_SEQUENTIALFAILURBUFFER(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    78  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    80  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    81  #define DEM_EVTS_INIT_STORAGECONDITION(X)          ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    82  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    83  #define DEM_EVTS_INIT_STORAGECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    84  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    85  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    86  #if (DEM_CFG_ENABLECONDITION == DEM_CFG_ENABLECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    87  #define DEM_EVTS_INIT_ENABLECONDITION(X)           ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    88  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    89  #define DEM_EVTS_INIT_ENABLECONDITION(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    90  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    91  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    92  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    93  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    94  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    95  #define DEM_EVTS_INIT_CALLBACKEVENTSTATUSCHANGED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    96  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    97  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    98  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	    99  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   100  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   101  #define DEM_EVTS_INIT_CALLBACKCLEARALLOWED(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   102  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   104  #if (DEM_CFG_EVT_CLEARALLOWEDCALLBACK != DEM_CFG_EVT_CLEARALLOWEDCALLBACK_OFF)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   105  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)                ,(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   106  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   107  #define DEM_EVTS_INIT_CLEARALLOWEDBEHAVIOR(X)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   108  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   109  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   111  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   112  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   113  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   114  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   115  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   116  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   118  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   119  DEM_ARRAY_DECLARE_CONST(Dem_EvtCategoryPriority,Dem_EvtCategoryPrio,DEM_EVENTCATPRIO_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   120  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   122  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   123  DEM_ARRAY_DECLARE_CONST(Dem_InitMonitorForE, Dem_Cfg_Callback_InitMForE_List, DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   124  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   126  #if (DEM_CFG_EVT_ATTRIBUTE == DEM_CFG_EVT_ATTRIBUTE_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   127  DEM_ARRAY_DECLARE_CONST(Dem_EventAttributeType, Dem_AllEventsUserAttributes, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   128  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   130  #if (DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   131  DEM_ARRAY_DECLARE_CONST(Dem_EvtStatusChangeFncType, Dem_AllEventsStatusChangedFnc, DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   132  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   134  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   135  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   136  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   137  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   138  #define DEM_START_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   139  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   141  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   142  DEM_BITARRAY_DECLARE  (Dem_AllEventsHistoryStatus, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   143  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   145  #define DEM_STOP_SEC_SAVED_ZONE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   146  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   148  #define DEM_START_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   149  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   151  extern uint32 Dem_EvtIsAnyInitMonitoringRequestedMask;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   152  DEM_ARRAY_DECLARE(Dem_EvtState, Dem_AllEventsState, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   153  DEM_ARRAY_DECLARE(Dem_EvtState8, Dem_AllEventsState8, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   154  DEM_BITARRAY_DECLARE(Dem_AllEventsResetDebouncerRequested, DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   155  DEM_BITARRAY_DECLARE(Dem_EventWasPassedReported,DEM_EVENTID_ARRAYLENGTH);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   157  extern uint16 Dem_GlobalInitMonitoringCounter;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   158  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   159  #define DEM_STOP_SEC_RAM_CLEARED
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   160  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   164  /*** FUNCTIONS ****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   165  DEM_INLINE Dem_boolean_least Dem_EvtGetHistoryStatus(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   166  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   167  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   168      return Dem_BitArrayIsBitSet(Dem_AllEventsHistoryStatus, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   169  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   170      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   171      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   172  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   173  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   174  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   176  DEM_INLINE void Dem_EvtSetHistoryStatus(Dem_EventIdType EventId, boolean newStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   177  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   178  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   179      Dem_BitArrayOverwriteBit(Dem_AllEventsHistoryStatus, EventId, newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   180      Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   181  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   182      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   183      DEM_UNUSED_PARAM(newStatus);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   184  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   185  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   186  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   187  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   188  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   189  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   190  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   191  /*-- DEBOUNCE LEVEL ----------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   192  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   193  DEM_INLINE sint16 Dem_EvtGetDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   194  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   195     return Dem_AllEventsState[EventId].debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   196  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   197  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   199  DEM_INLINE void Dem_EvtSetDebounceLevel (Dem_EventIdType EventId, sint16 debounceLevel)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   200  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   201     Dem_AllEventsState[EventId].debounceLevel = debounceLevel;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   202  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   203  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   204  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   205  DEM_INLINE void Dem_EvtIncDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   206  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   207     Dem_AllEventsState[EventId].debounceLevel++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   208  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   209  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   210  DEM_INLINE void Dem_EvtDecDebounceLevel (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   211  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   212     Dem_AllEventsState[EventId].debounceLevel--;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   213  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   214  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   215  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   217  /*-- LAST REPORTED EVENT -----------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   218  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   219  DEM_INLINE Dem_EventStatusType Dem_EvtGetLastReportedEvent (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   220  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   221     return Dem_AllEventsState8[EventId].lastReportedEvent;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   222  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   223  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   224  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   225  DEM_INLINE void Dem_EvtSetLastReportedEvent (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   226  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   227     Dem_AllEventsState8[EventId].lastReportedEvent = EventStatus;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   228  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   230  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   232  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   233  /*-- RECOVERABLE -------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   234  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   235  Dem_boolean_least Dem_EvtIsRecoverable (Dem_EventIdType EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   237  DEM_INLINE Dem_boolean_least Dem_EvtIsNotRecoverableTOC(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   239      return (! Dem_EvtIsRecoverable(EventId));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   242  /*-- CAUSAL ------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   243  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   244  DEM_INLINE Dem_boolean_least Dem_EvtIsCausal (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   245  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   246     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   247  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   248  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   249  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   250  DEM_INLINE void Dem_EvtSetCausal_Flag (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   251  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   252      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   253     DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_CAUSALFAULT, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   254  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   255  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   256  DEM_INLINE Dem_boolean_least Dem_EvtIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   257  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   258  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   259      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   260  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   261      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   262      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   263  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   264  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   266  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   267  DEM_INLINE void Dem_EvtSetIsRecheckedAndWaitingForMonResult (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   268  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   269  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   270      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   271      DEM_EVTSTATE_OVERWRITEBIT(&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_RECHECKEDANDWAITING_FOR_MONRES, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   272  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   273      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   274      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   275  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   276  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   277  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   278  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   279  #define DEM_START_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   280  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   281  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   282  boolean Dem_EvtClearEventAllowed ( Dem_EventIdType eventId );
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   283  void Dem_EvtSetCausal (Dem_EventIdType EventId, Dem_boolean_least causal);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   284  Std_ReturnType Dem_EvtResetIsoByteCallback(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   285  void Dem_EvtPreInitEvents (void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   286  void Dem_EvtInitEvents(void);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   287  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   288  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   289  void Dem_EvtSetSuppression (Dem_EventIdType EventId, Dem_boolean_least newSuppressed);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   290  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   291  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   292  #if (DEM_CFG_CHECKAPICONSISTENCY == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   293  /* Duplicate of Dem_GetEventTested to make it also available in the GeneralDiagnosticInfo RTE interface */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   294  Std_ReturnType Dem_GetEventTested_GeneralEvtInfo(Dem_EventIdType EventId, boolean* EventTested);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   295  #endif /* DEM_CFG_CHECKAPICONSISTENCY */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   297  #define DEM_STOP_SEC_ROM_CODE
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   298  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   299  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   300  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   301  //Function to Validate the Nv Blocks after startup
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   302  DEM_INLINE void Dem_EvtHistoryStatusInitCheckNvM(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   303  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   304      Dem_NvmResultType NvmResult;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   305  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   306      if(Dem_NvMIsInvalidateAllNVMBlocksRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   307      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   308          /* Set the EventStatus to its default value */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   309          DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   310          Dem_NvMClearBlockByInvalidate(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   311      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   312      else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   313      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   314          /* Get the Result of the NvM-Read (NvM_ReadAll) */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   315          NvmResult = Dem_NvmGetStatus (DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   316  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   317          /* Data read successfully */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   318          if (NvmResult != DEM_NVM_SUCCESS)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   319          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   320              /* Zero the content of event history status */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   321              DEM_MEMSET( &Dem_AllEventsHistoryStatus, 0x00, DEM_SIZEOF_VAR(Dem_AllEventsHistoryStatus));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   322              Dem_NvMWriteBlockOnShutdown(DEM_NVM_ID_HISTORY_STATUS_BYTE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   323          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   324      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   326  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   327  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   328  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   329  /*-- SUSPICION ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   331  DEM_INLINE Dem_boolean_least Dem_EvtIsSuspicious (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   333     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   334  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   335  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   336  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   337  DEM_INLINE void Dem_EvtSetSuspicionLevel (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   338  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   339     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_SUSPICIONLEVEL, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   340  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   341  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   342  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   343  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   344  /*-- ROBUSTNESS --------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   345  #if(DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD == DEM_CFG_SUPPORTEVENTMEMORYENTRY_ONFDCTHRESHOLD_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   346  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReachedTOC (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   347  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   348    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   349  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   350  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   351  DEM_INLINE void Dem_EvtSetFDCThresholdReachedTOC (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   352  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   353     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHEDTOC, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   354  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   355  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   356  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   357  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   358  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   359  DEM_INLINE Dem_boolean_least Dem_EvtGetFDCThresholdReached (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   360  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   361    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   362  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   363  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   364  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   365  DEM_INLINE void Dem_EvtSetFDCThresholdReached (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   366  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   367  #if(DEM_CFG_SUPPORT_EVENT_FDCTHRESHOLDREACHED)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   368     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_FDCTHRESHOLDREACHED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   369  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   370     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   371     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   372  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   373  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   374  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   375  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   376  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   377  /*-- CATEGORY ----------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   378  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   379  #if (DEM_CFG_EVTCATEGORY == DEM_CFG_EVTCATEGORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   380  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   381  DEM_INLINE Dem_EvtCategoryPriorityType Dem_GetEventCategoryPriority (Dem_EventCategoryType Category)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   382  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   383      return (Dem_EvtCategoryPriorityType) Dem_EvtCategoryPrio[Category].evtcatprio;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   384  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   385  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   386  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   387  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   388  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   389  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   390  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   391  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   392  /*-- STORAGECONDITION --------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   393  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   394  DEM_INLINE Dem_boolean_least Dem_EvtIsStorageFiltered (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   395  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   396  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   397     return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   398  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   399     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   400     return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   401  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   402  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   403  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   404  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   405  DEM_INLINE void Dem_EvtSetStorageFiltered (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   406  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   407  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   408     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_ISSTORAGEFILTERED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   409  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   410     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   411     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   412  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   413  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   414  DEM_INLINE Dem_boolean_least Dem_EvtAllEnableConditionsFulfilled (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   415  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   416     return (Dem_EnCoAreAllFulfilled(Dem_EvtParam_GetEnableConditions(EventId)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   417  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   418  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   419  /*-- RESET CDB ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   420  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   421  DEM_INLINE void Dem_EvtRequestResetFailureFilter(Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   422  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   423      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   424      Dem_BitArrayOverwriteBit(Dem_AllEventsResetDebouncerRequested, EventId, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   425  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   426  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   427  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequested(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   428  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   429      return Dem_BitArrayIsBitSet(Dem_AllEventsResetDebouncerRequested, EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   430  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   431  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   432  /*-- Reset Debounce counter requested for Control DTC Setting-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   433  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   434  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterDtcSetting (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   435  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   436  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   437  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   438  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   439      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   440  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   441      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   442      return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   443  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   444  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   445  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   446  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   447  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterDtcSetting (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   448  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   449  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   450      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   451  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   452  #if (!DEM_CFG_DTCSETTINGBLOCKSREPORTING)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   453     DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_DEBCOUNTER_RESET_REQUESTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   454  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   455     DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   456     DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   457  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   458  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   459  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   460  /*-- Reset Debounce counter requested for Storage Condition-----------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   461  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   462  DEM_INLINE void Dem_EvtRequestResetFailureFilterAfterStorageCondition (Dem_EventIdType EventId, Dem_boolean_least setBit)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   463  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   464  	DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   465  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   466      DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED, setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   467  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   468      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   469      DEM_UNUSED_PARAM(setBit);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   470  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   471  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   472  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   473  DEM_INLINE Dem_boolean_least Dem_EvtIsResetFailureFilterRequestedAfterStorageCondition (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   474  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   475  #if (DEM_CFG_STORAGECONDITION == DEM_CFG_STORAGECONDITION_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   476      return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_IS_STORAGEFILTERED_EVENT_REPORTED);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   477  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   478      DEM_UNUSED_PARAM(EventId);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   479  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   480  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   481  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   482  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   483  DEM_INLINE void Dem_EvtIncreaseGlobalInitMonitoringCounter(void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   484  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   485      Dem_GlobalInitMonitoringCounter++;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   486  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   487  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   488  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   489  DEM_INLINE void Dem_EvtSetAnyInitMonitoring (Dem_InitMonitorReasonType reason) { rba_DiagLib_Bit32SetBit(&Dem_EvtIsAnyInitMonitoringRequestedMask, reason); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   490  DEM_INLINE void Dem_EvtResetAnyInitMonitoring (void) { Dem_EvtIsAnyInitMonitoringRequestedMask = 0u; }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   491  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequested (void) { return (Dem_EvtIsAnyInitMonitoringRequestedMask != 0u); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   492  DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedClear (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_CLEAR); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   493  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRestart (void) { return rba_DiagLib_Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_RESTART); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   494  //DEM_INLINE boolean Dem_EvtIsAnyInitMonitoringRequestedRecheck (void) { return rba_DiagLib__Bit32IsBitSet(Dem_EvtIsAnyInitMonitoringRequestedMask, DEM_INIT_MONITOR_STORAGE_REENABLED); }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   495  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   496  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   497  DEM_INLINE void Dem_EvtSetInitMonitoring (Dem_EventIdType EventId, Dem_InitMonitorReasonType newReason)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   498  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   499      Dem_InitMonitorReasonType oldReason = (Dem_InitMonitorReasonType)DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   500  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   501      DEM_ASSERT_ISLOCKED();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   502      if ((oldReason == 0u) || (oldReason > newReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   503      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   504          DEM_EVTSTATE_OVERWRITEBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE, newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   505      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   506      Dem_EvtIncreaseGlobalInitMonitoringCounter();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   507      Dem_EvtSetAnyInitMonitoring (newReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   508  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   509  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   510  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   511  /* if return value is != 0 an InitMon is requested; return value does not match the AR values DEM_INIT_MONITOR_* */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   512  DEM_INLINE uint8 Dem_EvtIsInitMonitoringRequested (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   513  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   514    return ((uint8)(DEM_EVTSTATE_GETBITS (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE )));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   515  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   516  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   517  DEM_INLINE void Dem_EvtClearInitMonitoringRequests (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   518  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   519    DEM_EVTSTATE_CLEARBITS (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_INITMONITORING, DEM_EVT_BP_STATE_INITMONITORING_SIZE);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   520  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   521  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   522  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   523  #if(DEM_CFG_CALLBACK_INIT_MON_FOR_EVENT_SUPPORTED == TRUE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   524  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   525  DEM_INLINE void Dem_InitMonitorForEFnc (void)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   526  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   527      Dem_InitMonitorReasonType InitMonitorReason;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   528      uint16_least i;
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   529      if(Dem_EvtIsAnyInitMonitoringRequested())
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   530      {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   531          DEM_ENTERLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   532  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   533          Dem_EvtResetAnyInitMonitoring();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   534  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   535          DEM_EXITLOCK_MON();
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   536          for (i=0u; i<DEM_CFG_CALLBACK_INITMFORE_LISTLENGTH; i++)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   537          {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   538              if(Dem_IsInitMonitorForEventRequested(Dem_Cfg_Callback_InitMForE_List[i].Eventid, &InitMonitorReason))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   539              {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   540                  Dem_Cfg_Callback_InitMForE_List[i].InitMForEAllwdCBFnc(InitMonitorReason);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   541              }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   542          }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   543      }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   544  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   545  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   546  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   547  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   548  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   549  #if ( DEM_CFG_EVT_STATUS_CHANGE_NUM_CALLBACKS > 0 )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   550  DEM_INLINE void Dem_CallEventStatusChangedCallBack (Dem_EventIdType EventId, Dem_UdsStatusByteType EventStatusOld, Dem_UdsStatusByteType EventStatusNew )
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   551  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   552    if (Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId) > 0)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   553    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   554      (*Dem_AllEventsStatusChangedFnc[Dem_EvtParam_GetCallbackEventStatusChangedIndex(EventId)])(EventId, EventStatusOld, EventStatusNew);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   555    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   556    else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   557    {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   558      /* No Call-back has been configured for this Event */
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   559    }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   560  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   561  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   562  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   563  /*WIRStatus set by External Source*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   564  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   565  #if(DEM_CFG_EVT_INDICATOR != DEM_CFG_EVT_INDICATOR_PROJECTSPECIFIC)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   566  DEM_INLINE void Dem_EvtSetWIRExtern(Dem_EventIdType EventId, Dem_boolean_least newState)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   567  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   568    DEM_EVTSTATE_OVERWRITEBIT (&Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL,newState);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   569  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   570  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   571  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   572  DEM_INLINE Dem_boolean_least Dem_EvtIsWIRExternal(Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   573  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   574    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_WIRSTATUS_EXTERNAL);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   575  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   576  #else
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   577  #define Dem_EvtSetWIRExtern(X,Y)    do{}while(0);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   578  #define Dem_EvtIsWIRExternal(X)     (FALSE)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   579  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   580  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   581  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   582  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   583  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   584  /*-- OPERATION CYCLE ---------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   585  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   586  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByOperationCycleList (Dem_EventIdType EventId, Dem_OperationCycleList operationCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   587  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   588    return ((operationCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetOperationCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   589  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   590  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   591  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByAgingCycleList (Dem_EventIdType EventId, Dem_OperationCycleList agingCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   592  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   593    return ((agingCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetAgingCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   594  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   595  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   596  DEM_INLINE Dem_boolean_least Dem_isEventAffectedByFailureCycleList (Dem_EventIdType EventId, Dem_OperationCycleList failureCycleList)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   597  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   598     return ((failureCycleList & (Dem_OperationCycleList)(1u<<Dem_EvtParam_GetFailureCycleID(EventId))) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   599  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   600  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   601  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   602  /*-- DISTURBANCE MEMORY ---------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   603  #if(DEM_CFG_DISTURBANCE_MEMORY == DEM_CFG_DISTURBANCE_MEMORY_ON)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   604  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   605  #define DEM_DIST_MEM_IND_SET_BIT_MASK   (Dem_EvtStateType)(((Dem_EvtStateType)DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK) << DEM_EVT_BP_STATE_DIST_MEM_IDX)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   606  #define DEM_DIST_MEM_IND_CLEAR_BIT_MASK (Dem_EvtStateType)(~((Dem_EvtStateType)DEM_DIST_MEM_IND_SET_BIT_MASK))
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   607  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   608  DEM_INLINE Dem_boolean_least Dem_EvtIsEventStoredInDistMem (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   609  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   610    return ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) != 0u);
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   611  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   612  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   613  DEM_INLINE void Dem_EvtSetEventsDistMemIndex (Dem_EventIdType EventId , uint8 idx)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   614  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   615  	Dem_AllEventsState[EventId].state = ((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_CLEAR_BIT_MASK) |   \ 
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   616  			((Dem_EvtStateType)(((Dem_EvtStateType)(idx & DEM_EVT_BP_STATE_DIST_MEM_IDX_MASK)) << DEM_EVT_BP_STATE_DIST_MEM_IDX)));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   617  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   618  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   619  DEM_INLINE uint8 Dem_EvtGetEventsDistMemIndex (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   620  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   621  	return ((uint8)((Dem_AllEventsState[EventId].state & DEM_DIST_MEM_IND_SET_BIT_MASK) >> DEM_EVT_BP_STATE_DIST_MEM_IDX));
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   622  }
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   623  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   624  #endif
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   625  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   626  /*------EventSuppression-------------------------------------------------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   627  
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   628  DEM_INLINE Dem_boolean_least Dem_EvtIsSuppressed (Dem_EventIdType EventId)
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   629  {
; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);
	movh.a	a15,#@his(Dem_AllEventsState)
	lea	a15,[a15]@los(Dem_AllEventsState)
.L1763:
	addsc.a	a15,a15,d4,#2
.L1764:
	ld.bu	d15,[a15]
.L1765:
	mov	d0,#2
.L802:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d0,#0
	sha	d15,d15,d0
.L1766:
	and	d15,#1
.L1767:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L413

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L413:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1768:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L414

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L414:

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   630    return DEM_EVTSTATE_ISBITSET (Dem_AllEventsState[EventId].state, DEM_EVT_BP_STATE_NOTAVAILABLE);      (inlined)
	j	.L415

; .\BSW\src\BSW\Gen\Dem\src\event\Dem_Events.h	   631  }      (inlined)
.L415:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   804      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   805  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   806      *AvailableStatus = (boolean)Dem_EvtIsSuppressed(EventId);
	st.b	[a4],d15
.L800:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   807      return E_OK;
	mov	d2,#0
.L1769:
	j	.L416

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   808  }
.L416:
.L412:
.L407:
	ret
.L795:
	
__Dem_GetEventAvailable_function_end:
	.size	Dem_GetEventAvailable,__Dem_GetEventAvailable_function_end-Dem_GetEventAvailable
.L531:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_SetEventSuppression',code,cluster('Dem_SetEventSuppression')
	.sect	'.text.Dem_EventFHandling.Dem_SetEventSuppression'
	.align	2
	
	.global	Dem_SetEventSuppression

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   809  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   810  Std_ReturnType Dem_SetEventSuppression(Dem_EventIdType EventId, boolean SuppressionStatus)
; Function Dem_SetEventSuppression
Dem_SetEventSuppression:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   811  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   812      Std_ReturnType returnVal;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   813      Dem_UdsStatusByteType evtStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   814  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   815  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   816      Dem_ComponentIdType ComponentId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   817  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   818  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   819  	DEM_ENTRY_CONDITION_CHECK_PREINIT_EVTIDVALID(EventId,DEM_DET_APIID_DEM_SETEVENTAVAILABLE,E_NOT_OK);
.L417:
.L418:
.L419:
	movh.a	a15,#@his(Dem_OpMoState)
	lea	a15,[a15]@los(Dem_OpMoState)
	ld.bu	d15,[a15]
	jne	d15,#0,.L420
	mov	d4,#54
.L1663:
	mov	d5,#0
.L1664:
	mov	d6,#55
	mov	d7,#32
	call	Det_ReportError
	mov	d2,#1
	j	.L421
.L420:
.L422:
.L423:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
	mov	d15,#0
.L1943:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
	jeq	d4,#0,.L424
.L1944:
	ge.u	d0,d4,#6
.L1945:
	sel	d15,d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));      (inlined)
.L425:
.L424:
	j	.L426

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }      (inlined)
.L426:
	jne	d15,#0,.L427
.L1114:
	mov	d4,#54
.L1665:
	mov	d5,#0
.L1666:
	mov	d6,#55
	mov	d7,#16
	call	Det_ReportError
	mov	d2,#1
	j	.L428
.L427:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     1  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     2  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     3  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     4  #ifndef DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     5  #define DEM_EVENTSTATUS_H
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     6  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     7  #include "Dem_ISO14229Byte.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     8  #include "Dem_Array.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	     9  #include "Dem_Cfg_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    10  #include "Dem_Cfg_EventId.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    11  #include "Dem_Cfg_OperationCycle.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    12  #include "Dem_Cfg_EvMem.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    13  #include "Dem_Cfg_Clear.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    14  #include "Dem_Events.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    15  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    16  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    17  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    18  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    19  #define DEM_START_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    20  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    21  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    22  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByte, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    23  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    24  #define DEM_STOP_SEC_SAVED_ZONE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    25  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    26  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    27  #define DEM_START_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    28  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    29  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    30  #if DEM_CFG_CUSTOMIZABLEDTCSTATUSBYTE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    31  DEM_ARRAY_DECLARE(      uint8, Dem_AllEventsStatusByteCust, DEM_EVENTID_ARRAYLENGTH);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    32  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    33  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    34  #define DEM_STOP_SEC_RAM_CLEARED
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    35  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    36  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    37  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    38  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    39  #define DEM_START_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    40  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    41  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    42  DEM_INLINE Dem_UdsStatusByteType Dem_EvtGetIsoByte (Dem_EventIdType EventId)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    43  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];
	movh.a	a15,#@his(Dem_AllEventsStatusByte)
	lea	a15,[a15]@los(Dem_AllEventsStatusByte)
.L1946:
	addsc.a	a15,a15,d4,#0
	ld.bu	d0,[a15]
.L1668:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    44      return Dem_AllEventsStatusByte[EventId];      (inlined)
	j	.L429

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventStatus.h	    45  }      (inlined)
.L429:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
	mov	d15,#0
.L1119:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d15,#0
	sha	d15,d0,d15
.L1947:
	and	d15,#1
.L1948:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L430

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L430:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1949:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L431

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L431:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);      (inlined)
	j	.L432

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }      (inlined)
.L432:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   820  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   821  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   822  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   823      ComponentId = Dem_NodeIdFromEventId(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   824  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   825      if((!SuppressionStatus) && (!Dem_NodeIsAvailable(ComponentId)))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   826      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   827          return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   828      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   829  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   830  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   831  	DEM_ENTERLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   832  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   833  	evtStatus = Dem_EvtGetIsoByte(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   834  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   835      if(    Dem_ISO14229ByteIsTestFailed(evtStatus)
	jne	d15,#0,.L433
.L1117:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
	mov	d15,#2
.L1129:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d15,#0
	sha	d15,d0,d15
.L1950:
	and	d15,#1
.L1951:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L434

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L434:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1952:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L435

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L435:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);      (inlined)
	j	.L436

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }      (inlined)
.L436:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   836          || Dem_ISO14229ByteIsPendingDTC(evtStatus)
	jne	d15,#0,.L437
.L1125:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
	mov	d15,#3
.L1135:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d15,#0
	sha	d15,d0,d15
.L1953:
	and	d15,#1
.L1954:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L438

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L438:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1955:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L439

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L439:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);      (inlined)
	j	.L440

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }      (inlined)
.L440:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   837          || Dem_ISO14229ByteIsConfirmedDTC(evtStatus)
	jne	d15,#0,.L441
.L1131:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     4  #ifndef DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     5  #define DEM_ISO14229BYTE_H
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     7  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     8  #include "rba_DiagLib_Bits8.h"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	     9  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    11  /* Refer to Dem_UdsStatusByteType */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    12  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    13  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    14  #define DEM_ISO14229_TESTFAILED             0u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    15  #define DEM_ISO14229_TESTFAILED_TOC         1u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    16  #define DEM_ISO14229_TESTFAILED_SLC         5u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    17  #define DEM_ISO14229_TESTNOTCOMPLETE_TOC    6u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    18  #define DEM_ISO14229_TESTNOTCOMPLETE_SLC    4u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    19  #define DEM_ISO14229_PENDINGDTC             2u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    20  #define DEM_ISO14229_CONFIRMEDDTC           3u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    21  #define DEM_ISO14229_WARNINGINDICATOR       7u
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    22  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    23  #define DEM_ISO14229_BM_TESTFAILED             (1u<<DEM_ISO14229_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    24  #define DEM_ISO14229_BM_TESTFAILED_TOC         (1u<<DEM_ISO14229_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    25  #define DEM_ISO14229_BM_TESTFAILED_SLC         (1u<<DEM_ISO14229_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    26  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    27  #define DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC    (1u<<DEM_ISO14229_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    28  #define DEM_ISO14229_BM_PENDINGDTC             (1u<<DEM_ISO14229_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    29  #define DEM_ISO14229_BM_CONFIRMEDDTC           (1u<<DEM_ISO14229_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    30  #define DEM_ISO14229_BM_WARNINGINDICATOR       (1u<<DEM_ISO14229_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    31  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    32  #if (DEM_ISO14229_BM_TESTFAILED           !=  DEM_UDS_STATUS_TF)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    33  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    34  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    36  #if (DEM_ISO14229_BM_TESTFAILED_TOC       !=  DEM_UDS_STATUS_TFTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    37  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    38  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    39  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    40  #if (DEM_ISO14229_BM_TESTFAILED_SLC       !=  DEM_UDS_STATUS_TFSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    41  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    42  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    43  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    44  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC  !=  DEM_UDS_STATUS_TNCTOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    45  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    46  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    47  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    48  #if (DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC  !=  DEM_UDS_STATUS_TNCSLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    49  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    50  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    51  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    52  #if (DEM_ISO14229_BM_PENDINGDTC           !=  DEM_UDS_STATUS_PDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    53  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    54  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    55  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    56  #if (DEM_ISO14229_BM_CONFIRMEDDTC         !=  DEM_UDS_STATUS_CDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    57  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    58  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    59  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    60  #if (DEM_ISO14229_BM_WARNINGINDICATOR     !=  DEM_UDS_STATUS_WIR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    61  #error Bit definition error
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    62  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    65  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    66  #define DEM_ISO14229BYTE_INITVALUE            		( (DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)|(DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC) )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    67  #define DEM_ISO14229BYTE_MASK_PENDING_CONFIRMED     ( DEM_ISO14229_BM_PENDINGDTC | DEM_ISO14229_BM_CONFIRMEDDTC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    68  /*#define DEM_ISO14229BYTE_MASK_FAILED_COMPLETE_WIR   ( DEM_ISO14229_BM_TESTFAILED | DEM_ISO14229_BM_TESTFAILED_TOC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    69                                                        | DEM_ISO14229_BM_TESTFAILED_SLC | DEM_ISO14229_BM_WARNINGINDICATOR \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    70                                                        | DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC | DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    71   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    72  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    73  #define DEM_ISO14229BYTE_MASK_INDICATOR_OFF			(DEM_ISO14229_BM_CONFIRMEDDTC | DEM_ISO14229_BM_TESTFAILED \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    74                                                        | DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    75  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    76  #define DEM_ISO14229BYTE_MASK_TESTFAILEDSINCELASTCLEAR     ( DEM_ISO14229_BM_TESTFAILED_SLC )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    77  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    78  #if (DEM_UDS_STATUS_TF     != DEM_ISO14229_BM_TESTFAILED)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    79  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    80  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    81  #if (DEM_UDS_STATUS_TFTOC  != DEM_ISO14229_BM_TESTFAILED_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    82  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    83  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    84  #if (DEM_UDS_STATUS_PDTC   != DEM_ISO14229_BM_PENDINGDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    85  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    86  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    87  #if (DEM_UDS_STATUS_CDTC   != DEM_ISO14229_BM_CONFIRMEDDTC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    88  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    89  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    90  #if (DEM_UDS_STATUS_TNCSLC != DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    91  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    92  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    93  #if (DEM_UDS_STATUS_TFSLC  != DEM_ISO14229_BM_TESTFAILED_SLC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    94  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    95  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    96  #if (DEM_UDS_STATUS_TNCTOC != DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    97  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    98  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	    99  #if (DEM_UDS_STATUS_WIR    != DEM_ISO14229_BM_WARNINGINDICATOR)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   100  #error "WRONG BIT DEFINITION OF ISO14229BYTE"
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   101  #endif
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   102  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   105  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   106  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   107  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   108  /*
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   109   * concept idea for triggering storage to NVM for single status bytes
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   110   */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   111  #define DEM_ISO14229BYTE_NVMTRIGGER(STATUSBITSTORAGETESTFAILED, OPERATIONCYCLE_IS_PC) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   112          (0|DEM_ISO14229_BM_TESTNOTCOMPLETE_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   113                  |DEM_ISO14229_BM_TESTFAILED_SLC \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   114                  |(DEM_ISO14229_BM_TESTFAILED*(STATUSBITSTORAGETESTFAILED)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   115                  |(DEM_ISO14229_BM_TESTFAILED_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   116                  |(DEM_ISO14229_BM_TESTNOTCOMPLETE_TOC*(OPERATIONCYCLE_IS_PC)) \ 
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   117          )
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   118  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   120  /* query functions */
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   121  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   122  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailed (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   123  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   124      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   125  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   126  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   128  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   129  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   130  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   131      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   132  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   133  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   135  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   136  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestFailedSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   137  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   138      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTFAILED_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   139  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   140  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   141  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   142  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   143  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   144  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   145      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   146  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   147  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   148  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   149  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   150  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestNotCompleteSLC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   151  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   152      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_SLC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   153  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   154  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   155  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   157  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsTestCompleteTOC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   158  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   159      return !rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_TESTNOTCOMPLETE_TOC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   160  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   161  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   164  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsPendingDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   165  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   166      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_PENDINGDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   167  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   168  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   169  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   171  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsConfirmedDTC (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   172  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   173      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_CONFIRMEDDTC);
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   174  }
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   175  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   176  
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   177  DEM_INLINE Dem_boolean_least Dem_ISO14229ByteIsWarningIndicatorRequested (uint8 self)
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   178  {
; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);
	mov	d15,#7
.L1140:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     1  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     2  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     3  #ifndef RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     4  #define RBA_DIAGLIB_BITS8_H
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     5  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     6  #include "Std_Types.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     7  #include "Compiler.h"
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     8  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	     9  #define RBA_DIAGLIB_ISBITSET8       rba_DiagLib_Bit8IsBitSet
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    10  #define RBA_DIAGLIB_GETSINGLEBIT8   rba_DiagLib_Bit8GetSingleBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    11  #define RBA_DIAGLIB_GETBITS8        rba_DiagLib_Bit8GetBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    12  #define RBA_DIAGLIB_OVERWRITEBIT8   rba_DiagLib_Bit8OverwriteBit
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    13  #define RBA_DIAGLIB_OVERWRITEBITS8  rba_DiagLib_Bit8OverwriteBits
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    14  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    15  LOCAL_INLINE uint8 rba_DiagLib_Bit8Mask(uint8 pos, uint8 len)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    16  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    17      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    18      return (((bit2shift << len) - 1u) << pos);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    19  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    20  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    21  LOCAL_INLINE void rba_DiagLib_Bit8SetBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    22  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    23      *buffer |= bitMask;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    24  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    25  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    26  LOCAL_INLINE void rba_DiagLib_Bit8ClearBitMask(uint8 *buffer, uint8 bitMask)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    27  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    28      *buffer &= ((uint8) (~bitMask));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    29  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    30  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    31  LOCAL_INLINE void rba_DiagLib_Bit8MergeBitmask(uint8 *buffer, uint8 value)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    32  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    33      *buffer &= value;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    34  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    35  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    36  LOCAL_INLINE void rba_DiagLib_Bit8SetBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    37  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    38      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    39      *buffer |= ((uint8) (bit2shift << bit_position));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    40  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    41  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    42  LOCAL_INLINE void rba_DiagLib_Bit8ClearBit(uint8 *buffer, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    43  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    44      uint8 bit2shift = 1;
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    45      *buffer &= ((uint8) (~((uint8) (bit2shift << bit_position))));
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    46  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    47  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    48  LOCAL_INLINE void rba_DiagLib_Bit8OverwriteBit(uint8 *buffer, uint8 bit_position, boolean will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    49  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    50      if (will_bit_be_set)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    51      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    52          rba_DiagLib_Bit8SetBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    53      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    54      else
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    55      {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    56          rba_DiagLib_Bit8ClearBit(buffer, bit_position);
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    57      }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    58  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    59  
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    60  LOCAL_INLINE uint8 rba_DiagLib_Bit8GetSingleBit(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    61  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);
	rsub	d15,#0
	sha	d0,d0,d15
.L1669:
	and	d15,d0,#1
.L1956:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    62      return (uint8) ((value >> (bit_position)) & 1u);      (inlined)
	j	.L442

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }      (inlined)
.L442:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    63  }
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    64  LOCAL_INLINE boolean rba_DiagLib_Bit8IsBitSet(uint8 value, uint8 bit_position)
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    65  {
; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);
	ne	d15,d15,#0
.L1957:

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    66      return (boolean) (rba_DiagLib_Bit8GetSingleBit(value, bit_position) != 0u);      (inlined)
	j	.L443

; .\BSW\src\BSW\Gen\Rba_DiagLib\src\rba_DiagLib_Bits8.h	    67  }      (inlined)
.L443:

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   179      return rba_DiagLib_Bit8IsBitSet (self, DEM_ISO14229_WARNINGINDICATOR);      (inlined)
	j	.L444

; .\BSW\src\BSW\Gen\Dem\src\lib\Dem_ISO14229Byte.h	   180  }      (inlined)
.L444:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   838          || Dem_ISO14229ByteIsWarningIndicatorRequested(evtStatus))
	jeq	d15,#0,.L445
.L441:
.L437:
.L433:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   839  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   840  	    returnVal =  E_NOT_OK;
	mov	d2,#1
.L1670:
	j	.L446
.L445:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   841  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   842  	else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   843  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   844  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   845  	    Dem_EvtSetSuppression(EventId, SuppressionStatus);
	call	Dem_EvtSetSuppression
.L1667:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   846  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   847  	    DEM_UNUSED_PARAM(SuppressionStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   848  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   849  	    returnVal = E_OK;
	mov	d2,#0
.L446:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   850  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   851  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   852  	DEM_EXITLOCK_MON();
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   853  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   854  	return returnVal;
	j	.L447

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   855  }
.L447:
.L428:
.L421:
	ret
.L1109:
	
__Dem_SetEventSuppression_function_end:
	.size	Dem_SetEventSuppression,__Dem_SetEventSuppression_function_end-Dem_SetEventSuppression
.L571:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_SetEventSuppressionByDTC',code,cluster('Dem_SetEventSuppressionByDTC')
	.sect	'.text.Dem_EventFHandling.Dem_SetEventSuppressionByDTC'
	.align	2
	
	.global	Dem_SetEventSuppressionByDTC

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   856  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   857  Std_ReturnType Dem_SetEventSuppressionByDTC(uint32 DTC, Dem_DTCFormatType DTCFormat, boolean SuppressionStatus)
; Function Dem_SetEventSuppressionByDTC
.L498:
Dem_SetEventSuppressionByDTC:	.type	func
	sub.a	a10,#8
.L1671:
	mov	d10,d6
.L1673:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   858  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   859  #if((DEM_CFG_SUPPRESSION == DEM_EVENT_SUPPRESSION) || (DEM_CFG_SUPPRESSION == DEM_EVENT_AND_DTC_SUPPRESSION))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   860  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   861      Dem_EventIdListIterator eventIt;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   862      Dem_EventIdType eventId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   863      Std_ReturnType retval;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   864      Dem_DtcIdType dtcId;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   865  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   866      if (DTCFormat == DEM_DTC_FORMAT_UDS)
	jne	d5,#1,.L448
.L1962:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   867      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   868          dtcId = Dem_DtcIdFromDtcCode(DTC);
	call	Dem_DtcIdFromDtcCode
.L1672:
	mov	d8,d2
.L1674:
	j	.L449
.L448:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   869      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   870      else /* DEM_DTC_FORMAT_OBD */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   871      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   872          /* not implemented, DEM specification not clear eg: regarding handling of readiness */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   873          return E_NOT_OK;
	mov	d2,#1
.L1963:
	j	.L450
.L449:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L1964:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d8,#0,.L451
.L1965:
	ge.u	d15,d8,#5
.L1966:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L452:
.L451:
	j	.L453

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L453:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   874      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   875  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   876      if (!Dem_isDtcIdValid(dtcId))
	jne	d0,#0,.L454
.L1150:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   877      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   878          return E_NOT_OK;
	mov	d2,#1
.L1675:
	j	.L455
.L454:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   879      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   880  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   881      retval = E_OK;
	mov	d9,#0
.L1676:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   882      for (Dem_EventIdListIteratorNewFromDtcId(&eventIt, dtcId);
	lea	a12,[a10]0
.L1153:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
	mov	d0,#0
.L1967:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
	jeq	d8,#0,.L456
.L1968:
	ge.u	d15,d8,#5
.L1969:
	cmovn	d0,d15,#1

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));      (inlined)
.L457:
.L456:
	j	.L458

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }      (inlined)
.L458:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
	jne	d0,#0,.L459
.L1160:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
	mov	d4,#54
	mov	d5,#0
	mov	d6,#189
	mov	d7,#0
	call	Det_ReportError

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))      (inlined)
.L459:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
	movh.a	a15,#@his(Dem_MapDtcIdToEventId)
	lea	a15,[a15]@los(Dem_MapDtcIdToEventId)
.L1970:
	addsc.a	a15,a15,d8,#1
.L1971:
	st.a	[a12],a15
.L1972:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
	add.a	a15,#2
.L1973:
	st.a	[a10]4,a15
.L1154:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   883              Dem_EventIdListIteratorIsValid(&eventIt);
	j	.L460

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   884              Dem_EventIdListIteratorNext(&eventIt))
.L461:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   885      {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   886          eventId = Dem_EventIdListIteratorCurrent(&eventIt);
	lea	a15,[a10]0
.L1162:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   329  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   330  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   331  DEM_INLINE Dem_EventIdType Dem_EventIdListIteratorCurrent(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   332  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));
	ld.a	a15,[a15]
.L1974:
	ld.hu	d4,[a15]0
.L1975:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   333     return (Dem_EventIdType)(*(it->it));      (inlined)
	j	.L462

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   334  }      (inlined)
.L462:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   887  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   888          if (Dem_SetEventSuppression(eventId, SuppressionStatus) == E_NOT_OK)
	mov	d5,d10
.L1677:
	call	Dem_SetEventSuppression
.L1678:
	eq	d15,d2,#1
.L1976:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   889          {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   890              retval = E_NOT_OK;
	cmov	d9,d15,#1
.L463:
	lea	a15,[a10]0
.L1167:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   325  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   326  DEM_INLINE void Dem_EventIdListIteratorNext(Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   327  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   328     (it->it)++;
	ld.a	a2,[a15]
.L1977:
	add.a	a2,#2
	st.a	[a15],a2
.L460:
	lea	a15,[a10]0
.L1172:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     1  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     2  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     3  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     4  #ifndef DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     5  #define DEM_MAPPING_H
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     6  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     7  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     8  #include "Dem_Types.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	     9  #include "Dem_Lib.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    10  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    11  #include "Dem_Cfg_EventId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    12  #include "Dem_Cfg_DtcId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    13  #include "Dem_Cfg_NodeId.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    14  #include "Dem_Cfg_Nodes.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    15  #include "Dem_Cfg_EventIndicators.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    16  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    17  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    18  /*** EVENTID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    19  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    20  DEM_INLINE Dem_boolean_least Dem_isEventIdValid(Dem_EventIdType checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    21  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    22     return ((0 < checkID) && (checkID <= DEM_EVENTID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    23  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    24  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    25  /*Iterator for EventId*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    26  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    27  typedef uint16_least Dem_EventIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    28  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    29  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    30  #define DEM_EVENTIDITERATORNEW  1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    31  DEM_INLINE void Dem_EventIdIteratorNew(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    32  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    33     (*it) = DEM_EVENTIDITERATORNEW;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    34  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    35  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    36  DEM_INLINE Dem_boolean_least Dem_EventIdIteratorIsValid(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    37  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    38     return (*it <= DEM_EVENTID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    39  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    40  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    41  DEM_INLINE void Dem_EventIdIteratorNext(Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    42  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    43     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    44  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    45  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    46  DEM_INLINE Dem_EventIdType Dem_EventIdIteratorCurrent(const Dem_EventIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    47  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    48     return (Dem_EventIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    49  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    50  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    51  /*** NODEID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    52  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    53  #if (DEM_CFG_DEPENDENCY == DEM_CFG_DEPENDENCY_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    54  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    55  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    56  extern const Dem_ComponentIdType  Dem_MapEventIdToNodeId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    57  extern const Dem_EventIdType Dem_MapNodeIdToEventId[DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    58  extern const Dem_ComponentIdType  Dem_MapNodeIdToChildNodeId[DEM_CFG_CHILDNODE_LISTLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    59  extern const uint16 Dem_NodeToChildNodeIndex [DEM_NODEID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    60  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    61  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    62  #define DEM_NODEIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    63  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    64  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    65  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    66  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    67     return ((0 < checkID) && (checkID <= DEM_NODEID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    68  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    69  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    70  /*Iterator for NodeID*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    71  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    72  typedef uint16_least Dem_NodeIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    73  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    74  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    75  DEM_INLINE void Dem_NodeIdIteratorNew(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    76  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    77     (*it) = DEM_NODEIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    78  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    79  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    80  DEM_INLINE Dem_boolean_least Dem_NodeIdIteratorIsValid(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    81  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    82     return (*it <= DEM_NODEID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    83  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    84  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    85  DEM_INLINE void Dem_NodeIdIteratorNext(Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    86  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    87     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    88  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    89  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    90  DEM_INLINE Dem_ComponentIdType Dem_NodeIdIteratorCurrent(const Dem_NodeIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    91  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    92     return (Dem_ComponentIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    93  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    94  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    95  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    96  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    97     return Dem_MapEventIdToNodeId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    98  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	    99  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   100  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   101  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   102  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   103  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   104  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   105  DEM_INLINE Dem_ComponentIdType  Dem_NodeIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   106  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   107  	DEM_UNUSED_PARAM(id);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   108  	return DEM_NODEID_INVALID;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   109  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   110  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   111  DEM_INLINE Dem_boolean_least Dem_NodeIdIsValid (uint16 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   112  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   113  	DEM_UNUSED_PARAM(checkID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   114  	return FALSE;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   115  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   116  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   117  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   118  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   119  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   120  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   121  /*** DTCID *****************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   122  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   123  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   124  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   125  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   126  typedef Dem_EventIdType Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   127  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   128  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   129  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   130  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   131     const Dem_EventIdType *mappingTable;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   132     uint16 length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   133  } Dem_MapDtcIdToEventIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   134  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   135  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   136  typedef Dem_DTCGroupIdType Dem_MapDtcIdToGroupIdType;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   137  #define DEM_START_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   138  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   139  extern const Dem_MapDtcIdToEventIdType  Dem_MapDtcIdToEventId[DEM_DTCID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   140  extern const Dem_DtcIdType              Dem_MapEventIdToDtcId[DEM_EVENTID_ARRAYLENGTH];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   141  #define DEM_STOP_SEC_ROM_CONST
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   142  #include "Dem_Cfg_MemMap.h"
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   143  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   144  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   145  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   146  DEM_INLINE Dem_boolean_least Dem_EventIdIsDtcAssigned (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   147  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   148     return (Dem_MapEventIdToDtcId[id] != DEM_DTCID_INVALID);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   149  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   150  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   151  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   152  DEM_INLINE Dem_boolean_least Dem_isDtcIdValid (Dem_DtcIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   153  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   154     return ((0 < id) && (id <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   155  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   156  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   157  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   158  DEM_INLINE Dem_DtcIdType  Dem_DtcIdFromEventId (Dem_EventIdType id)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   159  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   160     return Dem_MapEventIdToDtcId[id];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   161  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   162  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   163  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   164  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   165  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   166  DEM_INLINE Dem_EventIdType Dem_DtcIdGetEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   167  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   168     return Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   169  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   170  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   171  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   172  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   173  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   174  DEM_INLINE Dem_EventIdType Dem_DtcIdGetFirstEventId (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   175  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   176  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   177     return Dem_DtcIdGetEventId(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   178  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   179     return Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   180  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   181  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   182  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   183  DEM_INLINE uint16 Dem_DtcIdGetNumberOfEvents (Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   184  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   185  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   186  	DEM_UNUSED_PARAM(dtcid);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   187  	return 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   188  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   189     return Dem_MapDtcIdToEventId[dtcid].length;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   190  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   191  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   192  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   193  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   194  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   195  /* ITERATOR for DtcID: loop over all existing DtcIds */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   196  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   197  typedef uint16_least Dem_DtcIdIterator; /* do not change to uint8_least */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   198  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   199  #define DEM_DTCIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   200  #define DEM_DTCIDITERATOR_INVALID()   (DEM_DTCID_COUNT+1)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   201  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   202  DEM_INLINE void Dem_DtcIdIteratorNew(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   203  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   204     (*it) = DEM_DTCIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   205  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   206  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   207  DEM_INLINE Dem_boolean_least Dem_DtcIdIteratorIsValid(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   208  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   209     return ((0u < *it) && (*it <= DEM_DTCID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   210  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   211  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   212  DEM_INLINE void Dem_DtcIdIteratorNext(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   213  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   214     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   215  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   216  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   217  DEM_INLINE Dem_DtcIdType Dem_DtcIdIteratorCurrent(const Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   218  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   219     return (Dem_DtcIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   220  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   221  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   222  DEM_INLINE void Dem_DtcIdIteratorInvalidate(Dem_DtcIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   223  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   224     (*it) =0;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   225  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   226  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   227  /*----Iterator for DTCGroup Id--------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   228  #define DEM_DTCGROUPIDITERATOR_NEW()       1
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   229  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   230  typedef uint8_least Dem_DtcGroupIdIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   231  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   232  DEM_INLINE void Dem_DtcGroupIdIteratorNew(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   233  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   234     (*it) = DEM_DTCGROUPIDITERATOR_NEW();
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   235  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   236  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   237  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIteratorIsValid(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   238  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   239     return (*it <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   240  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   241  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   242  DEM_INLINE void Dem_DtcGroupIdIteratorNext(Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   243  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   244     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   245  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   246  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   247  DEM_INLINE Dem_DTCGroupIdType Dem_DtcGroupIdIteratorCurrent(const Dem_DtcGroupIdIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   248  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   249     return (Dem_DTCGroupIdType)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   250  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   251  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   252  DEM_INLINE Dem_boolean_least Dem_DtcGroupIdIsValid (Dem_DTCGroupIdType dtcGroupID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   253  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   254  	/*
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   255  	 * As id is of type uint8 it is always positive and hence check against less than ZERO not necessary
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   256  	 */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   257     return (dtcGroupID <= DEM_DTCGROUPID_COUNT);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   258  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   259  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   260  /*----------------------------------------*/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   261  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   262  /************** Iterator functions for Indicator Attributes **************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   263  #if (DEM_CFG_EVT_INDICATOR == DEM_CFG_EVT_INDICATOR_ON)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   264  typedef uint16_least Dem_EventIndicatorAttributeIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   265  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   266  DEM_INLINE void Dem_EventIndicatorAttributeIteratorNew(Dem_EventIdType EventId, Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   267  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   268     (*it) = ((EventId - 1) * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT) ;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   269  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   270  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   271  DEM_INLINE Dem_boolean_least Dem_EventIndicatorAttributeIsValid(Dem_EventIdType EventId, const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   272  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   273     return (*it < (EventId * DEM_INDICATOR_ATTRIBUTE_MAX_PER_EVENT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   274  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   275  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   276  DEM_INLINE void Dem_EventIndicatorAttributeNext(Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   277  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   278     (*it)++;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   279  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   280  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   281  DEM_INLINE uint16_least Dem_EventIndicatorAttributeCurrent(const Dem_EventIndicatorAttributeIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   282  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   283     return (uint16_least)(*it);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   284  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   285  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   286  /*******************Indicator Id validator function *************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   287  DEM_INLINE Dem_boolean_least Dem_isIndicatorIdValid (uint8 checkID)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   288  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   289  	return ((checkID  != DEM_INDICATORID_INVALID) && (checkID <= DEM_INDICATORID_COUNT));
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   290  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   291  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   292  /*************************************************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   293  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   294  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   295  /*** LIST-ITERATORS ********************************************************/
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   296  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   297  /* ITERATOR for lists of EventIds: loop over all events assigned to a dtc/ */
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   298  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   299  typedef struct {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   300     const Dem_EventIdType* it;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   301     const Dem_EventIdType* end;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   302  } Dem_EventIdListIterator;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   303  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   304  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   305  DEM_INLINE void Dem_EventIdListIteratorNewFromDtcId(Dem_EventIdListIterator *it, Dem_DtcIdType dtcid)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   306  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   307  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   308     if (!(Dem_isDtcIdValid(dtcid)))
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   309     {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   310   	  DEM_DET(DEM_DET_APIID_EVENTIDLISTITERATOR,0);
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   311     }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   312  #if (DEM_CFG_EVCOMB == DEM_CFG_EVCOMB_DISABLED)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   313     it->it = &Dem_MapDtcIdToEventId[dtcid];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   314     it->end = &Dem_MapDtcIdToEventId[dtcid] + 1;
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   315  #else
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   316     it->it = &Dem_MapDtcIdToEventId[dtcid].mappingTable[0];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   317     it->end = &Dem_MapDtcIdToEventId[dtcid].mappingTable[Dem_MapDtcIdToEventId[dtcid].length];
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   318  #endif
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   319  }
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   320  
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   321  DEM_INLINE Dem_boolean_least Dem_EventIdListIteratorIsValid(const Dem_EventIdListIterator *it)
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   322  {
; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));
	ld.a	a15,[a15]
.L1978:
	ld.a	a2,[a10]4
.L1979:
	lt.a	d15,a15,a2
.L1980:

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   323     return ((Dem_boolean_least)(it->it < it->end));      (inlined)
	j	.L464

; .\BSW\src\BSW\Gen\Dem\src\map\Dem_Mapping.h	   324  }      (inlined)
.L464:
	jne	d15,#0,.L461
.L1981:

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   891          }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   892      }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   893  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   894      return retval;
	mov	d2,d9
.L1679:
	j	.L465

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   895  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   896  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   897      DEM_UNUSED_PARAM(DTC);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   898      DEM_UNUSED_PARAM(DTCFormat);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   899      DEM_UNUSED_PARAM(SuppressionStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   900      return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   901  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   902  }
.L465:
.L455:
.L450:
	ret
.L1141:
	
__Dem_SetEventSuppressionByDTC_function_end:
	.size	Dem_SetEventSuppressionByDTC,__Dem_SetEventSuppressionByDTC_function_end-Dem_SetEventSuppressionByDTC
.L576:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_AllowHistoryStatus',code,cluster('Dem_AllowHistoryStatus')
	.sect	'.text.Dem_EventFHandling.Dem_AllowHistoryStatus'
	.align	2
	
	.global	Dem_AllowHistoryStatus

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   903  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   904  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   905  void Dem_AllowHistoryStatus(void)
; Function Dem_AllowHistoryStatus
.L500:
Dem_AllowHistoryStatus:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   906  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   907  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   908  	Dem_HistoryStatusAllowed = TRUE;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   909  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   910  }
	ret
.L807:
	
__Dem_AllowHistoryStatus_function_end:
	.size	Dem_AllowHistoryStatus,__Dem_AllowHistoryStatus_function_end-Dem_AllowHistoryStatus
.L536:
	; End of function
	
	.sdecl	'.text.Dem_EventFHandling.Dem_GetHistoryStatus',code,cluster('Dem_GetHistoryStatus')
	.sect	'.text.Dem_EventFHandling.Dem_GetHistoryStatus'
	.align	2
	
	.global	Dem_GetHistoryStatus

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   911  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   912  /* MR12 RULE 8.13 VIOLATION: parameter historyStatus not made const, as it is modified by Dem_EvtGetHistoryStatus() subfunction */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   913  Std_ReturnType Dem_GetHistoryStatus ( Dem_EventIdType EventId, boolean* historyStatus)
; Function Dem_GetHistoryStatus
.L502:
Dem_GetHistoryStatus:	.type	func

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   914  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   915  #if(DEM_CFG_ALLOW_HISTORY == DEM_CFG_ALLOW_HISTORY_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   916  	 if(Dem_EvtIsSuppressed(EventId))
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   917  	 {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   918  	  return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   919  	 }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   920  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   921  	if(historyStatus != NULL_PTR)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   922  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   923  		*historyStatus = (boolean)Dem_EvtGetHistoryStatus(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   924  		return E_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   925  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   926  	else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   927  	{
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   928  		DEM_DET(DEM_DET_APIID_GETHISTORYSTATUS, DEM_E_PARAM_POINTER);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   929  		return E_NOT_OK;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   930  	}
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   931  #else
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   932  	DEM_UNUSED_PARAM(EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   933  	DEM_UNUSED_PARAM(historyStatus);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   934  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   935  	return E_NOT_OK;
	mov	d2,#1
.L1788:
	j	.L466

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   936  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   937  }
.L466:
	ret
.L814:
	
__Dem_GetHistoryStatus_function_end:
	.size	Dem_GetHistoryStatus,__Dem_GetHistoryStatus_function_end-Dem_GetHistoryStatus
.L551:
	; End of function
	
	.sdecl	'.bss.Dem_EventFHandling.Dem_ErrorQueue_Handler',data,cluster('Dem_ErrorQueue_Handler')
	.sect	'.bss.Dem_EventFHandling.Dem_ErrorQueue_Handler'
	.align	2
Dem_ErrorQueue_Handler:	.type	object
	.size	Dem_ErrorQueue_Handler,8
	.space	8
	.sdecl	'.bss.Dem_EventFHandling.Dem_ErrorQueue',data,cluster('Dem_ErrorQueue')
	.sect	'.bss.Dem_EventFHandling.Dem_ErrorQueue'
	.align	4
Dem_ErrorQueue:	.type	object
	.size	Dem_ErrorQueue,132
	.space	132
	.sdecl	'.bss.Dem_EventFHandling.Dem_ErrorQueueControl',data,cluster('Dem_ErrorQueueControl')
	.sect	'.bss.Dem_EventFHandling.Dem_ErrorQueueControl'
	.align	2
Dem_ErrorQueueControl:	.type	object
	.size	Dem_ErrorQueueControl,2
	.space	2
	.sdecl	'.rodata.Dem_EventFHandling..1.ini',data,rom
	.sect	'.rodata.Dem_EventFHandling..1.ini'
	.align	4
.1.ini:	.type	object
	.size	.1.ini,12
	.space	12
	.calls	'Dem_SetEventStatus','Dem_SetEventStatusWithEnvData'
	.calls	'Dem_ReportErrorStatus','Dem_ReportErrorStatusWithEnvData'
	.calls	'Dem_SetEventStatusWithEnvData','Det_ReportError'
	.calls	'Dem_SetEventStatusWithEnvData','Dem_IsPendingClearEvent'
	.calls	'Dem_SetEventStatusWithEnvData','Dem_DebHandleResetConditions'
	.calls	'Dem_SetEventStatusWithEnvData','__INDIRECT__'
	.calls	'Dem_SetEventStatusWithEnvData','Dem_EvBuffInsert'
	.calls	'Dem_SetEventStatusWithEnvData','Dem_EvtProcessPassedAndFailed'
	.calls	'Dem_GetEventFailed','Det_ReportError'
	.calls	'Dem_GetEventFailed_GeneralEvtInfo','Dem_GetEventFailed'
	.calls	'Dem_ReportErrorStatusDisableQueue','rba_BswSrv_MemCopy'
	.calls	'Dem_ReportErrorStatusDisableQueue','Dem_EvtProcessPassedAndFailed'
	.calls	'Dem_ReportErrorStatusWithEnvData','Det_ReportError'
	.calls	'Dem_ReportErrorStatusWithEnvData','Dem_SetEventStatusWithEnvData'
	.calls	'Dem_ReportErrorStatusWithEnvData','Dem_IsEventEnabledByDtcSetting'
	.calls	'Dem_ReportErrorStatusWithEnvData','__INDIRECT__'
	.calls	'Dem_ReportErrorStatusWithEnvData','Dem_EvBuffInsert'
	.calls	'Dem_ResetEventStatus','Det_ReportError'
	.calls	'Dem_EvtProcessPassedAndFailed','Dem_EvtIsRecoverable'
	.calls	'Dem_EvtProcessPassedAndFailed','Dem_NodeAreAllFailedFiltered'
	.calls	'Dem_EvtProcessPassedAndFailed','Dem_EvtSetCausal'
	.calls	'Dem_EvtProcessPassedAndFailed','Dem_EvBuffInsert'
	.calls	'Dem_SetEventAvailable','Dem_SetEventSuppression'
	.calls	'Dem_SetEventSuppression','Det_ReportError'
	.calls	'Dem_SetEventSuppression','Dem_EvtSetSuppression'
	.calls	'Dem_SetEventSuppressionByDTC','Dem_DtcIdFromDtcCode'
	.calls	'Dem_SetEventSuppressionByDTC','Det_ReportError'
	.calls	'Dem_SetEventSuppressionByDTC','Dem_SetEventSuppression'
	.calls	'Dem_SetEventStatus','',0
	.calls	'Dem_ReportErrorStatus','',0
	.calls	'Dem_SetEventStatusWithEnvData','',8
	.calls	'Dem_GetEventFailed','',0
	.calls	'Dem_GetEventFailed_GeneralEvtInfo','',0
	.calls	'Dem_GetEventFdcThresholdReached','',0
	.calls	'Dem_PreInitErrorQueue','',0
	.calls	'Dem_ReportErrorStatusDisableQueue','',16
	.calls	'Dem_ReportErrorStatusEnableQueue','',0
	.calls	'Dem_ReportErrorStatusWithEnvData','',8
	.calls	'Dem_ResetEventStatus','',8
	.calls	'Dem_EvtProcessPassedAndFailed','',8
	.calls	'Dem_GetEventSuspicious','',0
	.calls	'Dem_SetEventAvailable','',0
	.calls	'Dem_GetEventAvailable','',0
	.calls	'Dem_SetEventSuppression','',0
	.calls	'Dem_SetEventSuppressionByDTC','',8
	.calls	'Dem_AllowHistoryStatus','',0
	.extern	Dem_NodeAreAllFailedFiltered
	.extern	Det_ReportError
	.extern	rba_BswSrv_MemCopy
	.extern	Dem_MapDtcIdToEventId
	.extern	Dem_MapEventIdToDtcId
	.extern	Dem_OpMoState
	.extern	Dem_TestFailedStatusInitialized
	.extern	Dem_OperationCycleStates
	.extern	Dem_GenericNvData
	.extern	Dem_NvMBlockStatusDoubleBuffer
	.extern	Dem_EvtParam_16
	.extern	Dem_AllEventsState
	.extern	Dem_AllEventsState8
	.extern	Dem_AllEventsResetDebouncerRequested
	.extern	Dem_EventWasPassedReported
	.extern	Dem_EvtIsRecoverable
	.extern	Dem_EvtSetCausal
	.extern	Dem_EvtSetSuppression
	.extern	Dem_EvBuffInsert
	.extern	Dem_Cfg_DebClasses
	.extern	Dem_DebHandleResetConditions
	.extern	Dem_AllEventsStatusByte
	.extern	Dem_IsPendingClearEvent
	.extern	Dem_EvMemIsLocked
	.extern	Dem_DtcIdFromDtcCode
	.extern	Dem_IsEventEnabledByDtcSetting
	.extern	__INDIRECT__
	.calls	'Dem_GetHistoryStatus','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L504:
	.word	34332
	.half	3
	.word	.L505
	.byte	4
.L503:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L506
.L608:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.word	150
.L761:
	.byte	4
	.byte	'rba_DiagLib_Bit8SetBit',0,3,1,36,19,1,1
.L764:
	.byte	5
	.byte	'buffer',0,1,36,49
	.word	167
.L766:
	.byte	5
	.byte	'bit_position',0,1,36,63
	.word	150
.L768:
	.byte	6,0
.L770:
	.byte	4
	.byte	'rba_DiagLib_Bit8ClearBit',0,3,1,42,19,1,1
.L771:
	.byte	5
	.byte	'buffer',0,1,42,51
	.word	167
.L773:
	.byte	5
	.byte	'bit_position',0,1,42,65
	.word	150
.L775:
	.byte	6,0
.L752:
	.byte	4
	.byte	'rba_DiagLib_Bit8OverwriteBit',0,3,1,48,19,1,1
.L754:
	.byte	5
	.byte	'buffer',0,1,48,55
	.word	167
.L756:
	.byte	5
	.byte	'bit_position',0,1,48,69
	.word	150
.L758:
	.byte	5
	.byte	'will_bit_be_set',0,1,48,91
	.word	150
.L760:
	.byte	7,6,6,0,0
.L631:
	.byte	8
	.byte	'rba_DiagLib_Bit8GetSingleBit',0,3,1,60,20
	.word	150
	.byte	1,1
.L632:
	.byte	5
	.byte	'value',0,1,60,55
	.word	150
.L634:
	.byte	5
	.byte	'bit_position',0,1,60,68
	.word	150
.L636:
	.byte	6,0
.L624:
	.byte	8
	.byte	'rba_DiagLib_Bit8IsBitSet',0,3,1,64,22
	.word	150
	.byte	1,1
.L626:
	.byte	5
	.byte	'value',0,1,64,53
	.word	150
.L628:
	.byte	5
	.byte	'bit_position',0,1,64,66
	.word	150
.L630:
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_Bit8GetBits',0,3,1,69,20
	.word	150
	.byte	1,1,5
	.byte	'value',0,1,69,50
	.word	150
	.byte	5
	.byte	'bit_position',0,1,69,63
	.word	150
	.byte	5
	.byte	'number_of_bits',0,1,69,83
	.word	150
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8ClearBits',0,3,1,77,19,1,1,5
	.byte	'value',0,1,77,52
	.word	167
	.byte	5
	.byte	'bit_position',0,1,77,65
	.word	150
	.byte	5
	.byte	'number_of_bits',0,1,77,85
	.word	150
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit8OverwriteBits',0,3,1,83,19,1,1,5
	.byte	'value',0,1,83,56
	.word	167
	.byte	5
	.byte	'bit_position',0,1,83,69
	.word	150
	.byte	5
	.byte	'number_of_bits',0,1,83,89
	.word	150
	.byte	5
	.byte	'newValue',0,1,83,111
	.word	150
	.byte	7,6,0,0
.L610:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.word	867
	.byte	4
	.byte	'rba_DiagLib_Bit16SetBit',0,3,2,36,19,1,1,5
	.byte	'buffer',0,2,36,51
	.word	889
	.byte	5
	.byte	'bit_position',0,2,36,65
	.word	150
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBit',0,3,2,42,19,1,1,5
	.byte	'buffer',0,2,42,53
	.word	889
	.byte	5
	.byte	'bit_position',0,2,42,67
	.word	150
	.byte	6,0
.L1064:
	.byte	8
	.byte	'rba_DiagLib_Bit16GetSingleBit',0,3,2,60,21
	.word	867
	.byte	1,1
.L1065:
	.byte	5
	.byte	'value',0,2,60,58
	.word	867
.L1067:
	.byte	5
	.byte	'bit_position',0,2,60,71
	.word	150
.L1069:
	.byte	6,0
.L1057:
	.byte	8
	.byte	'rba_DiagLib_Bit16IsBitSet',0,3,2,65,22
	.word	150
	.byte	1,1
.L1059:
	.byte	5
	.byte	'value',0,2,65,55
	.word	867
.L1061:
	.byte	5
	.byte	'bit_position',0,2,65,68
	.word	150
.L1063:
	.byte	7,6,0,0
.L886:
	.byte	8
	.byte	'rba_DiagLib_Bit16GetBits',0,3,2,70,21
	.word	867
	.byte	1,1
.L888:
	.byte	5
	.byte	'value',0,2,70,53
	.word	867
.L890:
	.byte	5
	.byte	'bit_position',0,2,70,66
	.word	150
.L892:
	.byte	5
	.byte	'number_of_bits',0,2,70,86
	.word	150
.L894:
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit16ClearBits',0,3,2,78,19,1,1,5
	.byte	'value',0,2,78,54
	.word	889
	.byte	5
	.byte	'bit_position',0,2,78,67
	.word	150
	.byte	5
	.byte	'number_of_bits',0,2,78,87
	.word	150
	.byte	6,0
.L823:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.word	1378
	.byte	4
	.byte	'rba_DiagLib_Bit32SetBit',0,3,3,36,19,1,1,5
	.byte	'buffer',0,3,36,51
	.word	1394
	.byte	5
	.byte	'bit_position',0,3,36,65
	.word	150
	.byte	6,0,4
	.byte	'rba_DiagLib_Bit32ClearBit',0,3,3,42,19,1,1,5
	.byte	'buffer',0,3,42,53
	.word	1394
	.byte	5
	.byte	'bit_position',0,3,42,67
	.word	150
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32GetSingleBit',0,3,3,60,21
	.word	1378
	.byte	1,1,5
	.byte	'value',0,3,60,58
	.word	1378
	.byte	5
	.byte	'bit_position',0,3,60,71
	.word	150
	.byte	6,0,8
	.byte	'rba_DiagLib_Bit32IsBitSet',0,3,3,65,22
	.word	150
	.byte	1,1,5
	.byte	'value',0,3,65,55
	.word	1378
	.byte	5
	.byte	'bit_position',0,3,65,68
	.word	150
	.byte	7,6,0,0,4
	.byte	'rba_DiagLib_Bit32ClearBits',0,3,3,78,19,1,1,5
	.byte	'value',0,3,78,54
	.word	1394
	.byte	5
	.byte	'bit_position',0,3,78,67
	.word	150
	.byte	5
	.byte	'number_of_bits',0,3,78,87
	.word	150
	.byte	6,0
.L1428:
	.byte	8
	.byte	'Dem_Dependencies_CheckEventIsCausal',0,3,4,160,2,30
	.word	150
	.byte	1,1
.L1429:
	.byte	5
	.byte	'EventId',0,4,160,2,82
	.word	867
.L1431:
	.byte	5
	.byte	'NodeId',0,4,160,2,111
	.word	150
.L1433:
	.byte	6,0
.L1463:
	.byte	8
	.byte	'Dem_NodeIsAvailable',0,3,4,185,2,20
	.word	150
	.byte	1,1
.L1464:
	.byte	5
	.byte	'NodeId',0,4,185,2,60
	.word	150
.L1466:
	.byte	6,0
.L1444:
	.byte	8
	.byte	'Dem_NodeRecoveryAllowed',0,3,4,192,2,20
	.word	150
	.byte	1,1
.L1445:
	.byte	5
	.byte	'NodeId',0,4,192,2,65
	.word	150
.L1447:
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap32',0,3,5,125,21
	.word	1378
	.byte	1,1,5
	.byte	'Input_u32',0,5,125,55
	.word	1378
	.byte	6,0,8
	.byte	'rba_BswSrv_ByteOrderSwap16',0,3,5,150,1,21
	.word	867
	.byte	1,1,5
	.byte	'Input_u16',0,5,150,1,55
	.word	867
	.byte	6,0,9
	.word	150
	.byte	3
	.word	2092
.L1205:
	.byte	4
	.byte	'rba_DiagLib_MemUtils_MemCpy',0,3,6,20,19,1,1
.L1208:
	.byte	5
	.byte	'xDest_p',0,6,20,54
	.word	167
.L1210:
	.byte	5
	.byte	'xSrc_pc',0,6,20,76
	.word	2097
.L1212:
	.byte	5
	.byte	'numBytes_s32',0,6,20,92
	.word	1378
.L1214:
	.byte	6,0,2
	.byte	'int',0,4,5,4
	.byte	'rba_DiagLib_MemUtils_MemSet',0,3,6,26,19,1,1,5
	.byte	'xDest_pv',0,6,26,54
	.word	167
	.byte	5
	.byte	'xPattern_u32',0,6,26,71
	.word	2192
	.byte	5
	.byte	'numBytes_s32',0,6,26,92
	.word	1378
	.byte	6,0,8
	.byte	'Dem_LibGetParamUI8',0,3,7,36,18
	.word	150
	.byte	1,1,5
	.byte	'parameter',0,7,36,44
	.word	150
	.byte	6,0,8
	.byte	'Dem_LibGetParamBool',0,3,7,41,20
	.word	150
	.byte	1,1,5
	.byte	'parameter',0,7,41,49
	.word	150
	.byte	6,0
.L614:
	.byte	8
	.byte	'Dem_isEventIdValid',0,3,8,20,30
	.word	150
	.byte	1,1
.L616:
	.byte	5
	.byte	'checkID',0,8,20,65
	.word	867
.L618:
	.byte	6,0
.L1303:
	.byte	8
	.byte	'Dem_NodeIdFromEventId',0,3,8,105,33
	.word	150
	.byte	1,1
.L1304:
	.byte	5
	.byte	'id',0,8,105,72
	.word	867
.L1306:
	.byte	6,0
.L1084:
	.byte	8
	.byte	'Dem_isDtcIdValid',0,3,8,152,1,30
	.word	150
	.byte	1,1
.L1086:
	.byte	5
	.byte	'id',0,8,152,1,62
	.word	867
.L1088:
	.byte	6,0
.L1080:
	.byte	8
	.byte	'Dem_DtcIdFromEventId',0,3,8,158,1,27
	.word	867
	.byte	1,1
.L1081:
	.byte	5
	.byte	'id',0,8,158,1,65
	.word	867
.L1083:
	.byte	6,0,8
	.byte	'Dem_DtcIdGetEventId',0,3,8,166,1,28
	.word	867
	.byte	1,1,5
	.byte	'dtcid',0,8,166,1,63
	.word	867
	.byte	6,0,8
	.byte	'Dem_DtcIdGetFirstEventId',0,3,8,174,1,28
	.word	867
	.byte	1,1,5
	.byte	'dtcid',0,8,174,1,68
	.word	867
	.byte	7,6,0,0,8
	.byte	'Dem_DtcGroupIdIsValid',0,3,8,252,1,30
	.word	150
	.byte	1,1,5
	.byte	'dtcGroupID',0,8,252,1,72
	.word	150
	.byte	6,0,9
	.word	867
	.byte	3
	.word	2741
.L1145:
	.byte	10,8,171,2,9,8,11
	.byte	'it',0
	.word	2746
	.byte	4,2,35,0,11
	.byte	'end',0
	.word	2746
	.byte	4,2,35,4,0,3
	.word	2751
.L1152:
	.byte	4
	.byte	'Dem_EventIdListIteratorNewFromDtcId',0,3,8,177,2,17,1,1
.L1155:
	.byte	5
	.byte	'it',0,8,177,2,78
	.word	2783
.L1157:
	.byte	5
	.byte	'dtcid',0,8,177,2,96
	.word	867
.L1159:
	.byte	7,6,0,0,9
	.word	2751
	.byte	3
	.word	2863
.L1171:
	.byte	8
	.byte	'Dem_EventIdListIteratorIsValid',0,3,8,193,2,30
	.word	150
	.byte	1,1
.L1173:
	.byte	5
	.byte	'it',0,8,193,2,92
	.word	2868
.L1175:
	.byte	6,0
.L1166:
	.byte	4
	.byte	'Dem_EventIdListIteratorNext',0,3,8,198,2,17,1,1
.L1168:
	.byte	5
	.byte	'it',0,8,198,2,70
	.word	2783
.L1170:
	.byte	6,0
.L1161:
	.byte	8
	.byte	'Dem_EventIdListIteratorCurrent',0,3,8,203,2,28
	.word	867
	.byte	1,1
.L1163:
	.byte	5
	.byte	'it',0,8,203,2,90
	.word	2868
.L1165:
	.byte	6,0
.L637:
	.byte	8
	.byte	'Dem_GetTestFailedInitState',0,3,9,114,30
	.word	150
	.byte	1,1
.L638:
	.byte	6,0
.L708:
	.byte	4
	.byte	'Dem_BitArraySetBit',0,3,10,33,17,1,1
.L710:
	.byte	5
	.byte	'buffer',0,10,33,36
	.word	1394
.L712:
	.byte	5
	.byte	'bit_position',0,10,33,75
	.word	1378
.L714:
	.byte	6,0
.L721:
	.byte	4
	.byte	'Dem_BitArrayClearBit',0,3,10,46,17,1,1
.L722:
	.byte	5
	.byte	'buffer',0,10,46,38
	.word	1394
.L724:
	.byte	5
	.byte	'bit_position',0,10,46,77
	.word	1378
.L726:
	.byte	6,0
.L699:
	.byte	4
	.byte	'Dem_BitArrayOverwriteBit',0,3,10,61,17,1,1
.L701:
	.byte	5
	.byte	'buffer',0,10,61,42
	.word	1394
.L703:
	.byte	5
	.byte	'bit_position',0,10,62,25
	.word	1378
.L705:
	.byte	5
	.byte	'will_bit_be_set',0,10,62,57
	.word	150
.L707:
	.byte	7,6,6,0,0,9
	.word	1378
	.byte	3
	.word	3304
	.byte	8
	.byte	'Dem_BitArrayIsBitSet',0,3,10,75,30
	.word	150
	.byte	1,1,5
	.byte	'buffer',0,10,75,51
	.word	3309
	.byte	5
	.byte	'bit_position',0,10,75,95
	.word	1378
	.byte	6,0
.L644:
	.byte	8
	.byte	'Dem_ISO14229ByteIsTestFailed',0,3,11,122,30
	.word	150
	.byte	1,1
.L646:
	.byte	5
	.byte	'self',0,11,122,66
	.word	150
.L648:
	.byte	7,6,0,0,8
	.byte	'Dem_ISO14229ByteIsTestFailedTOC',0,3,11,129,1,30
	.word	150
	.byte	1,1,5
	.byte	'self',0,11,129,1,69
	.word	150
	.byte	7,6,0,0
.L670:
	.byte	8
	.byte	'Dem_ISO14229ByteIsTestCompleteTOC',0,3,11,157,1,30
	.word	150
	.byte	1,1
.L671:
	.byte	5
	.byte	'self',0,11,157,1,71
	.word	150
.L673:
	.byte	7,6,0,0
.L1124:
	.byte	8
	.byte	'Dem_ISO14229ByteIsPendingDTC',0,3,11,164,1,30
	.word	150
	.byte	1,1
.L1126:
	.byte	5
	.byte	'self',0,11,164,1,66
	.word	150
.L1128:
	.byte	7,6,0,0
.L1130:
	.byte	8
	.byte	'Dem_ISO14229ByteIsConfirmedDTC',0,3,11,171,1,30
	.word	150
	.byte	1,1
.L1132:
	.byte	5
	.byte	'self',0,11,171,1,68
	.word	150
.L1134:
	.byte	7,6,0,0
.L1136:
	.byte	8
	.byte	'Dem_ISO14229ByteIsWarningIndicatorRequested',0,3,11,177,1,30
	.word	150
	.byte	1,1
.L1137:
	.byte	5
	.byte	'self',0,11,177,1,81
	.word	150
.L1139:
	.byte	7,6,0,0
.L745:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestFailed',0,3,11,186,1,17,1,1
.L747:
	.byte	5
	.byte	'self',0,11,186,1,55
	.word	167
.L749:
	.byte	5
	.byte	'setOrReset',0,11,186,1,79
	.word	150
.L751:
	.byte	7,6,0,0
.L1336:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestFailedTOC',0,3,11,193,1,17,1,1
.L1338:
	.byte	5
	.byte	'self',0,11,193,1,58
	.word	167
.L1340:
	.byte	5
	.byte	'setOrReset',0,11,193,1,82
	.word	150
.L1342:
	.byte	7,6,0,0
.L1348:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestFailedSLC',0,3,11,200,1,17,1,1
.L1350:
	.byte	5
	.byte	'self',0,11,200,1,58
	.word	167
.L1352:
	.byte	5
	.byte	'setOrReset',0,11,200,1,82
	.word	150
.L1354:
	.byte	7,6,0,0
.L1360:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestCompleteTOC',0,3,11,214,1,17,1,1
.L1362:
	.byte	5
	.byte	'self',0,11,214,1,60
	.word	167
.L1364:
	.byte	5
	.byte	'setOrReset',0,11,214,1,84
	.word	150
.L1366:
	.byte	7,6,0,0
.L1372:
	.byte	4
	.byte	'Dem_ISO14229ByteSetTestCompleteSLC',0,3,11,221,1,17,1,1
.L1374:
	.byte	5
	.byte	'self',0,11,221,1,60
	.word	167
.L1376:
	.byte	5
	.byte	'setOrReset',0,11,221,1,84
	.word	150
.L1378:
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetPendingDTC',0,3,11,228,1,17,1,1,5
	.byte	'self',0,11,228,1,55
	.word	167
	.byte	5
	.byte	'setOrReset',0,11,228,1,79
	.word	150
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetConfirmedDTC',0,3,11,235,1,17,1,1,5
	.byte	'self',0,11,235,1,57
	.word	167
	.byte	5
	.byte	'setOrReset',0,11,235,1,81
	.word	150
	.byte	7,6,0,0,4
	.byte	'Dem_ISO14229ByteSetWarningIndicatorRequested',0,3,11,242,1,17,1,1,5
	.byte	'self',0,11,242,1,70
	.word	167
	.byte	5
	.byte	'setOrReset',0,11,242,1,94
	.word	150
	.byte	7,6,0,0
.L1422:
	.byte	8
	.byte	'Dem_StoCoAreAllFulfilled',0,3,12,53,20
	.word	150
	.byte	1,1
.L1423:
	.byte	5
	.byte	'storageConditionList',0,12,53,59
	.word	150
.L1425:
	.byte	6,0
.L679:
	.byte	8
	.byte	'Dem_EnCoAreAllFulfilled',0,3,13,32,30
	.word	150
	.byte	1,1
.L680:
	.byte	5
	.byte	'enableConditionList',0,13,32,68
	.word	150
.L682:
	.byte	6,0,8
	.byte	'Dem_Cfg_Dtc_GetDtcCode',0,3,14,99,30
	.word	1378
	.byte	1,1,5
	.byte	'indx',0,14,99,67
	.word	867
	.byte	6,0
.L1002:
	.byte	8
	.byte	'Dem_IsOperationCycleStarted',0,3,15,21,20
	.word	150
	.byte	1,1
.L1005:
	.byte	5
	.byte	'OperationCycleId',0,15,21,73
	.word	150
.L1007:
	.byte	7,6,0,0,8
	.byte	'Dem_NvMGetNvMBlocKId',0,3,16,49,28
	.word	867
	.byte	1,1,5
	.byte	'id',0,16,49,68
	.word	150
	.byte	6,0,8
	.byte	'Dem_NvmGetStatus',0,3,16,54,30
	.word	150
	.byte	1,1,5
	.byte	'id',0,16,54,67
	.word	150
	.byte	7,6,0,0
.L1101:
	.byte	4
	.byte	'Dem_NvMWriteBlockOnShutdown',0,3,16,92,17,1,1
.L1103:
	.byte	5
	.byte	'id',0,16,92,64
	.word	150
.L1105:
	.byte	6,0,4
	.byte	'Dem_NvMClearBlockByWrite',0,3,16,102,17,1,1,5
	.byte	'id',0,16,102,61
	.word	150
	.byte	6,0,4
	.byte	'Dem_NvMClearBlockByInvalidate',0,3,16,107,17,1,1,5
	.byte	'id',0,16,107,66
	.word	150
	.byte	6,0,4
	.byte	'Dem_NvMStartClear',0,3,16,138,1,17,1,1,6,0,8
	.byte	'Dem_NvMIsInvalidateAllNVMBlocksRequested',0,3,16,167,1,30
	.word	150
	.byte	1,1,6,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderS',0,3,17,36,21
	.word	867
	.byte	1,1,5
	.byte	'val',0,17,36,70
	.word	867
	.byte	7,6,0,0,8
	.byte	'rba_DiagLib_ByteOrderUtils_SwapByteOrderL',0,3,17,41,21
	.word	1378
	.byte	1,1,5
	.byte	'val',0,17,41,70
	.word	1378
	.byte	7,6,0,0
.L1439:
	.byte	8
	.byte	'Dem_EvtParam_GetIsRecoverable',0,3,18,48,22
	.word	150
	.byte	1,1
.L1440:
	.byte	5
	.byte	'indx',0,18,48,68
	.word	867
.L1442:
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetStoreTestFailedToNextOC',0,3,18,55,22
	.word	150
	.byte	1,1,5
	.byte	'indx',0,18,55,78
	.word	867
	.byte	6,0
.L1052:
	.byte	8
	.byte	'Dem_EvtParam_GetEventIsStoredInPrimary',0,3,18,75,22
	.word	150
	.byte	1,1
.L1054:
	.byte	5
	.byte	'indx',0,18,75,77
	.word	867
.L1056:
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInSecondary',0,3,18,82,22
	.word	150
	.byte	1,1,5
	.byte	'indx',0,18,82,79
	.word	867
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetEventIsStoredInMirror',0,3,18,89,22
	.word	150
	.byte	1,1,5
	.byte	'indx',0,18,89,76
	.word	867
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingAllowed',0,3,18,95,22
	.word	150
	.byte	1,1,5
	.byte	'indx',0,18,95,67
	.word	867
	.byte	7,6,0,0
.L998:
	.byte	8
	.byte	'Dem_EvtParam_GetOperationCycleID',0,3,18,122,20
	.word	150
	.byte	1,1
.L999:
	.byte	5
	.byte	'indx',0,18,122,69
	.word	867
.L1001:
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetAgingCycleID',0,3,18,129,1,20
	.word	150
	.byte	1,1,5
	.byte	'indx',0,18,129,1,65
	.word	867
	.byte	6,0,8
	.byte	'Dem_EvtParam_GetFailureCycleID',0,3,18,136,1,20
	.word	150
	.byte	1,1,5
	.byte	'indx',0,18,136,1,67
	.word	867
	.byte	6,0
.L875:
	.byte	8
	.byte	'Dem_EvtParam_GetDebounceMethodIndex',0,3,18,149,1,20
	.word	150
	.byte	1,1
.L876:
	.byte	5
	.byte	'indx',0,18,149,1,72
	.word	867
.L878:
	.byte	6,0
.L879:
	.byte	8
	.byte	'Dem_EvtParam_GetDebounceParamSettingIndex',0,3,18,155,1,21
	.word	867
	.byte	1,1
.L881:
	.byte	5
	.byte	'indx',0,18,155,1,79
	.word	867
.L883:
	.byte	7,6,0,0,8
	.byte	'Dem_EvtParam_GetAgingThreshold',0,3,18,168,1,20
	.word	150
	.byte	1,1,5
	.byte	'indx',0,18,168,1,67
	.word	867
	.byte	6,0
.L1418:
	.byte	8
	.byte	'Dem_EvtParam_GetStorageConditions',0,3,18,201,1,28
	.word	150
	.byte	1,1
.L1419:
	.byte	5
	.byte	'indx',0,18,201,1,78
	.word	867
.L1421:
	.byte	6,0
.L675:
	.byte	8
	.byte	'Dem_EvtParam_GetEnableConditions',0,3,18,208,1,27
	.word	150
	.byte	1,1
.L676:
	.byte	5
	.byte	'indx',0,18,208,1,76
	.word	867
.L678:
	.byte	6,0,2
	.byte	'short int',0,2,5
.L870:
	.byte	8
	.byte	'Dem_EvtGetDebounceLevel',0,3,19,193,1,19
	.word	5973
	.byte	1,1
.L872:
	.byte	5
	.byte	'EventId',0,19,193,1,60
	.word	867
.L874:
	.byte	6,0
.L866:
	.byte	8
	.byte	'Dem_EvtGetLastReportedEvent',0,3,19,219,1,32
	.word	150
	.byte	1,1
.L867:
	.byte	5
	.byte	'EventId',0,19,219,1,77
	.word	867
.L869:
	.byte	6,0
.L733:
	.byte	4
	.byte	'Dem_EvtSetLastReportedEvent',0,3,19,225,1,17,1,1
.L736:
	.byte	5
	.byte	'EventId',0,19,225,1,62
	.word	867
.L738:
	.byte	5
	.byte	'EventStatus',0,19,225,1,91
	.word	150
.L740:
	.byte	6,0
.L1412:
	.byte	8
	.byte	'Dem_EvtIsCausal',0,3,19,244,1,30
	.word	150
	.byte	1,1
.L1414:
	.byte	5
	.byte	'EventId',0,19,244,1,63
	.word	867
.L1416:
	.byte	7,6,0,0
.L1289:
	.byte	8
	.byte	'Dem_EvtIsRecheckedAndWaitingForMonResult',0,3,19,128,2,30
	.word	150
	.byte	1,1
.L1291:
	.byte	5
	.byte	'EventId',0,19,128,2,88
	.word	867
.L1293:
	.byte	6,0
.L1285:
	.byte	8
	.byte	'Dem_EvtIsStorageFiltered',0,3,19,138,3,30
	.word	150
	.byte	1,1
.L1286:
	.byte	5
	.byte	'EventId',0,19,138,3,72
	.word	867
.L1288:
	.byte	6,0
.L838:
	.byte	8
	.byte	'Dem_EvtAllEnableConditionsFulfilled',0,3,19,158,3,30
	.word	150
	.byte	1,1
.L839:
	.byte	5
	.byte	'EventId',0,19,158,3,83
	.word	867
.L841:
	.byte	7,6,6,0,0
.L693:
	.byte	4
	.byte	'Dem_EvtRequestResetFailureFilter',0,3,19,165,3,17,1,1
.L694:
	.byte	5
	.byte	'EventId',0,19,165,3,66
	.word	867
.L696:
	.byte	5
	.byte	'setBit',0,19,165,3,93
	.word	150
.L698:
	.byte	7,6,0,0,4
	.byte	'Dem_EvtIncreaseGlobalInitMonitoringCounter',0,3,19,227,3,17,1,1,6,0,4
	.byte	'Dem_EvtSetAnyInitMonitoring',0,3,19,233,3,17,1,1,5
	.byte	'reason',0,19,233,3,72
	.word	150
	.byte	7,6,0,0
.L619:
	.byte	8
	.byte	'Dem_EvtIsSuppressed',0,3,19,244,4,30
	.word	150
	.byte	1,1
.L621:
	.byte	5
	.byte	'EventId',0,19,244,4,67
	.word	867
.L623:
	.byte	7,6,0,0
.L1294:
	.byte	8
	.byte	'Dem_EvtIsNextReportRelevantForMemories',0,3,19,251,4,30
	.word	150
	.byte	1,1
.L1297:
	.byte	5
	.byte	'EventId',0,19,251,4,86
	.word	867
.L1299:
	.byte	7,6,0,0
.L1472:
	.byte	4
	.byte	'Dem_EvtSetPassedWasReported',0,3,19,203,5,17,1,1
.L1473:
	.byte	5
	.byte	'EventId',0,19,203,5,62
	.word	867
.L1475:
	.byte	5
	.byte	'setBit',0,19,203,5,89
	.word	150
.L1477:
	.byte	7,6,0,0
.L826:
	.byte	2
	.byte	'unsigned long int',0,4,7,3
	.word	150
.L849:
	.byte	8
	.byte	'Dem_DebCallFilter',0,3,20,31,36
	.word	6808
	.byte	1,1
.L852:
	.byte	5
	.byte	'EventId',0,20,31,71
	.word	867
.L854:
	.byte	5
	.byte	'status',0,20,31,101
	.word	6829
.L856:
	.byte	7,6,6,6,6,6,6,6,0,0
.L916:
	.byte	8
	.byte	'Dem_DebHandleDebounceAction__processBits',0,3,20,101,30
	.word	150
	.byte	1,1
.L917:
	.byte	5
	.byte	'EventId',0,20,101,87
	.word	867
.L919:
	.byte	5
	.byte	'debAction',0,20,101,120
	.word	6808
.L921:
	.byte	6,0
.L905:
	.byte	4
	.byte	'Dem_DebHandleDebounceAction',0,3,20,162,1,17,1,1
.L906:
	.byte	5
	.byte	'EventId',0,20,162,1,61
	.word	867
.L908:
	.byte	5
	.byte	'debAction',0,20,162,1,94
	.word	6808
.L910:
	.byte	5
	.byte	'debug0',0,20,162,1,123
	.word	1378
.L912:
	.byte	5
	.byte	'debug1',0,20,162,1,149,1
	.word	1378
.L914:
	.byte	7,6,0,0
.L666:
	.byte	8
	.byte	'Dem_EvtGetIsoByte',0,3,21,42,34
	.word	150
	.byte	1,1
.L667:
	.byte	5
	.byte	'EventId',0,21,42,69
	.word	867
.L669:
	.byte	6,0
.L1266:
	.byte	8
	.byte	'Dem_EvtSt_IsUpdateNeeded',0,3,21,122,30
	.word	150
	.byte	1,1
.L1269:
	.byte	5
	.byte	'EventId',0,21,122,71
	.word	867
.L1271:
	.byte	5
	.byte	'reportIsFailed',0,21,122,98
	.word	150
.L1273:
	.byte	7,6,6,6,6,0,0
.L1316:
	.byte	4
	.byte	'Dem_EvtSt_HandleFailed',0,3,21,154,1,17,1,1
.L1318:
	.byte	5
	.byte	'EventId',0,21,154,1,56
	.word	867
.L1320:
	.byte	7,6,6,6,6,6,0,0
.L1384:
	.byte	4
	.byte	'Dem_EvtSt_HandlePassed',0,3,21,175,1,17,1,1
.L1386:
	.byte	5
	.byte	'EventId',0,21,175,1,56
	.word	867
.L1388:
	.byte	7,6,6,6,0,0
.L741:
	.byte	4
	.byte	'Dem_EvtSt_HandleResetEventStatus',0,3,21,190,1,17,1,1
.L742:
	.byte	5
	.byte	'EventId',0,21,190,1,66
	.word	867
.L744:
	.byte	7,6,0,0
.L639:
	.byte	8
	.byte	'Dem_EvtSt_GetTestFailed',0,3,21,147,3,30
	.word	150
	.byte	1,1
.L641:
	.byte	5
	.byte	'EventId',0,21,147,3,70
	.word	867
.L643:
	.byte	7,6,0,0,12
	.word	867
	.byte	3
	.word	7459
	.byte	4
	.byte	'Dem_ClientResultType_setResult',0,3,22,27,17,1,1,5
	.byte	'result',0,22,27,79
	.word	7464
	.byte	5
	.byte	'request',0,22,27,109
	.word	867
	.byte	5
	.byte	'newResult',0,22,27,133,1
	.word	150
	.byte	6,0,12
	.word	867
	.byte	3
	.word	7559
	.byte	4
	.byte	'Dem_ClientRequestType_setRequest',0,3,22,65,17,1,1,5
	.byte	'request',0,22,65,82
	.word	7564
	.byte	5
	.byte	'newRequest',0,22,65,97
	.word	150
	.byte	6,0,3
	.word	1378
	.byte	4
	.byte	'Dem_ClientSelectionType_invalidateSelectionResult',0,3,22,151,1,17,1,1,5
	.byte	'selection',0,22,151,1,93
	.word	7646
	.byte	6,0,8
	.byte	'Dem_ClientSelectionType_getTypeOfSelection',0,3,22,168,1,18
	.word	150
	.byte	1,1,5
	.byte	'selection',0,22,168,1,86
	.word	1378
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineActiveClient',0,3,23,53,17,1,1,5
	.byte	'ClientId',0,23,53,80
	.word	150
	.byte	6,0,4
	.byte	'Dem_ClientClearMachine_SetMachineState',0,3,23,68,17,1,1,5
	.byte	'state',0,23,68,62
	.word	150
	.byte	6,0,8
	.byte	'Dem_ClientClearMachine_isClearDtcGroupAllDtcsSelected',0,3,23,78,20
	.word	150
	.byte	1,1,5
	.byte	'ClientId',0,23,78,91
	.word	150
	.byte	7,6,6,6,6,0,0,3
	.word	150
	.byte	4
	.byte	'Dem_EnvSetTrigger',0,3,24,17,17,1,1,5
	.byte	'trigger',0,24,17,52
	.word	8029
	.byte	5
	.byte	'trigger2set',0,24,17,77
	.word	150
	.byte	6,0,8
	.byte	'Dem_EnvIsAnyTriggerSet',0,3,24,22,30
	.word	150
	.byte	1,1,5
	.byte	'trigger2test',0,24,22,69
	.word	150
	.byte	6,0,8
	.byte	'Dem_EvMemIsMemIdValid',0,3,25,103,30
	.word	150
	.byte	1,1,5
	.byte	'MemId',0,25,103,65
	.word	6808
	.byte	6,0,8
	.byte	'Dem_EvMemIsEventMemLocIdValid',0,3,25,112,30
	.word	150
	.byte	1,1,5
	.byte	'LocId',0,25,112,73
	.word	6808
	.byte	6,0,10,26,133,1,3,4,11
	.byte	'Status',0
	.word	867
	.byte	2,2,35,0,11
	.byte	'EventId',0
	.word	867
	.byte	2,2,35,2,0,13,26,131,1,9,4,11
	.byte	'Data',0
	.word	8260
	.byte	4,2,35,0,0,14,7
	.word	150
	.byte	15,6,0,10,26,144,1,9,20,11
	.byte	'Hdr',0
	.word	8300
	.byte	4,2,35,0,11
	.byte	'Data',0
	.word	8321
	.byte	7,2,35,4,11
	.byte	'FailureCounter',0
	.word	150
	.byte	1,2,35,11,11
	.byte	'FreezeFrameCounter',0
	.word	150
	.byte	1,2,35,12,11
	.byte	'AgingCounter',0
	.word	150
	.byte	1,2,35,13,11
	.byte	'OccurrenceCounter',0
	.word	150
	.byte	1,2,35,14,11
	.byte	'Trigger',0
	.word	150
	.byte	1,2,35,15,11
	.byte	'TimeId',0
	.word	1378
	.byte	4,2,35,16,0,9
	.word	8330
	.byte	3
	.word	8498
	.byte	8
	.byte	'Dem_EvMemGetEventMemStatusByPtr',0,3,25,134,1,25
	.word	6808
	.byte	1,1,5
	.byte	'EventMemory',0,25,134,1,89
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemStatus',0,3,25,139,1,25
	.word	6808
	.byte	1,1,5
	.byte	'LocId',0,25,139,1,65
	.word	6808
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetEventMemEventIdByPtr',0,3,25,152,1,28
	.word	867
	.byte	1,1,5
	.byte	'EventMemory',0,25,152,1,93
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTimeIdByPtr',0,3,25,170,1,19
	.word	1378
	.byte	1,1,5
	.byte	'EventMemory',0,25,170,1,83
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemDtcStatusByPtr',0,3,25,188,1,18
	.word	150
	.byte	1,1,5
	.byte	'EventMemory',0,25,188,1,85
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFailureCounterByPtr',0,3,25,216,1,24
	.word	6808
	.byte	1,1,5
	.byte	'EventMemory',0,25,216,1,96
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemOccurrenceCounterByPtr',0,3,25,233,1,25
	.word	6808
	.byte	1,1,5
	.byte	'EventMemory',0,25,233,1,100
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterByPtr',0,3,25,133,2,25
	.word	6808
	.byte	1,1,5
	.byte	'EventMemory',0,25,133,2,95
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounter',0,3,25,144,2,25
	.word	6808
	.byte	1,1,5
	.byte	'LocId',0,25,144,2,71
	.word	6808
	.byte	7,6,0,0,4
	.byte	'Dem_EvMemSetEventMemAgingCounter',0,3,25,150,2,17,1,1,5
	.byte	'LocId',0,25,150,2,63
	.word	6808
	.byte	5
	.byte	'AgingCounter',0,25,150,2,83
	.word	6808
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemAgingCounterForTFSLCByPtr',0,3,25,161,2,25
	.word	6808
	.byte	1,1,5
	.byte	'EventMemory',0,25,161,2,103
	.word	8503
	.byte	6,0,2
	.byte	'char',0,1,6,8
	.byte	'Dem_EvMemGetMaxFdcDuringCurrentCycleByPtr',0,3,25,213,2,18
	.word	9289
	.byte	1,1,5
	.byte	'EventMemory',0,25,213,2,92
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetMaxFdcSinceLastClearByPtr',0,3,25,224,2,18
	.word	9289
	.byte	1,1,5
	.byte	'EventMemory',0,25,224,2,88
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemFreezeFrameCounterByPtr',0,3,25,238,3,25
	.word	6808
	.byte	1,1,5
	.byte	'EventMemory',0,25,238,3,101
	.word	8503
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemTriggerByPtr',0,3,25,141,4,28
	.word	150
	.byte	1,1,5
	.byte	'EventMemory',0,25,141,4,93
	.word	8503
	.byte	6,0,3
	.word	8330
	.byte	8
	.byte	'Dem_EvMemGetEventMemDataByPtr',0,3,25,170,4,19
	.word	167
	.byte	1,1,5
	.byte	'EventMemory',0,25,170,4,75
	.word	9594
	.byte	6,0,8
	.byte	'Dem_EvMemIsStored',0,3,25,206,4,30
	.word	150
	.byte	1,1,5
	.byte	'Status',0,25,206,4,61
	.word	6808
	.byte	6,0,8
	.byte	'Dem_EvMemIsEmpty',0,3,25,211,4,30
	.word	150
	.byte	1,1,5
	.byte	'Status',0,25,211,4,60
	.word	6808
	.byte	6,0,8
	.byte	'Dem_EvMemSetToEmpty',0,3,25,226,4,25
	.word	6808
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetShadowVisibility',0,3,25,242,4,30
	.word	150
	.byte	1,1,6,0,8
	.byte	'Dem_EvMemGetEventMemStartLocId',0,3,25,131,5,25
	.word	6808
	.byte	1,1,5
	.byte	'MemId',0,25,131,5,69
	.word	6808
	.byte	6,0,8
	.byte	'Dem_EvMemGetEventMemEndLocId',0,3,25,143,5,25
	.word	6808
	.byte	1,1,5
	.byte	'MemId',0,25,143,5,67
	.word	6808
	.byte	6,0,3
	.word	6808
	.byte	4
	.byte	'Dem_EvMemEventMemoryIteratorNew',0,3,25,179,5,17,1,1,5
	.byte	'MemId',0,25,179,5,63
	.word	9954
	.byte	6,0,9
	.word	6808
	.byte	3
	.word	10016
	.byte	8
	.byte	'Dem_EvMemEventMemoryIteratorIsValid',0,3,25,184,5,30
	.word	150
	.byte	1,1,5
	.byte	'MemId',0,25,184,5,86
	.word	10021
	.byte	6,0,4
	.byte	'Dem_EvMemEventMemoryIteratorNext',0,3,25,189,5,17,1,1,5
	.byte	'MemId',0,25,189,5,64
	.word	9954
	.byte	6,0,8
	.byte	'Dem_EvMemIsEdgeTrigger',0,3,25,247,5,30
	.word	150
	.byte	1,1,5
	.byte	'StatusOld',0,25,247,5,66
	.word	6808
	.byte	5
	.byte	'StatusNew',0,25,247,5,90
	.word	6808
	.byte	5
	.byte	'Trigger',0,25,247,5,114
	.word	6808
	.byte	6,0,8
	.byte	'Dem_EvMemGetRamStsMask',0,3,25,154,7,25
	.word	6808
	.byte	1,1,5
	.byte	'EventId',0,25,154,7,64
	.word	867
	.byte	7,6,0,0,8
	.byte	'Dem_EvMemGetCurrentAgingCycleCounterInt',0,3,27,20,25
	.word	6808
	.byte	1,1,5
	.byte	'EventId',0,27,20,81
	.word	867
	.byte	6,0,8
	.byte	'Dem_EvMemIsAged',0,3,27,61,30
	.word	150
	.byte	1,1,5
	.byte	'EventId',0,27,61,62
	.word	867
	.byte	5
	.byte	'LocId',0,27,61,84
	.word	6808
	.byte	5
	.byte	'StatusNew',0,27,61,104
	.word	6808
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForDTCOrigin',0,3,28,150,1,25
	.word	6808
	.byte	1,1,5
	.byte	'DTCOrigin',0,28,150,1,73
	.word	150
	.byte	6,0,8
	.byte	'Dem_EvMemGetMemIdForEvent',0,3,28,222,1,25
	.word	6808
	.byte	1,1,5
	.byte	'EventId',0,28,222,1,67
	.word	867
	.byte	7,6,0,0
.L1050:
	.byte	8
	.byte	'Dem_GetEvMemLockInternal',0,3,28,137,2,20
	.word	150
	.byte	1,1
.L1051:
	.byte	6,0,8
	.byte	'Dem_DtcIsSuppressed',0,3,29,118,30
	.word	150
	.byte	1,1,5
	.byte	'dtcId',0,29,118,65
	.word	867
	.byte	7,6,0,0,8
	.byte	'Dem_DtcIsSuppressedDirectly',0,3,29,128,1,30
	.word	150
	.byte	1,1,5
	.byte	'dtcId',0,29,128,1,73
	.word	867
	.byte	6,0,8
	.byte	'Dem_EventUsesOrigin',0,3,29,137,2,30
	.word	150
	.byte	1,1,5
	.byte	'eventId',0,29,137,2,67
	.word	867
	.byte	5
	.byte	'origin',0,29,137,2,94
	.word	150
	.byte	7,6,6,6,0,0
.L844:
	.byte	8
	.byte	'Dem_IsEventReportingEnabledByDtcSetting',0,3,29,176,2,30
	.word	150
	.byte	1,1
.L846:
	.byte	5
	.byte	'EventId',0,29,176,2,86
	.word	867
.L848:
	.byte	6,0
.L1467:
	.byte	8
	.byte	'Dem_IsEventStorageEnabledByDtcSetting',0,3,29,186,2,30
	.word	150
	.byte	1,1
.L1469:
	.byte	5
	.byte	'EventId',0,29,186,2,84
	.word	867
.L1471:
	.byte	6,0
.L1089:
	.byte	8
	.byte	'Dem_EvMemGenGetDtcIdByOccIndex',0,3,30,31,26
	.word	867
	.byte	1,1
.L1090:
	.byte	5
	.byte	'OccIndex',0,30,31,64
	.word	1378
.L1092:
	.byte	6,0
.L1094:
	.byte	4
	.byte	'Dem_EvMemGenSetDtcByOccIndex',0,3,30,42,17,1,1
.L1096:
	.byte	5
	.byte	'DtcId',0,30,42,60
	.word	867
.L1098:
	.byte	5
	.byte	'OccIndex',0,30,42,73
	.word	1378
.L1100:
	.byte	6,0
.L1070:
	.byte	4
	.byte	'Dem_EvMemGenReportEvent',0,3,30,79,17,1,1
.L1072:
	.byte	5
	.byte	'EventId',0,30,79,57
	.word	867
.L1074:
	.byte	5
	.byte	'FirstOccIndex',0,30,79,73
	.word	1378
.L1076:
	.byte	5
	.byte	'RecntOccIndex',0,30,79,95
	.word	1378
.L1078:
	.byte	7,6,6,6,6,6,6,6,6,6,0,0
.L1045:
	.byte	4
	.byte	'Dem_EvMemGenReportFailedEvent',0,3,30,109,17,1,1
.L1047:
	.byte	5
	.byte	'EventId',0,30,109,63
	.word	867
.L1049:
	.byte	7,6,6,6,0,0,4
	.byte	'Dem_EvMemGenSetOverflow',0,3,30,174,1,17,1,1,5
	.byte	'DtcOrigin',0,30,174,1,59
	.word	150
	.byte	6,0,8
	.byte	'Dem_EvMemGenIsOverflow',0,3,30,184,1,20
	.word	150
	.byte	1,1,5
	.byte	'DtcOrigin',0,30,184,1,61
	.word	150
	.byte	6,0,4
	.byte	'Dem_CallBackTriggerOnEventStatus',0,3,31,17,17,1,1,5
	.byte	'EventId',0,31,18,19
	.word	867
	.byte	5
	.byte	'EventStatusOld',0,31,19,25
	.word	150
	.byte	5
	.byte	'EventStatusNew',0,31,20,25
	.word	150
	.byte	5
	.byte	'dtcStByteOld',0,31,21,25
	.word	150
	.byte	6,0,3
	.word	150
.L683:
	.byte	4
	.byte	'Dem_StatusChange_GetOldStatus',0,3,31,59,17,1,1
.L686:
	.byte	5
	.byte	'EventId',0,31,60,19
	.word	867
.L688:
	.byte	5
	.byte	'isoByteOld',0,31,61,26
	.word	11447
.L690:
	.byte	5
	.byte	'dtcStByteOld',0,31,62,26
	.word	11447
.L692:
	.byte	7,6,0,0
.L777:
	.byte	4
	.byte	'Dem_TriggerOn_EventStatusChange',0,3,31,84,17,1,1
.L779:
	.byte	5
	.byte	'EventId',0,31,85,25
	.word	867
.L781:
	.byte	5
	.byte	'isoByteOld',0,31,86,31
	.word	150
.L783:
	.byte	5
	.byte	'isoByteNew',0,31,87,31
	.word	150
.L785:
	.byte	5
	.byte	'dtcStByteOld',0,31,88,31
	.word	150
.L787:
	.byte	7,6,0,0
.L1499:
	.byte	10,32,9,9,8,11
	.byte	'end',0
	.word	867
	.byte	2,2,35,0,11
	.byte	'lastEmptyLoc',0
	.word	867
	.byte	2,2,35,2,11
	.byte	'nextEmptyLoc',0
	.word	867
	.byte	2,2,35,4,11
	.byte	'RingBuffLocIt',0
	.word	867
	.byte	2,2,35,6,0,9
	.word	11667
	.byte	3
	.word	11753
.L943:
	.byte	8
	.byte	'Dem_RingBuffer__next',0,3,32,55,19
	.word	867
	.byte	1,1
.L945:
	.byte	5
	.byte	'rb',0,32,55,63
	.word	11758
.L947:
	.byte	5
	.byte	'idx',0,32,55,74
	.word	867
.L949:
	.byte	6,0
.L1191:
	.byte	8
	.byte	'Dem_RingBuffer__isEmpty',0,3,32,71,20
	.word	150
	.byte	1,1
.L1192:
	.byte	5
	.byte	'rb',0,32,71,67
	.word	11758
.L1194:
	.byte	7,6,0,0
.L975:
	.byte	8
	.byte	'Dem_RingBuffer__isFull',0,3,32,82,20
	.word	150
	.byte	1,1
.L976:
	.byte	5
	.byte	'rb',0,32,82,66
	.word	11758
.L978:
	.byte	6,0,3
	.word	11667
.L968:
	.byte	8
	.byte	'Dem_RingBuffer__insert',0,3,32,96,20
	.word	150
	.byte	1,1
.L970:
	.byte	5
	.byte	'rb',0,32,96,60
	.word	11917
.L972:
	.byte	5
	.byte	'insertionIndex',0,32,96,72
	.word	889
.L974:
	.byte	7,6,6,0,0
.L1184:
	.byte	8
	.byte	'Dem_RingBuffer__remove',0,3,32,114,20
	.word	150
	.byte	1,1
.L1186:
	.byte	5
	.byte	'rb',0,32,114,60
	.word	11917
.L1188:
	.byte	5
	.byte	'removedIndex',0,32,114,72
	.word	889
.L1190:
	.byte	7,6,6,0,0
.L937:
	.byte	4
	.byte	'Dem_RingBuffer__NewIterator',0,3,32,127,17,1,1
.L940:
	.byte	5
	.byte	'rb',0,32,127,62
	.word	11917
.L942:
	.byte	7,6,0,0
.L964:
	.byte	8
	.byte	'Dem_RingBuffer__IteratorIsValid',0,3,32,131,1,20
	.word	150
	.byte	1,1
.L965:
	.byte	5
	.byte	'rb',0,32,131,1,75
	.word	11758
.L967:
	.byte	6,0
.L958:
	.byte	4
	.byte	'Dem_RingBuffer__IteratorNext',0,3,32,135,1,17,1,1
.L959:
	.byte	5
	.byte	'rb',0,32,135,1,63
	.word	11917
.L961:
	.byte	7,6,0,0
.L1180:
	.byte	10,33,37,9,12,11
	.byte	'EventStatus',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'EventId',0
	.word	867
	.byte	2,2,35,2,11
	.byte	'debug0',0
	.word	1378
	.byte	4,2,35,4,11
	.byte	'debug1',0
	.word	1378
	.byte	4,2,35,8,0,9
	.word	12227
	.byte	3
	.word	12303
.L951:
	.byte	8
	.byte	'Dem_CompareFuncForEvents',0,3,33,163,2,20
	.word	150
	.byte	1,1
.L953:
	.byte	5
	.byte	'bufferElement',0,33,163,2,72
	.word	12308
.L955:
	.byte	5
	.byte	'evtId',0,33,163,2,103
	.word	867
.L957:
	.byte	6,0
.L923:
	.byte	4
	.byte	'Dem_ReportErrorStatusEnqueue',0,3,33,168,2,17,1,1
.L925:
	.byte	5
	.byte	'EventId',0,33,168,2,63
	.word	867
.L927:
	.byte	5
	.byte	'EventStatus',0,33,168,2,92
	.word	150
.L929:
	.byte	5
	.byte	'debug0',0,33,169,2,27
	.word	1378
.L931:
	.byte	5
	.byte	'debug1',0,33,169,2,53
	.word	1378
.L933:
	.byte	7,6,6,6,6,6,0,0,16
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	6,0,16
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	6,0,16
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	7,18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,6,18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,6,0,0,16
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	6,0,16
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	7,18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,6,0,0,16
	.word	563
	.byte	17
	.word	598
	.byte	17
	.word	612
	.byte	17
	.word	633
	.byte	6,0,16
	.word	658
	.byte	17
	.word	691
	.byte	17
	.word	705
	.byte	17
	.word	726
	.byte	6,0,16
	.word	751
	.byte	17
	.word	788
	.byte	17
	.word	802
	.byte	17
	.word	823
	.byte	17
	.word	846
	.byte	7,18
	.word	658
	.byte	17
	.word	691
	.byte	17
	.word	705
	.byte	17
	.word	726
	.byte	19
	.word	749
	.byte	0,6,0,0,16
	.word	894
	.byte	17
	.word	925
	.byte	17
	.word	940
	.byte	6,0,16
	.word	963
	.byte	17
	.word	996
	.byte	17
	.word	1011
	.byte	6,0,16
	.word	1034
	.byte	17
	.word	1075
	.byte	17
	.word	1089
	.byte	6,0,16
	.word	1112
	.byte	17
	.word	1149
	.byte	17
	.word	1163
	.byte	7,18
	.word	1034
	.byte	17
	.word	1075
	.byte	17
	.word	1089
	.byte	19
	.word	1110
	.byte	0,6,0,0,16
	.word	1188
	.byte	17
	.word	1224
	.byte	17
	.word	1238
	.byte	17
	.word	1259
	.byte	6,0,16
	.word	1284
	.byte	17
	.word	1318
	.byte	17
	.word	1332
	.byte	17
	.word	1353
	.byte	6,0,16
	.word	1399
	.byte	17
	.word	1430
	.byte	17
	.word	1445
	.byte	6,0,16
	.word	1468
	.byte	17
	.word	1501
	.byte	17
	.word	1516
	.byte	6,0,16
	.word	1539
	.byte	17
	.word	1580
	.byte	17
	.word	1594
	.byte	6,0,16
	.word	1617
	.byte	17
	.word	1654
	.byte	17
	.word	1668
	.byte	7,18
	.word	1539
	.byte	17
	.word	1580
	.byte	17
	.word	1594
	.byte	19
	.word	1615
	.byte	0,6,0,0,16
	.word	1693
	.byte	17
	.word	1727
	.byte	17
	.word	1741
	.byte	17
	.word	1762
	.byte	6,0
.L612:
	.byte	3
	.word	150
.L715:
	.byte	9
	.word	1378
.L717:
	.byte	9
	.word	1378
.L719:
	.byte	9
	.word	1378
.L727:
	.byte	9
	.word	1378
.L729:
	.byte	9
	.word	1378
.L731:
	.byte	9
	.word	1378
	.byte	3
	.word	150
	.byte	20
	.byte	'void',0,9
	.word	13050
.L863:
	.byte	3
	.word	13056
	.byte	21
	.word	6808
	.byte	1,1,22
	.word	867
	.byte	22
	.word	13045
	.byte	22
	.word	13061
	.byte	22
	.word	867
	.byte	0,3
	.word	13066
	.byte	3
	.word	13066
.L861:
	.byte	23
	.byte	'Dem_DebFilter',0,34,12,23
	.word	13099
	.byte	24
	.byte	'Dem_NodeAreAllFailedFiltered',0,35,166,9,9
	.word	150
	.byte	1,1,1,1,5
	.byte	'NodeId',0,35,166,9,58
	.word	150
	.byte	0
.L1236:
	.byte	9
	.word	1378
.L1238:
	.byte	9
	.word	1378
.L1240:
	.byte	9
	.word	1378
.L1244:
	.byte	9
	.word	1378
.L1246:
	.byte	9
	.word	1378
.L1248:
	.byte	9
	.word	1378
.L1485:
	.byte	9
	.word	1378
.L1487:
	.byte	9
	.word	1378
.L1489:
	.byte	9
	.word	1378
.L1493:
	.byte	9
	.word	1378
.L1495:
	.byte	9
	.word	1378
.L1497:
	.byte	9
	.word	1378
	.byte	16
	.word	1787
	.byte	17
	.word	1835
	.byte	17
	.word	1852
	.byte	6,0,16
	.word	1870
	.byte	17
	.word	1902
	.byte	6,0,16
	.word	1920
	.byte	17
	.word	1956
	.byte	6,0,24
	.byte	'Det_ReportError',0,36,112,16
	.word	150
	.byte	1,1,1,1,5
	.byte	'ModuleId',0,36,112,39
	.word	867
	.byte	5
	.byte	'InstanceId',0,36,112,55
	.word	150
	.byte	5
	.byte	'ApiId',0,36,112,73
	.word	150
	.byte	5
	.byte	'ErrorId',0,36,112,86
	.word	150
	.byte	0,3
	.word	13050
	.byte	24
	.byte	'rba_BswSrv_MemCopy',0,5,83,14
	.word	13381
	.byte	1,1,1,1,5
	.byte	'xDest_pv',0,5,83,39
	.word	13381
	.byte	5
	.byte	'xSrc_pcv',0,5,83,61
	.word	13061
	.byte	5
	.byte	'numBytes_u32',0,5,83,78
	.word	1378
	.byte	0,16
	.word	1974
	.byte	17
	.word	2012
	.byte	6,0,16
	.word	2032
	.byte	17
	.word	2071
	.byte	6,0,16
	.word	2102
	.byte	17
	.word	2137
	.byte	17
	.word	2153
	.byte	17
	.word	2169
	.byte	6,0,16
	.word	2199
	.byte	17
	.word	2234
	.byte	17
	.word	2251
	.byte	17
	.word	2272
	.byte	6,0,16
	.word	2295
	.byte	17
	.word	2325
	.byte	6,0,16
	.word	2345
	.byte	17
	.word	2376
	.byte	6,0,16
	.word	2396
	.byte	17
	.word	2426
	.byte	6,0,16
	.word	2444
	.byte	17
	.word	2477
	.byte	6,0,16
	.word	2490
	.byte	17
	.word	2519
	.byte	6,0,16
	.word	2533
	.byte	17
	.word	2566
	.byte	6,0,16
	.word	2580
	.byte	17
	.word	2612
	.byte	6,0,16
	.word	2629
	.byte	17
	.word	2666
	.byte	7,18
	.word	2580
	.byte	17
	.word	2612
	.byte	19
	.word	2627
	.byte	0,6,0,0,16
	.word	2685
	.byte	17
	.word	2719
	.byte	6,0,16
	.word	2788
	.byte	17
	.word	2832
	.byte	17
	.word	2844
	.byte	7,18
	.word	2490
	.byte	17
	.word	2519
	.byte	19
	.word	2531
	.byte	0,6,0,0,16
	.word	2873
	.byte	17
	.word	2916
	.byte	6,0,16
	.word	2930
	.byte	17
	.word	2966
	.byte	6,0,16
	.word	2980
	.byte	17
	.word	3023
	.byte	6,0,16
	.word	3037
	.byte	6,0,16
	.word	3077
	.byte	17
	.word	3103
	.byte	17
	.word	3118
	.byte	6,0,16
	.word	3141
	.byte	17
	.word	3169
	.byte	17
	.word	3184
	.byte	6,0,16
	.word	3207
	.byte	17
	.word	3239
	.byte	17
	.word	3254
	.byte	17
	.word	3275
	.byte	7,18
	.word	3077
	.byte	17
	.word	3103
	.byte	17
	.word	3118
	.byte	19
	.word	3139
	.byte	0,6,18
	.word	3141
	.byte	17
	.word	3169
	.byte	17
	.word	3184
	.byte	19
	.word	3205
	.byte	0,6,0,0,16
	.word	3314
	.byte	17
	.word	3346
	.byte	17
	.word	3361
	.byte	6,0,16
	.word	3384
	.byte	17
	.word	3424
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	3441
	.byte	17
	.word	3485
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	3503
	.byte	17
	.word	3549
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	3567
	.byte	17
	.word	3608
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	3626
	.byte	17
	.word	3669
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	3687
	.byte	17
	.word	3743
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	3761
	.byte	17
	.word	3799
	.byte	17
	.word	3813
	.byte	7,18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,6,0,0,16
	.word	3837
	.byte	17
	.word	3878
	.byte	17
	.word	3892
	.byte	7,18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,6,0,0,16
	.word	3916
	.byte	17
	.word	3957
	.byte	17
	.word	3971
	.byte	7,18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,6,0,0,16
	.word	3995
	.byte	17
	.word	4038
	.byte	17
	.word	4052
	.byte	7,18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,6,0,0,16
	.word	4076
	.byte	17
	.word	4119
	.byte	17
	.word	4133
	.byte	7,18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,6,0,0,16
	.word	4157
	.byte	17
	.word	4195
	.byte	17
	.word	4209
	.byte	7,18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,6,0,0,16
	.word	4233
	.byte	17
	.word	4273
	.byte	17
	.word	4287
	.byte	7,18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,6,0,0,16
	.word	4311
	.byte	17
	.word	4364
	.byte	17
	.word	4378
	.byte	7,18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,6,0,0,16
	.word	4402
	.byte	17
	.word	4438
	.byte	6,0,16
	.word	4469
	.byte	17
	.word	4504
	.byte	6,0,16
	.word	4534
	.byte	17
	.word	4568
	.byte	6,0,16
	.word	4583
	.byte	17
	.word	4622
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	4651
	.byte	17
	.word	4683
	.byte	6,0,16
	.word	4696
	.byte	17
	.word	4724
	.byte	7,18
	.word	4651
	.byte	17
	.word	4683
	.byte	19
	.word	4694
	.byte	0,6,0,0,16
	.word	4739
	.byte	17
	.word	4774
	.byte	6,0,16
	.word	4787
	.byte	17
	.word	4819
	.byte	6,0,16
	.word	4832
	.byte	17
	.word	4869
	.byte	6,0,16
	.word	4882
	.byte	6,0,16
	.word	4910
	.byte	6,0,16
	.word	4965
	.byte	17
	.word	5018
	.byte	7,18
	.word	2032
	.byte	17
	.word	2071
	.byte	19
	.word	2090
	.byte	0,6,0,0,16
	.word	5034
	.byte	17
	.word	5087
	.byte	7,18
	.word	1974
	.byte	17
	.word	2012
	.byte	19
	.word	2030
	.byte	0,6,0,0,16
	.word	5103
	.byte	17
	.word	5144
	.byte	6,0,16
	.word	5159
	.byte	17
	.word	5210
	.byte	6,0,16
	.word	5225
	.byte	17
	.word	5275
	.byte	7,18
	.word	1112
	.byte	17
	.word	1149
	.byte	17
	.word	1163
	.byte	25
	.word	1184
	.byte	18
	.word	1034
	.byte	17
	.word	1075
	.byte	17
	.word	1089
	.byte	19
	.word	1110
	.byte	0,19
	.word	1185
	.byte	0,0,6,0,0,16
	.word	5292
	.byte	17
	.word	5344
	.byte	6,0,16
	.word	5359
	.byte	17
	.word	5408
	.byte	6,0,16
	.word	5423
	.byte	17
	.word	5463
	.byte	7,18
	.word	1112
	.byte	17
	.word	1149
	.byte	17
	.word	1163
	.byte	25
	.word	1184
	.byte	18
	.word	1034
	.byte	17
	.word	1075
	.byte	17
	.word	1089
	.byte	19
	.word	1110
	.byte	0,19
	.word	1185
	.byte	0,0,6,0,0,16
	.word	5480
	.byte	17
	.word	5524
	.byte	6,0,16
	.word	5539
	.byte	17
	.word	5580
	.byte	6,0,16
	.word	5596
	.byte	17
	.word	5639
	.byte	6,0,16
	.word	5655
	.byte	17
	.word	5703
	.byte	6,0,16
	.word	5719
	.byte	17
	.word	5773
	.byte	7,18
	.word	1188
	.byte	17
	.word	1224
	.byte	17
	.word	1238
	.byte	17
	.word	1259
	.byte	19
	.word	1282
	.byte	0,6,0,0,16
	.word	5791
	.byte	17
	.word	5834
	.byte	6,0,16
	.word	5850
	.byte	17
	.word	5896
	.byte	6,0,16
	.word	5912
	.byte	17
	.word	5957
	.byte	6,0,16
	.word	5986
	.byte	17
	.word	6022
	.byte	6,0,16
	.word	6041
	.byte	17
	.word	6081
	.byte	6,0,16
	.word	6100
	.byte	17
	.word	6136
	.byte	17
	.word	6153
	.byte	6,0,24
	.byte	'Dem_EvtIsRecoverable',0,19,235,1,19
	.word	150
	.byte	1,1,1,1,5
	.byte	'EventId',0,19,235,1,57
	.word	867
	.byte	0,16
	.word	6176
	.byte	17
	.word	6204
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	6225
	.byte	17
	.word	6278
	.byte	6,0,26
	.byte	'Dem_EvtSetCausal',0,19,155,2,6,1,1,1,1,5
	.byte	'EventId',0,19,155,2,40
	.word	867
	.byte	5
	.byte	'causal',0,19,155,2,67
	.word	150
	.byte	0,26
	.byte	'Dem_EvtSetSuppression',0,19,161,2,6,1,1,1,1,5
	.byte	'EventId',0,19,161,2,45
	.word	867
	.byte	5
	.byte	'newSuppressed',0,19,161,2,72
	.word	150
	.byte	0,16
	.word	6297
	.byte	17
	.word	6334
	.byte	6,0,16
	.word	6353
	.byte	17
	.word	6401
	.byte	7,18
	.word	4469
	.byte	17
	.word	4504
	.byte	19
	.word	4532
	.byte	0,6,18
	.word	5912
	.byte	17
	.word	5957
	.byte	19
	.word	5971
	.byte	0,6,0,0,16
	.word	6423
	.byte	17
	.word	6464
	.byte	17
	.word	6481
	.byte	7,18
	.word	3207
	.byte	17
	.word	3239
	.byte	17
	.word	3254
	.byte	17
	.word	3275
	.byte	25
	.word	3299
	.byte	18
	.word	3077
	.byte	17
	.word	3103
	.byte	17
	.word	3118
	.byte	19
	.word	3139
	.byte	0,19
	.word	3300
	.byte	18
	.word	3141
	.byte	17
	.word	3169
	.byte	17
	.word	3184
	.byte	19
	.word	3205
	.byte	0,19
	.word	3301
	.byte	0,0,6,0,0,16
	.word	6501
	.byte	6,0,16
	.word	6554
	.byte	17
	.word	6590
	.byte	7,18
	.word	1399
	.byte	17
	.word	1430
	.byte	17
	.word	1445
	.byte	19
	.word	1466
	.byte	0,6,0,0,16
	.word	6610
	.byte	17
	.word	6642
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	6663
	.byte	17
	.word	6714
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	6735
	.byte	17
	.word	6771
	.byte	17
	.word	6788
	.byte	7,18
	.word	3207
	.byte	17
	.word	3239
	.byte	17
	.word	3254
	.byte	17
	.word	3275
	.byte	25
	.word	3299
	.byte	18
	.word	3077
	.byte	17
	.word	3103
	.byte	17
	.word	3118
	.byte	19
	.word	3139
	.byte	0,19
	.word	3300
	.byte	18
	.word	3141
	.byte	17
	.word	3169
	.byte	17
	.word	3184
	.byte	19
	.word	3205
	.byte	0,19
	.word	3301
	.byte	0,0,6,0,0,24
	.byte	'Dem_EvBuffInsert',0,37,54,19
	.word	150
	.byte	1,1,1,1,5
	.byte	'eventType',0,37,54,57
	.word	150
	.byte	5
	.byte	'eventId',0,37,55,25
	.word	867
	.byte	5
	.byte	'debug0',0,37,56,9
	.word	1378
	.byte	5
	.byte	'debug1',0,37,56,9
	.word	1378
	.byte	0,24
	.byte	'Dem_DebHandleResetConditions',0,20,21,9
	.word	150
	.byte	1,1,1,1,5
	.byte	'EventId',0,20,21,55
	.word	867
	.byte	0,16
	.word	6834
	.byte	17
	.word	6863
	.byte	17
	.word	6879
	.byte	7,18
	.word	5655
	.byte	17
	.word	5703
	.byte	19
	.word	5717
	.byte	0,6,18
	.word	5655
	.byte	17
	.word	5703
	.byte	19
	.word	5717
	.byte	0,6,18
	.word	5655
	.byte	17
	.word	5703
	.byte	19
	.word	5717
	.byte	0,6,18
	.word	6041
	.byte	17
	.word	6081
	.byte	19
	.word	6098
	.byte	0,6,18
	.word	5986
	.byte	17
	.word	6022
	.byte	19
	.word	6039
	.byte	0,6,18
	.word	5719
	.byte	17
	.word	5773
	.byte	25
	.word	5787
	.byte	18
	.word	1188
	.byte	17
	.word	1224
	.byte	17
	.word	1238
	.byte	17
	.word	1259
	.byte	19
	.word	1282
	.byte	0,19
	.word	5788
	.byte	0,0,6,18
	.word	5719
	.byte	17
	.word	5773
	.byte	25
	.word	5787
	.byte	18
	.word	1188
	.byte	17
	.word	1224
	.byte	17
	.word	1238
	.byte	17
	.word	1259
	.byte	19
	.word	1282
	.byte	0,19
	.word	5788
	.byte	0,0,6,0,0,16
	.word	6904
	.byte	17
	.word	6956
	.byte	17
	.word	6972
	.byte	6,0,16
	.word	6992
	.byte	17
	.word	7028
	.byte	17
	.word	7045
	.byte	17
	.word	7064
	.byte	17
	.word	7080
	.byte	7,18
	.word	6904
	.byte	17
	.word	6956
	.byte	17
	.word	6972
	.byte	19
	.word	6990
	.byte	0,6,0,0,16
	.word	7101
	.byte	17
	.word	7130
	.byte	6,0,16
	.word	7148
	.byte	17
	.word	7184
	.byte	17
	.word	7200
	.byte	7,18
	.word	7101
	.byte	17
	.word	7130
	.byte	19
	.word	7146
	.byte	0,6,18
	.word	7101
	.byte	17
	.word	7130
	.byte	19
	.word	7146
	.byte	0,6,18
	.word	3384
	.byte	17
	.word	3424
	.byte	25
	.word	3437
	.byte	18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,19
	.word	3438
	.byte	0,0,6,18
	.word	3503
	.byte	17
	.word	3549
	.byte	25
	.word	3563
	.byte	18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,19
	.word	3564
	.byte	0,0,6,0,0,16
	.word	7230
	.byte	17
	.word	7261
	.byte	7,18
	.word	3761
	.byte	17
	.word	3799
	.byte	17
	.word	3813
	.byte	25
	.word	3833
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	3834
	.byte	0,0,6,18
	.word	3837
	.byte	17
	.word	3878
	.byte	17
	.word	3892
	.byte	25
	.word	3912
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	3913
	.byte	0,0,6,18
	.word	3916
	.byte	17
	.word	3957
	.byte	17
	.word	3971
	.byte	25
	.word	3991
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	3992
	.byte	0,0,6,18
	.word	3995
	.byte	17
	.word	4038
	.byte	17
	.word	4052
	.byte	25
	.word	4072
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	4073
	.byte	0,0,6,18
	.word	4076
	.byte	17
	.word	4119
	.byte	17
	.word	4133
	.byte	25
	.word	4153
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	4154
	.byte	0,0,6,0,0,16
	.word	7286
	.byte	17
	.word	7317
	.byte	7,18
	.word	3761
	.byte	17
	.word	3799
	.byte	17
	.word	3813
	.byte	25
	.word	3833
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	3834
	.byte	0,0,6,18
	.word	3995
	.byte	17
	.word	4038
	.byte	17
	.word	4052
	.byte	25
	.word	4072
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	4073
	.byte	0,0,6,18
	.word	4076
	.byte	17
	.word	4119
	.byte	17
	.word	4133
	.byte	25
	.word	4153
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	4154
	.byte	0,0,6,0,0,16
	.word	7340
	.byte	17
	.word	7381
	.byte	7,18
	.word	3761
	.byte	17
	.word	3799
	.byte	17
	.word	3813
	.byte	25
	.word	3833
	.byte	18
	.word	310
	.byte	17
	.word	346
	.byte	17
	.word	361
	.byte	17
	.word	382
	.byte	25
	.word	406
	.byte	18
	.word	172
	.byte	17
	.word	202
	.byte	17
	.word	217
	.byte	19
	.word	238
	.byte	0,19
	.word	407
	.byte	18
	.word	240
	.byte	17
	.word	272
	.byte	17
	.word	287
	.byte	19
	.word	308
	.byte	0,19
	.word	408
	.byte	0,0,19
	.word	3834
	.byte	0,0,6,0,0,16
	.word	7402
	.byte	17
	.word	7438
	.byte	7,18
	.word	3384
	.byte	17
	.word	3424
	.byte	25
	.word	3437
	.byte	18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,19
	.word	3438
	.byte	0,0,6,0,0,16
	.word	7469
	.byte	17
	.word	7507
	.byte	17
	.word	7522
	.byte	17
	.word	7538
	.byte	6,0,16
	.word	7569
	.byte	17
	.word	7609
	.byte	17
	.word	7625
	.byte	6,0,16
	.word	7651
	.byte	17
	.word	7709
	.byte	6,0,16
	.word	7730
	.byte	17
	.word	7785
	.byte	6,0,16
	.word	7806
	.byte	17
	.word	7859
	.byte	6,0,16
	.word	7878
	.byte	17
	.word	7924
	.byte	6,0,16
	.word	7940
	.byte	17
	.word	8005
	.byte	7,18
	.word	2295
	.byte	17
	.word	2325
	.byte	19
	.word	2343
	.byte	0,6,18
	.word	2295
	.byte	17
	.word	2325
	.byte	19
	.word	2343
	.byte	0,6,18
	.word	7730
	.byte	17
	.word	7785
	.byte	19
	.word	7804
	.byte	0,6,18
	.word	7469
	.byte	17
	.word	7507
	.byte	17
	.word	7522
	.byte	17
	.word	7538
	.byte	19
	.word	7557
	.byte	0,6,0,0,24
	.byte	'Dem_IsPendingClearEvent',0,38,20,9
	.word	150
	.byte	1,1,1,1,5
	.byte	'EventId',0,38,20,49
	.word	867
	.byte	0,16
	.word	8034
	.byte	17
	.word	8059
	.byte	17
	.word	8075
	.byte	6,0,16
	.word	8097
	.byte	17
	.word	8131
	.byte	6,0,16
	.word	8154
	.byte	17
	.word	8187
	.byte	6,0,16
	.word	8203
	.byte	17
	.word	8244
	.byte	6,0,16
	.word	8508
	.byte	17
	.word	8552
	.byte	6,0,16
	.word	8575
	.byte	17
	.word	8614
	.byte	7,18
	.word	8508
	.byte	17
	.word	8552
	.byte	19
	.word	8573
	.byte	0,6,0,0,16
	.word	8633
	.byte	17
	.word	8678
	.byte	6,0,16
	.word	8701
	.byte	17
	.word	8745
	.byte	6,0,16
	.word	8768
	.byte	17
	.word	8815
	.byte	6,0,16
	.word	8838
	.byte	17
	.word	8890
	.byte	6,0,16
	.word	8913
	.byte	17
	.word	8968
	.byte	6,0,16
	.word	8991
	.byte	17
	.word	9041
	.byte	6,0,16
	.word	9064
	.byte	17
	.word	9109
	.byte	7,18
	.word	8991
	.byte	17
	.word	9041
	.byte	19
	.word	9062
	.byte	0,6,0,0,16
	.word	9128
	.byte	17
	.word	9169
	.byte	17
	.word	9184
	.byte	6,0,16
	.word	9208
	.byte	17
	.word	9266
	.byte	6,0,16
	.word	9297
	.byte	17
	.word	9351
	.byte	6,0,16
	.word	9374
	.byte	17
	.word	9424
	.byte	6,0,16
	.word	9447
	.byte	17
	.word	9503
	.byte	6,0,16
	.word	9526
	.byte	17
	.word	9571
	.byte	6,0,16
	.word	9599
	.byte	17
	.word	9641
	.byte	6,0,16
	.word	9664
	.byte	17
	.word	9694
	.byte	6,0,16
	.word	9712
	.byte	17
	.word	9741
	.byte	6,0,16
	.word	9759
	.byte	6,0,16
	.word	9793
	.byte	6,0,16
	.word	9836
	.byte	17
	.word	9879
	.byte	6,0,16
	.word	9896
	.byte	17
	.word	9937
	.byte	6,0,16
	.word	9959
	.byte	17
	.word	9999
	.byte	6,0,16
	.word	10026
	.byte	17
	.word	10074
	.byte	6,0,16
	.word	10091
	.byte	17
	.word	10132
	.byte	6,0,16
	.word	10149
	.byte	17
	.word	10184
	.byte	17
	.word	10203
	.byte	17
	.word	10222
	.byte	6,0,16
	.word	10241
	.byte	17
	.word	10276
	.byte	7,18
	.word	5159
	.byte	17
	.word	5210
	.byte	19
	.word	5223
	.byte	0,6,0,0,16
	.word	10297
	.byte	17
	.word	10348
	.byte	6,0,16
	.word	10366
	.byte	17
	.word	10393
	.byte	17
	.word	10409
	.byte	17
	.word	10423
	.byte	6,0,16
	.word	10443
	.byte	17
	.word	10485
	.byte	6,0,16
	.word	10506
	.byte	17
	.word	10544
	.byte	7,18
	.word	5225
	.byte	17
	.word	5275
	.byte	25
	.word	5288
	.byte	18
	.word	1112
	.byte	17
	.word	1149
	.byte	17
	.word	1163
	.byte	25
	.word	1184
	.byte	18
	.word	1034
	.byte	17
	.word	1075
	.byte	17
	.word	1089
	.byte	19
	.word	1110
	.byte	0,19
	.word	1185
	.byte	0,0,19
	.word	5289
	.byte	0,0,6,0,0,16
	.word	10565
	.byte	6,0,16
	.word	10604
	.byte	17
	.word	10635
	.byte	7,18
	.word	488
	.byte	17
	.word	524
	.byte	17
	.word	538
	.byte	25
	.word	559
	.byte	18
	.word	411
	.byte	17
	.word	451
	.byte	17
	.word	465
	.byte	19
	.word	486
	.byte	0,19
	.word	560
	.byte	0,0,6,0,0,16
	.word	10653
	.byte	17
	.word	10693
	.byte	6,0,24
	.byte	'Dem_DtcIdFromDtcCode',0,29,128,2,15
	.word	867
	.byte	1,1,1,1,5
	.byte	'dtcCode',0,29,128,2,53
	.word	1378
	.byte	0,16
	.word	10710
	.byte	17
	.word	10742
	.byte	17
	.word	10759
	.byte	7,18
	.word	5292
	.byte	17
	.word	5344
	.byte	19
	.word	5357
	.byte	0,6,18
	.word	5359
	.byte	17
	.word	5408
	.byte	19
	.word	5421
	.byte	0,6,18
	.word	5225
	.byte	17
	.word	5275
	.byte	25
	.word	5288
	.byte	18
	.word	1112
	.byte	17
	.word	1149
	.byte	17
	.word	1163
	.byte	25
	.word	1184
	.byte	18
	.word	1034
	.byte	17
	.word	1075
	.byte	17
	.word	1089
	.byte	19
	.word	1110
	.byte	0,19
	.word	1185
	.byte	0,0,19
	.word	5289
	.byte	0,0,6,0,0,24
	.byte	'Dem_IsEventEnabledByDtcSetting',0,29,174,2,19
	.word	150
	.byte	1,1,1,1,5
	.byte	'EventId',0,29,174,2,66
	.word	867
	.byte	0,16
	.word	10781
	.byte	17
	.word	10833
	.byte	6,0,16
	.word	10852
	.byte	17
	.word	10902
	.byte	6,0,16
	.word	10921
	.byte	17
	.word	10963
	.byte	6,0,16
	.word	10982
	.byte	17
	.word	11018
	.byte	17
	.word	11032
	.byte	6,0,16
	.word	11051
	.byte	17
	.word	11082
	.byte	17
	.word	11098
	.byte	17
	.word	11120
	.byte	7,18
	.word	2533
	.byte	17
	.word	2566
	.byte	19
	.word	2578
	.byte	0,6,18
	.word	10921
	.byte	17
	.word	10963
	.byte	19
	.word	10980
	.byte	0,6,18
	.word	10921
	.byte	17
	.word	10963
	.byte	19
	.word	10980
	.byte	0,6,18
	.word	4739
	.byte	17
	.word	4774
	.byte	19
	.word	4785
	.byte	0,6,18
	.word	4739
	.byte	17
	.word	4774
	.byte	19
	.word	4785
	.byte	0,6,18
	.word	10982
	.byte	17
	.word	11018
	.byte	17
	.word	11032
	.byte	19
	.word	11049
	.byte	0,6,18
	.word	10982
	.byte	17
	.word	11018
	.byte	17
	.word	11032
	.byte	19
	.word	11049
	.byte	0,6,18
	.word	2490
	.byte	17
	.word	2519
	.byte	19
	.word	2531
	.byte	0,6,18
	.word	2490
	.byte	17
	.word	2519
	.byte	19
	.word	2531
	.byte	0,6,0,0,16
	.word	11154
	.byte	17
	.word	11191
	.byte	7,18
	.word	10565
	.byte	19
	.word	10602
	.byte	0,6,18
	.word	5225
	.byte	17
	.word	5275
	.byte	25
	.word	5288
	.byte	18
	.word	1112
	.byte	17
	.word	1149
	.byte	17
	.word	1163
	.byte	25
	.word	1184
	.byte	18
	.word	1034
	.byte	17
	.word	1075
	.byte	17
	.word	1089
	.byte	19
	.word	1110
	.byte	0,19
	.word	1185
	.byte	0,0,19
	.word	5289
	.byte	0,0,6,18
	.word	11051
	.byte	17
	.word	11082
	.byte	17
	.word	11098
	.byte	17
	.word	11120
	.byte	25
	.word	11142
	.byte	18
	.word	2533
	.byte	17
	.word	2566
	.byte	19
	.word	2578
	.byte	0,19
	.word	11143
	.byte	18
	.word	10921
	.byte	17
	.word	10963
	.byte	19
	.word	10980
	.byte	0,19
	.word	11144
	.byte	18
	.word	10921
	.byte	17
	.word	10963
	.byte	19
	.word	10980
	.byte	0,19
	.word	11145
	.byte	18
	.word	4739
	.byte	17
	.word	4774
	.byte	19
	.word	4785
	.byte	0,19
	.word	11146
	.byte	18
	.word	4739
	.byte	17
	.word	4774
	.byte	19
	.word	4785
	.byte	0,19
	.word	11147
	.byte	18
	.word	10982
	.byte	17
	.word	11018
	.byte	17
	.word	11032
	.byte	19
	.word	11049
	.byte	0,19
	.word	11148
	.byte	18
	.word	10982
	.byte	17
	.word	11018
	.byte	17
	.word	11032
	.byte	19
	.word	11049
	.byte	0,19
	.word	11149
	.byte	18
	.word	2490
	.byte	17
	.word	2519
	.byte	19
	.word	2531
	.byte	0,19
	.word	11150
	.byte	18
	.word	2490
	.byte	17
	.word	2519
	.byte	19
	.word	2531
	.byte	0,19
	.word	11151
	.byte	0,0,6,0,0,16
	.word	11213
	.byte	17
	.word	11245
	.byte	6,0,16
	.word	11266
	.byte	17
	.word	11301
	.byte	6,0,16
	.word	11322
	.byte	17
	.word	11362
	.byte	17
	.word	11378
	.byte	17
	.word	11401
	.byte	17
	.word	11424
	.byte	6,0,16
	.word	11452
	.byte	17
	.word	11489
	.byte	17
	.word	11505
	.byte	17
	.word	11524
	.byte	7,18
	.word	7101
	.byte	17
	.word	7130
	.byte	19
	.word	7146
	.byte	0,6,0,0,16
	.word	11549
	.byte	17
	.word	11588
	.byte	17
	.word	11604
	.byte	17
	.word	11623
	.byte	17
	.word	11642
	.byte	7,18
	.word	11322
	.byte	17
	.word	11362
	.byte	17
	.word	11378
	.byte	17
	.word	11401
	.byte	17
	.word	11424
	.byte	19
	.word	11445
	.byte	0,6,0,0,16
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	6,0,16
	.word	11820
	.byte	17
	.word	11855
	.byte	7,18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,6,0,0,16
	.word	11870
	.byte	17
	.word	11904
	.byte	6,0,16
	.word	11922
	.byte	17
	.word	11956
	.byte	17
	.word	11967
	.byte	7,18
	.word	11870
	.byte	17
	.word	11904
	.byte	19
	.word	11915
	.byte	0,6,18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,6,0,0,16
	.word	11995
	.byte	17
	.word	12029
	.byte	17
	.word	12040
	.byte	7,18
	.word	11820
	.byte	17
	.word	11855
	.byte	25
	.word	11866
	.byte	18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,19
	.word	11867
	.byte	0,0,6,18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,6,0,0,16
	.word	12066
	.byte	17
	.word	12101
	.byte	7,18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,6,0,0,16
	.word	12116
	.byte	17
	.word	12160
	.byte	6,0,16
	.word	12174
	.byte	17
	.word	12211
	.byte	7,18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,6,0,0,16
	.word	12313
	.byte	17
	.word	12350
	.byte	17
	.word	12373
	.byte	6,0,16
	.word	12390
	.byte	17
	.word	12427
	.byte	17
	.word	12444
	.byte	17
	.word	12465
	.byte	17
	.word	12481
	.byte	7,18
	.word	12313
	.byte	17
	.word	12350
	.byte	17
	.word	12373
	.byte	19
	.word	12388
	.byte	0,6,18
	.word	12116
	.byte	17
	.word	12160
	.byte	19
	.word	12172
	.byte	0,6,18
	.word	12066
	.byte	17
	.word	12101
	.byte	25
	.word	12112
	.byte	18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,19
	.word	12113
	.byte	0,0,6,18
	.word	12174
	.byte	17
	.word	12211
	.byte	25
	.word	12223
	.byte	18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,19
	.word	12224
	.byte	0,0,6,18
	.word	11922
	.byte	17
	.word	11956
	.byte	17
	.word	11967
	.byte	25
	.word	11990
	.byte	18
	.word	11870
	.byte	17
	.word	11904
	.byte	19
	.word	11915
	.byte	0,19
	.word	11991
	.byte	18
	.word	11763
	.byte	17
	.word	11795
	.byte	17
	.word	11806
	.byte	19
	.word	11818
	.byte	0,19
	.word	11992
	.byte	0,0,6,0,0,27
	.byte	'__INDIRECT__',0,33,1,1,1,1,1,28,1,3
	.word	20374
	.byte	23
	.byte	'__codeptr',0,33,1,1
	.word	20376
	.byte	23
	.byte	'sint8',0,39,76,25
	.word	9289
	.byte	23
	.byte	'uint8',0,39,81,25
	.word	150
	.byte	23
	.byte	'sint16',0,39,86,25
	.word	5973
	.byte	23
	.byte	'uint16',0,39,91,25
	.word	867
	.byte	23
	.byte	'sint32',0,39,96,24
	.word	2192
	.byte	23
	.byte	'uint32',0,39,106,24
	.word	1378
	.byte	2
	.byte	'unsigned long long int',0,8,7,23
	.byte	'uint64',0,39,111,30
	.word	20487
	.byte	23
	.byte	'boolean',0,39,127,25
	.word	150
	.byte	23
	.byte	'uint8_least',0,39,137,1,25
	.word	6808
	.byte	23
	.byte	'uint16_least',0,39,147,1,25
	.word	6808
	.byte	23
	.byte	'StatusType',0,40,191,1,27
	.word	150
	.byte	23
	.byte	'Std_ReturnType',0,40,199,1,15
	.word	150
	.byte	10,40,206,1,9,8,11
	.byte	'vendorID',0
	.word	867
	.byte	2,2,35,0,11
	.byte	'moduleID',0
	.word	867
	.byte	2,2,35,2,11
	.byte	'sw_major_version',0
	.word	150
	.byte	1,2,35,4,11
	.byte	'sw_minor_version',0
	.word	150
	.byte	1,2,35,5,11
	.byte	'sw_patch_version',0
	.word	150
	.byte	1,2,35,6,0,23
	.byte	'Std_VersionInfoType',0,40,213,1,3
	.word	20631
	.byte	23
	.byte	'Dem_ClientRequestType',0,41,46,16
	.word	867
	.byte	23
	.byte	'Dem_ClientResultType',0,41,47,16
	.word	867
	.byte	23
	.byte	'Dem_ClientSelectionType',0,41,48,16
	.word	1378
	.byte	23
	.byte	'Dem_ClientPriorityType',0,41,50,15
	.word	150
	.byte	23
	.byte	'Dem_ComponentIdType',0,42,20,15
	.word	150
	.byte	23
	.byte	'PduIdType',0,43,22,19
	.word	867
	.byte	23
	.byte	'PduLengthType',0,43,26,19
	.word	867
	.byte	29,44,113,9,4,30
	.byte	'TP_DATACONF',0,0,30
	.byte	'TP_DATARETRY',0,1,30
	.byte	'TP_CONFPENDING',0,2,0,23
	.byte	'TpDataStateType',0,44,118,3
	.word	20971
	.byte	23
	.byte	'Can_IdType',0,45,32,16
	.word	1378
	.byte	23
	.byte	'Can_HwHandleType',0,45,43,16
	.word	867
	.byte	10,46,93,9,8,11
	.byte	'Class',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'TIN',0
	.word	150
	.byte	1,2,35,1,11
	.byte	'ReturnAddress',0
	.word	1378
	.byte	4,2,35,4,0,23
	.byte	'OsTrapInfoType',0,46,97,3
	.word	21091
	.byte	14,68
	.word	1378
	.byte	15,16,0,10,46,154,1,9,68,11
	.byte	'store',0
	.word	21171
	.byte	68,2,35,0,0,14,68
	.word	21180
	.byte	15,0,0,23
	.byte	'Os_JumpBufType',0,46,156,1,3
	.word	21202
	.byte	23
	.byte	'Os_StackTraceType',0,46,174,1,18
	.word	1378
	.byte	10,46,175,1,9,8,11
	.byte	'sp',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'ctx',0
	.word	1378
	.byte	4,2,35,4,0,23
	.byte	'Os_StackValueType',0,46,175,1,63
	.word	21262
	.byte	23
	.byte	'Os_StackSizeType',0,46,176,1,27
	.word	21262
	.byte	31,1,1,3
	.word	21347
	.byte	23
	.byte	'Os_VoidVoidFunctionType',0,46,179,1,16
	.word	21350
	.byte	23
	.byte	'ApplicationType',0,46,193,1,23
	.word	150
	.byte	32
	.byte	'Os_ApplicationConfigurationType_s',0,46,198,1,16,2,11
	.byte	'app_id',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'access',0
	.word	150
	.byte	1,2,35,1,0,23
	.byte	'Os_ApplicationConfigurationType',0,46,201,1,3
	.word	21413
	.byte	23
	.byte	'Os_CoreStateType',0,46,203,1,16
	.word	1378
	.byte	23
	.byte	'AreaIdType',0,46,204,1,16
	.word	867
	.byte	23
	.byte	'Os_PeripheralAddressType',0,46,212,1,22
	.word	1378
	.byte	23
	.byte	'TickType',0,46,221,1,22
	.word	1378
	.byte	23
	.byte	'Os_StopwatchTickType',0,46,225,1,22
	.word	1378
	.byte	23
	.byte	'Os_Lockable',0,46,234,1,18
	.word	1394
	.byte	23
	.byte	'CoreIdType',0,46,236,1,16
	.word	867
	.byte	23
	.byte	'SpinlockIdType',0,46,237,1,16
	.word	867
	.byte	29,46,239,1,9,4,30
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,30
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,23
	.byte	'TryToGetSpinlockType',0,46,239,1,74
	.word	21720
	.byte	29,46,174,2,9,4,30
	.byte	'APPLICATION_ACCESSIBLE',0,0,30
	.byte	'APPLICATION_RESTARTING',0,1,30
	.byte	'APPLICATION_TERMINATED',0,2,0,23
	.byte	'ApplicationStateType',0,46,174,2,92
	.word	21813
	.byte	33,1,1,22
	.word	150
	.byte	22
	.word	13381
	.byte	0,3
	.word	21925
	.byte	23
	.byte	'Os_FunctionEntryType',0,46,183,2,16
	.word	21939
	.byte	32
	.byte	'Os_MeterInfoType_s',0,46,193,2,16,48,11
	.byte	'elapsed',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'previous',0
	.word	1378
	.byte	4,2,35,4,11
	.byte	'max',0
	.word	1378
	.byte	4,2,35,8,11
	.byte	'cumulative',0
	.word	1378
	.byte	4,2,35,12,11
	.byte	'stackbase',0
	.word	21262
	.byte	8,2,35,16,11
	.byte	'stackusage',0
	.word	21262
	.byte	8,2,35,24,11
	.byte	'stackmax',0
	.word	21262
	.byte	8,2,35,32,11
	.byte	'stackbudget',0
	.word	21262
	.byte	8,2,35,40,0,23
	.byte	'Os_MeterInfoType',0,46,202,2,3
	.word	21974
	.byte	3
	.word	21974
	.byte	23
	.byte	'Os_MeterInfoRefType',0,46,203,2,50
	.word	22172
	.byte	23
	.byte	'EventMaskType',0,46,206,2,15
	.word	150
	.byte	23
	.byte	'Os_imaskType',0,46,211,2,16
	.word	1378
	.byte	32
	.byte	'Os_ISRDynType_s',0,46,213,2,16,48,11
	.byte	'meter',0
	.word	21974
	.byte	48,2,35,0,0,23
	.byte	'Os_ISRDynType',0,46,215,2,3
	.word	22251
	.byte	3
	.word	22251
	.byte	9
	.word	22312
	.byte	32
	.byte	'Os_ISRType_s',0,46,216,2,16,24,11
	.byte	'entry_function',0
	.word	21355
	.byte	4,2,35,0,11
	.byte	'dynamic',0
	.word	22317
	.byte	4,2,35,4,11
	.byte	'imask',0
	.word	1378
	.byte	4,2,35,8,11
	.byte	'stackbudget',0
	.word	21262
	.byte	8,2,35,12,11
	.byte	'access',0
	.word	150
	.byte	1,2,35,20,11
	.byte	'application',0
	.word	150
	.byte	1,2,35,21,0,23
	.byte	'Os_ISRType',0,46,223,2,3
	.word	22322
	.byte	3
	.word	21347
	.byte	9
	.word	22322
	.byte	3
	.word	22481
	.byte	23
	.byte	'ISRType',0,46,224,2,46
	.word	22486
	.byte	23
	.byte	'Os_bitmask',0,46,239,2,22
	.word	1378
	.byte	23
	.byte	'Os_pset0Type',0,46,240,2,20
	.word	1378
	.byte	23
	.byte	'Os_pset1Type',0,46,241,2,20
	.word	1378
	.byte	23
	.byte	'Os_pset2Type',0,46,242,2,20
	.word	1378
	.byte	13,46,243,2,9,4,11
	.byte	'p0',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'p1',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'p2',0
	.word	1378
	.byte	4,2,35,0,0,23
	.byte	'Os_psetType',0,46,247,2,3
	.word	22594
	.byte	13,46,249,2,9,4,11
	.byte	't0',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	't1',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	't2',0
	.word	1378
	.byte	4,2,35,0,0,23
	.byte	'Os_tpmaskType',0,46,253,2,3
	.word	22658
	.byte	23
	.byte	'Os_ActivationCountType',0,46,254,2,23
	.word	150
	.byte	32
	.byte	'Os_TaskDynType_s',0,46,128,3,16,120,11
	.byte	'terminate_jump_buf',0
	.word	21211
	.byte	68,2,35,0,11
	.byte	'meter',0
	.word	21974
	.byte	48,2,35,68,11
	.byte	'activation_count',0
	.word	150
	.byte	1,2,35,116,0,23
	.byte	'Os_TaskDynType',0,46,132,3,3
	.word	22756
	.byte	14,68
	.word	21180
	.byte	15,0,0,3
	.word	22756
	.byte	9
	.word	22882
	.byte	32
	.byte	'Os_TaskType_s',0,46,134,3,16,40,11
	.byte	'dynamic',0
	.word	22887
	.byte	4,2,35,0,11
	.byte	'entry_function',0
	.word	21355
	.byte	4,2,35,4,11
	.byte	'pset',0
	.word	22594
	.byte	4,2,35,8,11
	.byte	'base_tpmask',0
	.word	22658
	.byte	4,2,35,12,11
	.byte	'tpmask',0
	.word	22658
	.byte	4,2,35,16,11
	.byte	'core_id',0
	.word	867
	.byte	2,2,35,20,11
	.byte	'index',0
	.word	1378
	.byte	4,2,35,24,11
	.byte	'stackbudget',0
	.word	21262
	.byte	8,2,35,28,11
	.byte	'activation_count',0
	.word	150
	.byte	1,2,35,36,11
	.byte	'access',0
	.word	150
	.byte	1,2,35,37,11
	.byte	'application',0
	.word	150
	.byte	1,2,35,38,0,23
	.byte	'Os_TaskType',0,46,146,3,3
	.word	22892
	.byte	9
	.word	22892
	.byte	3
	.word	23142
	.byte	23
	.byte	'TaskType',0,46,147,3,47
	.word	23147
	.byte	34
	.byte	'Os_TaskStateType',0,46,155,3,6,4,30
	.byte	'SUSPENDED',0,0,30
	.byte	'READY',0,1,30
	.byte	'WAITING',0,2,30
	.byte	'RUNNING',0,3,0,23
	.byte	'TaskStateType',0,46,156,3,31
	.word	23170
	.byte	13,46,167,3,3,4,11
	.byte	'tpmask',0
	.word	22658
	.byte	4,2,35,0,0,32
	.byte	'Os_ResourceDynType_s',0,46,166,3,16,4,11
	.byte	'saved_priority',0
	.word	23257
	.byte	4,2,35,0,0,23
	.byte	'Os_ResourceDynType',0,46,170,3,3
	.word	23280
	.byte	3
	.word	23280
	.byte	9
	.word	23360
	.byte	32
	.byte	'Os_ResourceType_s',0,46,171,3,16,12,11
	.byte	'dynamic',0
	.word	23365
	.byte	4,2,35,0,11
	.byte	'tpmask',0
	.word	22658
	.byte	4,2,35,4,11
	.byte	'access',0
	.word	150
	.byte	1,2,35,8,0,23
	.byte	'Os_ResourceType',0,46,175,3,3
	.word	23370
	.byte	10,46,181,3,9,12,11
	.byte	'maxallowedvalue',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'ticksperbase',0
	.word	1378
	.byte	4,2,35,4,11
	.byte	'mincycle',0
	.word	1378
	.byte	4,2,35,8,0,23
	.byte	'AlarmBaseType',0,46,185,3,3
	.word	23469
	.byte	10,46,206,3,9,8,11
	.byte	'Running',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'Pending',0
	.word	150
	.byte	1,2,35,1,11
	.byte	'Delay',0
	.word	1378
	.byte	4,2,35,4,0,23
	.byte	'Os_CounterStatusType',0,46,210,3,3
	.word	23564
	.byte	35
	.word	150
	.byte	1,1,3
	.word	23650
	.byte	23
	.byte	'Os_CounterIncrAdvType',0,46,217,3,22
	.word	23657
	.byte	32
	.byte	's_swd',0,46,222,3,12,4,11
	.byte	'count',0
	.word	1378
	.byte	4,2,35,0,0,13,46,221,3,3,4,11
	.byte	'sw',0
	.word	23693
	.byte	4,2,35,0,0,32
	.byte	'Os_CounterDynType_s',0,46,220,3,16,4,11
	.byte	'type_dependent',0
	.word	23721
	.byte	4,2,35,0,0,23
	.byte	'Os_CounterDynType',0,46,226,3,3
	.word	23740
	.byte	3
	.word	23740
	.byte	9
	.word	23818
	.byte	32
	.byte	'Os_CounterType_s',0,46,227,3,16,28,11
	.byte	'dynamic',0
	.word	23823
	.byte	4,2,35,0,11
	.byte	'advincr',0
	.word	23662
	.byte	4,2,35,4,11
	.byte	'base',0
	.word	23469
	.byte	12,2,35,8,11
	.byte	'core',0
	.word	13381
	.byte	4,2,35,20,11
	.byte	'access',0
	.word	150
	.byte	1,2,35,24,11
	.byte	'application',0
	.word	150
	.byte	1,2,35,25,0,23
	.byte	'Os_CounterType',0,46,234,3,3
	.word	23828
	.byte	3
	.word	23650
	.byte	9
	.word	23828
	.byte	3
	.word	23980
	.byte	23
	.byte	'CounterType',0,46,235,3,52
	.word	23985
	.byte	34
	.byte	'Os_ScheduleTableStatusType',0,46,240,3,6,4,30
	.byte	'SCHEDULETABLE_STOPPED',0,0,30
	.byte	'SCHEDULETABLE_NEXT',0,1,30
	.byte	'SCHEDULETABLE_WAITING',0,2,30
	.byte	'SCHEDULETABLE_RUNNING',0,3,30
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,23
	.byte	'ScheduleTableStatusType',0,46,241,3,41
	.word	24011
	.byte	9
	.word	.L1680-.L504
	.byte	3
	.word	24211
	.byte	23
	.byte	'ScheduleTableType',0,46,128,4,58
	.word	24216
	.byte	32
	.byte	'Os_ScheduleTableDynType_s',0,46,130,4,16,16,11
	.byte	'match',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'next',0
	.word	24221
	.byte	4,2,35,4,11
	.byte	'state',0
	.word	24011
	.byte	4,2,35,8,11
	.byte	'config',0
	.word	867
	.byte	2,2,35,12,0,3
	.word	24248
	.byte	9
	.word	24341
.L1680:
	.byte	32
	.byte	'Os_ScheduleTableType_s',0,46,247,3,16,16,11
	.byte	'dynamic',0
	.word	24346
	.byte	4,2,35,0,11
	.byte	'counter',0
	.word	23990
	.byte	4,2,35,4,11
	.byte	'repeat',0
	.word	150
	.byte	1,2,35,8,11
	.byte	'config',0
	.word	867
	.byte	2,2,35,10,11
	.byte	'initial',0
	.word	150
	.byte	1,2,35,12,11
	.byte	'access',0
	.word	150
	.byte	1,2,35,13,11
	.byte	'application',0
	.word	150
	.byte	1,2,35,14,0,23
	.byte	'Os_ScheduleTableType',0,46,255,3,3
	.word	24351
	.byte	9
	.word	24351
	.byte	3
	.word	24531
	.byte	9
	.word	23828
	.byte	3
	.word	24541
	.byte	12
	.word	21655
	.byte	12
	.word	22594
	.byte	12
	.word	22491
	.byte	12
	.word	23152
	.byte	12
	.word	22658
	.byte	12
	.word	150
	.byte	12
	.word	23152
	.byte	32
	.byte	'Os_ControlledCoreType_s',0,46,251,6,16,112,11
	.byte	'TrapInfo',0
	.word	21091
	.byte	8,2,35,0,11
	.byte	'lock_taskaccess',0
	.word	24551
	.byte	4,2,35,8,11
	.byte	'ReadyTasks',0
	.word	24556
	.byte	4,2,35,12,11
	.byte	'RunningISR',0
	.word	24561
	.byte	4,2,35,16,11
	.byte	'RunningTask',0
	.word	24566
	.byte	4,2,35,20,11
	.byte	'RunningTPMask',0
	.word	24571
	.byte	4,2,35,24,11
	.byte	'CurrentMeteredObject',0
	.word	22177
	.byte	4,2,35,28,11
	.byte	'IdleMeter',0
	.word	21974
	.byte	48,2,35,32,11
	.byte	'AppAccess',0
	.word	150
	.byte	1,2,35,80,11
	.byte	'AppOverride',0
	.word	24576
	.byte	1,2,35,81,11
	.byte	'GetStackValueAdjust',0
	.word	21262
	.byte	8,2,35,84,11
	.byte	'InErrorHook',0
	.word	150
	.byte	1,2,35,92,11
	.byte	'ChainTaskRef',0
	.word	24581
	.byte	4,2,35,96,11
	.byte	'GetStackUsageAdjust',0
	.word	21262
	.byte	8,2,35,100,11
	.byte	'InProtectionHook',0
	.word	150
	.byte	1,2,35,108,11
	.byte	'CoreIsActive',0
	.word	150
	.byte	1,2,35,109,11
	.byte	'InShutdownHook',0
	.word	150
	.byte	1,2,35,110,0,23
	.byte	'Os_ControlledCoreType',0,46,141,7,3
	.word	24586
	.byte	3
	.word	1378
	.byte	9
	.word	22322
	.byte	3
	.word	25042
	.byte	9
	.word	22892
	.byte	3
	.word	25052
	.byte	3
	.word	21974
	.byte	32
	.byte	'Os_AnyCoreType_s',0,46,151,7,16,96,11
	.byte	'DisableAllImask',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'SuspendAllImask',0
	.word	1378
	.byte	4,2,35,4,11
	.byte	'SuspendOSImask',0
	.word	1378
	.byte	4,2,35,8,11
	.byte	'DisableAllCount',0
	.word	1378
	.byte	4,2,35,12,11
	.byte	'SuspendAllCount',0
	.word	1378
	.byte	4,2,35,16,11
	.byte	'SuspendOSCount',0
	.word	1378
	.byte	4,2,35,20,11
	.byte	'RestartJumpBuf',0
	.word	21211
	.byte	68,2,35,24,11
	.byte	'Restartable',0
	.word	150
	.byte	1,2,35,92,0,23
	.byte	'Os_AnyCoreType',0,46,160,7,3
	.word	25067
	.byte	23
	.byte	'Can_TxObjPriorityClassType',0,47,219,3,16
	.word	1378
	.byte	32
	.byte	'Can_TxHwObjectConfigType',0,47,231,3,16,8,11
	.byte	'MsgObjId',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'HwControllerId',0
	.word	150
	.byte	1,2,35,1,11
	.byte	'TxObjPriorityClass',0
	.word	1378
	.byte	4,2,35,4,0,23
	.byte	'Can_TxHwObjectConfigType',0,47,252,3,3
	.word	25344
	.byte	32
	.byte	'Can_RxHwObjectConfigType',0,47,129,4,16,12,11
	.byte	'MaskRef',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'MsgId',0
	.word	1378
	.byte	4,2,35,4,11
	.byte	'MsgObjId',0
	.word	150
	.byte	1,2,35,8,11
	.byte	'HwControllerId',0
	.word	150
	.byte	1,2,35,9,0,23
	.byte	'Can_RxHwObjectConfigType',0,47,147,4,3
	.word	25480
	.byte	14,4
	.word	150
	.byte	15,3,0,32
	.byte	'Can_ControllerMOMapConfigType',0,47,181,4,16,4,11
	.byte	'ControllerMOMap',0
	.word	25620
	.byte	4,2,35,0,0,23
	.byte	'Can_ControllerMOMapConfigType',0,47,184,4,3
	.word	25629
	.byte	32
	.byte	'Can_NPCRValueType',0,47,188,4,16,2,11
	.byte	'Can_NPCRValue',0
	.word	867
	.byte	2,2,35,0,0,23
	.byte	'Can_NPCRValueType',0,47,191,4,3
	.word	25730
	.byte	32
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,47,194,4,16,8,11
	.byte	'CanControllerBaudrate',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'CanControllerBaudrateCfg',0
	.word	867
	.byte	2,2,35,4,0,23
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,47,198,4,3
	.word	25805
	.byte	9
	.word	25805
	.byte	3
	.word	25970
	.byte	32
	.byte	'Can_BaudrateConfigPtrType',0,47,201,4,16,4,11
	.byte	'Can_kBaudrateConfigPtr',0
	.word	25975
	.byte	4,2,35,0,0,23
	.byte	'Can_BaudrateConfigPtrType',0,47,204,4,3
	.word	25980
	.byte	32
	.byte	'Can_EventHandlingType',0,47,226,4,16,4,11
	.byte	'CanEventType',0
	.word	25620
	.byte	4,2,35,0,0,23
	.byte	'Can_EventHandlingType',0,47,229,4,3
	.word	26080
	.byte	23
	.byte	'Rte_TransformerErrorCode',0,48,130,1,15
	.word	150
	.byte	23
	.byte	'Rte_TransformerClass',0,48,131,1,15
	.word	150
	.byte	10,48,168,1,9,12,11
	.byte	'in',0
	.word	13381
	.byte	4,2,35,0,11
	.byte	'out',0
	.word	13381
	.byte	4,2,35,4,11
	.byte	'used',0
	.word	867
	.byte	2,2,35,8,11
	.byte	'lost_data',0
	.word	150
	.byte	1,2,35,10,0,23
	.byte	'Rte_QDynType',0,48,173,1,3
	.word	26226
	.byte	29,48,175,1,9,4,30
	.byte	'RTE_DRA',0,0,30
	.byte	'RTE_WOWP',0,1,30
	.byte	'RTE_TASK',0,2,30
	.byte	'RTE_ARE',0,3,30
	.byte	'RTE_EV',0,4,30
	.byte	'RTE_MSI',0,5,0,23
	.byte	'Rte_NotificationType',0,48,182,1,3
	.word	26313
	.byte	3
	.word	26226
	.byte	32
	.byte	'Rte_QCmnType',0,48,184,1,16,24,11
	.byte	'dynamic',0
	.word	26411
	.byte	4,2,35,0,11
	.byte	'copy',0
	.word	150
	.byte	1,2,35,4,11
	.byte	'queue_size',0
	.word	867
	.byte	2,2,35,6,11
	.byte	'element_size',0
	.word	867
	.byte	2,2,35,8,11
	.byte	'buffer_start',0
	.word	13381
	.byte	4,2,35,12,11
	.byte	'buffer_end',0
	.word	13381
	.byte	4,2,35,16,11
	.byte	'notification_type',0
	.word	26313
	.byte	4,2,35,20,0,23
	.byte	'Rte_QCmnType',0,48,192,1,3
	.word	26416
	.byte	23
	.byte	'Rte_AlarmRefType',0,48,224,1,32
	.word	1378
	.byte	23
	.byte	'Rte_AlarmIndexType',0,48,226,1,32
	.word	867
	.byte	14,128,8
	.word	150
	.byte	15,255,7,0,23
	.byte	'Impl_NVM_DstPtrType_1024',0,49,50,15
	.word	26654
	.byte	23
	.byte	'CanIf_u32_impl',0,49,69,16
	.word	1378
	.byte	23
	.byte	'CanIf_u16_impl',0,49,71,16
	.word	867
	.byte	23
	.byte	'CanIf_u8_impl',0,49,73,15
	.word	150
	.byte	23
	.byte	'CanIf_ControllerModeType_Enum_impl',0,49,88,15
	.word	150
	.byte	23
	.byte	'CanIf_PduModeType_Enum_impl',0,49,90,15
	.word	150
	.byte	10,49,92,9,2,11
	.byte	'DeviceMode',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'ChannelMode',0
	.word	150
	.byte	1,2,35,1,0,23
	.byte	'CanIf_ControllerStateType_struct_impl',0,49,95,3
	.word	26845
	.byte	23
	.byte	'CanIf_NotifStatusType_Enum_impl',0,49,100,15
	.word	150
	.byte	23
	.byte	'CanSM_boolean_Impl',0,49,120,15
	.word	150
	.byte	23
	.byte	'CanSM_u8_Impl',0,49,123,15
	.word	150
	.byte	23
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,49,128,1,15
	.word	150
	.byte	23
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,49,132,1,15
	.word	150
	.byte	23
	.byte	'CanSM_u16_Impl',0,49,136,1,16
	.word	867
	.byte	23
	.byte	'CanSM_TimerStateType_Enum_impl',0,49,138,1,15
	.word	150
	.byte	10,49,140,1,9,4,11
	.byte	'cntTick_u16',0
	.word	867
	.byte	2,2,35,0,11
	.byte	'stTimer',0
	.word	150
	.byte	1,2,35,2,0,23
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,49,143,1,3
	.word	27186
	.byte	23
	.byte	'Com_impl_u16',0,49,154,1,16
	.word	867
	.byte	23
	.byte	'Com_impl_u8',0,49,157,1,15
	.word	150
	.byte	23
	.byte	'ComM_uint32_Impl',0,49,173,1,16
	.word	1378
	.byte	23
	.byte	'ComM_uint16_Impl',0,49,175,1,16
	.word	867
	.byte	23
	.byte	'ComM_uint8_Impl',0,49,177,1,15
	.word	150
	.byte	23
	.byte	'ComM_bool_Impl',0,49,179,1,15
	.word	150
	.byte	10,49,181,1,9,24,11
	.byte	'ChannelState_e',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'LightTimeoutCtr_u32',0
	.word	1378
	.byte	4,2,35,4,11
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	867
	.byte	2,2,35,8,11
	.byte	'ChannelMode_u8',0
	.word	150
	.byte	1,2,35,10,11
	.byte	'BusSmMode_u8',0
	.word	150
	.byte	1,2,35,11,11
	.byte	'UserRequestCtr_u8',0
	.word	150
	.byte	1,2,35,12,11
	.byte	'PassiveRequestState_u8',0
	.word	150
	.byte	1,2,35,13,11
	.byte	'PncRequestCtr_u8',0
	.word	150
	.byte	1,2,35,14,11
	.byte	'InhibitionReqStatus_u8',0
	.word	150
	.byte	1,2,35,15,11
	.byte	'NmNetworkRequestStatus_b',0
	.word	150
	.byte	1,2,35,16,11
	.byte	'DiagnosticRequestState_b',0
	.word	150
	.byte	1,2,35,17,11
	.byte	'CommunicationAllowed_b',0
	.word	150
	.byte	1,2,35,18,11
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	150
	.byte	1,2,35,19,11
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	150
	.byte	1,2,35,20,11
	.byte	'NmNetworkModeStatus_b',0
	.word	150
	.byte	1,2,35,21,0,23
	.byte	'ComM_ChannelStruct_Impl',0,49,197,1,3
	.word	27418
	.byte	10,49,206,1,9,10,11
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	867
	.byte	2,2,35,0,11
	.byte	'LimitToNoComCtr_u16',0
	.word	867
	.byte	2,2,35,2,11
	.byte	'RequestedUserMode_t',0
	.word	150
	.byte	1,2,35,4,11
	.byte	'IndicatedUserMode_t',0
	.word	150
	.byte	1,2,35,5,11
	.byte	'numChannelsInFullCom_u8',0
	.word	150
	.byte	1,2,35,6,11
	.byte	'numChannelsInSilentCom_u8',0
	.word	150
	.byte	1,2,35,7,11
	.byte	'numChannelsInNoCom_u8',0
	.word	150
	.byte	1,2,35,8,0,23
	.byte	'ComM_UserStruct_Impl',0,49,214,1,3
	.word	27922
	.byte	23
	.byte	'Dcm_IOOperationResponseType',0,49,252,1,15
	.word	150
	.byte	23
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	49,138,2,15
	.word	150
	.byte	23
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,49,146,2,15
	.word	150
	.byte	23
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,49,150,2,15
	.word	150
	.byte	23
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,49,154,2,15
	.word	150
	.byte	23
	.byte	'Dem_DTCFormatType',0,49,160,2,15
	.word	150
	.byte	23
	.byte	'Dem_DTCOriginType',0,49,162,2,15
	.word	150
	.byte	23
	.byte	'Dem_EventIdType',0,49,168,2,16
	.word	867
	.byte	23
	.byte	'Dem_EventStatusType',0,49,170,2,15
	.word	150
	.byte	23
	.byte	'Dem_InitMonitorReasonType',0,49,176,2,15
	.word	150
	.byte	23
	.byte	'Dem_OperationCycleIdType',0,49,179,2,15
	.word	150
	.byte	23
	.byte	'Dem_UdsStatusByteType',0,49,185,2,15
	.word	150
	.byte	23
	.byte	'NvM_BlockIdType',0,49,215,2,16
	.word	867
	.byte	23
	.byte	'NvM_RequestResultType',0,49,225,2,15
	.word	150
	.byte	23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,49,243,3,34
	.word	26665
	.byte	14,128,8
	.word	150
	.byte	15,255,7,0,23
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,49,246,3,34
	.word	26665
	.byte	23
	.byte	'Dem_DTCGroupIdType',0,50,49,15
	.word	150
	.byte	23
	.byte	'Dem_DtcIdType',0,50,50,16
	.word	867
	.byte	23
	.byte	'Dem_ClientIdType',0,50,53,15
	.word	150
	.byte	23
	.byte	'Dem_DtcCodeType',0,50,55,16
	.word	1378
	.byte	23
	.byte	'Dem_boolean_least',0,50,60,17
	.word	150
	.byte	23
	.byte	'Dem_EventCategoryType',0,50,62,15
	.word	150
	.byte	23
	.byte	'Dem_DTCSeverityType',0,50,217,1,15
	.word	150
	.byte	23
	.byte	'Dem_DTCGroupType',0,50,133,2,16
	.word	1378
	.byte	23
	.byte	'Dem_DebugDataType',0,50,131,3,16
	.word	1378
	.byte	23
	.byte	'Dem_DTCKindType',0,50,145,3,16
	.word	150
	.byte	23
	.byte	'Dem_TriggerType',0,50,167,3,15
	.word	150
	.byte	23
	.byte	'Dem_EnCoList',0,51,31,15
	.word	150
	.byte	23
	.byte	'Dem_OperationCycleList',0,52,23,15
	.word	150
	.byte	23
	.byte	'Dem_StoCoList',0,53,32,15
	.word	150
	.byte	23
	.byte	'Rte_TaskRefType',0,54,184,1,32
	.word	23152
	.byte	23
	.byte	'Rte_EventRefType',0,54,185,1,32
	.word	150
	.byte	23
	.byte	'Rte_EventType',0,54,186,1,32
	.word	1378
	.byte	23
	.byte	'Rte_REActCounterType',0,54,252,1,15
	.word	150
	.byte	3
	.word	150
	.byte	23
	.byte	'Rte_REActCounterRefType',0,54,253,1,58
	.word	29468
	.byte	10,54,255,1,9,8,11
	.byte	'task',0
	.word	29364
	.byte	4,2,35,0,11
	.byte	'acnt',0
	.word	29473
	.byte	4,2,35,4,0,23
	.byte	'Rte_REContainerType',0,54,130,2,3
	.word	29506
	.byte	9
	.word	22892
	.byte	3
	.word	29570
	.byte	3
	.word	150
	.byte	9
	.word	29506
	.byte	3
	.word	29585
	.byte	23
	.byte	'Rte_REContainerRefType',0,54,132,2,60
	.word	29590
	.byte	23
	.byte	'Rte_MSICounterType',0,54,149,2,16
	.word	867
	.byte	3
	.word	867
	.byte	23
	.byte	'Rte_MSICounterRefType',0,54,150,2,56
	.word	29655
	.byte	23
	.byte	'Rte_MSIPendingFlagType',0,54,152,2,17
	.word	150
	.byte	3
	.word	150
	.byte	23
	.byte	'Rte_MSIPendingFlagRefType',0,54,153,2,60
	.word	29723
	.byte	10,54,163,2,9,24,11
	.byte	'counter',0
	.word	29660
	.byte	4,2,35,0,11
	.byte	'incCounter',0
	.word	150
	.byte	1,2,35,4,11
	.byte	'pending',0
	.word	29728
	.byte	4,2,35,8,11
	.byte	'osTask',0
	.word	29364
	.byte	4,2,35,12,11
	.byte	'acnt',0
	.word	29473
	.byte	4,2,35,16,11
	.byte	'osEvent',0
	.word	150
	.byte	1,2,35,20,11
	.byte	'MSIInit',0
	.word	867
	.byte	2,2,35,22,0,23
	.byte	'Rte_MSITableEntry',0,54,172,2,3
	.word	29763
	.byte	3
	.word	867
	.byte	3
	.word	150
	.byte	23
	.byte	'Rte_TaskArrayIndex',0,54,179,2,16
	.word	150
	.byte	23
	.byte	'Rte_NrWaitingTasks',0,54,180,2,16
	.word	150
	.byte	10,54,182,2,9,4,11
	.byte	'pending',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'count',0
	.word	150
	.byte	1,2,35,1,11
	.byte	'firstWaitingTask',0
	.word	150
	.byte	1,2,35,2,0,23
	.byte	'Rte_WaitableDatum',0,54,186,2,3
	.word	29981
	.byte	3
	.word	29981
	.byte	10,54,226,2,9,12,11
	.byte	'event_id',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'wd',0
	.word	30073
	.byte	4,2,35,4,11
	.byte	'timeout',0
	.word	1378
	.byte	4,2,35,8,0,23
	.byte	'Rte_WOWP_NotificationType',0,54,230,2,3
	.word	30078
	.byte	9
	.word	30078
	.byte	3
	.word	30167
	.byte	23
	.byte	'Rte_WOWP_NotificationRefType',0,54,232,2,66
	.word	30172
	.byte	23
	.byte	'Rte_ARE_NotificationType',0,54,234,2,29
	.word	29506
	.byte	32
	.byte	'Rte_QTaskType',0,54,243,2,16,28,11
	.byte	'cmn',0
	.word	26416
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	29364
	.byte	4,2,35,24,0,23
	.byte	'Rte_QTaskType',0,54,246,2,3
	.word	30249
	.byte	32
	.byte	'Rte_QREType',0,54,250,2,16,28,11
	.byte	'cmn',0
	.word	26416
	.byte	24,2,35,0,11
	.byte	're',0
	.word	29595
	.byte	4,2,35,24,0,23
	.byte	'Rte_QREType',0,54,253,2,3
	.word	30320
	.byte	9
	.word	29506
	.byte	3
	.word	30385
	.byte	32
	.byte	'Rte_QWWPType',0,54,129,3,16,28,11
	.byte	'cmn',0
	.word	26416
	.byte	24,2,35,0,11
	.byte	'wwp',0
	.word	30177
	.byte	4,2,35,24,0,23
	.byte	'Rte_QWWPType',0,54,132,3,3
	.word	30395
	.byte	9
	.word	30078
	.byte	3
	.word	30463
	.byte	32
	.byte	'Rte_QEvType',0,54,136,3,16,36,11
	.byte	'cmn',0
	.word	26416
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	29364
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	150
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	29473
	.byte	4,2,35,32,0,23
	.byte	'Rte_QEvType',0,54,141,3,3
	.word	30473
	.byte	32
	.byte	'Rte_QMSIType',0,54,145,3,16,48,11
	.byte	'cmn',0
	.word	26416
	.byte	24,2,35,0,11
	.byte	'task',0
	.word	29364
	.byte	4,2,35,24,11
	.byte	'mask',0
	.word	150
	.byte	1,2,35,28,11
	.byte	'acnt',0
	.word	29473
	.byte	4,2,35,32,11
	.byte	'msiCounter',0
	.word	29660
	.byte	4,2,35,36,11
	.byte	'msiPending',0
	.word	29728
	.byte	4,2,35,40,11
	.byte	'msiLimit',0
	.word	867
	.byte	2,2,35,44,0,23
	.byte	'Rte_QMSIType',0,54,153,3,3
	.word	30568
	.byte	23
	.byte	'Dem_EvtStateType',0,55,151,1,15
	.word	150
	.byte	23
	.byte	'rba_BswSrv_uint64',0,5,66,28
	.word	20487
	.byte	23
	.byte	'Dem_EventIdIterator',0,8,27,22
	.word	6808
	.byte	23
	.byte	'Dem_MapDtcIdToEventIdType',0,8,126,25
	.word	867
	.byte	14,10
	.word	867
	.byte	15,4,0,9
	.word	30837
	.byte	36
	.byte	'Dem_MapDtcIdToEventId',0,8,139,1,41
	.word	30846
	.byte	1,1,14,12
	.word	867
	.byte	15,5,0,9
	.word	30884
	.byte	36
	.byte	'Dem_MapEventIdToDtcId',0,8,140,1,41
	.word	30893
	.byte	1,1,23
	.byte	'Dem_DtcIdIterator',0,8,197,1,22
	.word	6808
	.byte	23
	.byte	'Dem_DtcGroupIdIterator',0,8,230,1,21
	.word	6808
	.byte	23
	.byte	'Dem_EventIdListIterator',0,8,174,2,3
	.word	2751
	.byte	10,8,213,2,9,4,11
	.byte	'it',0
	.word	867
	.byte	2,2,35,0,11
	.byte	'end',0
	.word	867
	.byte	2,2,35,2,0,23
	.byte	'Dem_DtcIdListIterator',0,8,216,2,3
	.word	31023
	.byte	13,56,37,9,4,11
	.byte	'EnforceAlignment',0
	.word	1378
	.byte	4,2,35,0,11
	.byte	'Buffer',0
	.word	25620
	.byte	4,2,35,0,0,23
	.byte	'Dem_EvBuffEnvDataAlignedType',0,56,47,3
	.word	31086
	.byte	10,56,49,9,16,11
	.byte	'envData',0
	.word	31086
	.byte	4,2,35,0,11
	.byte	'eventType',0
	.word	150
	.byte	1,2,35,4,11
	.byte	'eventId',0
	.word	867
	.byte	2,2,35,6,11
	.byte	'debug0',0
	.word	1378
	.byte	4,2,35,8,11
	.byte	'debug1',0
	.word	1378
	.byte	4,2,35,12,0,23
	.byte	'Dem_EvBuffEvent',0,56,75,2
	.word	31171
	.byte	23
	.byte	'Dem_OpMoStateType',0,9,13,15
	.word	150
	.byte	36
	.byte	'Dem_OpMoState',0,9,31,26
	.word	150
	.byte	1,1,36
	.byte	'Dem_TestFailedStatusInitialized',0,9,33,26
	.word	150
	.byte	1,1,29,57,31,9,4,30
	.byte	'MEMIF_JOB_OK',0,0,30
	.byte	'MEMIF_JOB_FAILED',0,1,30
	.byte	'MEMIF_JOB_PENDING',0,2,30
	.byte	'MEMIF_JOB_CANCELED',0,3,30
	.byte	'MEMIF_BLOCK_INCONSISTENT',0,4,30
	.byte	'MEMIF_BLOCK_INVALID',0,5,0,23
	.byte	'MemIf_JobResultType',0,57,39,2
	.word	31378
	.byte	29,58,49,9,4,30
	.byte	'NVM_PRV_ACTIVITY_NOT_INIT',0,0,30
	.byte	'NVM_PRV_ACTIVITY_IDLE',0,1,30
	.byte	'NVM_PRV_ACTIVITY_ARBITRATE',0,2,30
	.byte	'NVM_PRV_ACTIVITY_JOB_START',0,3,30
	.byte	'NVM_PRV_ACTIVITY_POLL_RESULT',0,4,30
	.byte	'NVM_PRV_ACTIVITY_JOB_COMPLETE',0,5,30
	.byte	'NVM_PRV_ACTIVITY_RESULT_EVAL',0,6,0,23
	.byte	'NvM_Prv_Activities_ten',0,58,58,3
	.word	31536
	.byte	29,58,104,9,4,30
	.byte	'NvM_Prv_idJob_Idle_e',0,0,30
	.byte	'NvM_Prv_idJob_Read_e',0,1,30
	.byte	'NvM_Prv_idJob_Write_e',0,2,30
	.byte	'NvM_Prv_idJob_Erase_e',0,3,30
	.byte	'NvM_Prv_idJob_Restore_e',0,4,30
	.byte	'NvM_Prv_idJob_Maintain_e',0,5,30
	.byte	'NvM_Prv_idJob_Validate_e',0,6,30
	.byte	'NvM_Prv_idJob_Invalidate_e',0,7,30
	.byte	'NvM_Prv_idJob_ReadIdConfigForReadAll_e',0,8,30
	.byte	'NvM_Prv_idJob_InvalidateForFirstInitAll_e',0,9,30
	.byte	'NvM_Prv_idJob_RestoreForImplicitRecovery_e',0,10,30
	.byte	'NvM_Prv_idJob_InvalidateForRemoveNonResistant_e',0,11,30
	.byte	'NvM_Prv_idJob_Invalid_e',0,12,30
	.byte	'NvM_Prv_idJob_Count_e',0,13,0,23
	.byte	'NvM_Prv_idJob_ten',0,58,115,3
	.word	31777
	.byte	23
	.byte	'NvM_Prv_ServiceBit_tuo',0,58,168,1,16
	.word	867
	.byte	23
	.byte	'NvM_Prv_idService_tuo',0,58,173,1,15
	.word	150
	.byte	23
	.byte	'NvM_Prv_idQueue_tuo',0,58,206,1,15
	.word	150
	.byte	10,58,210,1,9,12,11
	.byte	'idService_uo',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'idBlock_uo',0
	.word	867
	.byte	2,2,35,2,11
	.byte	'ServiceBit_uo',0
	.word	867
	.byte	2,2,35,4,11
	.byte	'BlockData_pv',0
	.word	13381
	.byte	4,2,35,8,0,23
	.byte	'NvM_Prv_QueueEntry_tst',0,58,225,1,3
	.word	32334
	.byte	10,58,227,1,9,20,11
	.byte	'idJob_en',0
	.word	31777
	.byte	4,2,35,0,11
	.byte	'idBlock_uo',0
	.word	867
	.byte	2,2,35,4,11
	.byte	'RamBlock_pu8',0
	.word	167
	.byte	4,2,35,8,11
	.byte	'idxDataset_u8',0
	.word	150
	.byte	1,2,35,12,11
	.byte	'Result_en',0
	.word	31378
	.byte	4,2,35,16,0,23
	.byte	'NvM_Prv_JobData_tst',0,58,240,1,3
	.word	32460
	.byte	23
	.byte	'Dem_DtcStateType',0,59,47,15
	.word	150
	.byte	23
	.byte	'Dem_EvMemOccurrenceCounterType',0,26,90,21
	.word	150
	.byte	23
	.byte	'Dem_EvMemAgingCounterType',0,26,99,21
	.word	150
	.byte	23
	.byte	'Dem_EvMemHdrType',0,26,141,1,4
	.word	8300
	.byte	23
	.byte	'Dem_EvMemEventMemoryType',0,26,213,1,4
	.word	8330
	.byte	36
	.byte	'Dem_OperationCycleStates',0,15,13,31
	.word	150
	.byte	1,1,14,5
	.word	150
	.byte	15,4,0,14,10
	.word	867
	.byte	15,4,0,10,60,9,9,18,11
	.byte	'OperationCycleStates',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'OperationCycleQualified',0
	.word	150
	.byte	1,2,35,1,11
	.byte	'Overflow',0
	.word	32791
	.byte	5,2,35,2,11
	.byte	'DtcIdsByOccurrenceTime',0
	.word	32800
	.byte	10,2,35,8,0,23
	.byte	'Dem_GenericNvDataType',0,60,24,4
	.word	32809
	.byte	36
	.byte	'Dem_GenericNvData',0,60,28,30
	.word	32809
	.byte	1,1,23
	.byte	'Dem_NvmBlockIdType',0,61,14,34
	.word	150
	.byte	13,61,16,9,20,11
	.byte	'evMemData',0
	.word	8330
	.byte	20,2,35,0,11
	.byte	'genericNvData',0
	.word	32809
	.byte	18,2,35,0,0,23
	.byte	'Dem_NvMStorageBufferData',0,61,37,3
	.word	33013
	.byte	23
	.byte	'Dem_NvmBlockStatusType',0,61,59,15
	.word	150
	.byte	14,5
	.word	150
	.byte	15,4,0,23
	.byte	'Dem_NvMBlockStatusDoubleBufferType',0,61,70,32
	.word	33125
	.byte	23
	.byte	'Dem_NvmResultType',0,61,78,31
	.word	150
	.byte	14,35
	.word	33134
	.byte	15,6,0,36
	.byte	'Dem_NvMBlockStatusDoubleBuffer',0,16,19,1
	.word	33203
	.byte	1,1,14,5
	.word	150
	.byte	15,4,0,21
	.word	150
	.byte	1,1,22
	.word	13045
	.byte	0,3
	.word	33262
	.byte	23
	.byte	'Dem_EvtClearAllowedFncType',0,18,12,26
	.word	33275
	.byte	10,18,31,9,2,11
	.byte	'dataDataContainer_2',0
	.word	867
	.byte	2,2,35,0,0,23
	.byte	'Dem_EvtParam_16Type',0,18,34,3
	.word	33315
	.byte	14,12
	.word	33315
	.byte	15,5,0,9
	.word	33378
	.byte	36
	.byte	'Dem_EvtParam_16',0,18,38,34
	.word	33387
	.byte	1,1,21
	.word	150
	.byte	1,1,22
	.word	150
	.byte	0,3
	.word	33418
	.byte	23
	.byte	'Dem_InitMForEAllowedFncType',0,19,38,27
	.word	33431
	.byte	10,19,46,9,4,11
	.byte	'state',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'debounceLevel',0
	.word	5973
	.byte	2,2,35,2,0,23
	.byte	'Dem_EvtState',0,19,50,3
	.word	33472
	.byte	10,19,52,9,1,11
	.byte	'lastReportedEvent',0
	.word	150
	.byte	1,2,35,0,0,23
	.byte	'Dem_EvtState8',0,19,55,3
	.word	33537
	.byte	14,24
	.word	33472
	.byte	15,5,0,36
	.byte	'Dem_AllEventsState',0,19,152,1,1
	.word	33592
	.byte	1,1,14,6
	.word	33537
	.byte	15,5,0,36
	.byte	'Dem_AllEventsState8',0,19,153,1,1
	.word	33631
	.byte	1,1,14,4
	.word	1378
	.byte	15,0,0,36
	.byte	'Dem_AllEventsResetDebouncerRequested',0,19,154,1,1
	.word	33671
	.byte	1,1,36
	.byte	'Dem_EventWasPassedReported',0,19,155,1,1
	.word	33671
	.byte	1,1,2
	.byte	'long int',0,4,5,3
	.word	33766
	.byte	33,1,1,22
	.word	13061
	.byte	22
	.word	867
	.byte	22
	.word	33778
	.byte	22
	.word	33778
	.byte	0,3
	.word	33783
	.byte	23
	.byte	'Dem_DebGetLimits',0,34,13,23
	.word	33807
	.byte	33,1,1,22
	.word	867
	.byte	22
	.word	13061
	.byte	22
	.word	867
	.byte	0,3
	.word	33837
	.byte	23
	.byte	'Dem_DebCyclic',0,34,14,16
	.word	33856
	.byte	10,34,17,9,20,11
	.byte	'funcPointer_GetLimits',0
	.word	33812
	.byte	4,2,35,0,11
	.byte	'funcPointer_Cyclic',0
	.word	33861
	.byte	4,2,35,4,11
	.byte	'paramSet',0
	.word	13061
	.byte	4,2,35,8,11
	.byte	'paramCount',0
	.word	867
	.byte	2,2,35,12,11
	.byte	'funcPointer_Filter',0
	.word	13104
	.byte	4,2,35,16,0,23
	.byte	'Dem_DebClass',0,34,24,3
	.word	33883
	.byte	3
	.word	33783
	.byte	3
	.word	33837
	.byte	23
	.byte	'Dem_DebouncedActionType',0,34,35,21
	.word	6808
	.byte	14,40
	.word	33883
	.byte	15,1,0,36
	.byte	'Dem_Cfg_DebClasses',0,34,49,21
	.word	34077
	.byte	1,1,14,6
	.word	150
	.byte	15,5,0,36
	.byte	'Dem_AllEventsStatusByte',0,21,22,1
	.word	34115
	.byte	1,1,36
	.byte	'Dem_EvMemIsLocked',0,28,90,16
	.word	150
	.byte	1,1,23
	.byte	'Dem_RingBuffer',0,32,14,3
	.word	11667
	.byte	23
	.byte	'Dem_ErrorQueueType',0,33,45,3
	.word	12227
.L1501:
	.byte	10,33,54,9,2,11
	.byte	'overflowcounter',0
	.word	150
	.byte	1,2,35,0,11
	.byte	'isQueueEnabled',0
	.word	150
	.byte	1,2,35,1,0,23
	.byte	'Dem_ErrorQueueControlType',0,33,58,3
	.word	34236
.L1500:
	.byte	14,132,1
	.word	12227
	.byte	15,10,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L505:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32
	.byte	13,58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,11,1,0,0,8,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,38,0,73,19,0,0,10,19,1,58,15,59,15,57,15,11,15,0
	.byte	0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,53,0,73,19,0,0,13,23,1,58,15,59,15,57,15,11,15,0,0,14,1,1,11,15
	.byte	73,19,0,0,15,33,0,47,15,0,0,16,46,1,49,19,0,0,17,5,0,49,19,0,0,18,29,1,49,19,0,0,19,11,0,49,19,0,0,20
	.byte	59,0,3,8,0,0,21,21,1,73,19,54,15,39,12,0,0,22,5,0,73,19,0,0,23,22,0,3,8,58,15,59,15,57,15,73,19,0,0,24
	.byte	46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,25,11,1,49,19,0,0,26,46,1,3,8,58,15,59,15
	.byte	57,15,54,15,39,12,63,12,60,12,0,0,27,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,28,21,0,54,15,0
	.byte	0,29,4,1,58,15,59,15,57,15,11,15,0,0,30,40,0,3,8,28,13,0,0,31,21,0,54,15,39,12,0,0,32,19,1,3,8,58,15,59
	.byte	15,57,15,11,15,0,0,33,21,1,54,15,39,12,0,0,34,4,1,3,8,58,15,59,15,57,15,11,15,0,0,35,21,0,73,19,54,15
	.byte	39,12,0,0,36,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L506:
	.word	.L1682-.L1681
.L1681:
	.half	3
	.word	.L1684-.L1683
.L1683:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits32.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evdep\\Dem_Dependencies.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_Lib.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Main.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\stoco\\Dem_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTC_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_ByteOrderUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientBaseHandling.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientClearMachine.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\env\\Dem_EnvTrigger.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemAging.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_RingBuffer.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_DebBase.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Det\\api\\Det.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuff.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCStatusByte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\client\\Dem_ClientHandlingTypes.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_NodeId.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\api\\Dem_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_StorageCondition.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evbuff\\Dem_EvBuffEvent.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\MemIf\\api\\MemIf_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\NvM\\api\\NvM_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_DTCs.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_GenericNvData.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm_Types.h',0,0,0,0,0
.L1684:
.L1682:
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventFailed')
	.sect	'.debug_info'
.L507:
	.word	631
	.half	3
	.word	.L508
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L510,.L509
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_GetEventFailed',0,1,242,1,16
	.word	.L608
	.byte	1,1,1
	.word	.L84,.L609,.L473
	.byte	4
	.byte	'EventId',0,1,242,1,51
	.word	.L610,.L611
	.byte	4
	.byte	'EventFailed',0,1,242,1,69
	.word	.L612,.L613
	.byte	5
	.word	.L84,.L609
	.byte	6
	.word	.L614,.L86,.L615
	.byte	7
	.word	.L616,.L617
	.byte	8
	.word	.L618,.L86,.L615
	.byte	0,6
	.word	.L619,.L93,.L620
	.byte	7
	.word	.L621,.L622
	.byte	9
	.word	.L623,.L93,.L620
	.byte	6
	.word	.L624,.L625,.L95
	.byte	7
	.word	.L626,.L627
	.byte	7
	.word	.L628,.L629
	.byte	9
	.word	.L630,.L625,.L95
	.byte	6
	.word	.L631,.L625,.L94
	.byte	7
	.word	.L632,.L633
	.byte	7
	.word	.L634,.L635
	.byte	8
	.word	.L636,.L625,.L94
	.byte	0,0,0,0,0,6
	.word	.L637,.L101,.L103
	.byte	8
	.word	.L638,.L101,.L103
	.byte	0,6
	.word	.L639,.L104,.L640
	.byte	7
	.word	.L641,.L642
	.byte	9
	.word	.L643,.L104,.L640
	.byte	6
	.word	.L644,.L645,.L108
	.byte	7
	.word	.L646,.L647
	.byte	10
	.word	.L648,.L649
	.byte	6
	.word	.L624,.L650,.L107
	.byte	7
	.word	.L626,.L627
	.byte	7
	.word	.L628,.L629
	.byte	9
	.word	.L630,.L650,.L107
	.byte	6
	.word	.L631,.L650,.L106
	.byte	7
	.word	.L632,.L633
	.byte	7
	.word	.L634,.L635
	.byte	8
	.word	.L636,.L650,.L106
	.byte	0,0,0,0,0,6
	.word	.L644,.L109,.L640
	.byte	7
	.word	.L646,.L647
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventFailed')
	.sect	'.debug_abbrev'
.L508:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,10
	.byte	11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventFailed')
	.sect	'.debug_line'
.L509:
	.word	.L1686-.L1685
.L1685:
	.half	3
	.word	.L1688-.L1687
.L1687:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_Main.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0,0
.L1688:
	.byte	4,2,5,26,7,0,5,2
	.word	.L86
	.byte	3,21,1,5,12,9
	.half	.L1689-.L86
	.byte	1,5,38,7,9
	.half	.L1690-.L1689
	.byte	1,5,26,9
	.half	.L1691-.L1690
	.byte	1,5,4,9
	.half	.L87-.L1691
	.byte	1,4,1,5,5,9
	.half	.L89-.L87
	.byte	3,222,1,1,7,9
	.half	.L615-.L89
	.byte	1,4,3,5,33,9
	.half	.L93-.L615
	.byte	3,130,3,1,5,51,9
	.half	.L1692-.L93
	.byte	1,5,60,9
	.half	.L1693-.L1692
	.byte	1,5,68,9
	.half	.L1694-.L1693
	.byte	1,4,4,5,28,9
	.half	.L625-.L1694
	.byte	3,200,123,1,5,47,9
	.half	.L1695-.L625
	.byte	1,5,5,9
	.half	.L1696-.L1695
	.byte	1,5,73,9
	.half	.L94-.L1696
	.byte	3,4,1,5,5,9
	.half	.L1697-.L94
	.byte	1,4,3,5,3,9
	.half	.L95-.L1697
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L96-.L95
	.byte	3,254,124,1,7,9
	.half	.L620-.L96
	.byte	1,9
	.half	.L100-.L620
	.byte	3,1,1,7,9
	.half	.L1698-.L100
	.byte	1,4,5,5,12,9
	.half	.L101-.L1698
	.byte	3,255,126,1,5,5,9
	.half	.L1699-.L101
	.byte	1,4,1,9
	.half	.L103-.L1699
	.byte	3,131,1,1,5,9,7,9
	.half	.L1700-.L103
	.byte	3,2,1,5,16,9
	.half	.L1536-.L1700
	.byte	3,1,1,5,9,9
	.half	.L1701-.L1536
	.byte	1,4,6,5,41,9
	.half	.L104-.L1701
	.byte	3,155,1,1,5,64,9
	.half	.L1702-.L104
	.byte	1,4,7,5,44,9
	.half	.L645-.L1702
	.byte	3,231,125,1,4,4,5,28,9
	.half	.L650-.L645
	.byte	3,66,1,5,47,9
	.half	.L1703-.L650
	.byte	1,5,5,9
	.half	.L1704-.L1703
	.byte	1,5,73,9
	.half	.L106-.L1704
	.byte	3,4,1,5,5,9
	.half	.L1705-.L106
	.byte	1,4,7,9
	.half	.L107-.L1705
	.byte	3,58,1,4,6,9
	.half	.L108-.L107
	.byte	3,153,2,1,4,1,5,22,9
	.half	.L109-.L108
	.byte	3,233,126,1,5,16,9
	.half	.L640-.L109
	.byte	3,1,1,5,9,9
	.half	.L1706-.L640
	.byte	1,5,1,9
	.half	.L91-.L1706
	.byte	3,2,1,7,9
	.half	.L511-.L91
	.byte	0,1,1
.L1686:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventFailed')
	.sect	'.debug_ranges'
.L510:
	.word	-1,.L84,0,.L511-.L84,0,0
.L649:
	.word	-1,.L84,.L645-.L84,.L108-.L84,.L109-.L84,.L640-.L84,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ResetEventStatus')
	.sect	'.debug_info'
.L512:
	.word	1564
	.half	3
	.word	.L513
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L515,.L514
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_ResetEventStatus',0,1,229,3,16
	.word	.L608
	.byte	1,1,1
	.word	.L487,.L651,.L486
	.byte	4
	.byte	'EventId',0,1,229,3,53
	.word	.L610,.L652
	.byte	5
	.word	.L487,.L651
	.byte	6
	.byte	'isoByteOld',0,1,231,3,24
	.word	.L608,.L653
	.byte	6
	.byte	'isoByteNew',0,1,231,3,36
	.word	.L608,.L654
	.byte	6
	.byte	'evtStatus',0,1,231,3,48
	.word	.L608,.L655
	.byte	6
	.byte	'dtcStByteOld',0,1,232,3,24
	.word	.L608,.L656
	.byte	7
	.word	.L614,.L232,.L657
	.byte	8
	.word	.L616,.L658
	.byte	9
	.word	.L618,.L232,.L657
	.byte	0,7
	.word	.L619,.L239,.L659
	.byte	8
	.word	.L621,.L660
	.byte	10
	.word	.L623,.L239,.L659
	.byte	7
	.word	.L624,.L661,.L241
	.byte	8
	.word	.L626,.L662
	.byte	8
	.word	.L628,.L663
	.byte	10
	.word	.L630,.L661,.L241
	.byte	7
	.word	.L631,.L661,.L240
	.byte	8
	.word	.L632,.L664
	.byte	8
	.word	.L634,.L665
	.byte	9
	.word	.L636,.L661,.L240
	.byte	0,0,0,0,0,7
	.word	.L666,.L243,.L245
	.byte	8
	.word	.L667,.L668
	.byte	9
	.word	.L669,.L243,.L245
	.byte	0,7
	.word	.L670,.L245,.L248
	.byte	8
	.word	.L671,.L672
	.byte	10
	.word	.L673,.L245,.L248
	.byte	7
	.word	.L624,.L674,.L247
	.byte	8
	.word	.L626,.L662
	.byte	8
	.word	.L628,.L663
	.byte	10
	.word	.L630,.L674,.L247
	.byte	7
	.word	.L631,.L674,.L246
	.byte	8
	.word	.L632,.L664
	.byte	8
	.word	.L634,.L665
	.byte	9
	.word	.L636,.L674,.L246
	.byte	0,0,0,0,0,7
	.word	.L675,.L251,.L252
	.byte	8
	.word	.L676,.L677
	.byte	9
	.word	.L678,.L251,.L252
	.byte	0,7
	.word	.L679,.L252,.L253
	.byte	8
	.word	.L680,.L681
	.byte	9
	.word	.L682,.L252,.L253
	.byte	0,7
	.word	.L683,.L684,.L685
	.byte	8
	.word	.L686,.L687
	.byte	8
	.word	.L688,.L689
	.byte	8
	.word	.L690,.L691
	.byte	10
	.word	.L692,.L684,.L685
	.byte	7
	.word	.L666,.L684,.L255
	.byte	8
	.word	.L667,.L668
	.byte	9
	.word	.L669,.L684,.L255
	.byte	0,0,0,7
	.word	.L693,.L256,.L261
	.byte	8
	.word	.L694,.L695
	.byte	8
	.word	.L696,.L697
	.byte	10
	.word	.L698,.L256,.L261
	.byte	7
	.word	.L699,.L700,.L261
	.byte	8
	.word	.L701,.L702
	.byte	8
	.word	.L703,.L704
	.byte	8
	.word	.L705,.L706
	.byte	10
	.word	.L707,.L700,.L261
	.byte	7
	.word	.L708,.L709,.L258
	.byte	8
	.word	.L710,.L711
	.byte	8
	.word	.L712,.L713
	.byte	10
	.word	.L714,.L709,.L258
	.byte	6
	.byte	'element_pos',0,2,36,18
	.word	.L715,.L716
	.byte	6
	.byte	'local_bitpos',0,2,37,18
	.word	.L717,.L718
	.byte	6
	.byte	'mask',0,2,38,18
	.word	.L719,.L720
	.byte	0,0,7
	.word	.L721,.L257,.L259
	.byte	8
	.word	.L722,.L723
	.byte	8
	.word	.L724,.L725
	.byte	10
	.word	.L726,.L257,.L259
	.byte	6
	.byte	'element_pos',0,2,49,18
	.word	.L727,.L728
	.byte	6
	.byte	'local_bitpos',0,2,50,18
	.word	.L729,.L730
	.byte	6
	.byte	'mask',0,2,51,18
	.word	.L731,.L732
	.byte	0,0,0,0,0,0,7
	.word	.L733,.L734,.L735
	.byte	8
	.word	.L736,.L737
	.byte	8
	.word	.L738,.L739
	.byte	9
	.word	.L740,.L734,.L735
	.byte	0,7
	.word	.L741,.L735,.L263
	.byte	8
	.word	.L742,.L743
	.byte	10
	.word	.L744,.L735,.L263
	.byte	7
	.word	.L745,.L746,.L263
	.byte	8
	.word	.L747,.L748
	.byte	8
	.word	.L749,.L750
	.byte	10
	.word	.L751,.L746,.L263
	.byte	7
	.word	.L752,.L753,.L263
	.byte	8
	.word	.L754,.L755
	.byte	8
	.word	.L756,.L757
	.byte	8
	.word	.L758,.L759
	.byte	10
	.word	.L760,.L753,.L263
	.byte	7
	.word	.L761,.L762,.L763
	.byte	8
	.word	.L764,.L765
	.byte	8
	.word	.L766,.L767
	.byte	10
	.word	.L768,.L762,.L763
	.byte	6
	.byte	'bit2shift',0,3,38,11
	.word	.L608,.L769
	.byte	0,0,7
	.word	.L770,.L262,.L263
	.byte	8
	.word	.L771,.L772
	.byte	8
	.word	.L773,.L774
	.byte	10
	.word	.L775,.L262,.L263
	.byte	6
	.byte	'bit2shift',0,3,44,11
	.word	.L608,.L776
	.byte	0,0,0,0,0,0,0,0,7
	.word	.L666,.L263,.L264
	.byte	8
	.word	.L667,.L668
	.byte	9
	.word	.L669,.L263,.L264
	.byte	0,7
	.word	.L777,.L778,.L265
	.byte	8
	.word	.L779,.L780
	.byte	8
	.word	.L781,.L782
	.byte	8
	.word	.L783,.L784
	.byte	8
	.word	.L785,.L786
	.byte	9
	.word	.L787,.L778,.L265
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ResetEventStatus')
	.sect	'.debug_abbrev'
.L513:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ResetEventStatus')
	.sect	'.debug_line'
.L514:
	.word	.L1708-.L1707
.L1707:
	.half	3
	.word	.L1710-.L1709
.L1709:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0,0
.L1710:
	.byte	5,16,7,0,5,2
	.word	.L487
	.byte	3,228,3,1,5,39,9
	.half	.L1583-.L487
	.byte	3,3,1,5,37,9
	.half	.L1711-.L1583
	.byte	1,5,2,9
	.half	.L227-.L1711
	.byte	3,9,1,4,4,5,26,9
	.half	.L232-.L227
	.byte	3,165,124,1,5,12,9
	.half	.L1712-.L232
	.byte	1,5,38,7,9
	.half	.L1713-.L1712
	.byte	1,5,26,9
	.half	.L1714-.L1713
	.byte	1,5,4,9
	.half	.L233-.L1714
	.byte	1,4,1,5,2,9
	.half	.L235-.L233
	.byte	3,219,3,1,7,9
	.half	.L657-.L235
	.byte	1,4,5,5,33,9
	.half	.L239-.L657
	.byte	3,133,1,1,5,51,9
	.half	.L1715-.L239
	.byte	1,5,60,9
	.half	.L1716-.L1715
	.byte	1,5,68,9
	.half	.L1717-.L1716
	.byte	1,4,3,5,28,9
	.half	.L661-.L1717
	.byte	3,200,123,1,5,47,9
	.half	.L1718-.L661
	.byte	1,5,5,9
	.half	.L1719-.L1718
	.byte	1,5,73,9
	.half	.L240-.L1719
	.byte	3,4,1,5,5,9
	.half	.L1720-.L240
	.byte	1,4,5,5,3,9
	.half	.L241-.L1720
	.byte	3,180,4,1,4,1,5,2,9
	.half	.L242-.L241
	.byte	3,251,126,1,7,9
	.half	.L659-.L242
	.byte	1,4,6,5,12,9
	.half	.L243-.L659
	.byte	3,187,124,1,5,35,9
	.half	.L1721-.L243
	.byte	1,5,5,9
	.half	.L1586-.L1721
	.byte	1,4,7,5,45,9
	.half	.L245-.L1586
	.byte	3,243,0,1,4,3,5,28,9
	.half	.L674-.L245
	.byte	3,159,127,1,5,47,9
	.half	.L1587-.L674
	.byte	1,5,5,9
	.half	.L1722-.L1587
	.byte	1,5,73,9
	.half	.L246-.L1722
	.byte	3,4,1,5,5,9
	.half	.L1723-.L246
	.byte	1,4,7,5,12,9
	.half	.L247-.L1723
	.byte	3,221,0,1,5,5,9
	.half	.L1724-.L247
	.byte	1,4,1,5,2,9
	.half	.L248-.L1724
	.byte	3,214,2,1,5,13,7,9
	.half	.L1725-.L248
	.byte	3,2,1,5,6,9
	.half	.L1726-.L1725
	.byte	1,4,8,5,2,9
	.half	.L251-.L1726
	.byte	3,220,125,1,4,9,5,4,9
	.half	.L252-.L251
	.byte	3,211,126,1,4,1,5,2,9
	.half	.L253-.L252
	.byte	3,212,3,1,5,43,7,9
	.half	.L1727-.L253
	.byte	3,3,1,5,56,9
	.half	.L1728-.L1727
	.byte	1,4,6,5,35,9
	.half	.L684-.L1728
	.byte	3,175,124,1,5,5,9
	.half	.L1729-.L684
	.byte	1,4,10,5,16,9
	.half	.L255-.L1729
	.byte	3,24,1,5,21,9
	.half	.L1730-.L255
	.byte	3,1,1,5,19,9
	.half	.L1731-.L1730
	.byte	1,4,1,5,45,9
	.half	.L685-.L1731
	.byte	3,185,3,1,4,5,5,30,9
	.half	.L256-.L685
	.byte	3,170,127,1,4,2,5,5,9
	.half	.L700-.L256
	.byte	3,152,125,1,5,42,7,9
	.half	.L709-.L700
	.byte	3,100,1,5,43,9
	.half	.L1588-.L709
	.byte	3,1,1,5,14,9
	.half	.L1589-.L1588
	.byte	3,2,1,5,26,9
	.half	.L1732-.L1589
	.byte	1,5,11,9
	.half	.L1591-.L1732
	.byte	3,2,1,5,25,9
	.half	.L1590-.L1591
	.byte	1,5,5,9
	.half	.L1733-.L1590
	.byte	3,1,1,5,49,9
	.half	.L258-.L1733
	.byte	3,23,1,5,42,9
	.half	.L257-.L258
	.byte	3,112,1,5,43,9
	.half	.L1592-.L257
	.byte	3,1,1,5,14,9
	.half	.L1594-.L1592
	.byte	3,2,1,5,26,9
	.half	.L1734-.L1594
	.byte	1,5,11,9
	.half	.L1596-.L1734
	.byte	3,2,1,5,37,9
	.half	.L1595-.L1596
	.byte	1,5,25,9
	.half	.L1597-.L1595
	.byte	1,5,5,9
	.half	.L1735-.L1597
	.byte	3,1,1,9
	.half	.L259-.L1735
	.byte	3,14,1,4,1,5,40,9
	.half	.L261-.L259
	.byte	3,186,3,1,4,5,5,4,9
	.half	.L734-.L261
	.byte	3,228,125,1,5,23,9
	.half	.L1736-.L734
	.byte	1,5,51,9
	.half	.L1737-.L1736
	.byte	1,4,6,5,60,9
	.half	.L735-.L1737
	.byte	3,93,1,5,72,9
	.half	.L1738-.L735
	.byte	1,4,7,5,41,9
	.half	.L746-.L1738
	.byte	3,124,1,4,3,5,5,9
	.half	.L753-.L746
	.byte	3,246,126,1,5,21,7,9
	.half	.L762-.L753
	.byte	3,116,1,5,6,9
	.half	.L1598-.L762
	.byte	3,1,1,5,36,9
	.half	.L1739-.L1598
	.byte	1,5,13,9
	.half	.L1599-.L1739
	.byte	1,5,53,9
	.half	.L763-.L1599
	.byte	3,13,1,5,21,9
	.half	.L262-.L763
	.byte	3,120,1,5,6,9
	.half	.L1600-.L262
	.byte	3,1,1,5,47,9
	.half	.L1740-.L1600
	.byte	1,5,26,9
	.half	.L1601-.L1740
	.byte	1,5,13,9
	.half	.L1741-.L1601
	.byte	1,4,6,5,35,9
	.half	.L263-.L1741
	.byte	3,127,1,5,5,9
	.half	.L1602-.L263
	.byte	1,4,1,5,43,9
	.half	.L264-.L1602
	.byte	3,218,3,1,4,10,5,5,9
	.half	.L778-.L264
	.byte	3,213,124,1,4,1,5,10,7,9
	.half	.L265-.L778
	.byte	3,173,3,1,5,3,9
	.half	.L1742-.L265
	.byte	1,5,10,9
	.half	.L254-.L1742
	.byte	3,4,1,5,3,9
	.half	.L1743-.L254
	.byte	1,5,1,9
	.half	.L229-.L1743
	.byte	3,2,1,7,9
	.half	.L516-.L229
	.byte	0,1,1
.L1708:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ResetEventStatus')
	.sect	'.debug_ranges'
.L515:
	.word	-1,.L487,0,.L516-.L487,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_SetEventStatus')
	.sect	'.debug_info'
.L517:
	.word	255
	.half	3
	.word	.L518
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L520,.L519
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_SetEventStatus',0,1,128,1,17
	.word	.L608
	.byte	1,1,1
	.word	.L468,.L788,.L467
	.byte	4
	.byte	'EventId',0,1,128,1,56
	.word	.L610,.L789
	.byte	4
	.byte	'EventStatus',0,1,129,1,67
	.word	.L608,.L790
	.byte	5
	.word	.L468,.L788
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetEventStatus')
	.sect	'.debug_abbrev'
.L518:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetEventStatus')
	.sect	'.debug_line'
.L519:
	.word	.L1745-.L1744
.L1744:
	.half	3
	.word	.L1747-.L1746
.L1746:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L1747:
	.byte	5,64,7,0,5,2
	.word	.L468
	.byte	3,130,1,1,5,67,9
	.half	.L1748-.L468
	.byte	1,5,4,9
	.half	.L1502-.L1748
	.byte	1,5,1,9
	.half	.L2-.L1502
	.byte	3,1,1,7,9
	.half	.L521-.L2
	.byte	0,1,1
.L1745:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetEventStatus')
	.sect	'.debug_ranges'
.L520:
	.word	-1,.L468,0,.L521-.L468,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_SetEventAvailable')
	.sect	'.debug_info'
.L522:
	.word	283
	.half	3
	.word	.L523
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L525,.L524
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_SetEventAvailable',0,1,147,6,16
	.word	.L608
	.byte	1,1,1
	.word	.L493,.L791,.L492
	.byte	4
	.byte	'EventId',0,1,147,6,54
	.word	.L610,.L792
	.byte	4
	.byte	'AvailableStatus',0,1,147,6,71
	.word	.L608,.L793
	.byte	5
	.word	.L493,.L791
	.byte	6
	.byte	'retval',0,1,149,6,17
	.word	.L608,.L794
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetEventAvailable')
	.sect	'.debug_abbrev'
.L523:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetEventAvailable')
	.sect	'.debug_line'
.L524:
	.word	.L1750-.L1749
.L1749:
	.half	3
	.word	.L1752-.L1751
.L1751:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L1752:
	.byte	5,44,7,0,5,2
	.word	.L493
	.byte	3,149,6,1,5,5,9
	.half	.L1662-.L493
	.byte	3,1,1,5,1,9
	.half	.L405-.L1662
	.byte	3,1,1,7,9
	.half	.L526-.L405
	.byte	0,1,1
.L1750:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetEventAvailable')
	.sect	'.debug_ranges'
.L525:
	.word	-1,.L493,0,.L526-.L493,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventAvailable')
	.sect	'.debug_info'
.L527:
	.word	427
	.half	3
	.word	.L528
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L530,.L529
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_GetEventAvailable',0,1,155,6,16
	.word	.L608
	.byte	1,1,1
	.word	.L495,.L795,.L494
	.byte	4
	.byte	'EventId',0,1,155,6,54
	.word	.L610,.L796
	.byte	4
	.byte	'AvailableStatus',0,1,155,6,72
	.word	.L612,.L797
	.byte	5
	.word	.L495,.L795
	.byte	6
	.word	.L614,.L406,.L798
	.byte	7
	.word	.L616,.L799
	.byte	8
	.word	.L618,.L406,.L798
	.byte	0,6
	.word	.L619,.L411,.L800
	.byte	7
	.word	.L621,.L801
	.byte	9
	.word	.L623,.L411,.L800
	.byte	6
	.word	.L624,.L802,.L414
	.byte	7
	.word	.L626,.L803
	.byte	7
	.word	.L628,.L804
	.byte	9
	.word	.L630,.L802,.L414
	.byte	6
	.word	.L631,.L802,.L413
	.byte	7
	.word	.L632,.L805
	.byte	7
	.word	.L634,.L806
	.byte	8
	.word	.L636,.L802,.L413
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventAvailable')
	.sect	'.debug_abbrev'
.L528:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	29,1,49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,9,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventAvailable')
	.sect	'.debug_line'
.L529:
	.word	.L1754-.L1753
.L1753:
	.half	3
	.word	.L1756-.L1755
.L1755:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L1756:
	.byte	5,5,7,0,5,2
	.word	.L495
	.byte	3,156,6,1,5,16,7,9
	.half	.L1757-.L495
	.byte	3,2,1,5,9,9
	.half	.L1758-.L1757
	.byte	1,4,2,5,26,9
	.half	.L406-.L1758
	.byte	3,247,121,1,5,12,9
	.half	.L1759-.L406
	.byte	1,5,38,7,9
	.half	.L1760-.L1759
	.byte	1,5,26,9
	.half	.L1761-.L1760
	.byte	1,5,4,9
	.half	.L408-.L1761
	.byte	1,4,1,5,9,9
	.half	.L410-.L408
	.byte	3,139,6,1,5,16,7,9
	.half	.L798-.L410
	.byte	3,2,1,5,9,9
	.half	.L1762-.L798
	.byte	1,4,3,5,33,9
	.half	.L411-.L1762
	.byte	3,211,126,1,5,51,9
	.half	.L1763-.L411
	.byte	1,5,60,9
	.half	.L1764-.L1763
	.byte	1,5,68,9
	.half	.L1765-.L1764
	.byte	1,4,4,5,28,9
	.half	.L802-.L1765
	.byte	3,200,123,1,5,47,9
	.half	.L1766-.L802
	.byte	1,5,5,9
	.half	.L1767-.L1766
	.byte	1,5,73,9
	.half	.L413-.L1767
	.byte	3,4,1,5,5,9
	.half	.L1768-.L413
	.byte	1,4,3,5,3,9
	.half	.L414-.L1768
	.byte	3,180,4,1,4,1,5,22,9
	.half	.L415-.L414
	.byte	3,176,1,1,5,12,9
	.half	.L800-.L415
	.byte	3,1,1,5,5,9
	.half	.L1769-.L800
	.byte	1,5,1,9
	.half	.L407-.L1769
	.byte	3,1,1,7,9
	.half	.L531-.L407
	.byte	0,1,1
.L1754:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventAvailable')
	.sect	'.debug_ranges'
.L530:
	.word	-1,.L495,0,.L531-.L495,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_AllowHistoryStatus')
	.sect	'.debug_info'
.L532:
	.word	209
	.half	3
	.word	.L533
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L535,.L534
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_AllowHistoryStatus',0,1,137,7,6,1,1,1
	.word	.L500,.L807,.L499
	.byte	4
	.word	.L500,.L807
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_AllowHistoryStatus')
	.sect	'.debug_abbrev'
.L533:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_AllowHistoryStatus')
	.sect	'.debug_line'
.L534:
	.word	.L1771-.L1770
.L1770:
	.half	3
	.word	.L1773-.L1772
.L1772:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L1773:
	.byte	5,1,7,0,5,2
	.word	.L500
	.byte	3,141,7,1,7,9
	.half	.L536-.L500
	.byte	0,1,1
.L1771:
	.sdecl	'.debug_ranges',debug,cluster('Dem_AllowHistoryStatus')
	.sect	'.debug_ranges'
.L535:
	.word	-1,.L500,0,.L536-.L500,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventFdcThresholdReached')
	.sect	'.debug_info'
.L537:
	.word	276
	.half	3
	.word	.L538
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L540,.L539
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_GetEventFdcThresholdReached',0,1,136,2,16
	.word	.L608
	.byte	1,1,1
	.word	.L477,.L808,.L476
	.byte	4
	.byte	'EventId',0,1,136,2,64
	.word	.L610,.L809
	.byte	4
	.byte	'FdcThresholdReached',0,1,136,2,82
	.word	.L612,.L810
	.byte	5
	.word	.L477,.L808
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventFdcThresholdReached')
	.sect	'.debug_abbrev'
.L538:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventFdcThresholdReached')
	.sect	'.debug_line'
.L539:
	.word	.L1775-.L1774
.L1774:
	.half	3
	.word	.L1777-.L1776
.L1776:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L1777:
	.byte	5,12,7,0,5,2
	.word	.L477
	.byte	3,148,2,1,5,5,9
	.half	.L1778-.L477
	.byte	1,5,1,9
	.half	.L112-.L1778
	.byte	3,2,1,7,9
	.half	.L541-.L112
	.byte	0,1,1
.L1775:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventFdcThresholdReached')
	.sect	'.debug_ranges'
.L540:
	.word	-1,.L477,0,.L541-.L477,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventSuspicious')
	.sect	'.debug_info'
.L542:
	.word	263
	.half	3
	.word	.L543
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L545,.L544
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_GetEventSuspicious',0,1,129,6,16
	.word	.L608
	.byte	1,1,1
	.word	.L491,.L811,.L490
	.byte	4
	.byte	'EventId',0,1,129,6,55
	.word	.L610,.L812
	.byte	4
	.byte	'EventSuspicious',0,1,129,6,73
	.word	.L612,.L813
	.byte	5
	.word	.L491,.L811
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventSuspicious')
	.sect	'.debug_abbrev'
.L543:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventSuspicious')
	.sect	'.debug_line'
.L544:
	.word	.L1780-.L1779
.L1779:
	.half	3
	.word	.L1782-.L1781
.L1781:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L1782:
	.byte	5,12,7,0,5,2
	.word	.L491
	.byte	3,141,6,1,5,5,9
	.half	.L1783-.L491
	.byte	1,5,1,9
	.half	.L404-.L1783
	.byte	3,2,1,7,9
	.half	.L546-.L404
	.byte	0,1,1
.L1780:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventSuspicious')
	.sect	'.debug_ranges'
.L545:
	.word	-1,.L491,0,.L546-.L491,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetHistoryStatus')
	.sect	'.debug_info'
.L547:
	.word	259
	.half	3
	.word	.L548
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L550,.L549
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_GetHistoryStatus',0,1,145,7,16
	.word	.L608
	.byte	1,1,1
	.word	.L502,.L814,.L501
	.byte	4
	.byte	'EventId',0,1,145,7,55
	.word	.L610,.L815
	.byte	4
	.byte	'historyStatus',0,1,145,7,73
	.word	.L612,.L816
	.byte	5
	.word	.L502,.L814
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetHistoryStatus')
	.sect	'.debug_abbrev'
.L548:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetHistoryStatus')
	.sect	'.debug_line'
.L549:
	.word	.L1785-.L1784
.L1784:
	.half	3
	.word	.L1787-.L1786
.L1786:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L1787:
	.byte	5,9,7,0,5,2
	.word	.L502
	.byte	3,166,7,1,5,2,9
	.half	.L1788-.L502
	.byte	1,5,1,9
	.half	.L466-.L1788
	.byte	3,2,1,7,9
	.half	.L551-.L466
	.byte	0,1,1
.L1785:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetHistoryStatus')
	.sect	'.debug_ranges'
.L550:
	.word	-1,.L502,0,.L551-.L502,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ReportErrorStatus')
	.sect	'.debug_info'
.L552:
	.word	254
	.half	3
	.word	.L553
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L555,.L554
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_ReportErrorStatus',0,1,135,1,6,1,1,1
	.word	.L470,.L817,.L469
	.byte	4
	.byte	'EventId',0,1,135,1,45
	.word	.L610,.L818
	.byte	4
	.byte	'EventStatus',0,1,135,1,74
	.word	.L608,.L819
	.byte	5
	.word	.L470,.L817
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ReportErrorStatus')
	.sect	'.debug_abbrev'
.L553:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ReportErrorStatus')
	.sect	'.debug_line'
.L554:
	.word	.L1790-.L1789
.L1789:
	.half	3
	.word	.L1792-.L1791
.L1791:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L1792:
	.byte	5,58,7,0,5,2
	.word	.L470
	.byte	3,136,1,1,5,61,9
	.half	.L1793-.L470
	.byte	1,5,1,9
	.half	.L1503-.L1793
	.byte	3,1,1,7,9
	.half	.L556-.L1503
	.byte	0,1,1
.L1790:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ReportErrorStatus')
	.sect	'.debug_ranges'
.L555:
	.word	-1,.L470,0,.L556-.L470,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ReportErrorStatusWithEnvData')
	.sect	'.debug_info'
.L557:
	.word	2075
	.half	3
	.word	.L558
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L560,.L559
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_ReportErrorStatusWithEnvData',0,1,157,3,6,1,1,1
	.word	.L485,.L820,.L484
	.byte	4
	.byte	'EventId',0,1,157,3,56
	.word	.L610,.L821
	.byte	4
	.byte	'EventStatus',0,1,158,3,54
	.word	.L608,.L822
	.byte	4
	.byte	'debug0',0,1,159,3,58
	.word	.L823,.L824
	.byte	4
	.byte	'debug1',0,1,160,3,58
	.word	.L823,.L825
	.byte	5
	.word	.L485,.L820
	.byte	6
	.byte	'debAction',0,1,162,3,14
	.word	.L826,.L827
	.byte	6
	.byte	'callSetEventStatus',0,1,163,3,20
	.word	.L608,.L828
	.byte	7
	.word	.L614,.L151,.L829
	.byte	8
	.word	.L616,.L830
	.byte	9
	.word	.L618,.L151,.L829
	.byte	0,7
	.word	.L619,.L155,.L831
	.byte	8
	.word	.L621,.L832
	.byte	10
	.word	.L623,.L155,.L831
	.byte	7
	.word	.L624,.L833,.L160
	.byte	8
	.word	.L626,.L834
	.byte	8
	.word	.L628,.L835
	.byte	10
	.word	.L630,.L833,.L160
	.byte	7
	.word	.L631,.L833,.L159
	.byte	8
	.word	.L632,.L836
	.byte	8
	.word	.L634,.L837
	.byte	9
	.word	.L636,.L833,.L159
	.byte	0,0,0,0,0,7
	.word	.L838,.L166,.L169
	.byte	8
	.word	.L839,.L840
	.byte	10
	.word	.L841,.L166,.L169
	.byte	7
	.word	.L675,.L166,.L167
	.byte	8
	.word	.L676,.L842
	.byte	9
	.word	.L678,.L166,.L167
	.byte	0,7
	.word	.L679,.L167,.L168
	.byte	8
	.word	.L680,.L843
	.byte	9
	.word	.L682,.L167,.L168
	.byte	0,0,0,7
	.word	.L844,.L845,.L171
	.byte	8
	.word	.L846,.L847
	.byte	9
	.word	.L848,.L845,.L171
	.byte	0,7
	.word	.L849,.L850,.L851
	.byte	8
	.word	.L852,.L853
	.byte	8
	.word	.L854,.L855
	.byte	11
	.word	.L856,.L857
	.byte	6
	.byte	'funcPoint',0,2,33,16
	.word	.L861,.L862
	.byte	6
	.byte	'paramSet',0,2,34,14
	.word	.L863,.L864
	.byte	6
	.byte	'debAction',0,2,35,17
	.word	.L826,.L865
	.byte	7
	.word	.L866,.L173,.L175
	.byte	8
	.word	.L867,.L868
	.byte	9
	.word	.L869,.L173,.L175
	.byte	0,7
	.word	.L870,.L871,.L177
	.byte	8
	.word	.L872,.L873
	.byte	9
	.word	.L874,.L871,.L177
	.byte	0,7
	.word	.L875,.L180,.L181
	.byte	8
	.word	.L876,.L877
	.byte	9
	.word	.L878,.L180,.L181
	.byte	0,7
	.word	.L875,.L182,.L183
	.byte	8
	.word	.L876,.L877
	.byte	9
	.word	.L878,.L182,.L183
	.byte	0,7
	.word	.L879,.L880,.L185
	.byte	8
	.word	.L881,.L882
	.byte	11
	.word	.L883,.L884
	.byte	7
	.word	.L886,.L887,.L188
	.byte	8
	.word	.L888,.L889
	.byte	8
	.word	.L890,.L891
	.byte	8
	.word	.L892,.L893
	.byte	10
	.word	.L894,.L887,.L188
	.byte	6
	.byte	'bit2shift',0,3,72,12
	.word	.L610,.L895
	.byte	0,0,0,0,7
	.word	.L875,.L185,.L186
	.byte	8
	.word	.L876,.L877
	.byte	9
	.word	.L878,.L185,.L186
	.byte	0,7
	.word	.L879,.L187,.L885
	.byte	8
	.word	.L881,.L882
	.byte	0,7
	.word	.L879,.L191,.L193
	.byte	8
	.word	.L881,.L882
	.byte	11
	.word	.L883,.L896
	.byte	7
	.word	.L886,.L899,.L192
	.byte	8
	.word	.L888,.L889
	.byte	8
	.word	.L890,.L891
	.byte	8
	.word	.L892,.L893
	.byte	10
	.word	.L894,.L899,.L192
	.byte	6
	.byte	'bit2shift',0,3,72,12
	.word	.L610,.L900
	.byte	0,0,0,0,7
	.word	.L879,.L897,.L898
	.byte	8
	.word	.L881,.L882
	.byte	0,0,0,7
	.word	.L849,.L858,.L859
	.byte	8
	.word	.L852,.L853
	.byte	8
	.word	.L854,.L855
	.byte	0,7
	.word	.L849,.L860,.L179
	.byte	8
	.word	.L852,.L853
	.byte	8
	.word	.L854,.L855
	.byte	0,7
	.word	.L733,.L901,.L902
	.byte	8
	.word	.L736,.L903
	.byte	8
	.word	.L738,.L904
	.byte	9
	.word	.L740,.L901,.L902
	.byte	0,7
	.word	.L905,.L196,.L195
	.byte	8
	.word	.L906,.L907
	.byte	8
	.word	.L908,.L909
	.byte	8
	.word	.L910,.L911
	.byte	8
	.word	.L912,.L913
	.byte	10
	.word	.L914,.L196,.L195
	.byte	6
	.byte	'insertUnrobustToEvBuffer',0,2,164,1,23
	.word	.L608,.L915
	.byte	7
	.word	.L916,.L196,.L197
	.byte	8
	.word	.L917,.L918
	.byte	8
	.word	.L919,.L920
	.byte	10
	.word	.L921,.L196,.L197
	.byte	6
	.byte	'insertToEvBuffer',0,2,103,23
	.word	.L608,.L922
	.byte	0,0,0,0,7
	.word	.L923,.L924,.L222
	.byte	8
	.word	.L925,.L926
	.byte	8
	.word	.L927,.L928
	.byte	8
	.word	.L929,.L930
	.byte	8
	.word	.L931,.L932
	.byte	10
	.word	.L933,.L924,.L222
	.byte	6
	.byte	'loc',0,1,171,2,12
	.word	.L610,.L934
	.byte	6
	.byte	'islocationvalid',0,1,172,2,13
	.word	.L608,.L935
	.byte	6
	.byte	'isInBuffer',0,1,173,2,13
	.word	.L608,.L936
	.byte	7
	.word	.L937,.L938,.L939
	.byte	8
	.word	.L940,.L941
	.byte	10
	.word	.L942,.L938,.L939
	.byte	7
	.word	.L943,.L944,.L939
	.byte	8
	.word	.L945,.L946
	.byte	8
	.word	.L947,.L948
	.byte	10
	.word	.L949,.L944,.L939
	.byte	6
	.byte	'result',0,4,57,11
	.word	.L610,.L950
	.byte	0,0,0,0,7
	.word	.L951,.L952,.L208
	.byte	8
	.word	.L953,.L954
	.byte	8
	.word	.L955,.L956
	.byte	9
	.word	.L957,.L952,.L208
	.byte	0,7
	.word	.L958,.L209,.L206
	.byte	8
	.word	.L959,.L960
	.byte	10
	.word	.L961,.L209,.L206
	.byte	7
	.word	.L943,.L962,.L206
	.byte	8
	.word	.L945,.L946
	.byte	8
	.word	.L947,.L948
	.byte	10
	.word	.L949,.L962,.L206
	.byte	6
	.byte	'result',0,4,57,11
	.word	.L610,.L963
	.byte	0,0,0,0,7
	.word	.L964,.L206,.L213
	.byte	8
	.word	.L965,.L966
	.byte	9
	.word	.L967,.L206,.L213
	.byte	0,7
	.word	.L968,.L969,.L217
	.byte	8
	.word	.L970,.L971
	.byte	8
	.word	.L972,.L973
	.byte	10
	.word	.L974,.L969,.L217
	.byte	7
	.word	.L975,.L969,.L215
	.byte	8
	.word	.L976,.L977
	.byte	9
	.word	.L978,.L969,.L215
	.byte	0,7
	.word	.L943,.L979,.L980
	.byte	8
	.word	.L945,.L946
	.byte	8
	.word	.L947,.L948
	.byte	10
	.word	.L949,.L979,.L980
	.byte	6
	.byte	'result',0,4,57,11
	.word	.L610,.L981
	.byte	0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ReportErrorStatusWithEnvData')
	.sect	'.debug_abbrev'
.L558:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,10,11,1,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ReportErrorStatusWithEnvData')
	.sect	'.debug_line'
.L559:
	.word	.L1795-.L1794
.L1794:
	.half	3
	.word	.L1797-.L1796
.L1796:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_RingBuffer.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\enco\\Dem_EnableCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0,0
.L1797:
	.byte	5,6,7,0,5,2
	.word	.L485
	.byte	3,156,3,1,5,2,9
	.half	.L147-.L485
	.byte	3,16,1,4,5,5,26,9
	.half	.L151-.L147
	.byte	3,233,124,1,5,12,9
	.half	.L1798-.L151
	.byte	1,5,38,7,9
	.half	.L1799-.L1798
	.byte	1,5,26,9
	.half	.L1800-.L1799
	.byte	1,5,4,9
	.half	.L152-.L1800
	.byte	1,4,1,5,2,9
	.half	.L154-.L152
	.byte	3,151,3,1,7,9
	.half	.L829-.L154
	.byte	1,4,6,5,33,9
	.half	.L155-.L829
	.byte	3,201,1,1,5,51,9
	.half	.L158-.L155
	.byte	1,5,60,9
	.half	.L1801-.L158
	.byte	1,5,68,9
	.half	.L1802-.L1801
	.byte	1,4,7,5,28,9
	.half	.L833-.L1802
	.byte	3,200,123,1,5,47,9
	.half	.L1803-.L833
	.byte	1,5,5,9
	.half	.L1804-.L1803
	.byte	1,5,73,9
	.half	.L159-.L1804
	.byte	3,4,1,5,5,9
	.half	.L1805-.L159
	.byte	1,4,6,5,3,9
	.half	.L160-.L1805
	.byte	3,180,4,1,4,1,5,2,9
	.half	.L161-.L160
	.byte	3,183,126,1,7,9
	.half	.L831-.L161
	.byte	1,5,8,9
	.half	.L162-.L831
	.byte	3,2,1,5,29,9
	.half	.L1806-.L162
	.byte	1,5,8,9
	.half	.L1807-.L1806
	.byte	1,5,54,7,9
	.half	.L1808-.L1807
	.byte	3,8,1,5,73,9
	.half	.L1565-.L1808
	.byte	1,5,9,9
	.half	.L1564-.L1565
	.byte	3,1,1,4,8,5,2,9
	.half	.L166-.L1564
	.byte	3,155,126,1,4,9,5,4,9
	.half	.L167-.L166
	.byte	3,211,126,1,4,6,9
	.half	.L168-.L167
	.byte	3,250,2,1,4,1,5,10,9
	.half	.L169-.L168
	.byte	3,27,1,4,10,5,43,7,9
	.half	.L845-.L169
	.byte	3,248,126,1,5,5,9
	.half	.L1567-.L845
	.byte	1,4,1,5,54,9
	.half	.L171-.L1567
	.byte	3,137,1,1,5,50,7,9
	.half	.L1809-.L171
	.byte	3,2,1,4,2,5,9,9
	.half	.L850-.L1809
	.byte	3,139,125,1,5,8,9
	.half	.L1810-.L850
	.byte	1,5,60,7,9
	.half	.L1811-.L1810
	.byte	1,4,6,5,11,7,9
	.half	.L173-.L1811
	.byte	3,148,1,1,5,30,9
	.half	.L1812-.L173
	.byte	1,5,39,9
	.half	.L1813-.L1812
	.byte	1,5,4,9
	.half	.L1814-.L1813
	.byte	1,4,2,5,12,9
	.half	.L175-.L1814
	.byte	3,239,126,1,4,6,5,29,7,9
	.half	.L871-.L175
	.byte	3,247,0,1,5,38,9
	.half	.L1815-.L871
	.byte	1,5,4,9
	.half	.L1816-.L1815
	.byte	1,4,2,5,52,9
	.half	.L177-.L1816
	.byte	3,138,127,1,5,27,7,9
	.half	.L1817-.L177
	.byte	3,7,1,4,1,5,50,9
	.half	.L851-.L1817
	.byte	3,234,2,1,4,2,5,25,9
	.half	.L858-.L851
	.byte	3,150,125,1,5,13,9
	.half	.L1818-.L858
	.byte	3,2,1,4,8,5,2,9
	.half	.L180-.L1818
	.byte	3,194,0,1,4,2,5,14,9
	.half	.L181-.L180
	.byte	3,70,1,5,32,9
	.half	.L1819-.L181
	.byte	1,5,78,9
	.half	.L1820-.L1819
	.byte	1,4,8,5,2,9
	.half	.L182-.L1820
	.byte	3,58,1,4,2,5,31,9
	.half	.L183-.L182
	.byte	3,71,1,5,77,9
	.half	.L1821-.L183
	.byte	1,4,8,5,40,9
	.half	.L880-.L1821
	.byte	3,63,1,5,2,9
	.half	.L185-.L880
	.byte	3,122,1,4,2,9
	.half	.L186-.L185
	.byte	3,72,1,4,8,5,55,9
	.half	.L187-.L186
	.byte	3,62,1,5,61,9
	.half	.L1822-.L187
	.byte	1,4,3,5,22,9
	.half	.L887-.L1822
	.byte	3,170,127,1,5,19,9
	.half	.L1569-.L887
	.byte	3,1,1,5,42,9
	.half	.L1823-.L1569
	.byte	3,1,1,5,19,9
	.half	.L1570-.L1823
	.byte	1,5,5,9
	.half	.L1824-.L1570
	.byte	3,1,1,4,8,5,2,9
	.half	.L188-.L1824
	.byte	3,211,0,1,4,2,9
	.half	.L189-.L188
	.byte	3,66,1,7,9
	.half	.L885-.L189
	.byte	1,4,8,5,55,9
	.half	.L191-.L885
	.byte	3,62,1,5,61,9
	.half	.L1825-.L191
	.byte	1,4,3,5,22,9
	.half	.L899-.L1825
	.byte	3,170,127,1,5,19,9
	.half	.L1571-.L899
	.byte	3,1,1,5,42,9
	.half	.L1826-.L1571
	.byte	3,1,1,5,19,9
	.half	.L1572-.L1826
	.byte	1,5,5,9
	.half	.L1827-.L1572
	.byte	3,1,1,4,8,5,2,9
	.half	.L192-.L1827
	.byte	3,211,0,1,4,2,5,91,9
	.half	.L193-.L192
	.byte	3,67,1,4,1,5,50,9
	.half	.L859-.L193
	.byte	3,221,2,1,4,2,5,91,9
	.half	.L860-.L859
	.byte	3,163,125,1,5,2,9
	.half	.L1573-.L860
	.byte	1,4,1,5,48,9
	.half	.L179-.L1573
	.byte	3,223,2,1,4,6,5,4,9
	.half	.L901-.L179
	.byte	3,163,126,1,5,23,9
	.half	.L1828-.L901
	.byte	1,5,51,9
	.half	.L1829-.L1828
	.byte	1,4,1,5,10,9
	.half	.L902-.L1829
	.byte	3,223,1,1,4,2,5,4,7,9
	.half	.L196-.L902
	.byte	3,221,125,1,5,5,9
	.half	.L197-.L196
	.byte	3,10,1,5,32,7,9
	.half	.L1830-.L197
	.byte	3,2,1,5,62,9
	.half	.L1831-.L1830
	.byte	1,5,98,9
	.half	.L1574-.L1831
	.byte	1,4,1,5,15,9
	.half	.L195-.L1574
	.byte	3,156,2,1,5,14,9
	.half	.L1832-.L195
	.byte	1,5,59,7,9
	.half	.L1833-.L1832
	.byte	1,5,71,9
	.half	.L1834-.L1833
	.byte	1,5,37,7,9
	.half	.L200-.L1834
	.byte	3,5,1,5,13,9
	.half	.L1835-.L200
	.byte	1,5,52,7,9
	.half	.L1836-.L1835
	.byte	3,2,1,5,29,9
	.half	.L924-.L1836
	.byte	3,222,126,1,5,5,9
	.half	.L203-.L924
	.byte	3,6,1,4,4,5,53,9
	.half	.L938-.L203
	.byte	3,207,126,1,5,24,9
	.half	.L944-.L938
	.byte	3,184,127,1,5,20,9
	.half	.L1578-.L944
	.byte	3,1,1,5,4,9
	.half	.L1837-.L1578
	.byte	1,5,14,9
	.half	.L1838-.L1837
	.byte	3,2,1,5,4,9
	.half	.L204-.L1838
	.byte	3,2,1,5,23,9
	.half	.L205-.L204
	.byte	3,195,0,1,4,1,5,5,9
	.half	.L939-.L205
	.byte	3,177,1,1,5,23,9
	.half	.L952-.L939
	.byte	3,115,1,5,33,9
	.half	.L1839-.L952
	.byte	1,5,2,9
	.half	.L1840-.L1839
	.byte	1,5,5,9
	.half	.L208-.L1840
	.byte	3,13,1,7,9
	.half	.L1841-.L208
	.byte	1,4,4,5,52,9
	.half	.L209-.L1841
	.byte	3,215,126,1,5,24,9
	.half	.L962-.L209
	.byte	3,176,127,1,5,20,9
	.half	.L1579-.L962
	.byte	3,1,1,5,4,9
	.half	.L1842-.L1579
	.byte	1,5,14,9
	.half	.L1843-.L1842
	.byte	3,2,1,5,4,9
	.half	.L211-.L1843
	.byte	3,2,1,5,23,9
	.half	.L212-.L211
	.byte	3,203,0,1,5,15,9
	.half	.L206-.L212
	.byte	3,124,1,5,36,9
	.half	.L1844-.L206
	.byte	1,5,31,9
	.half	.L1845-.L1844
	.byte	1,5,5,9
	.half	.L1846-.L1845
	.byte	1,4,1,9
	.half	.L213-.L1846
	.byte	3,173,1,1,5,9,7,9
	.half	.L210-.L213
	.byte	3,1,1,5,62,7,9
	.half	.L1847-.L210
	.byte	3,2,1,4,4,5,14,9
	.half	.L969-.L1847
	.byte	3,159,126,1,5,34,9
	.half	.L1848-.L969
	.byte	1,5,29,9
	.half	.L1849-.L1848
	.byte	1,5,4,9
	.half	.L1850-.L1849
	.byte	1,9
	.half	.L215-.L1850
	.byte	3,14,1,5,37,7,9
	.half	.L1851-.L215
	.byte	1,5,24,9
	.half	.L216-.L1851
	.byte	3,2,1,5,20,9
	.half	.L1852-.L216
	.byte	1,5,24,9
	.half	.L979-.L1852
	.byte	3,85,1,5,20,9
	.half	.L1580-.L979
	.byte	3,1,1,5,4,9
	.half	.L1853-.L1580
	.byte	1,5,14,9
	.half	.L1854-.L1853
	.byte	3,2,1,5,4,9
	.half	.L218-.L1854
	.byte	3,2,1,5,21,9
	.half	.L219-.L218
	.byte	3,39,1,5,4,9
	.half	.L980-.L219
	.byte	3,2,1,4,1,5,13,9
	.half	.L217-.L980
	.byte	3,206,1,1,5,34,7,9
	.half	.L1855-.L217
	.byte	3,2,1,5,50,9
	.half	.L1856-.L1855
	.byte	1,5,13,9
	.half	.L1857-.L1856
	.byte	3,1,1,5,29,9
	.half	.L1576-.L1857
	.byte	3,1,1,5,5,9
	.half	.L214-.L1576
	.byte	3,4,1,5,24,7,9
	.half	.L1858-.L214
	.byte	3,2,1,5,23,9
	.half	.L1859-.L1858
	.byte	1,5,9,9
	.half	.L1860-.L1859
	.byte	1,5,23,9
	.half	.L1861-.L1860
	.byte	1,5,37,9
	.half	.L1862-.L1861
	.byte	1,5,41,9
	.half	.L1863-.L1862
	.byte	3,1,1,5,36,9
	.half	.L1864-.L1863
	.byte	3,2,1,9
	.half	.L1865-.L1864
	.byte	3,1,1,5,33,9
	.half	.L222-.L1865
	.byte	3,142,1,1,5,80,9
	.half	.L1581-.L222
	.byte	3,125,1,5,33,9
	.half	.L202-.L1581
	.byte	3,7,1,5,11,9
	.half	.L223-.L202
	.byte	3,5,1,5,57,7,9
	.half	.L1866-.L223
	.byte	3,2,1,5,76,9
	.half	.L1867-.L1866
	.byte	1,5,1,9
	.half	.L149-.L1867
	.byte	3,5,1,7,9
	.half	.L561-.L149
	.byte	0,1,1
.L1795:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ReportErrorStatusWithEnvData')
	.sect	'.debug_ranges'
.L560:
	.word	-1,.L485,0,.L561-.L485,0,0
.L857:
	.word	-1,.L485,.L850-.L485,.L851-.L485,.L858-.L485,.L859-.L485,.L860-.L485,.L179-.L485,0,0
.L884:
	.word	-1,.L485,.L880-.L485,.L185-.L485,.L187-.L485,.L885-.L485,0,0
.L896:
	.word	-1,.L485,.L191-.L485,.L193-.L485,.L897-.L485,.L898-.L485,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_SetEventStatusWithEnvData')
	.sect	'.debug_info'
.L562:
	.word	2076
	.half	3
	.word	.L563
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L565,.L564
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_SetEventStatusWithEnvData',0,1,144,1,16
	.word	.L608
	.byte	1,1,1
	.word	.L472,.L982,.L471
	.byte	4
	.byte	'EventId',0,1,144,1,63
	.word	.L610,.L983
	.byte	4
	.byte	'EventStatus',0,1,145,1,67
	.word	.L608,.L984
	.byte	4
	.byte	'debug0',0,1,146,1,65
	.word	.L823,.L985
	.byte	4
	.byte	'debug1',0,1,147,1,65
	.word	.L823,.L986
	.byte	5
	.word	.L472,.L982
	.byte	6
	.byte	'debAction',0,1,149,1,14
	.word	.L826,.L987
	.byte	6
	.byte	'continueProcessing',0,1,150,1,20
	.word	.L608,.L988
	.byte	7
	.word	.L614,.L10,.L989
	.byte	8
	.word	.L616,.L990
	.byte	9
	.word	.L618,.L10,.L989
	.byte	0,7
	.word	.L619,.L14,.L991
	.byte	8
	.word	.L621,.L992
	.byte	10
	.word	.L623,.L14,.L991
	.byte	7
	.word	.L624,.L993,.L19
	.byte	8
	.word	.L626,.L994
	.byte	8
	.word	.L628,.L995
	.byte	10
	.word	.L630,.L993,.L19
	.byte	7
	.word	.L631,.L993,.L18
	.byte	8
	.word	.L632,.L996
	.byte	8
	.word	.L634,.L997
	.byte	9
	.word	.L636,.L993,.L18
	.byte	0,0,0,0,0,7
	.word	.L998,.L27,.L28
	.byte	8
	.word	.L999,.L1000
	.byte	9
	.word	.L1001,.L27,.L28
	.byte	0,7
	.word	.L1002,.L1003,.L1004
	.byte	8
	.word	.L1005,.L1006
	.byte	10
	.word	.L1007,.L1003,.L1004
	.byte	7
	.word	.L624,.L1008,.L30
	.byte	8
	.word	.L626,.L994
	.byte	8
	.word	.L628,.L995
	.byte	10
	.word	.L630,.L1008,.L30
	.byte	7
	.word	.L631,.L1008,.L29
	.byte	8
	.word	.L632,.L996
	.byte	8
	.word	.L634,.L997
	.byte	9
	.word	.L636,.L1008,.L29
	.byte	0,0,0,0,0,7
	.word	.L849,.L1009,.L40
	.byte	8
	.word	.L852,.L1010
	.byte	8
	.word	.L854,.L1011
	.byte	10
	.word	.L856,.L1009,.L40
	.byte	6
	.byte	'funcPoint',0,2,33,16
	.word	.L861,.L1012
	.byte	6
	.byte	'paramSet',0,2,34,14
	.word	.L863,.L1013
	.byte	6
	.byte	'debAction',0,2,35,17
	.word	.L826,.L1014
	.byte	7
	.word	.L866,.L34,.L36
	.byte	8
	.word	.L867,.L1015
	.byte	9
	.word	.L869,.L34,.L36
	.byte	0,7
	.word	.L870,.L1016,.L38
	.byte	8
	.word	.L872,.L1017
	.byte	9
	.word	.L874,.L1016,.L38
	.byte	0,7
	.word	.L875,.L41,.L42
	.byte	8
	.word	.L876,.L1018
	.byte	9
	.word	.L878,.L41,.L42
	.byte	0,7
	.word	.L875,.L43,.L44
	.byte	8
	.word	.L876,.L1018
	.byte	9
	.word	.L878,.L43,.L44
	.byte	0,7
	.word	.L879,.L1019,.L46
	.byte	8
	.word	.L881,.L1020
	.byte	11
	.word	.L883,.L1021
	.byte	7
	.word	.L886,.L1023,.L49
	.byte	8
	.word	.L888,.L1024
	.byte	8
	.word	.L890,.L1025
	.byte	8
	.word	.L892,.L1026
	.byte	10
	.word	.L894,.L1023,.L49
	.byte	6
	.byte	'bit2shift',0,3,72,12
	.word	.L610,.L1027
	.byte	0,0,0,0,7
	.word	.L875,.L46,.L47
	.byte	8
	.word	.L876,.L1018
	.byte	9
	.word	.L878,.L46,.L47
	.byte	0,7
	.word	.L879,.L48,.L1022
	.byte	8
	.word	.L881,.L1020
	.byte	0,7
	.word	.L879,.L52,.L54
	.byte	8
	.word	.L881,.L1020
	.byte	11
	.word	.L883,.L1028
	.byte	7
	.word	.L886,.L1031,.L53
	.byte	8
	.word	.L888,.L1024
	.byte	8
	.word	.L890,.L1025
	.byte	8
	.word	.L892,.L1026
	.byte	10
	.word	.L894,.L1031,.L53
	.byte	6
	.byte	'bit2shift',0,3,72,12
	.word	.L610,.L1032
	.byte	0,0,0,0,7
	.word	.L879,.L1029,.L1030
	.byte	8
	.word	.L881,.L1020
	.byte	0,0,0,7
	.word	.L733,.L1033,.L1034
	.byte	8
	.word	.L736,.L1035
	.byte	8
	.word	.L738,.L1036
	.byte	9
	.word	.L740,.L1033,.L1034
	.byte	0,7
	.word	.L905,.L57,.L56
	.byte	8
	.word	.L906,.L1037
	.byte	8
	.word	.L908,.L1038
	.byte	8
	.word	.L910,.L1039
	.byte	8
	.word	.L912,.L1040
	.byte	10
	.word	.L914,.L57,.L56
	.byte	6
	.byte	'insertUnrobustToEvBuffer',0,2,164,1,23
	.word	.L608,.L1041
	.byte	7
	.word	.L916,.L57,.L58
	.byte	8
	.word	.L917,.L1042
	.byte	8
	.word	.L919,.L1043
	.byte	10
	.word	.L921,.L57,.L58
	.byte	6
	.byte	'insertToEvBuffer',0,2,103,23
	.word	.L608,.L1044
	.byte	0,0,0,0,7
	.word	.L1045,.L1046,.L63
	.byte	8
	.word	.L1047,.L1048
	.byte	10
	.word	.L1049,.L1046,.L63
	.byte	7
	.word	.L1050,.L1046,.L64
	.byte	9
	.word	.L1051,.L1046,.L64
	.byte	0,7
	.word	.L1052,.L66,.L1053
	.byte	8
	.word	.L1054,.L1055
	.byte	10
	.word	.L1056,.L66,.L1053
	.byte	7
	.word	.L1057,.L1058,.L68
	.byte	8
	.word	.L1059,.L1060
	.byte	8
	.word	.L1061,.L1062
	.byte	10
	.word	.L1063,.L1058,.L68
	.byte	7
	.word	.L1064,.L1058,.L67
	.byte	8
	.word	.L1065,.L1066
	.byte	8
	.word	.L1067,.L1068
	.byte	9
	.word	.L1069,.L1058,.L67
	.byte	0,0,0,0,0,7
	.word	.L1070,.L1071,.L63
	.byte	8
	.word	.L1072,.L1073
	.byte	8
	.word	.L1074,.L1075
	.byte	8
	.word	.L1076,.L1077
	.byte	10
	.word	.L1078,.L1071,.L63
	.byte	6
	.byte	'DtcId',0,4,81,18
	.word	.L610,.L1079
	.byte	7
	.word	.L1080,.L1071,.L71
	.byte	8
	.word	.L1081,.L1082
	.byte	9
	.word	.L1083,.L1071,.L71
	.byte	0,7
	.word	.L1084,.L71,.L1085
	.byte	8
	.word	.L1086,.L1087
	.byte	9
	.word	.L1088,.L71,.L1085
	.byte	0,7
	.word	.L1089,.L1085,.L76
	.byte	8
	.word	.L1090,.L1091
	.byte	9
	.word	.L1092,.L1085,.L76
	.byte	0,7
	.word	.L1084,.L76,.L1093
	.byte	8
	.word	.L1086,.L1087
	.byte	9
	.word	.L1088,.L76,.L1093
	.byte	0,7
	.word	.L1094,.L1093,.L1095
	.byte	8
	.word	.L1096,.L1097
	.byte	8
	.word	.L1098,.L1099
	.byte	9
	.word	.L1100,.L1093,.L1095
	.byte	0,7
	.word	.L1101,.L1102,.L80
	.byte	8
	.word	.L1103,.L1104
	.byte	9
	.word	.L1105,.L1102,.L80
	.byte	0,7
	.word	.L1089,.L80,.L81
	.byte	8
	.word	.L1090,.L1091
	.byte	9
	.word	.L1092,.L80,.L81
	.byte	0,7
	.word	.L1094,.L1106,.L1107
	.byte	8
	.word	.L1096,.L1097
	.byte	8
	.word	.L1098,.L1099
	.byte	9
	.word	.L1100,.L1106,.L1107
	.byte	0,7
	.word	.L1101,.L1108,.L63
	.byte	8
	.word	.L1103,.L1104
	.byte	9
	.word	.L1105,.L1108,.L63
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetEventStatusWithEnvData')
	.sect	'.debug_abbrev'
.L563:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetEventStatusWithEnvData')
	.sect	'.debug_line'
.L564:
	.word	.L1869-.L1868
.L1868:
	.half	3
	.word	.L1871-.L1870
.L1870:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\deb\\Dem_Deb.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits16.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMemGen.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_OperationCycle.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evmem\\Dem_EvMem.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\nvm\\Dem_Nvm.h',0,0,0,0,0
.L1871:
	.byte	5,16,7,0,5,2
	.word	.L472
	.byte	3,143,1,1,5,5,9
	.half	.L5-.L472
	.byte	3,29,1,4,5,5,26,9
	.half	.L10-.L5
	.byte	3,233,126,1,5,12,9
	.half	.L1872-.L10
	.byte	1,5,38,7,9
	.half	.L1873-.L1872
	.byte	1,5,26,9
	.half	.L1874-.L1873
	.byte	1,5,4,9
	.half	.L11-.L1874
	.byte	1,4,1,5,5,9
	.half	.L13-.L11
	.byte	3,151,1,1,7,9
	.half	.L989-.L13
	.byte	1,4,6,5,33,9
	.half	.L14-.L989
	.byte	3,201,3,1,5,51,9
	.half	.L17-.L14
	.byte	1,5,60,9
	.half	.L1875-.L17
	.byte	1,5,68,9
	.half	.L1876-.L1875
	.byte	1,4,7,5,28,9
	.half	.L993-.L1876
	.byte	3,200,123,1,5,47,9
	.half	.L1877-.L993
	.byte	1,5,5,9
	.half	.L1878-.L1877
	.byte	1,5,73,9
	.half	.L18-.L1878
	.byte	3,4,1,5,5,9
	.half	.L1879-.L18
	.byte	1,4,6,5,3,9
	.half	.L19-.L1879
	.byte	3,180,4,1,4,1,5,5,9
	.half	.L20-.L19
	.byte	3,183,124,1,7,9
	.half	.L991-.L20
	.byte	1,5,30,9
	.half	.L21-.L991
	.byte	3,2,1,5,2,9
	.half	.L1515-.L21
	.byte	1,5,16,7,9
	.half	.L1880-.L1515
	.byte	3,2,1,5,9,9
	.half	.L1881-.L1880
	.byte	1,5,52,9
	.half	.L23-.L1881
	.byte	3,4,1,5,9,9
	.half	.L1517-.L23
	.byte	3,2,1,5,16,7,9
	.half	.L1882-.L1517
	.byte	3,2,1,5,9,9
	.half	.L1518-.L1882
	.byte	1,4,8,5,2,9
	.half	.L27-.L1518
	.byte	3,68,1,4,1,5,67,9
	.half	.L28-.L27
	.byte	3,63,1,4,9,5,40,9
	.half	.L1003-.L28
	.byte	3,219,126,1,4,7,5,28,9
	.half	.L1008-.L1003
	.byte	3,39,1,5,47,9
	.half	.L1883-.L1008
	.byte	1,5,5,9
	.half	.L1884-.L1883
	.byte	1,5,73,9
	.half	.L29-.L1884
	.byte	3,4,1,5,5,9
	.half	.L1885-.L29
	.byte	1,4,9,9
	.half	.L30-.L1885
	.byte	3,85,1,4,1,5,7,9
	.half	.L31-.L30
	.byte	3,165,1,1,5,10,7,9
	.half	.L1004-.L31
	.byte	3,2,1,5,3,9
	.half	.L1519-.L1004
	.byte	1,5,42,9
	.half	.L32-.L1519
	.byte	3,3,1,4,2,5,9,9
	.half	.L1009-.L32
	.byte	3,136,127,1,5,8,9
	.half	.L1886-.L1009
	.byte	1,5,60,7,9
	.half	.L1887-.L1886
	.byte	1,4,6,5,11,7,9
	.half	.L34-.L1887
	.byte	3,148,1,1,5,30,9
	.half	.L1888-.L34
	.byte	1,5,39,9
	.half	.L1889-.L1888
	.byte	1,5,4,9
	.half	.L1890-.L1889
	.byte	1,4,2,5,12,9
	.half	.L36-.L1890
	.byte	3,239,126,1,4,6,5,29,7,9
	.half	.L1016-.L36
	.byte	3,247,0,1,5,38,9
	.half	.L1891-.L1016
	.byte	1,5,4,9
	.half	.L1892-.L1891
	.byte	1,4,2,5,52,9
	.half	.L38-.L1892
	.byte	3,138,127,1,5,27,7,9
	.half	.L1893-.L38
	.byte	3,7,1,5,25,9
	.half	.L1894-.L1893
	.byte	1,5,13,9
	.half	.L1895-.L1894
	.byte	3,2,1,4,8,5,2,9
	.half	.L41-.L1895
	.byte	3,194,0,1,4,2,5,14,9
	.half	.L42-.L41
	.byte	3,70,1,5,32,9
	.half	.L1896-.L42
	.byte	1,5,78,9
	.half	.L1897-.L1896
	.byte	1,4,8,5,2,9
	.half	.L43-.L1897
	.byte	3,58,1,4,2,5,31,9
	.half	.L44-.L43
	.byte	3,71,1,5,77,9
	.half	.L1898-.L44
	.byte	1,4,8,5,40,9
	.half	.L1019-.L1898
	.byte	3,63,1,5,2,9
	.half	.L46-.L1019
	.byte	3,122,1,4,2,9
	.half	.L47-.L46
	.byte	3,72,1,4,8,5,55,9
	.half	.L48-.L47
	.byte	3,62,1,5,61,9
	.half	.L1899-.L48
	.byte	1,4,3,5,22,9
	.half	.L1023-.L1899
	.byte	3,170,127,1,5,19,9
	.half	.L1522-.L1023
	.byte	3,1,1,5,42,9
	.half	.L1900-.L1522
	.byte	3,1,1,5,19,9
	.half	.L1523-.L1900
	.byte	1,5,5,9
	.half	.L1521-.L1523
	.byte	3,1,1,4,8,5,2,9
	.half	.L49-.L1521
	.byte	3,211,0,1,4,2,9
	.half	.L50-.L49
	.byte	3,66,1,7,9
	.half	.L1022-.L50
	.byte	1,4,8,5,55,9
	.half	.L52-.L1022
	.byte	3,62,1,5,61,9
	.half	.L1901-.L52
	.byte	1,4,3,5,22,9
	.half	.L1031-.L1901
	.byte	3,170,127,1,5,19,9
	.half	.L1524-.L1031
	.byte	3,1,1,5,42,9
	.half	.L1902-.L1524
	.byte	3,1,1,5,19,9
	.half	.L1525-.L1902
	.byte	1,5,5,9
	.half	.L1903-.L1525
	.byte	3,1,1,4,8,5,2,9
	.half	.L53-.L1903
	.byte	3,211,0,1,4,2,5,91,9
	.half	.L54-.L53
	.byte	3,67,1,5,2,9
	.half	.L1527-.L54
	.byte	1,4,1,5,40,9
	.half	.L40-.L1527
	.byte	3,226,0,1,4,6,5,4,9
	.half	.L1033-.L40
	.byte	3,32,1,5,23,9
	.half	.L1904-.L1033
	.byte	1,5,51,9
	.half	.L1905-.L1904
	.byte	1,4,1,5,2,9
	.half	.L1034-.L1905
	.byte	3,98,1,4,2,5,4,7,9
	.half	.L57-.L1034
	.byte	3,90,1,5,5,9
	.half	.L58-.L57
	.byte	3,10,1,5,32,7,9
	.half	.L1906-.L58
	.byte	3,2,1,5,62,9
	.half	.L1907-.L1906
	.byte	1,5,98,9
	.half	.L1528-.L1907
	.byte	1,4,1,5,7,9
	.half	.L56-.L1528
	.byte	3,35,1,5,6,9
	.half	.L1908-.L56
	.byte	1,5,51,7,9
	.half	.L1909-.L1908
	.byte	1,5,63,9
	.half	.L1910-.L1909
	.byte	1,5,44,7,9
	.half	.L61-.L1910
	.byte	3,7,1,5,6,9
	.half	.L1911-.L61
	.byte	3,1,1,9
	.half	.L62-.L1911
	.byte	3,18,1,5,2,9
	.half	.L1912-.L62
	.byte	1,5,33,7,9
	.half	.L1913-.L1912
	.byte	3,2,1,4,10,5,12,9
	.half	.L1046-.L1913
	.byte	3,33,1,5,5,9
	.half	.L1914-.L1046
	.byte	1,4,4,5,6,9
	.half	.L64-.L1914
	.byte	3,228,126,1,4,8,5,32,7,9
	.half	.L66-.L64
	.byte	3,95,1,5,47,9
	.half	.L1915-.L66
	.byte	1,5,53,9
	.half	.L1916-.L1915
	.byte	1,5,75,9
	.half	.L1917-.L1916
	.byte	1,4,3,5,29,9
	.half	.L1058-.L1917
	.byte	3,112,1,5,46,9
	.half	.L1918-.L1058
	.byte	1,5,5,9
	.half	.L1919-.L1918
	.byte	1,5,74,9
	.half	.L67-.L1919
	.byte	3,5,1,5,5,9
	.half	.L1920-.L67
	.byte	1,4,8,5,2,9
	.half	.L68-.L1920
	.byte	3,11,1,4,4,5,6,9
	.half	.L69-.L68
	.byte	3,36,1,5,34,7,9
	.half	.L1053-.L69
	.byte	3,5,1,5,42,9
	.half	.L1921-.L1053
	.byte	1,5,63,9
	.half	.L1922-.L1921
	.byte	1,4,5,5,11,9
	.half	.L1071-.L1922
	.byte	3,41,1,5,32,9
	.half	.L1923-.L1071
	.byte	1,5,4,9
	.half	.L1531-.L1923
	.byte	1,5,21,9
	.half	.L71-.L1531
	.byte	3,122,1,5,12,9
	.half	.L1924-.L71
	.byte	1,5,28,7,9
	.half	.L1925-.L1924
	.byte	1,5,21,9
	.half	.L1926-.L1925
	.byte	1,5,4,9
	.half	.L72-.L1926
	.byte	1,4,4,9
	.half	.L74-.L72
	.byte	3,188,127,1,5,12,7,9
	.half	.L1085-.L74
	.byte	3,76,1,5,5,9
	.half	.L1927-.L1085
	.byte	1,4,5,5,21,9
	.half	.L76-.L1927
	.byte	3,248,0,1,5,12,9
	.half	.L1928-.L76
	.byte	1,5,28,7,9
	.half	.L1929-.L1928
	.byte	1,5,21,9
	.half	.L1930-.L1929
	.byte	1,5,4,9
	.half	.L77-.L1930
	.byte	1,4,4,5,12,9
	.half	.L79-.L77
	.byte	3,64,1,5,5,7,9
	.half	.L1093-.L79
	.byte	3,83,1,5,38,9
	.half	.L1095-.L1093
	.byte	3,50,1,4,11,5,5,9
	.half	.L1102-.L1095
	.byte	3,127,1,5,35,9
	.half	.L1931-.L1102
	.byte	1,5,72,9
	.half	.L1932-.L1931
	.byte	1,5,70,9
	.half	.L1933-.L1932
	.byte	1,4,4,5,12,9
	.half	.L80-.L1933
	.byte	3,68,1,5,5,9
	.half	.L1934-.L80
	.byte	1,5,7,9
	.half	.L81-.L1934
	.byte	3,192,0,1,5,5,7,9
	.half	.L1106-.L81
	.byte	3,75,1,5,38,9
	.half	.L1107-.L1106
	.byte	3,58,1,4,11,5,5,9
	.half	.L1108-.L1107
	.byte	3,119,1,5,35,9
	.half	.L1935-.L1108
	.byte	1,5,72,9
	.half	.L1936-.L1935
	.byte	1,5,70,9
	.half	.L1937-.L1936
	.byte	1,4,1,5,9,9
	.half	.L63-.L1937
	.byte	3,143,1,1,5,2,9
	.half	.L1938-.L63
	.byte	1,5,1,9
	.half	.L7-.L1938
	.byte	3,1,1,7,9
	.half	.L566-.L7
	.byte	0,1,1
.L1869:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetEventStatusWithEnvData')
	.sect	'.debug_ranges'
.L565:
	.word	-1,.L472,0,.L566-.L472,0,0
.L1021:
	.word	-1,.L472,.L1019-.L472,.L46-.L472,.L48-.L472,.L1022-.L472,0,0
.L1028:
	.word	-1,.L472,.L52-.L472,.L54-.L472,.L1029-.L472,.L1030-.L472,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_SetEventSuppression')
	.sect	'.debug_info'
.L567:
	.word	897
	.half	3
	.word	.L568
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L570,.L569
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_SetEventSuppression',0,1,170,6,16
	.word	.L608
	.byte	1,1,1
	.word	.L417,.L1109,.L496
	.byte	4
	.byte	'EventId',0,1,170,6,56
	.word	.L610,.L1110
	.byte	4
	.byte	'SuppressionStatus',0,1,170,6,73
	.word	.L608,.L1111
	.byte	5
	.word	.L417,.L1109
	.byte	6
	.byte	'returnVal',0,1,172,6,20
	.word	.L608,.L1112
	.byte	6
	.byte	'evtStatus',0,1,173,6,27
	.word	.L608,.L1113
	.byte	7
	.word	.L614,.L423,.L1114
	.byte	8
	.word	.L616,.L1115
	.byte	9
	.word	.L618,.L423,.L1114
	.byte	0,7
	.word	.L666,.L427,.L429
	.byte	8
	.word	.L667,.L1116
	.byte	9
	.word	.L669,.L427,.L429
	.byte	0,7
	.word	.L644,.L429,.L1117
	.byte	8
	.word	.L646,.L1118
	.byte	10
	.word	.L648,.L429,.L1117
	.byte	7
	.word	.L624,.L1119,.L431
	.byte	8
	.word	.L626,.L1120
	.byte	8
	.word	.L628,.L1121
	.byte	10
	.word	.L630,.L1119,.L431
	.byte	7
	.word	.L631,.L1119,.L430
	.byte	8
	.word	.L632,.L1122
	.byte	8
	.word	.L634,.L1123
	.byte	9
	.word	.L636,.L1119,.L430
	.byte	0,0,0,0,0,7
	.word	.L1124,.L1117,.L1125
	.byte	8
	.word	.L1126,.L1127
	.byte	10
	.word	.L1128,.L1117,.L1125
	.byte	7
	.word	.L624,.L1129,.L435
	.byte	8
	.word	.L626,.L1120
	.byte	8
	.word	.L628,.L1121
	.byte	10
	.word	.L630,.L1129,.L435
	.byte	7
	.word	.L631,.L1129,.L434
	.byte	8
	.word	.L632,.L1122
	.byte	8
	.word	.L634,.L1123
	.byte	9
	.word	.L636,.L1129,.L434
	.byte	0,0,0,0,0,7
	.word	.L1130,.L1125,.L1131
	.byte	8
	.word	.L1132,.L1133
	.byte	10
	.word	.L1134,.L1125,.L1131
	.byte	7
	.word	.L624,.L1135,.L439
	.byte	8
	.word	.L626,.L1120
	.byte	8
	.word	.L628,.L1121
	.byte	10
	.word	.L630,.L1135,.L439
	.byte	7
	.word	.L631,.L1135,.L438
	.byte	8
	.word	.L632,.L1122
	.byte	8
	.word	.L634,.L1123
	.byte	9
	.word	.L636,.L1135,.L438
	.byte	0,0,0,0,0,7
	.word	.L1136,.L1131,.L433
	.byte	8
	.word	.L1137,.L1138
	.byte	10
	.word	.L1139,.L1131,.L433
	.byte	7
	.word	.L624,.L1140,.L443
	.byte	8
	.word	.L626,.L1120
	.byte	8
	.word	.L628,.L1121
	.byte	10
	.word	.L630,.L1140,.L443
	.byte	7
	.word	.L631,.L1140,.L442
	.byte	8
	.word	.L632,.L1122
	.byte	8
	.word	.L634,.L1123
	.byte	9
	.word	.L636,.L1140,.L442
	.byte	0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetEventSuppression')
	.sect	'.debug_abbrev'
.L568:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetEventSuppression')
	.sect	'.debug_line'
.L569:
	.word	.L1940-.L1939
.L1939:
	.half	3
	.word	.L1942-.L1941
.L1941:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0,0
.L1942:
	.byte	5,2,7,0,5,2
	.word	.L419
	.byte	3,178,6,1,4,2,5,26,9
	.half	.L423-.L419
	.byte	3,227,121,1,5,12,9
	.half	.L1943-.L423
	.byte	1,5,38,7,9
	.half	.L1944-.L1943
	.byte	1,5,26,9
	.half	.L1945-.L1944
	.byte	1,5,4,9
	.half	.L424-.L1945
	.byte	1,4,1,5,2,9
	.half	.L426-.L424
	.byte	3,157,6,1,7,9
	.half	.L1114-.L426
	.byte	1,4,3,5,12,9
	.half	.L427-.L1114
	.byte	3,249,121,1,5,35,9
	.half	.L1946-.L427
	.byte	1,5,5,9
	.half	.L1668-.L1946
	.byte	1,4,4,5,44,9
	.half	.L429-.L1668
	.byte	3,208,0,1,4,5,5,28,9
	.half	.L1119-.L429
	.byte	3,66,1,5,47,9
	.half	.L1947-.L1119
	.byte	1,5,5,9
	.half	.L1948-.L1947
	.byte	1,5,73,9
	.half	.L430-.L1948
	.byte	3,4,1,5,5,9
	.half	.L1949-.L430
	.byte	1,4,4,9
	.half	.L431-.L1949
	.byte	3,58,1,4,1,5,12,9
	.half	.L432-.L431
	.byte	3,199,5,1,4,4,5,44,7,9
	.half	.L1117-.L432
	.byte	3,227,122,1,4,5,5,28,9
	.half	.L1129-.L1117
	.byte	3,152,127,1,5,47,9
	.half	.L1950-.L1129
	.byte	1,5,5,9
	.half	.L1951-.L1950
	.byte	1,5,73,9
	.half	.L434-.L1951
	.byte	3,4,1,5,5,9
	.half	.L1952-.L434
	.byte	1,4,4,9
	.half	.L435-.L1952
	.byte	3,228,0,1,4,1,5,40,9
	.half	.L436-.L435
	.byte	3,158,5,1,4,4,5,44,7,9
	.half	.L1125-.L436
	.byte	3,233,122,1,4,5,5,28,9
	.half	.L1135-.L1125
	.byte	3,145,127,1,5,47,9
	.half	.L1953-.L1135
	.byte	1,5,5,9
	.half	.L1954-.L1953
	.byte	1,5,73,9
	.half	.L438-.L1954
	.byte	3,4,1,5,5,9
	.half	.L1955-.L438
	.byte	1,4,4,9
	.half	.L439-.L1955
	.byte	3,235,0,1,4,1,5,42,9
	.half	.L440-.L439
	.byte	3,152,5,1,4,4,5,44,7,9
	.half	.L1131-.L440
	.byte	3,238,122,1,4,5,5,28,9
	.half	.L1140-.L1131
	.byte	3,139,127,1,5,47,9
	.half	.L1669-.L1140
	.byte	1,5,5,9
	.half	.L1956-.L1669
	.byte	1,5,73,9
	.half	.L442-.L1956
	.byte	3,4,1,5,5,9
	.half	.L1957-.L442
	.byte	1,4,4,9
	.half	.L443-.L1957
	.byte	3,241,0,1,4,1,5,55,9
	.half	.L444-.L443
	.byte	3,147,5,1,5,16,7,9
	.half	.L433-.L444
	.byte	3,2,1,5,27,9
	.half	.L1670-.L433
	.byte	1,5,37,9
	.half	.L445-.L1670
	.byte	3,5,1,5,16,9
	.half	.L1667-.L445
	.byte	3,4,1,5,2,9
	.half	.L446-.L1667
	.byte	3,5,1,5,1,9
	.half	.L421-.L446
	.byte	3,1,1,7,9
	.half	.L571-.L421
	.byte	0,1,1
.L1940:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetEventSuppression')
	.sect	'.debug_ranges'
.L570:
	.word	-1,.L417,0,.L571-.L417,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_SetEventSuppressionByDTC')
	.sect	'.debug_info'
.L572:
	.word	598
	.half	3
	.word	.L573
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L575,.L574
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_SetEventSuppressionByDTC',0,1,217,6,16
	.word	.L608
	.byte	1,1,1
	.word	.L498,.L1141,.L497
	.byte	4
	.byte	'DTC',0,1,217,6,52
	.word	.L823,.L1142
	.byte	4
	.byte	'DTCFormat',0,1,217,6,75
	.word	.L608,.L1143
	.byte	4
	.byte	'SuppressionStatus',0,1,217,6,94
	.word	.L608,.L1144
	.byte	5
	.word	.L498,.L1141
	.byte	6
	.byte	'eventIt',0,1,221,6,29
	.word	.L1145,.L1146
	.byte	6
	.byte	'eventId',0,1,222,6,21
	.word	.L610,.L1147
	.byte	6
	.byte	'retval',0,1,223,6,20
	.word	.L608,.L1148
	.byte	6
	.byte	'dtcId',0,1,224,6,19
	.word	.L610,.L1149
	.byte	7
	.word	.L1084,.L449,.L1150
	.byte	8
	.word	.L1086,.L1151
	.byte	9
	.word	.L1088,.L449,.L1150
	.byte	0,7
	.word	.L1152,.L1153,.L1154
	.byte	8
	.word	.L1155,.L1156
	.byte	8
	.word	.L1157,.L1158
	.byte	10
	.word	.L1159,.L1153,.L1154
	.byte	7
	.word	.L1084,.L1153,.L1160
	.byte	8
	.word	.L1086,.L1151
	.byte	9
	.word	.L1088,.L1153,.L1160
	.byte	0,0,0,7
	.word	.L1161,.L1162,.L462
	.byte	8
	.word	.L1163,.L1164
	.byte	9
	.word	.L1165,.L1162,.L462
	.byte	0,7
	.word	.L1166,.L1167,.L460
	.byte	8
	.word	.L1168,.L1169
	.byte	9
	.word	.L1170,.L1167,.L460
	.byte	0,7
	.word	.L1171,.L1172,.L464
	.byte	8
	.word	.L1173,.L1174
	.byte	9
	.word	.L1175,.L1172,.L464
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_SetEventSuppressionByDTC')
	.sect	'.debug_abbrev'
.L573:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,10,11,1,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_SetEventSuppressionByDTC')
	.sect	'.debug_line'
.L574:
	.word	.L1959-.L1958
.L1958:
	.half	3
	.word	.L1961-.L1960
.L1960:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0,0
.L1961:
	.byte	5,16,7,0,5,2
	.word	.L498
	.byte	3,216,6,1,5,5,9
	.half	.L1673-.L498
	.byte	3,9,1,5,38,7,9
	.half	.L1962-.L1673
	.byte	3,2,1,5,15,9
	.half	.L1672-.L1962
	.byte	1,5,42,9
	.half	.L1674-.L1672
	.byte	1,5,16,9
	.half	.L448-.L1674
	.byte	3,5,1,5,9,9
	.half	.L1963-.L448
	.byte	1,4,2,5,21,9
	.half	.L449-.L1963
	.byte	3,177,122,1,5,12,9
	.half	.L1964-.L449
	.byte	1,5,28,7,9
	.half	.L1965-.L1964
	.byte	1,5,21,9
	.half	.L1966-.L1965
	.byte	1,5,4,9
	.half	.L451-.L1966
	.byte	1,4,1,5,10,9
	.half	.L453-.L451
	.byte	3,210,5,1,5,16,7,9
	.half	.L1150-.L453
	.byte	3,2,1,5,9,9
	.half	.L1675-.L1150
	.byte	1,5,12,9
	.half	.L454-.L1675
	.byte	3,3,1,5,47,9
	.half	.L1676-.L454
	.byte	3,1,1,4,2,5,21,9
	.half	.L1153-.L1676
	.byte	3,168,122,1,5,12,9
	.half	.L1967-.L1153
	.byte	1,5,28,7,9
	.half	.L1968-.L1967
	.byte	1,5,21,9
	.half	.L1969-.L1968
	.byte	1,5,4,9
	.half	.L456-.L1969
	.byte	1,5,9,9
	.half	.L458-.L456
	.byte	3,154,1,1,5,5,7,9
	.half	.L1160-.L458
	.byte	3,2,1,5,14,9
	.half	.L459-.L1160
	.byte	3,3,1,5,35,9
	.half	.L1970-.L459
	.byte	1,5,11,9
	.half	.L1971-.L1970
	.byte	1,5,44,9
	.half	.L1972-.L1971
	.byte	3,1,1,5,12,9
	.half	.L1973-.L1972
	.byte	1,4,1,5,53,9
	.half	.L1154-.L1973
	.byte	3,185,4,1,5,51,9
	.half	.L461-.L1154
	.byte	3,3,1,4,2,5,33,9
	.half	.L1162-.L461
	.byte	3,215,123,1,5,29,9
	.half	.L1974-.L1162
	.byte	1,5,4,9
	.half	.L1975-.L1974
	.byte	1,4,1,5,46,9
	.half	.L462-.L1975
	.byte	3,171,4,1,5,9,9
	.half	.L1678-.L462
	.byte	1,5,20,9
	.half	.L1976-.L1678
	.byte	3,2,1,5,42,9
	.half	.L463-.L1976
	.byte	3,122,1,4,2,5,7,9
	.half	.L1167-.L463
	.byte	3,212,123,1,5,12,9
	.half	.L1977-.L1167
	.byte	1,4,1,5,45,9
	.half	.L460-.L1977
	.byte	3,171,4,1,4,2,5,34,9
	.half	.L1172-.L460
	.byte	3,208,123,1,5,43,9
	.half	.L1978-.L1172
	.byte	1,5,39,9
	.half	.L1979-.L1978
	.byte	1,5,4,9
	.half	.L1980-.L1979
	.byte	1,4,1,5,53,9
	.half	.L464-.L1980
	.byte	3,176,4,1,5,5,7,9
	.half	.L1981-.L464
	.byte	3,11,1,5,1,9
	.half	.L450-.L1981
	.byte	3,8,1,7,9
	.half	.L576-.L450
	.byte	0,1,1
.L1959:
	.sdecl	'.debug_ranges',debug,cluster('Dem_SetEventSuppressionByDTC')
	.sect	'.debug_ranges'
.L575:
	.word	-1,.L498,0,.L576-.L498,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_GetEventFailed_GeneralEvtInfo')
	.sect	'.debug_info'
.L577:
	.word	270
	.half	3
	.word	.L578
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L580,.L579
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_GetEventFailed_GeneralEvtInfo',0,1,131,2,16
	.word	.L608
	.byte	1,1,1
	.word	.L475,.L1176,.L474
	.byte	4
	.byte	'EventId',0,1,131,2,66
	.word	.L610,.L1177
	.byte	4
	.byte	'EventFailed',0,1,131,2,84
	.word	.L612,.L1178
	.byte	5
	.word	.L475,.L1176
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_GetEventFailed_GeneralEvtInfo')
	.sect	'.debug_abbrev'
.L578:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_GetEventFailed_GeneralEvtInfo')
	.sect	'.debug_line'
.L579:
	.word	.L1983-.L1982
.L1982:
	.half	3
	.word	.L1985-.L1984
.L1984:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L1985:
	.byte	5,40,7,0,5,2
	.word	.L475
	.byte	3,132,2,1,5,5,9
	.half	.L1538-.L475
	.byte	1,5,1,9
	.half	.L111-.L1538
	.byte	3,1,1,7,9
	.half	.L581-.L111
	.byte	0,1,1
.L1983:
	.sdecl	'.debug_ranges',debug,cluster('Dem_GetEventFailed_GeneralEvtInfo')
	.sect	'.debug_ranges'
.L580:
	.word	-1,.L475,0,.L581-.L475,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ReportErrorStatusDisableQueue')
	.sect	'.debug_info'
.L582:
	.word	1227
	.half	3
	.word	.L583
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L585,.L584
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_ReportErrorStatusDisableQueue',0,1,205,2,6,1,1,1
	.word	.L481,.L1179,.L480
	.byte	4
	.word	.L481,.L1179
	.byte	5
	.byte	'tmpErrorEvent',0,1,207,2,24
	.word	.L1180,.L1181
	.byte	5
	.byte	'removedIndex',0,1,208,2,12
	.word	.L610,.L1182
	.byte	5
	.byte	'eventAvailableForProcessing',0,1,209,2,13
	.word	.L608,.L1183
	.byte	6
	.word	.L1184,.L1185,.L120
	.byte	7
	.word	.L1186,.L1187
	.byte	7
	.word	.L1188,.L1189
	.byte	8
	.word	.L1190,.L1185,.L120
	.byte	6
	.word	.L1191,.L1185,.L118
	.byte	7
	.word	.L1192,.L1193
	.byte	8
	.word	.L1194,.L1185,.L118
	.byte	6
	.word	.L943,.L1195,.L117
	.byte	7
	.word	.L945,.L1196
	.byte	7
	.word	.L947,.L1197
	.byte	9
	.word	.L949,.L1198
	.byte	5
	.byte	'result',0,2,57,11
	.word	.L610,.L1201
	.byte	0,0,6
	.word	.L943,.L1199,.L1200
	.byte	7
	.word	.L945,.L1196
	.byte	7
	.word	.L947,.L1197
	.byte	0,0,0,6
	.word	.L943,.L1202,.L1203
	.byte	7
	.word	.L945,.L1196
	.byte	7
	.word	.L947,.L1197
	.byte	8
	.word	.L949,.L1202,.L1203
	.byte	5
	.byte	'result',0,2,57,11
	.word	.L610,.L1204
	.byte	0,0,0,0,6
	.word	.L1205,.L1206,.L1207
	.byte	7
	.word	.L1208,.L1209
	.byte	7
	.word	.L1210,.L1211
	.byte	7
	.word	.L1212,.L1213
	.byte	10
	.word	.L1214,.L1206,.L1207
	.byte	0,6
	.word	.L619,.L1215,.L131
	.byte	7
	.word	.L621,.L1216
	.byte	8
	.word	.L623,.L1215,.L131
	.byte	6
	.word	.L624,.L1217,.L128
	.byte	7
	.word	.L626,.L1218
	.byte	7
	.word	.L628,.L1219
	.byte	8
	.word	.L630,.L1217,.L128
	.byte	6
	.word	.L631,.L1217,.L127
	.byte	7
	.word	.L632,.L1220
	.byte	7
	.word	.L634,.L1221
	.byte	10
	.word	.L636,.L1217,.L127
	.byte	0,0,0,0,0,6
	.word	.L998,.L131,.L132
	.byte	7
	.word	.L999,.L1222
	.byte	10
	.word	.L1001,.L131,.L132
	.byte	0,6
	.word	.L1002,.L1223,.L1224
	.byte	7
	.word	.L1005,.L1225
	.byte	8
	.word	.L1007,.L1223,.L1224
	.byte	6
	.word	.L624,.L1226,.L134
	.byte	7
	.word	.L626,.L1218
	.byte	7
	.word	.L628,.L1219
	.byte	8
	.word	.L630,.L1226,.L134
	.byte	6
	.word	.L631,.L1226,.L133
	.byte	7
	.word	.L632,.L1220
	.byte	7
	.word	.L634,.L1221
	.byte	10
	.word	.L636,.L1226,.L133
	.byte	0,0,0,0,0,6
	.word	.L693,.L138,.L114
	.byte	7
	.word	.L694,.L1227
	.byte	7
	.word	.L696,.L1228
	.byte	8
	.word	.L698,.L138,.L114
	.byte	6
	.word	.L699,.L1229,.L114
	.byte	7
	.word	.L701,.L1230
	.byte	7
	.word	.L703,.L1231
	.byte	7
	.word	.L705,.L1232
	.byte	8
	.word	.L707,.L1229,.L114
	.byte	6
	.word	.L708,.L1233,.L140
	.byte	7
	.word	.L710,.L1234
	.byte	7
	.word	.L712,.L1235
	.byte	8
	.word	.L714,.L1233,.L140
	.byte	5
	.byte	'element_pos',0,3,36,18
	.word	.L1236,.L1237
	.byte	5
	.byte	'local_bitpos',0,3,37,18
	.word	.L1238,.L1239
	.byte	5
	.byte	'mask',0,3,38,18
	.word	.L1240,.L1241
	.byte	0,0,6
	.word	.L721,.L139,.L141
	.byte	7
	.word	.L722,.L1242
	.byte	7
	.word	.L724,.L1243
	.byte	8
	.word	.L726,.L139,.L141
	.byte	5
	.byte	'element_pos',0,3,49,18
	.word	.L1244,.L1245
	.byte	5
	.byte	'local_bitpos',0,3,50,18
	.word	.L1246,.L1247
	.byte	5
	.byte	'mask',0,3,51,18
	.word	.L1248,.L1249
	.byte	0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ReportErrorStatusDisableQueue')
	.sect	'.debug_abbrev'
.L583:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,1,49,16,85,6,0,0,10,11,0,49,16
	.byte	17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ReportErrorStatusDisableQueue')
	.sect	'.debug_line'
.L584:
	.word	.L1987-.L1986
.L1986:
	.half	3
	.word	.L1989-.L1988
.L1988:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_RingBuffer.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_MemUtils.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\main\\Dem_OperationCycle.h',0,0,0,0,0
.L1989:
	.byte	5,6,7,0,5,2
	.word	.L481
	.byte	3,204,2,1,5,40,9
	.half	.L1539-.L481
	.byte	3,2,1,5,38,9
	.half	.L1990-.L1539
	.byte	1,5,27,9
	.half	.L1991-.L1990
	.byte	3,1,1,5,25,9
	.half	.L1992-.L1991
	.byte	1,5,41,9
	.half	.L1993-.L1992
	.byte	3,1,1,5,13,9
	.half	.L1540-.L1993
	.byte	3,14,1,5,34,9
	.half	.L1994-.L1540
	.byte	1,5,48,9
	.half	.L1995-.L1994
	.byte	3,116,1,5,36,9
	.half	.L115-.L1995
	.byte	3,4,1,5,60,9
	.half	.L1996-.L115
	.byte	1,4,2,5,40,9
	.half	.L1185-.L1996
	.byte	3,242,125,1,5,24,9
	.half	.L1195-.L1185
	.byte	3,112,1,5,20,9
	.half	.L1541-.L1195
	.byte	3,1,1,5,4,9
	.half	.L1997-.L1541
	.byte	1,5,14,9
	.half	.L1998-.L1997
	.byte	3,2,1,5,4,9
	.half	.L116-.L1998
	.byte	3,2,1,5,61,9
	.half	.L117-.L116
	.byte	3,11,1,5,56,9
	.half	.L1199-.L117
	.byte	1,5,4,9
	.half	.L1200-.L1199
	.byte	1,9
	.half	.L118-.L1200
	.byte	3,43,1,5,38,7,9
	.half	.L1999-.L118
	.byte	1,5,51,9
	.half	.L119-.L1999
	.byte	3,2,1,5,24,9
	.half	.L1202-.L119
	.byte	3,67,1,5,20,9
	.half	.L1542-.L1202
	.byte	3,1,1,5,4,9
	.half	.L2000-.L1542
	.byte	1,5,14,9
	.half	.L2001-.L2000
	.byte	3,2,1,5,4,9
	.half	.L121-.L2001
	.byte	3,2,1,5,21,9
	.half	.L122-.L121
	.byte	3,56,1,5,18,9
	.half	.L2002-.L122
	.byte	3,1,1,5,4,9
	.half	.L1203-.L2002
	.byte	3,2,1,4,1,5,9,9
	.half	.L120-.L1203
	.byte	3,222,1,1,5,13,7,9
	.half	.L2003-.L120
	.byte	3,3,1,4,4,5,49,9
	.half	.L1206-.L2003
	.byte	3,189,125,1,4,1,5,109,9
	.half	.L1207-.L1206
	.byte	3,195,2,1,5,52,9
	.half	.L124-.L1207
	.byte	3,5,1,5,50,9
	.half	.L2004-.L124
	.byte	1,5,53,9
	.half	.L2005-.L2004
	.byte	3,1,1,5,51,9
	.half	.L2006-.L2005
	.byte	1,5,41,9
	.half	.L2007-.L2006
	.byte	3,3,1,5,12,9
	.half	.L125-.L2007
	.byte	3,4,1,5,77,7,9
	.half	.L2008-.L125
	.byte	1,4,5,5,33,9
	.half	.L1215-.L2008
	.byte	3,143,2,1,5,51,9
	.half	.L2009-.L1215
	.byte	1,5,60,9
	.half	.L2010-.L2009
	.byte	1,5,68,9
	.half	.L2011-.L2010
	.byte	1,4,6,5,28,9
	.half	.L1217-.L2011
	.byte	3,200,123,1,5,47,9
	.half	.L2012-.L1217
	.byte	1,5,5,9
	.half	.L2013-.L2012
	.byte	1,5,73,9
	.half	.L127-.L2013
	.byte	3,4,1,5,5,9
	.half	.L2014-.L127
	.byte	1,4,5,5,3,9
	.half	.L128-.L2014
	.byte	3,180,4,1,4,1,5,44,9
	.half	.L129-.L128
	.byte	3,241,125,1,4,7,5,2,7,9
	.half	.L131-.L129
	.byte	3,150,126,1,4,1,5,77,9
	.half	.L132-.L131
	.byte	3,236,1,1,4,8,5,40,9
	.half	.L1223-.L132
	.byte	3,174,125,1,4,6,5,28,9
	.half	.L1226-.L1223
	.byte	3,39,1,5,47,9
	.half	.L2015-.L1226
	.byte	1,5,5,9
	.half	.L2016-.L2015
	.byte	1,5,73,9
	.half	.L133-.L2016
	.byte	3,4,1,5,5,9
	.half	.L2017-.L133
	.byte	1,4,8,9
	.half	.L134-.L2017
	.byte	3,85,1,4,1,5,13,9
	.half	.L135-.L134
	.byte	3,210,2,1,5,84,7,9
	.half	.L1224-.L135
	.byte	3,3,1,5,25,9
	.half	.L2018-.L1224
	.byte	3,1,1,5,88,9
	.half	.L2019-.L2018
	.byte	1,5,73,9
	.half	.L136-.L2019
	.byte	3,9,1,4,5,5,30,9
	.half	.L138-.L136
	.byte	3,50,1,4,3,5,5,9
	.half	.L1229-.L138
	.byte	3,152,125,1,5,42,7,9
	.half	.L1233-.L1229
	.byte	3,100,1,5,43,9
	.half	.L1543-.L1233
	.byte	3,1,1,5,14,9
	.half	.L1544-.L1543
	.byte	3,2,1,5,26,9
	.half	.L2020-.L1544
	.byte	1,5,11,9
	.half	.L1546-.L2020
	.byte	3,2,1,5,25,9
	.half	.L1545-.L1546
	.byte	1,5,5,9
	.half	.L2021-.L1545
	.byte	3,1,1,5,49,9
	.half	.L140-.L2021
	.byte	3,23,1,5,42,9
	.half	.L139-.L140
	.byte	3,112,1,5,43,9
	.half	.L1547-.L139
	.byte	3,1,1,5,14,9
	.half	.L1549-.L1547
	.byte	3,2,1,5,26,9
	.half	.L2022-.L1549
	.byte	1,5,11,9
	.half	.L1551-.L2022
	.byte	3,2,1,5,37,9
	.half	.L1550-.L1551
	.byte	1,5,25,9
	.half	.L1552-.L1550
	.byte	1,5,5,9
	.half	.L2023-.L1552
	.byte	3,1,1,9
	.half	.L141-.L2023
	.byte	3,14,1,4,1,5,33,9
	.half	.L114-.L141
	.byte	3,142,2,1,5,48,9
	.half	.L2024-.L114
	.byte	1,5,1,7,9
	.half	.L2025-.L2024
	.byte	3,53,1,7,9
	.half	.L586-.L2025
	.byte	0,1,1
.L1987:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ReportErrorStatusDisableQueue')
	.sect	'.debug_ranges'
.L585:
	.word	-1,.L481,0,.L586-.L481,0,0
.L1198:
	.word	-1,.L481,.L1195-.L481,.L117-.L481,.L1199-.L481,.L1200-.L481,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ReportErrorStatusEnableQueue')
	.sect	'.debug_info'
.L587:
	.word	219
	.half	3
	.word	.L588
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L590,.L589
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_ReportErrorStatusEnableQueue',0,1,138,3,6,1,1,1
	.word	.L483,.L1250,.L482
	.byte	4
	.word	.L483,.L1250
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ReportErrorStatusEnableQueue')
	.sect	'.debug_abbrev'
.L588:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_ReportErrorStatusEnableQueue')
	.sect	'.debug_line'
.L589:
	.word	.L2027-.L2026
.L2026:
	.half	3
	.word	.L2029-.L2028
.L2028:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L2029:
	.byte	5,7,7,0,5,2
	.word	.L483
	.byte	3,139,3,1,5,28,9
	.half	.L2030-.L483
	.byte	1,5,7,9
	.half	.L2031-.L2030
	.byte	1,5,42,7,9
	.half	.L2032-.L2031
	.byte	3,4,1,5,40,9
	.half	.L2033-.L2032
	.byte	1,5,43,9
	.half	.L2034-.L2033
	.byte	3,1,1,5,41,9
	.half	.L2035-.L2034
	.byte	1,5,1,9
	.half	.L144-.L2035
	.byte	3,4,1,7,9
	.half	.L591-.L144
	.byte	0,1,1
.L2027:
	.sdecl	'.debug_ranges',debug,cluster('Dem_ReportErrorStatusEnableQueue')
	.sect	'.debug_ranges'
.L590:
	.word	-1,.L483,0,.L591-.L483,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_PreInitErrorQueue')
	.sect	'.debug_info'
.L592:
	.word	208
	.half	3
	.word	.L593
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L595,.L594
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_PreInitErrorQueue',0,1,153,2,6,1,1,1
	.word	.L479,.L1251,.L478
	.byte	4
	.word	.L479,.L1251
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_PreInitErrorQueue')
	.sect	'.debug_abbrev'
.L593:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_PreInitErrorQueue')
	.sect	'.debug_line'
.L594:
	.word	.L2037-.L2036
.L2036:
	.half	3
	.word	.L2039-.L2038
.L2038:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0,0
.L2039:
	.byte	5,5,7,0,5,2
	.word	.L479
	.byte	3,155,2,1,5,1,9
	.half	.L2040-.L479
	.byte	3,1,1,7,9
	.half	.L596-.L2040
	.byte	0,1,1
.L2037:
	.sdecl	'.debug_ranges',debug,cluster('Dem_PreInitErrorQueue')
	.sect	'.debug_ranges'
.L595:
	.word	-1,.L479,0,.L596-.L479,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_EvtProcessPassedAndFailed')
	.sect	'.debug_info'
.L597:
	.word	5410
	.half	3
	.word	.L598
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L600,.L599
	.byte	2
	.word	.L503
	.byte	3
	.byte	'Dem_EvtProcessPassedAndFailed',0,1,160,4,6,1,1,1
	.word	.L489,.L1252,.L488
	.byte	4
	.byte	'EventId',0,1,160,4,53
	.word	.L610,.L1253
	.byte	4
	.byte	'EventStatus',0,1,160,4,82
	.word	.L608,.L1254
	.byte	4
	.byte	'debug0_ul',0,1,161,4,23
	.word	.L823,.L1255
	.byte	4
	.byte	'debug1_ul',0,1,161,4,23
	.word	.L823,.L1256
	.byte	5
	.word	.L489,.L1252
	.byte	6
	.byte	'NodeId',0,1,163,4,25
	.word	.L608,.L1257
	.byte	6
	.byte	'reportIsFailed',0,1,164,4,23
	.word	.L608,.L1258
	.byte	6
	.byte	'oldCausal',0,1,165,4,13
	.word	.L608,.L1259
	.byte	6
	.byte	'newCausal',0,1,165,4,24
	.word	.L608,.L1260
	.byte	6
	.byte	'storageFiltered',0,1,165,4,35
	.word	.L608,.L1261
	.byte	6
	.byte	'eventType',0,1,167,4,25
	.word	.L608,.L1262
	.byte	6
	.byte	'isoByteOld',0,1,169,4,27
	.word	.L608,.L1263
	.byte	6
	.byte	'isoByteNew',0,1,169,4,39
	.word	.L608,.L1264
	.byte	6
	.byte	'dtcStByteOld',0,1,170,4,27
	.word	.L608,.L1265
	.byte	7
	.word	.L1266,.L1267,.L1268
	.byte	8
	.word	.L1269,.L1270
	.byte	8
	.word	.L1271,.L1272
	.byte	9
	.word	.L1273,.L1267,.L1268
	.byte	7
	.word	.L666,.L1274,.L270
	.byte	8
	.word	.L667,.L1275
	.byte	10
	.word	.L669,.L1274,.L270
	.byte	0,7
	.word	.L644,.L270,.L1276
	.byte	8
	.word	.L646,.L1277
	.byte	9
	.word	.L648,.L270,.L1276
	.byte	7
	.word	.L624,.L1278,.L272
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1278,.L272
	.byte	7
	.word	.L631,.L1278,.L271
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1278,.L271
	.byte	0,0,0,0,0,7
	.word	.L666,.L1276,.L275
	.byte	8
	.word	.L667,.L1275
	.byte	10
	.word	.L669,.L1276,.L275
	.byte	0,7
	.word	.L670,.L275,.L278
	.byte	8
	.word	.L671,.L1283
	.byte	9
	.word	.L673,.L275,.L278
	.byte	7
	.word	.L624,.L1284,.L277
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1284,.L277
	.byte	7
	.word	.L631,.L1284,.L276
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1284,.L276
	.byte	0,0,0,0,0,0,0,7
	.word	.L1285,.L1268,.L282
	.byte	8
	.word	.L1286,.L1287
	.byte	10
	.word	.L1288,.L1268,.L282
	.byte	0,7
	.word	.L1289,.L1290,.L284
	.byte	8
	.word	.L1291,.L1292
	.byte	10
	.word	.L1293,.L1290,.L284
	.byte	0,7
	.word	.L1294,.L1295,.L1296
	.byte	8
	.word	.L1297,.L1298
	.byte	11
	.word	.L1299,.L1300
	.byte	7
	.word	.L624,.L1302,.L287
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1302,.L287
	.byte	7
	.word	.L631,.L1302,.L286
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1302,.L286
	.byte	0,0,0,0,0,7
	.word	.L1294,.L281,.L1301
	.byte	8
	.word	.L1297,.L1298
	.byte	0,7
	.word	.L1303,.L1301,.L291
	.byte	8
	.word	.L1304,.L1305
	.byte	10
	.word	.L1306,.L1301,.L291
	.byte	0,7
	.word	.L683,.L1307,.L1308
	.byte	8
	.word	.L686,.L1309
	.byte	8
	.word	.L688,.L1310
	.byte	8
	.word	.L690,.L1311
	.byte	9
	.word	.L692,.L1307,.L1308
	.byte	7
	.word	.L666,.L1307,.L292
	.byte	8
	.word	.L667,.L1275
	.byte	10
	.word	.L669,.L1307,.L292
	.byte	0,0,0,7
	.word	.L666,.L1308,.L293
	.byte	8
	.word	.L667,.L1275
	.byte	10
	.word	.L669,.L1308,.L293
	.byte	0,7
	.word	.L619,.L1312,.L1313
	.byte	8
	.word	.L621,.L1314
	.byte	9
	.word	.L623,.L1312,.L1313
	.byte	7
	.word	.L624,.L1315,.L295
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1315,.L295
	.byte	7
	.word	.L631,.L1315,.L294
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1315,.L294
	.byte	0,0,0,0,0,7
	.word	.L1316,.L1317,.L309
	.byte	8
	.word	.L1318,.L1319
	.byte	9
	.word	.L1320,.L1317,.L309
	.byte	7
	.word	.L745,.L1321,.L300
	.byte	8
	.word	.L747,.L1322
	.byte	8
	.word	.L749,.L1323
	.byte	9
	.word	.L751,.L1321,.L300
	.byte	7
	.word	.L752,.L1324,.L300
	.byte	8
	.word	.L754,.L1325
	.byte	8
	.word	.L756,.L1326
	.byte	8
	.word	.L758,.L1327
	.byte	9
	.word	.L760,.L1324,.L300
	.byte	7
	.word	.L761,.L1328,.L1329
	.byte	8
	.word	.L764,.L1330
	.byte	8
	.word	.L766,.L1331
	.byte	9
	.word	.L768,.L1328,.L1329
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L608,.L1332
	.byte	0,0,7
	.word	.L770,.L299,.L300
	.byte	8
	.word	.L771,.L1333
	.byte	8
	.word	.L773,.L1334
	.byte	9
	.word	.L775,.L299,.L300
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L608,.L1335
	.byte	0,0,0,0,0,0,7
	.word	.L1336,.L1337,.L302
	.byte	8
	.word	.L1338,.L1339
	.byte	8
	.word	.L1340,.L1341
	.byte	9
	.word	.L1342,.L1337,.L302
	.byte	7
	.word	.L752,.L1343,.L302
	.byte	8
	.word	.L754,.L1325
	.byte	8
	.word	.L756,.L1326
	.byte	8
	.word	.L758,.L1327
	.byte	9
	.word	.L760,.L1343,.L302
	.byte	7
	.word	.L761,.L1344,.L1345
	.byte	8
	.word	.L764,.L1330
	.byte	8
	.word	.L766,.L1331
	.byte	9
	.word	.L768,.L1344,.L1345
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L608,.L1346
	.byte	0,0,7
	.word	.L770,.L301,.L302
	.byte	8
	.word	.L771,.L1333
	.byte	8
	.word	.L773,.L1334
	.byte	9
	.word	.L775,.L301,.L302
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L608,.L1347
	.byte	0,0,0,0,0,0,7
	.word	.L1348,.L1349,.L304
	.byte	8
	.word	.L1350,.L1351
	.byte	8
	.word	.L1352,.L1353
	.byte	9
	.word	.L1354,.L1349,.L304
	.byte	7
	.word	.L752,.L1355,.L304
	.byte	8
	.word	.L754,.L1325
	.byte	8
	.word	.L756,.L1326
	.byte	8
	.word	.L758,.L1327
	.byte	9
	.word	.L760,.L1355,.L304
	.byte	7
	.word	.L761,.L1356,.L1357
	.byte	8
	.word	.L764,.L1330
	.byte	8
	.word	.L766,.L1331
	.byte	9
	.word	.L768,.L1356,.L1357
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L608,.L1358
	.byte	0,0,7
	.word	.L770,.L303,.L304
	.byte	8
	.word	.L771,.L1333
	.byte	8
	.word	.L773,.L1334
	.byte	9
	.word	.L775,.L303,.L304
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L608,.L1359
	.byte	0,0,0,0,0,0,7
	.word	.L1360,.L1361,.L306
	.byte	8
	.word	.L1362,.L1363
	.byte	8
	.word	.L1364,.L1365
	.byte	9
	.word	.L1366,.L1361,.L306
	.byte	7
	.word	.L752,.L1367,.L306
	.byte	8
	.word	.L754,.L1325
	.byte	8
	.word	.L756,.L1326
	.byte	8
	.word	.L758,.L1327
	.byte	9
	.word	.L760,.L1367,.L306
	.byte	7
	.word	.L761,.L1368,.L1369
	.byte	8
	.word	.L764,.L1330
	.byte	8
	.word	.L766,.L1331
	.byte	9
	.word	.L768,.L1368,.L1369
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L608,.L1370
	.byte	0,0,7
	.word	.L770,.L305,.L306
	.byte	8
	.word	.L771,.L1333
	.byte	8
	.word	.L773,.L1334
	.byte	9
	.word	.L775,.L305,.L306
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L608,.L1371
	.byte	0,0,0,0,0,0,7
	.word	.L1372,.L1373,.L309
	.byte	8
	.word	.L1374,.L1375
	.byte	8
	.word	.L1376,.L1377
	.byte	9
	.word	.L1378,.L1373,.L309
	.byte	7
	.word	.L752,.L1379,.L309
	.byte	8
	.word	.L754,.L1325
	.byte	8
	.word	.L756,.L1326
	.byte	8
	.word	.L758,.L1327
	.byte	9
	.word	.L760,.L1379,.L309
	.byte	7
	.word	.L761,.L1380,.L1381
	.byte	8
	.word	.L764,.L1330
	.byte	8
	.word	.L766,.L1331
	.byte	9
	.word	.L768,.L1380,.L1381
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L608,.L1382
	.byte	0,0,7
	.word	.L770,.L307,.L309
	.byte	8
	.word	.L771,.L1333
	.byte	8
	.word	.L773,.L1334
	.byte	9
	.word	.L775,.L307,.L309
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L608,.L1383
	.byte	0,0,0,0,0,0,0,0,7
	.word	.L1384,.L1385,.L310
	.byte	8
	.word	.L1386,.L1387
	.byte	9
	.word	.L1388,.L1385,.L310
	.byte	7
	.word	.L745,.L1389,.L313
	.byte	8
	.word	.L747,.L1322
	.byte	8
	.word	.L749,.L1323
	.byte	9
	.word	.L751,.L1389,.L313
	.byte	7
	.word	.L752,.L1390,.L313
	.byte	8
	.word	.L754,.L1325
	.byte	8
	.word	.L756,.L1326
	.byte	8
	.word	.L758,.L1327
	.byte	9
	.word	.L760,.L1390,.L313
	.byte	7
	.word	.L761,.L1391,.L1392
	.byte	8
	.word	.L764,.L1330
	.byte	8
	.word	.L766,.L1331
	.byte	9
	.word	.L768,.L1391,.L1392
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L608,.L1393
	.byte	0,0,7
	.word	.L770,.L312,.L313
	.byte	8
	.word	.L771,.L1333
	.byte	8
	.word	.L773,.L1334
	.byte	9
	.word	.L775,.L312,.L313
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L608,.L1394
	.byte	0,0,0,0,0,0,7
	.word	.L1360,.L1395,.L315
	.byte	8
	.word	.L1362,.L1363
	.byte	8
	.word	.L1364,.L1365
	.byte	9
	.word	.L1366,.L1395,.L315
	.byte	7
	.word	.L752,.L1396,.L315
	.byte	8
	.word	.L754,.L1325
	.byte	8
	.word	.L756,.L1326
	.byte	8
	.word	.L758,.L1327
	.byte	9
	.word	.L760,.L1396,.L315
	.byte	7
	.word	.L761,.L1397,.L1398
	.byte	8
	.word	.L764,.L1330
	.byte	8
	.word	.L766,.L1331
	.byte	9
	.word	.L768,.L1397,.L1398
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L608,.L1399
	.byte	0,0,7
	.word	.L770,.L314,.L315
	.byte	8
	.word	.L771,.L1333
	.byte	8
	.word	.L773,.L1334
	.byte	9
	.word	.L775,.L314,.L315
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L608,.L1400
	.byte	0,0,0,0,0,0,7
	.word	.L1372,.L1401,.L310
	.byte	8
	.word	.L1374,.L1375
	.byte	8
	.word	.L1376,.L1377
	.byte	9
	.word	.L1378,.L1401,.L310
	.byte	7
	.word	.L752,.L1402,.L310
	.byte	8
	.word	.L754,.L1325
	.byte	8
	.word	.L756,.L1326
	.byte	8
	.word	.L758,.L1327
	.byte	9
	.word	.L760,.L1402,.L310
	.byte	7
	.word	.L761,.L1403,.L1404
	.byte	8
	.word	.L764,.L1330
	.byte	8
	.word	.L766,.L1331
	.byte	9
	.word	.L768,.L1403,.L1404
	.byte	6
	.byte	'bit2shift',0,2,38,11
	.word	.L608,.L1405
	.byte	0,0,7
	.word	.L770,.L316,.L310
	.byte	8
	.word	.L771,.L1333
	.byte	8
	.word	.L773,.L1334
	.byte	9
	.word	.L775,.L316,.L310
	.byte	6
	.byte	'bit2shift',0,2,44,11
	.word	.L608,.L1406
	.byte	0,0,0,0,0,0,0,0,7
	.word	.L666,.L319,.L321
	.byte	8
	.word	.L667,.L1275
	.byte	10
	.word	.L669,.L319,.L321
	.byte	0,7
	.word	.L777,.L1407,.L322
	.byte	8
	.word	.L779,.L1408
	.byte	8
	.word	.L781,.L1409
	.byte	8
	.word	.L783,.L1410
	.byte	8
	.word	.L785,.L1411
	.byte	10
	.word	.L787,.L1407,.L322
	.byte	0,7
	.word	.L1412,.L1413,.L329
	.byte	8
	.word	.L1414,.L1415
	.byte	9
	.word	.L1416,.L1413,.L329
	.byte	7
	.word	.L624,.L1417,.L326
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1417,.L326
	.byte	7
	.word	.L631,.L1417,.L325
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1417,.L325
	.byte	0,0,0,0,0,7
	.word	.L1418,.L329,.L330
	.byte	8
	.word	.L1419,.L1420
	.byte	10
	.word	.L1421,.L329,.L330
	.byte	0,7
	.word	.L1422,.L330,.L331
	.byte	8
	.word	.L1423,.L1424
	.byte	10
	.word	.L1425,.L330,.L331
	.byte	0,7
	.word	.L666,.L324,.L334
	.byte	8
	.word	.L667,.L1275
	.byte	10
	.word	.L669,.L324,.L334
	.byte	0,5
	.word	.L1426,.L362
	.byte	6
	.byte	'checkIsCausal',0,1,131,5,21
	.word	.L608,.L1427
	.byte	7
	.word	.L1428,.L1426,.L337
	.byte	8
	.word	.L1429,.L1430
	.byte	8
	.word	.L1431,.L1432
	.byte	10
	.word	.L1433,.L1426,.L337
	.byte	0,7
	.word	.L1418,.L338,.L339
	.byte	8
	.word	.L1419,.L1420
	.byte	10
	.word	.L1421,.L338,.L339
	.byte	0,7
	.word	.L1422,.L339,.L340
	.byte	8
	.word	.L1423,.L1424
	.byte	10
	.word	.L1425,.L339,.L340
	.byte	0,7
	.word	.L1412,.L342,.L346
	.byte	8
	.word	.L1414,.L1415
	.byte	11
	.word	.L1416,.L1434
	.byte	7
	.word	.L624,.L1438,.L345
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1438,.L345
	.byte	7
	.word	.L631,.L1438,.L344
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1438,.L344
	.byte	0,0,0,0,0,7
	.word	.L1412,.L1435,.L1436
	.byte	8
	.word	.L1414,.L1415
	.byte	0,7
	.word	.L1439,.L350,.L351
	.byte	8
	.word	.L1440,.L1441
	.byte	10
	.word	.L1442,.L350,.L351
	.byte	0,7
	.word	.L1303,.L1443,.L353
	.byte	8
	.word	.L1304,.L1305
	.byte	10
	.word	.L1306,.L1443,.L353
	.byte	0,7
	.word	.L1444,.L353,.L354
	.byte	8
	.word	.L1445,.L1446
	.byte	10
	.word	.L1447,.L353,.L354
	.byte	0,7
	.word	.L1412,.L1437,.L358
	.byte	8
	.word	.L1414,.L1415
	.byte	0,7
	.word	.L1418,.L360,.L359
	.byte	8
	.word	.L1419,.L1420
	.byte	10
	.word	.L1421,.L360,.L359
	.byte	0,7
	.word	.L1412,.L356,.L362
	.byte	8
	.word	.L1414,.L1415
	.byte	0,0,7
	.word	.L644,.L336,.L1448
	.byte	8
	.word	.L646,.L1277
	.byte	9
	.word	.L648,.L336,.L1448
	.byte	7
	.word	.L624,.L1449,.L366
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1449,.L366
	.byte	7
	.word	.L631,.L1449,.L365
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1449,.L365
	.byte	0,0,0,0,0,7
	.word	.L1412,.L1448,.L1450
	.byte	8
	.word	.L1414,.L1415
	.byte	9
	.word	.L1416,.L1448,.L1450
	.byte	7
	.word	.L624,.L1451,.L370
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1451,.L370
	.byte	7
	.word	.L631,.L1451,.L369
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1451,.L369
	.byte	0,0,0,0,0,7
	.word	.L644,.L1452,.L1453
	.byte	8
	.word	.L646,.L1277
	.byte	9
	.word	.L648,.L1452,.L1453
	.byte	7
	.word	.L624,.L1454,.L374
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1454,.L374
	.byte	7
	.word	.L631,.L1454,.L373
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1454,.L373
	.byte	0,0,0,0,0,7
	.word	.L1130,.L1455,.L1456
	.byte	8
	.word	.L1132,.L1457
	.byte	9
	.word	.L1134,.L1455,.L1456
	.byte	7
	.word	.L624,.L1458,.L378
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1458,.L378
	.byte	7
	.word	.L631,.L1458,.L377
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1458,.L377
	.byte	0,0,0,0,0,7
	.word	.L1124,.L1459,.L376
	.byte	8
	.word	.L1126,.L1460
	.byte	9
	.word	.L1128,.L1459,.L376
	.byte	7
	.word	.L624,.L1461,.L382
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1461,.L382
	.byte	7
	.word	.L631,.L1461,.L381
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1461,.L381
	.byte	0,0,0,0,0,7
	.word	.L1285,.L376,.L385
	.byte	8
	.word	.L1286,.L1287
	.byte	10
	.word	.L1288,.L376,.L385
	.byte	0,7
	.word	.L1294,.L384,.L386
	.byte	8
	.word	.L1297,.L1298
	.byte	9
	.word	.L1299,.L384,.L386
	.byte	7
	.word	.L624,.L1462,.L388
	.byte	8
	.word	.L626,.L1279
	.byte	8
	.word	.L628,.L1280
	.byte	9
	.word	.L630,.L1462,.L388
	.byte	7
	.word	.L631,.L1462,.L387
	.byte	8
	.word	.L632,.L1281
	.byte	8
	.word	.L634,.L1282
	.byte	10
	.word	.L636,.L1462,.L387
	.byte	0,0,0,0,0,7
	.word	.L1463,.L335,.L391
	.byte	8
	.word	.L1464,.L1465
	.byte	10
	.word	.L1466,.L335,.L391
	.byte	0,7
	.word	.L1467,.L1468,.L394
	.byte	8
	.word	.L1469,.L1470
	.byte	10
	.word	.L1471,.L1468,.L394
	.byte	0,7
	.word	.L1472,.L398,.L290
	.byte	8
	.word	.L1473,.L1474
	.byte	8
	.word	.L1475,.L1476
	.byte	9
	.word	.L1477,.L398,.L290
	.byte	7
	.word	.L699,.L1478,.L290
	.byte	8
	.word	.L701,.L1479
	.byte	8
	.word	.L703,.L1480
	.byte	8
	.word	.L705,.L1481
	.byte	9
	.word	.L707,.L1478,.L290
	.byte	7
	.word	.L708,.L1482,.L400
	.byte	8
	.word	.L710,.L1483
	.byte	8
	.word	.L712,.L1484
	.byte	9
	.word	.L714,.L1482,.L400
	.byte	6
	.byte	'element_pos',0,3,36,18
	.word	.L1485,.L1486
	.byte	6
	.byte	'local_bitpos',0,3,37,18
	.word	.L1487,.L1488
	.byte	6
	.byte	'mask',0,3,38,18
	.word	.L1489,.L1490
	.byte	0,0,7
	.word	.L721,.L399,.L401
	.byte	8
	.word	.L722,.L1491
	.byte	8
	.word	.L724,.L1492
	.byte	9
	.word	.L726,.L399,.L401
	.byte	6
	.byte	'element_pos',0,3,49,18
	.word	.L1493,.L1494
	.byte	6
	.byte	'local_bitpos',0,3,50,18
	.word	.L1495,.L1496
	.byte	6
	.byte	'mask',0,3,51,18
	.word	.L1497,.L1498
	.byte	0,0,0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_EvtProcessPassedAndFailed')
	.sect	'.debug_abbrev'
.L598:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,1,49,16,17,1,18
	.byte	1,0,0,10,11,0,49,16,17,1,18,1,0,0,11,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Dem_EvtProcessPassedAndFailed')
	.sect	'.debug_line'
.L599:
	.word	.L2042-.L2041
.L2041:
	.half	3
	.word	.L2044-.L2043
.L2043:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Rba_DiagLib\\src\\rba_DiagLib_Bits8.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_BitArray.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventStatus.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\lib\\Dem_ISO14229Byte.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Events.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\map\\Dem_Mapping.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_Prv_CallEvtStChngdCbk.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\Dem_Cfg_Events_DataStructures.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\stoco\\Dem_StorageCondition.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\evdep\\Dem_Dependencies.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Dem\\src\\dtc\\Dem_DTCs.h',0,0,0,0,0
.L2044:
	.byte	5,6,7,0,5,2
	.word	.L489
	.byte	3,159,4,1,5,38,9
	.half	.L2045-.L489
	.byte	3,4,1,5,35,9
	.half	.L1606-.L2045
	.byte	3,3,1,5,42,9
	.half	.L1608-.L1606
	.byte	3,3,1,5,40,9
	.half	.L2046-.L1608
	.byte	1,5,24,9
	.half	.L2047-.L2046
	.byte	3,4,1,5,39,9
	.half	.L269-.L2047
	.byte	3,5,1,4,4,5,9,9
	.half	.L1267-.L269
	.byte	3,203,124,1,5,12,9
	.half	.L1274-.L1267
	.byte	3,174,127,1,5,35,9
	.half	.L2048-.L1274
	.byte	1,5,5,9
	.half	.L2049-.L2048
	.byte	1,4,5,5,44,9
	.half	.L270-.L2049
	.byte	3,208,0,1,4,2,5,28,9
	.half	.L1278-.L270
	.byte	3,66,1,5,47,9
	.half	.L2050-.L1278
	.byte	1,5,5,9
	.half	.L2051-.L2050
	.byte	1,5,73,9
	.half	.L271-.L2051
	.byte	3,4,1,5,5,9
	.half	.L2052-.L271
	.byte	1,4,5,9
	.half	.L272-.L2052
	.byte	3,58,1,4,4,5,12,9
	.half	.L273-.L272
	.byte	3,1,1,5,35,7,9
	.half	.L1276-.L273
	.byte	3,175,127,1,5,5,9
	.half	.L2053-.L1276
	.byte	1,4,5,5,45,9
	.half	.L275-.L2053
	.byte	3,243,0,1,4,2,5,28,9
	.half	.L1284-.L275
	.byte	3,159,127,1,5,47,9
	.half	.L2054-.L1284
	.byte	1,5,5,9
	.half	.L2055-.L2054
	.byte	1,5,73,9
	.half	.L276-.L2055
	.byte	3,4,1,5,5,9
	.half	.L2056-.L276
	.byte	1,4,5,5,12,9
	.half	.L277-.L2056
	.byte	3,221,0,1,5,5,9
	.half	.L2057-.L277
	.byte	1,4,4,5,14,9
	.half	.L278-.L2057
	.byte	3,95,1,5,9,7,9
	.half	.L274-.L278
	.byte	1,5,5,9
	.half	.L279-.L274
	.byte	3,126,1,4,1,5,14,9
	.half	.L280-.L279
	.byte	3,183,3,1,4,6,5,4,7,9
	.half	.L1268-.L280
	.byte	3,221,126,1,4,1,5,14,9
	.half	.L282-.L1268
	.byte	3,164,1,1,4,6,5,5,7,9
	.half	.L1290-.L282
	.byte	3,210,125,1,4,1,5,14,9
	.half	.L284-.L1290
	.byte	3,175,2,1,4,6,5,34,7,9
	.half	.L1295-.L284
	.byte	3,200,0,1,5,52,9
	.half	.L2058-.L1295
	.byte	1,5,61,9
	.half	.L2059-.L2058
	.byte	1,5,69,9
	.half	.L2060-.L2059
	.byte	1,4,2,5,28,9
	.half	.L1302-.L2060
	.byte	3,193,123,1,5,47,9
	.half	.L2061-.L1302
	.byte	1,5,5,9
	.half	.L2062-.L2061
	.byte	1,5,73,9
	.half	.L286-.L2062
	.byte	3,4,1,5,5,9
	.half	.L2063-.L286
	.byte	1,4,6,5,4,9
	.half	.L287-.L2063
	.byte	3,187,4,1,4,1,5,14,9
	.half	.L288-.L287
	.byte	3,185,127,1,5,9,7,9
	.half	.L1296-.L288
	.byte	3,4,1,4,6,5,34,9
	.half	.L281-.L1296
	.byte	3,195,0,1,4,7,5,2,9
	.half	.L1301-.L281
	.byte	3,239,123,1,4,1,5,35,9
	.half	.L291-.L1301
	.byte	3,211,3,1,5,45,9
	.half	.L2064-.L291
	.byte	1,5,58,9
	.half	.L2065-.L2064
	.byte	1,4,4,5,35,9
	.half	.L1307-.L2065
	.byte	3,237,123,1,5,5,9
	.half	.L2066-.L1307
	.byte	1,4,8,5,16,9
	.half	.L292-.L2066
	.byte	3,24,1,5,21,9
	.half	.L2067-.L292
	.byte	3,1,1,5,19,9
	.half	.L2068-.L2067
	.byte	1,4,4,5,35,9
	.half	.L1308-.L2068
	.byte	3,103,1,5,5,9
	.half	.L2069-.L1308
	.byte	1,4,1,5,16,9
	.half	.L293-.L2069
	.byte	3,160,4,1,4,6,5,51,9
	.half	.L1312-.L293
	.byte	3,42,1,5,60,9
	.half	.L2070-.L1312
	.byte	1,5,68,9
	.half	.L2071-.L2070
	.byte	1,4,2,5,28,9
	.half	.L1315-.L2071
	.byte	3,200,123,1,5,47,9
	.half	.L2072-.L1315
	.byte	1,5,5,9
	.half	.L2073-.L2072
	.byte	1,5,73,9
	.half	.L294-.L2073
	.byte	3,4,1,5,5,9
	.half	.L2074-.L294
	.byte	1,4,6,5,3,9
	.half	.L295-.L2074
	.byte	3,180,4,1,4,1,5,10,9
	.half	.L296-.L295
	.byte	3,89,1,5,9,7,9
	.half	.L1313-.L296
	.byte	3,2,1,4,4,5,61,7,9
	.half	.L1317-.L1313
	.byte	3,203,124,1,5,73,9
	.half	.L2075-.L1317
	.byte	1,4,5,5,41,9
	.half	.L1321-.L2075
	.byte	3,32,1,4,2,5,5,9
	.half	.L1324-.L1321
	.byte	3,246,126,1,5,21,7,9
	.half	.L1328-.L1324
	.byte	3,116,1,5,6,9
	.half	.L1609-.L1328
	.byte	3,1,1,5,36,9
	.half	.L2076-.L1609
	.byte	1,5,13,9
	.half	.L1610-.L2076
	.byte	1,5,53,9
	.half	.L1329-.L1610
	.byte	3,13,1,5,21,9
	.half	.L299-.L1329
	.byte	3,120,1,5,6,9
	.half	.L1611-.L299
	.byte	3,1,1,5,47,9
	.half	.L2077-.L1611
	.byte	1,5,26,9
	.half	.L1612-.L2077
	.byte	1,5,13,9
	.half	.L2078-.L1612
	.byte	1,4,4,5,76,9
	.half	.L300-.L2078
	.byte	3,240,0,1,4,5,5,41,9
	.half	.L1337-.L300
	.byte	3,38,1,4,2,5,5,9
	.half	.L1343-.L1337
	.byte	3,239,126,1,5,21,7,9
	.half	.L1344-.L1343
	.byte	3,116,1,5,6,9
	.half	.L1613-.L1344
	.byte	3,1,1,5,36,9
	.half	.L2079-.L1613
	.byte	1,5,13,9
	.half	.L1614-.L2079
	.byte	1,5,53,9
	.half	.L1345-.L1614
	.byte	3,13,1,5,21,9
	.half	.L301-.L1345
	.byte	3,120,1,5,6,9
	.half	.L1615-.L301
	.byte	3,1,1,5,47,9
	.half	.L2080-.L1615
	.byte	1,5,26,9
	.half	.L1616-.L2080
	.byte	1,5,13,9
	.half	.L2081-.L1616
	.byte	1,4,4,5,76,9
	.half	.L302-.L2081
	.byte	3,241,0,1,4,5,5,41,9
	.half	.L1349-.L302
	.byte	3,44,1,4,2,5,5,9
	.half	.L1355-.L1349
	.byte	3,232,126,1,5,21,7,9
	.half	.L1356-.L1355
	.byte	3,116,1,5,6,9
	.half	.L1617-.L1356
	.byte	3,1,1,5,36,9
	.half	.L2082-.L1617
	.byte	1,5,13,9
	.half	.L1618-.L2082
	.byte	1,5,53,9
	.half	.L1357-.L1618
	.byte	3,13,1,5,21,9
	.half	.L303-.L1357
	.byte	3,120,1,5,6,9
	.half	.L1619-.L303
	.byte	3,1,1,5,47,9
	.half	.L2083-.L1619
	.byte	1,5,26,9
	.half	.L1620-.L2083
	.byte	1,5,13,9
	.half	.L2084-.L1620
	.byte	1,4,4,5,78,9
	.half	.L304-.L2084
	.byte	3,242,0,1,4,5,5,41,9
	.half	.L1361-.L304
	.byte	3,57,1,5,75,9
	.half	.L2085-.L1361
	.byte	1,4,2,5,5,9
	.half	.L1367-.L2085
	.byte	3,218,126,1,5,21,7,9
	.half	.L1368-.L1367
	.byte	3,116,1,5,6,9
	.half	.L1621-.L1368
	.byte	3,1,1,5,36,9
	.half	.L2086-.L1621
	.byte	1,5,13,9
	.half	.L1622-.L2086
	.byte	1,5,53,9
	.half	.L1369-.L1622
	.byte	3,13,1,5,21,9
	.half	.L305-.L1369
	.byte	3,120,1,5,6,9
	.half	.L1623-.L305
	.byte	3,1,1,5,47,9
	.half	.L2087-.L1623
	.byte	1,5,26,9
	.half	.L1624-.L2087
	.byte	1,5,13,9
	.half	.L2088-.L1624
	.byte	1,4,4,5,78,9
	.half	.L306-.L2088
	.byte	3,243,0,1,4,5,5,41,9
	.half	.L1373-.L306
	.byte	3,63,1,5,75,9
	.half	.L2089-.L1373
	.byte	1,4,2,5,5,9
	.half	.L1379-.L2089
	.byte	3,211,126,1,5,21,7,9
	.half	.L1380-.L1379
	.byte	3,116,1,5,6,9
	.half	.L1625-.L1380
	.byte	3,1,1,5,36,9
	.half	.L2090-.L1625
	.byte	1,5,13,9
	.half	.L1626-.L2090
	.byte	1,5,53,9
	.half	.L1381-.L1626
	.byte	3,13,1,5,21,9
	.half	.L307-.L1381
	.byte	3,120,1,5,6,9
	.half	.L1627-.L307
	.byte	3,1,1,5,47,9
	.half	.L2091-.L1627
	.byte	1,5,26,9
	.half	.L1628-.L2091
	.byte	1,5,13,9
	.half	.L2092-.L1628
	.byte	1,4,1,5,86,9
	.half	.L309-.L2092
	.byte	3,168,4,1,5,38,9
	.half	.L298-.L309
	.byte	3,4,1,5,13,9
	.half	.L1604-.L298
	.byte	1,4,4,5,61,7,9
	.half	.L1385-.L1604
	.byte	3,216,124,1,5,73,9
	.half	.L2093-.L1385
	.byte	1,4,5,5,41,9
	.half	.L1389-.L2093
	.byte	3,11,1,4,2,5,5,9
	.half	.L1390-.L1389
	.byte	3,246,126,1,5,21,7,9
	.half	.L1391-.L1390
	.byte	3,116,1,5,6,9
	.half	.L1629-.L1391
	.byte	3,1,1,5,36,9
	.half	.L2094-.L1629
	.byte	1,5,13,9
	.half	.L1630-.L2094
	.byte	1,5,53,9
	.half	.L1392-.L1630
	.byte	3,13,1,5,21,9
	.half	.L312-.L1392
	.byte	3,120,1,5,6,9
	.half	.L1631-.L312
	.byte	3,1,1,5,47,9
	.half	.L2095-.L1631
	.byte	1,5,26,9
	.half	.L1632-.L2095
	.byte	1,5,13,9
	.half	.L2096-.L1632
	.byte	1,4,4,5,78,9
	.half	.L313-.L2096
	.byte	3,133,1,1,4,5,5,41,9
	.half	.L1395-.L313
	.byte	3,38,1,5,75,9
	.half	.L2097-.L1395
	.byte	1,4,2,5,5,9
	.half	.L1396-.L2097
	.byte	3,218,126,1,5,21,7,9
	.half	.L1397-.L1396
	.byte	3,116,1,5,6,9
	.half	.L1633-.L1397
	.byte	3,1,1,5,36,9
	.half	.L2098-.L1633
	.byte	1,5,13,9
	.half	.L1634-.L2098
	.byte	1,5,53,9
	.half	.L1398-.L1634
	.byte	3,13,1,5,21,9
	.half	.L314-.L1398
	.byte	3,120,1,5,6,9
	.half	.L1635-.L314
	.byte	3,1,1,5,47,9
	.half	.L2099-.L1635
	.byte	1,5,26,9
	.half	.L1636-.L2099
	.byte	1,5,13,9
	.half	.L2100-.L1636
	.byte	1,4,4,5,78,9
	.half	.L315-.L2100
	.byte	3,134,1,1,4,5,5,41,9
	.half	.L1401-.L315
	.byte	3,44,1,5,75,9
	.half	.L2101-.L1401
	.byte	1,4,2,5,5,9
	.half	.L1402-.L2101
	.byte	3,211,126,1,5,21,7,9
	.half	.L1403-.L1402
	.byte	3,116,1,5,6,9
	.half	.L1637-.L1403
	.byte	3,1,1,5,36,9
	.half	.L2102-.L1637
	.byte	1,5,13,9
	.half	.L1638-.L2102
	.byte	1,5,53,9
	.half	.L1404-.L1638
	.byte	3,13,1,5,21,9
	.half	.L316-.L1404
	.byte	3,120,1,5,6,9
	.half	.L1639-.L316
	.byte	3,1,1,5,47,9
	.half	.L2103-.L1639
	.byte	1,5,26,9
	.half	.L1640-.L2103
	.byte	1,5,13,9
	.half	.L2104-.L1640
	.byte	1,4,1,5,9,9
	.half	.L310-.L2104
	.byte	3,170,4,1,9
	.half	.L297-.L310
	.byte	3,12,1,4,4,5,35,9
	.half	.L319-.L297
	.byte	3,201,123,1,5,5,9
	.half	.L1641-.L319
	.byte	1,4,1,5,45,9
	.half	.L321-.L1641
	.byte	3,191,4,1,4,8,5,5,9
	.half	.L1407-.L321
	.byte	3,240,123,1,4,1,5,13,7,9
	.half	.L322-.L1407
	.byte	3,146,4,1,4,6,5,52,7,9
	.half	.L1413-.L322
	.byte	3,137,125,1,5,61,9
	.half	.L2105-.L1413
	.byte	1,5,69,9
	.half	.L2106-.L2105
	.byte	1,4,2,5,28,9
	.half	.L1417-.L2106
	.byte	3,200,126,1,5,47,9
	.half	.L2107-.L1417
	.byte	1,5,5,9
	.half	.L2108-.L2107
	.byte	1,5,73,9
	.half	.L325-.L2108
	.byte	3,4,1,5,5,9
	.half	.L2109-.L325
	.byte	1,4,6,5,4,9
	.half	.L326-.L2109
	.byte	3,180,1,1,4,1,5,28,9
	.half	.L327-.L326
	.byte	3,248,2,1,4,9,5,2,7,9
	.half	.L329-.L327
	.byte	3,222,124,1,4,10,5,4,9
	.half	.L330-.L329
	.byte	3,239,126,1,4,1,5,14,9
	.half	.L331-.L330
	.byte	3,180,4,1,5,9,7,9
	.half	.L2110-.L331
	.byte	3,6,1,4,4,5,35,9
	.half	.L324-.L2110
	.byte	3,183,123,1,5,5,9
	.half	.L2111-.L324
	.byte	1,4,1,9
	.half	.L334-.L2111
	.byte	3,210,4,1,5,9,7,9
	.half	.L2112-.L334
	.byte	3,3,1,4,11,5,5,7,9
	.half	.L1426-.L2112
	.byte	3,163,125,1,4,1,5,29,9
	.half	.L337-.L1426
	.byte	3,225,2,1,4,9,5,2,9
	.half	.L338-.L337
	.byte	3,199,124,1,4,10,5,4,9
	.half	.L339-.L338
	.byte	3,239,126,1,4,1,5,32,9
	.half	.L340-.L339
	.byte	3,201,4,1,5,62,7,9
	.half	.L2113-.L340
	.byte	3,1,1,5,33,9
	.half	.L1642-.L2113
	.byte	1,5,74,7,9
	.half	.L2114-.L1642
	.byte	1,5,29,7,9
	.half	.L341-.L2114
	.byte	1,4,6,5,52,9
	.half	.L342-.L341
	.byte	3,241,124,1,5,61,9
	.half	.L2115-.L342
	.byte	1,5,69,9
	.half	.L2116-.L2115
	.byte	1,4,2,5,28,9
	.half	.L1438-.L2116
	.byte	3,200,126,1,5,47,9
	.half	.L2117-.L1438
	.byte	1,5,5,9
	.half	.L2118-.L2117
	.byte	1,5,73,9
	.half	.L344-.L2118
	.byte	3,4,1,5,5,9
	.half	.L1643-.L344
	.byte	1,4,6,5,4,9
	.half	.L345-.L1643
	.byte	3,180,1,1,4,1,5,35,9
	.half	.L346-.L345
	.byte	3,145,3,1,5,25,9
	.half	.L1435-.L346
	.byte	1,5,39,7,9
	.half	.L1436-.L1435
	.byte	1,5,57,7,9
	.half	.L2119-.L1436
	.byte	1,5,35,7,9
	.half	.L347-.L2119
	.byte	1,5,40,9
	.half	.L348-.L347
	.byte	3,3,1,4,9,5,2,9
	.half	.L350-.L348
	.byte	3,169,123,1,4,1,5,83,9
	.half	.L351-.L350
	.byte	3,216,4,1,4,7,5,2,7,9
	.half	.L1443-.L351
	.byte	3,225,123,1,4,11,5,5,9
	.half	.L353-.L1443
	.byte	3,215,1,1,4,1,5,148,1,9
	.half	.L354-.L353
	.byte	3,200,2,1,5,13,7,9
	.half	.L352-.L354
	.byte	3,2,1,5,22,7,9
	.half	.L2120-.L352
	.byte	3,2,1,5,31,7,9
	.half	.L2121-.L2120
	.byte	3,2,1,5,35,9
	.half	.L1437-.L2121
	.byte	3,3,1,5,21,9
	.half	.L358-.L1437
	.byte	3,126,1,4,9,5,2,9
	.half	.L360-.L358
	.byte	3,186,124,1,4,1,5,19,9
	.half	.L359-.L360
	.byte	3,202,3,1,5,31,9
	.half	.L356-.L359
	.byte	3,8,1,5,15,9
	.half	.L362-.L356
	.byte	3,125,1,4,5,5,44,9
	.half	.L336-.L362
	.byte	3,225,123,1,4,2,5,28,9
	.half	.L1449-.L336
	.byte	3,66,1,5,47,9
	.half	.L1645-.L1449
	.byte	1,5,5,9
	.half	.L2122-.L1645
	.byte	1,5,73,9
	.half	.L365-.L2122
	.byte	3,4,1,5,5,9
	.half	.L2123-.L365
	.byte	1,4,5,9
	.half	.L366-.L2123
	.byte	3,58,1,4,1,5,18,9
	.half	.L367-.L366
	.byte	3,168,4,1,4,6,5,52,7,9
	.half	.L1448-.L367
	.byte	3,210,124,1,5,61,9
	.half	.L2124-.L1448
	.byte	1,5,69,9
	.half	.L2125-.L2124
	.byte	1,4,2,5,28,9
	.half	.L1451-.L2125
	.byte	3,200,126,1,5,47,9
	.half	.L2126-.L1451
	.byte	1,5,5,9
	.half	.L2127-.L2126
	.byte	1,5,73,9
	.half	.L369-.L2127
	.byte	3,4,1,5,5,9
	.half	.L2128-.L369
	.byte	1,4,6,5,4,9
	.half	.L370-.L2128
	.byte	3,180,1,1,4,1,5,17,9
	.half	.L371-.L370
	.byte	3,176,3,1,5,48,7,9
	.half	.L1450-.L371
	.byte	3,2,1,5,65,9
	.half	.L372-.L1450
	.byte	3,5,1,4,5,5,44,9
	.half	.L1452-.L372
	.byte	3,207,123,1,4,2,5,28,9
	.half	.L1454-.L1452
	.byte	3,66,1,5,47,9
	.half	.L2129-.L1454
	.byte	1,5,5,9
	.half	.L2130-.L2129
	.byte	1,5,73,9
	.half	.L373-.L2130
	.byte	3,4,1,5,5,9
	.half	.L2131-.L373
	.byte	1,4,5,9
	.half	.L374-.L2131
	.byte	3,58,1,4,1,5,36,9
	.half	.L375-.L374
	.byte	3,177,4,1,5,71,7,9
	.half	.L1453-.L375
	.byte	3,1,1,4,5,5,44,9
	.half	.L1455-.L1453
	.byte	3,255,123,1,4,2,5,28,9
	.half	.L1458-.L1455
	.byte	3,145,127,1,5,47,9
	.half	.L2132-.L1458
	.byte	1,5,5,9
	.half	.L2133-.L2132
	.byte	1,5,73,9
	.half	.L377-.L2133
	.byte	3,4,1,5,5,9
	.half	.L2134-.L377
	.byte	1,4,5,9
	.half	.L378-.L2134
	.byte	3,235,0,1,4,1,5,70,9
	.half	.L379-.L378
	.byte	3,129,4,1,5,69,7,9
	.half	.L1456-.L379
	.byte	3,1,1,4,5,5,44,9
	.half	.L1459-.L1456
	.byte	3,247,123,1,4,2,5,28,9
	.half	.L1461-.L1459
	.byte	3,152,127,1,5,47,9
	.half	.L2135-.L1461
	.byte	1,5,5,9
	.half	.L2136-.L2135
	.byte	1,5,73,9
	.half	.L381-.L2136
	.byte	3,4,1,5,5,9
	.half	.L2137-.L381
	.byte	1,4,5,9
	.half	.L382-.L2137
	.byte	3,228,0,1,4,1,5,68,9
	.half	.L383-.L382
	.byte	3,137,4,1,4,6,5,4,7,9
	.half	.L376-.L383
	.byte	3,225,125,1,4,1,5,42,9
	.half	.L385-.L376
	.byte	3,160,2,1,4,6,5,52,7,9
	.half	.L384-.L385
	.byte	3,77,1,5,61,9
	.half	.L2138-.L384
	.byte	1,5,69,9
	.half	.L2139-.L2138
	.byte	1,4,2,5,28,9
	.half	.L1462-.L2139
	.byte	3,193,123,1,5,47,9
	.half	.L2140-.L1462
	.byte	1,5,5,9
	.half	.L2141-.L2140
	.byte	1,5,73,9
	.half	.L387-.L2141
	.byte	3,4,1,5,5,9
	.half	.L2142-.L387
	.byte	1,4,6,5,4,9
	.half	.L388-.L2142
	.byte	3,187,4,1,4,1,5,69,9
	.half	.L389-.L388
	.byte	3,53,1,5,31,7,9
	.half	.L386-.L389
	.byte	3,3,1,4,11,5,5,9
	.half	.L335-.L386
	.byte	3,135,125,1,4,1,9
	.half	.L391-.L335
	.byte	3,137,3,1,5,13,7,9
	.half	.L2143-.L391
	.byte	3,2,1,4,12,5,5,7,9
	.half	.L1468-.L2143
	.byte	3,247,124,1,4,1,5,90,9
	.half	.L394-.L1468
	.byte	3,137,3,1,5,55,7,9
	.half	.L2144-.L394
	.byte	3,2,1,5,18,9
	.half	.L2145-.L2144
	.byte	1,5,44,7,9
	.half	.L2146-.L2145
	.byte	3,3,1,5,17,9
	.half	.L1650-.L2146
	.byte	3,1,1,5,59,7,9
	.half	.L2147-.L1650
	.byte	3,2,1,4,6,5,31,9
	.half	.L398-.L2147
	.byte	3,127,1,4,3,5,5,9
	.half	.L1478-.L398
	.byte	3,242,122,1,5,42,7,9
	.half	.L1482-.L1478
	.byte	3,100,1,5,43,9
	.half	.L1651-.L1482
	.byte	3,1,1,5,14,9
	.half	.L1652-.L1651
	.byte	3,2,1,5,26,9
	.half	.L2148-.L1652
	.byte	1,5,11,9
	.half	.L1654-.L2148
	.byte	3,2,1,5,25,9
	.half	.L1653-.L1654
	.byte	1,5,5,9
	.half	.L2149-.L1653
	.byte	3,1,1,5,49,9
	.half	.L400-.L2149
	.byte	3,23,1,5,42,9
	.half	.L399-.L400
	.byte	3,112,1,5,43,9
	.half	.L1655-.L399
	.byte	3,1,1,5,14,9
	.half	.L1657-.L1655
	.byte	3,2,1,5,26,9
	.half	.L2150-.L1657
	.byte	1,5,11,9
	.half	.L1659-.L2150
	.byte	3,2,1,5,37,9
	.half	.L1658-.L1659
	.byte	1,5,25,9
	.half	.L1660-.L1658
	.byte	1,5,5,9
	.half	.L2151-.L1660
	.byte	3,1,1,9
	.half	.L401-.L2151
	.byte	3,14,1,4,1,5,1,9
	.half	.L290-.L401
	.byte	3,144,5,1,7,9
	.half	.L601-.L290
	.byte	0,1,1
.L2042:
	.sdecl	'.debug_ranges',debug,cluster('Dem_EvtProcessPassedAndFailed')
	.sect	'.debug_ranges'
.L600:
	.word	-1,.L489,0,.L601-.L489,0,0
.L1300:
	.word	-1,.L489,.L1295-.L489,.L1296-.L489,.L281-.L489,.L1301-.L489,0,0
.L1434:
	.word	-1,.L489,.L342-.L489,.L346-.L489,.L1435-.L489,.L1436-.L489,.L1437-.L489,.L358-.L489,.L356-.L489,.L362-.L489
	.word	0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ErrorQueue_Handler')
	.sect	'.debug_info'
.L602:
	.word	185
	.half	3
	.word	.L603
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L503
	.byte	3
	.byte	'Dem_ErrorQueue_Handler',0,33,64,1
	.word	.L1499
	.byte	5,3
	.word	Dem_ErrorQueue_Handler
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ErrorQueue_Handler')
	.sect	'.debug_abbrev'
.L603:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ErrorQueue')
	.sect	'.debug_info'
.L604:
	.word	177
	.half	3
	.word	.L605
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L503
	.byte	3
	.byte	'Dem_ErrorQueue',0,33,64,1
	.word	.L1500
	.byte	5,3
	.word	Dem_ErrorQueue
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ErrorQueue')
	.sect	'.debug_abbrev'
.L605:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Dem_ErrorQueueControl')
	.sect	'.debug_info'
.L606:
	.word	184
	.half	3
	.word	.L607
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Dem\\src\\event\\Dem_EventFHandling.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L503
	.byte	3
	.byte	'Dem_ErrorQueueControl',0,33,66,34
	.word	.L1501
	.byte	5,3
	.word	Dem_ErrorQueueControl
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Dem_ErrorQueueControl')
	.sect	'.debug_abbrev'
.L607:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_AllowHistoryStatus')
	.sect	'.debug_loc'
.L499:
	.word	-1,.L500,0,.L807-.L500
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_EvtProcessPassedAndFailed')
	.sect	'.debug_loc'
.L488:
	.word	-1,.L489,0,.L1603-.L489
	.half	2
	.byte	138,0
	.word	.L1603-.L489,.L1252-.L489
	.half	2
	.byte	138,8
	.word	.L1252-.L489,.L1252-.L489
	.half	2
	.byte	138,0
	.word	0,0
.L1275:
	.word	0,0
.L1309:
	.word	0,0
.L1408:
	.word	0,0
.L1270:
	.word	0,0
.L1319:
	.word	0,0
.L1387:
	.word	0,0
.L1415:
	.word	0,0
.L1292:
	.word	0,0
.L1430:
	.word	0,0
.L1470:
	.word	0,0
.L1287:
	.word	0,0
.L1253:
	.word	-1,.L489,0,.L1604-.L489
	.half	1
	.byte	84
	.word	.L1605-.L489,.L1252-.L489
	.half	1
	.byte	92
	.word	.L297-.L489,.L319-.L489
	.half	1
	.byte	84
	.word	.L1644-.L489,.L350-.L489
	.half	1
	.byte	84
	.word	.L1646-.L489,.L372-.L489
	.half	1
	.byte	84
	.word	.L1649-.L489,.L1650-.L489
	.half	1
	.byte	84
	.word	0,0
.L1314:
	.word	0,0
.L1298:
	.word	0,0
.L1474:
	.word	0,0
.L1254:
	.word	-1,.L489,0,.L1604-.L489
	.half	1
	.byte	85
	.word	.L297-.L489,.L319-.L489
	.half	1
	.byte	85
	.word	0,0
.L1432:
	.word	0,0
.L1465:
	.word	0,0
.L1446:
	.word	0,0
.L1257:
	.word	0,0
.L1382:
	.word	-1,.L489,.L1625-.L489,.L1626-.L489
	.half	1
	.byte	95
	.word	0,0
.L1399:
	.word	-1,.L489,.L1633-.L489,.L1634-.L489
	.half	1
	.byte	95
	.word	0,0
.L1346:
	.word	-1,.L489,.L1613-.L489,.L1614-.L489
	.half	1
	.byte	95
	.word	0,0
.L1332:
	.word	-1,.L489,.L1609-.L489,.L1610-.L489
	.half	1
	.byte	95
	.word	0,0
.L1370:
	.word	-1,.L489,.L1621-.L489,.L1622-.L489
	.half	1
	.byte	95
	.word	0,0
.L1358:
	.word	-1,.L489,.L1617-.L489,.L1618-.L489
	.half	1
	.byte	95
	.word	0,0
.L1393:
	.word	-1,.L489,.L1629-.L489,.L1630-.L489
	.half	1
	.byte	95
	.word	0,0
.L1405:
	.word	-1,.L489,.L1637-.L489,.L1638-.L489
	.half	1
	.byte	95
	.word	0,0
.L1371:
	.word	-1,.L489,.L1623-.L489,.L1624-.L489
	.half	1
	.byte	95
	.word	0,0
.L1359:
	.word	-1,.L489,.L1619-.L489,.L1620-.L489
	.half	1
	.byte	95
	.word	0,0
.L1394:
	.word	-1,.L489,.L1631-.L489,.L1632-.L489
	.half	1
	.byte	95
	.word	0,0
.L1406:
	.word	-1,.L489,.L1639-.L489,.L1640-.L489
	.half	1
	.byte	95
	.word	0,0
.L1335:
	.word	-1,.L489,.L1611-.L489,.L1612-.L489
	.half	1
	.byte	95
	.word	0,0
.L1400:
	.word	-1,.L489,.L1635-.L489,.L1636-.L489
	.half	1
	.byte	95
	.word	0,0
.L1347:
	.word	-1,.L489,.L1615-.L489,.L1616-.L489
	.half	1
	.byte	95
	.word	0,0
.L1383:
	.word	-1,.L489,.L1627-.L489,.L1628-.L489
	.half	1
	.byte	95
	.word	0,0
.L1484:
	.word	0,0
.L1331:
	.word	0,0
.L1334:
	.word	0,0
.L1492:
	.word	0,0
.L1326:
	.word	0,0
.L1282:
	.word	0,0
.L1480:
	.word	0,0
.L1280:
	.word	0,0
.L1483:
	.word	0,0
.L1330:
	.word	0,0
.L1333:
	.word	0,0
.L1491:
	.word	0,0
.L1325:
	.word	0,0
.L1479:
	.word	0,0
.L1427:
	.word	0,0
.L1255:
	.word	-1,.L489,0,.L1604-.L489
	.half	1
	.byte	86
	.word	.L297-.L489,.L319-.L489
	.half	1
	.byte	86
	.word	.L1647-.L489,.L1648-.L489
	.half	1
	.byte	91
	.word	0,0
.L1256:
	.word	-1,.L489,0,.L1604-.L489
	.half	1
	.byte	87
	.word	.L297-.L489,.L319-.L489
	.half	1
	.byte	87
	.word	.L1647-.L489,.L1648-.L489
	.half	1
	.byte	90
	.word	0,0
.L1311:
	.word	0,0
.L1411:
	.word	0,0
.L1265:
	.word	-1,.L489,0,.L1252-.L489
	.half	2
	.byte	145,121
	.word	0,0
.L1486:
	.word	-1,.L489,.L1651-.L489,.L399-.L489
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1494:
	.word	-1,.L489,.L1655-.L489,.L1656-.L489
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1262:
	.word	-1,.L489,.L1608-.L489,.L1252-.L489
	.half	1
	.byte	89
	.word	0,0
.L1305:
	.word	0,0
.L1441:
	.word	0,0
.L1420:
	.word	0,0
.L1410:
	.word	0,0
.L1264:
	.word	-1,.L489,.L1641-.L489,.L1642-.L489
	.half	5
	.byte	144,32,157,32,0
	.word	.L336-.L489,.L1645-.L489
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1310:
	.word	0,0
.L1409:
	.word	0,0
.L1263:
	.word	-1,.L489,0,.L1252-.L489
	.half	2
	.byte	145,120
	.word	0,0
.L1488:
	.word	-1,.L489,.L1652-.L489,.L1653-.L489
	.half	1
	.byte	95
	.word	0,0
.L1496:
	.word	-1,.L489,.L1657-.L489,.L1658-.L489
	.half	1
	.byte	95
	.word	0,0
.L1490:
	.word	-1,.L489,.L1654-.L489,.L399-.L489
	.half	1
	.byte	81
	.word	0,0
.L1498:
	.word	-1,.L489,.L1659-.L489,.L1660-.L489
	.half	1
	.byte	81
	.word	0,0
.L1260:
	.word	-1,.L489,.L1435-.L489,.L350-.L489
	.half	1
	.byte	85
	.word	0,0
.L1259:
	.word	-1,.L489,.L1643-.L489,.L336-.L489
	.half	1
	.byte	93
	.word	0,0
.L1272:
	.word	0,0
.L1258:
	.word	-1,.L489,.L1606-.L489,.L1607-.L489
	.half	1
	.byte	88
	.word	.L336-.L489,.L335-.L489
	.half	1
	.byte	88
	.word	0,0
.L1277:
	.word	0,0
.L1283:
	.word	0,0
.L1460:
	.word	0,0
.L1457:
	.word	0,0
.L1322:
	.word	0,0
.L1339:
	.word	0,0
.L1351:
	.word	0,0
.L1363:
	.word	0,0
.L1375:
	.word	0,0
.L1476:
	.word	0,0
.L1323:
	.word	0,0
.L1341:
	.word	0,0
.L1353:
	.word	0,0
.L1365:
	.word	0,0
.L1377:
	.word	0,0
.L1424:
	.word	0,0
.L1261:
	.word	-1,.L489,.L338-.L489,.L336-.L489
	.half	1
	.byte	94
	.word	0,0
.L1281:
	.word	0,0
.L1279:
	.word	0,0
.L1327:
	.word	0,0
.L1481:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventAvailable')
	.sect	'.debug_loc'
.L797:
	.word	-1,.L495,0,.L795-.L495
	.half	1
	.byte	100
	.word	0,0
.L494:
	.word	-1,.L495,0,.L795-.L495
	.half	2
	.byte	138,0
	.word	0,0
.L801:
	.word	0,0
.L796:
	.word	-1,.L495,0,.L795-.L495
	.half	1
	.byte	84
	.word	0,0
.L806:
	.word	0,0
.L804:
	.word	0,0
.L799:
	.word	0,0
.L805:
	.word	0,0
.L803:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventFailed')
	.sect	'.debug_loc'
.L473:
	.word	-1,.L84,0,.L609-.L84
	.half	2
	.byte	138,0
	.word	0,0
.L613:
	.word	-1,.L84,.L86-.L84,.L1532-.L84
	.half	1
	.byte	100
	.word	.L93-.L84,.L1534-.L84
	.half	1
	.byte	100
	.word	.L101-.L84,.L1536-.L84
	.half	1
	.byte	100
	.word	.L104-.L84,.L91-.L84
	.half	1
	.byte	100
	.word	0,0
.L611:
	.word	-1,.L84,.L86-.L84,.L1533-.L84
	.half	1
	.byte	84
	.word	.L93-.L84,.L1535-.L84
	.half	1
	.byte	84
	.word	.L101-.L84,.L1537-.L84
	.half	1
	.byte	84
	.word	.L104-.L84,.L91-.L84
	.half	1
	.byte	84
	.word	0,0
.L642:
	.word	0,0
.L622:
	.word	0,0
.L635:
	.word	0,0
.L629:
	.word	0,0
.L617:
	.word	0,0
.L647:
	.word	0,0
.L633:
	.word	0,0
.L627:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventFailed_GeneralEvtInfo')
	.sect	'.debug_loc'
.L474:
	.word	-1,.L475,0,.L1176-.L475
	.half	2
	.byte	138,0
	.word	0,0
.L1178:
	.word	-1,.L475,0,.L1538-.L475
	.half	1
	.byte	100
	.word	0,0
.L1177:
	.word	-1,.L475,0,.L1538-.L475
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventFdcThresholdReached')
	.sect	'.debug_loc'
.L476:
	.word	-1,.L477,0,.L808-.L477
	.half	2
	.byte	138,0
	.word	0,0
.L809:
	.word	-1,.L477,0,.L808-.L477
	.half	1
	.byte	84
	.word	0,0
.L810:
	.word	-1,.L477,0,.L808-.L477
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetEventSuspicious')
	.sect	'.debug_loc'
.L490:
	.word	-1,.L491,0,.L811-.L491
	.half	2
	.byte	138,0
	.word	0,0
.L812:
	.word	-1,.L491,0,.L811-.L491
	.half	1
	.byte	84
	.word	0,0
.L813:
	.word	-1,.L491,0,.L811-.L491
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_GetHistoryStatus')
	.sect	'.debug_loc'
.L501:
	.word	-1,.L502,0,.L814-.L502
	.half	2
	.byte	138,0
	.word	0,0
.L815:
	.word	-1,.L502,0,.L814-.L502
	.half	1
	.byte	84
	.word	0,0
.L816:
	.word	-1,.L502,0,.L814-.L502
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_PreInitErrorQueue')
	.sect	'.debug_loc'
.L478:
	.word	-1,.L479,0,.L1251-.L479
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ReportErrorStatus')
	.sect	'.debug_loc'
.L469:
	.word	-1,.L470,0,.L817-.L470
	.half	2
	.byte	138,0
	.word	0,0
.L818:
	.word	-1,.L470,0,.L1503-.L470
	.half	1
	.byte	84
	.word	0,0
.L819:
	.word	-1,.L470,0,.L1503-.L470
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ReportErrorStatusDisableQueue')
	.sect	'.debug_loc'
.L480:
	.word	-1,.L481,0,.L1539-.L481
	.half	2
	.byte	138,0
	.word	.L1539-.L481,.L1179-.L481
	.half	2
	.byte	138,16
	.word	.L1179-.L481,.L1179-.L481
	.half	2
	.byte	138,0
	.word	0,0
.L1227:
	.word	0,0
.L1216:
	.word	0,0
.L1225:
	.word	0,0
.L1235:
	.word	0,0
.L1243:
	.word	0,0
.L1221:
	.word	0,0
.L1231:
	.word	0,0
.L1219:
	.word	0,0
.L1234:
	.word	0,0
.L1242:
	.word	0,0
.L1230:
	.word	0,0
.L1237:
	.word	-1,.L481,.L1543-.L481,.L139-.L481
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1245:
	.word	-1,.L481,.L1547-.L481,.L1548-.L481
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1183:
	.word	-1,.L481,.L1540-.L481,.L1179-.L481
	.half	1
	.byte	88
	.word	0,0
.L1197:
	.word	0,0
.L1222:
	.word	0,0
.L1239:
	.word	-1,.L481,.L1544-.L481,.L1545-.L481
	.half	1
	.byte	95
	.word	0,0
.L1247:
	.word	-1,.L481,.L1549-.L481,.L1550-.L481
	.half	1
	.byte	95
	.word	0,0
.L1241:
	.word	-1,.L481,.L1546-.L481,.L139-.L481
	.half	1
	.byte	81
	.word	0,0
.L1249:
	.word	-1,.L481,.L1551-.L481,.L1552-.L481
	.half	1
	.byte	81
	.word	0,0
.L1213:
	.word	0,0
.L1196:
	.word	0,0
.L1193:
	.word	0,0
.L1187:
	.word	0,0
.L1189:
	.word	0,0
.L1182:
	.word	-1,.L481,0,.L1179-.L481
	.half	2
	.byte	145,124
	.word	0,0
.L1201:
	.word	-1,.L481,.L1541-.L481,.L1542-.L481
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1204:
	.word	-1,.L481,.L1542-.L481,.L120-.L481
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1228:
	.word	0,0
.L1181:
	.word	-1,.L481,0,.L1179-.L481
	.half	2
	.byte	145,112
	.word	0,0
.L1220:
	.word	0,0
.L1218:
	.word	0,0
.L1232:
	.word	0,0
.L1209:
	.word	0,0
.L1211:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ReportErrorStatusEnableQueue')
	.sect	'.debug_loc'
.L482:
	.word	-1,.L483,0,.L1250-.L483
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ReportErrorStatusWithEnvData')
	.sect	'.debug_loc'
.L484:
	.word	-1,.L485,0,.L1553-.L485
	.half	2
	.byte	138,0
	.word	.L1553-.L485,.L820-.L485
	.half	2
	.byte	138,8
	.word	.L820-.L485,.L820-.L485
	.half	2
	.byte	138,0
	.word	0,0
.L853:
	.word	0,0
.L918:
	.word	0,0
.L907:
	.word	0,0
.L873:
	.word	0,0
.L868:
	.word	0,0
.L903:
	.word	0,0
.L926:
	.word	0,0
.L847:
	.word	0,0
.L821:
	.word	-1,.L485,0,.L1554-.L485
	.half	1
	.byte	84
	.word	.L1558-.L485,.L820-.L485
	.half	1
	.byte	88
	.word	.L151-.L485,.L1560-.L485
	.half	1
	.byte	84
	.word	.L155-.L485,.L1564-.L485
	.half	1
	.byte	84
	.word	.L166-.L485,.L1567-.L485
	.half	1
	.byte	84
	.word	.L859-.L485,.L1573-.L485
	.half	1
	.byte	84
	.word	.L1575-.L485,.L1574-.L485
	.half	1
	.byte	85
	.word	.L1582-.L485,.L149-.L485
	.half	1
	.byte	84
	.word	0,0
.L840:
	.word	0,0
.L832:
	.word	0,0
.L904:
	.word	0,0
.L928:
	.word	0,0
.L822:
	.word	-1,.L485,0,.L1555-.L485
	.half	1
	.byte	85
	.word	0,.L820-.L485
	.half	2
	.byte	145,120
	.word	.L151-.L485,.L1561-.L485
	.half	1
	.byte	85
	.word	.L155-.L485,.L1565-.L485
	.half	1
	.byte	85
	.word	.L166-.L485,.L1567-.L485
	.half	1
	.byte	85
	.word	0,0
.L895:
	.word	-1,.L485,.L1569-.L485,.L1570-.L485
	.half	1
	.byte	81
	.word	0,0
.L900:
	.word	-1,.L485,.L1571-.L485,.L1572-.L485
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L837:
	.word	0,0
.L835:
	.word	0,0
.L891:
	.word	0,0
.L954:
	.word	0,0
.L828:
	.word	-1,.L485,.L1581-.L485,.L202-.L485
	.half	1
	.byte	95
	.word	.L223-.L485,.L149-.L485
	.half	1
	.byte	95
	.word	0,0
.L830:
	.word	0,0
.L865:
	.word	0,0
.L920:
	.word	0,0
.L909:
	.word	0,0
.L827:
	.word	-1,.L485,.L1568-.L485,.L180-.L485
	.half	1
	.byte	82
	.word	.L1573-.L485,.L1574-.L485
	.half	1
	.byte	82
	.word	0,0
.L911:
	.word	0,0
.L930:
	.word	0,0
.L824:
	.word	-1,.L485,0,.L1556-.L485
	.half	1
	.byte	86
	.word	.L1559-.L485,.L820-.L485
	.half	1
	.byte	89
	.word	.L151-.L485,.L1562-.L485
	.half	1
	.byte	86
	.word	.L155-.L485,.L1566-.L485
	.half	1
	.byte	86
	.word	.L166-.L485,.L1567-.L485
	.half	1
	.byte	86
	.word	0,0
.L913:
	.word	0,0
.L932:
	.word	0,0
.L825:
	.word	-1,.L485,0,.L1557-.L485
	.half	1
	.byte	87
	.word	.L147-.L485,.L820-.L485
	.half	1
	.byte	90
	.word	.L151-.L485,.L1563-.L485
	.half	1
	.byte	87
	.word	.L155-.L485,.L1566-.L485
	.half	1
	.byte	87
	.word	.L166-.L485,.L1567-.L485
	.half	1
	.byte	87
	.word	0,0
.L843:
	.word	0,0
.L956:
	.word	0,0
.L862:
	.word	-1,.L485,.L182-.L485,.L179-.L485
	.half	1
	.byte	108
	.word	0,0
.L948:
	.word	0,0
.L877:
	.word	0,0
.L882:
	.word	0,0
.L842:
	.word	0,0
.L922:
	.word	0,0
.L915:
	.word	0,0
.L973:
	.word	0,0
.L936:
	.word	-1,.L485,.L1577-.L485,.L1576-.L485
	.half	1
	.byte	83
	.word	0,0
.L935:
	.word	-1,.L485,.L203-.L485,.L1576-.L485
	.half	1
	.byte	82
	.word	.L214-.L485,.L202-.L485
	.half	1
	.byte	82
	.word	0,0
.L934:
	.word	-1,.L485,0,.L820-.L485
	.half	2
	.byte	145,122
	.word	0,0
.L893:
	.word	0,0
.L864:
	.word	-1,.L485,.L880-.L485,.L179-.L485
	.half	1
	.byte	110
	.word	.L897-.L485,.L1573-.L485
	.half	1
	.byte	101
	.word	0,0
.L946:
	.word	0,0
.L977:
	.word	0,0
.L971:
	.word	0,0
.L941:
	.word	0,0
.L966:
	.word	0,0
.L960:
	.word	0,0
.L963:
	.word	-1,.L485,.L1579-.L485,.L206-.L485
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L981:
	.word	-1,.L485,.L1580-.L485,.L217-.L485
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L950:
	.word	-1,.L485,.L1578-.L485,.L207-.L485
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L855:
	.word	0,0
.L836:
	.word	0,0
.L834:
	.word	0,0
.L889:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_ResetEventStatus')
	.sect	'.debug_loc'
.L486:
	.word	-1,.L487,0,.L1583-.L487
	.half	2
	.byte	138,0
	.word	.L1583-.L487,.L651-.L487
	.half	2
	.byte	138,8
	.word	.L651-.L487,.L651-.L487
	.half	2
	.byte	138,0
	.word	0,0
.L668:
	.word	0,0
.L687:
	.word	0,0
.L780:
	.word	0,0
.L743:
	.word	0,0
.L737:
	.word	0,0
.L695:
	.word	0,0
.L652:
	.word	-1,.L487,0,.L1584-.L487
	.half	1
	.byte	84
	.word	.L232-.L487,.L1585-.L487
	.half	1
	.byte	84
	.word	.L239-.L487,.L229-.L487
	.half	1
	.byte	84
	.word	0,0
.L660:
	.word	0,0
.L739:
	.word	0,0
.L769:
	.word	-1,.L487,.L1598-.L487,.L1599-.L487
	.half	1
	.byte	95
	.word	0,0
.L776:
	.word	-1,.L487,.L1600-.L487,.L1601-.L487
	.half	1
	.byte	95
	.word	0,0
.L713:
	.word	0,0
.L767:
	.word	0,0
.L774:
	.word	0,0
.L725:
	.word	0,0
.L757:
	.word	0,0
.L665:
	.word	0,0
.L704:
	.word	0,0
.L663:
	.word	0,0
.L711:
	.word	0,0
.L765:
	.word	0,0
.L772:
	.word	0,0
.L723:
	.word	0,0
.L755:
	.word	0,0
.L702:
	.word	0,0
.L658:
	.word	0,0
.L691:
	.word	0,0
.L786:
	.word	0,0
.L656:
	.word	-1,.L487,0,.L651-.L487
	.half	2
	.byte	145,121
	.word	0,0
.L716:
	.word	-1,.L487,.L1588-.L487,.L257-.L487
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L728:
	.word	-1,.L487,.L1592-.L487,.L1593-.L487
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L681:
	.word	0,0
.L655:
	.word	-1,.L487,.L1586-.L487,.L1587-.L487
	.half	1
	.byte	95
	.word	0,0
.L677:
	.word	0,0
.L784:
	.word	0,0
.L654:
	.word	-1,.L487,.L1602-.L487,.L254-.L487
	.half	1
	.byte	95
	.word	0,0
.L689:
	.word	0,0
.L782:
	.word	0,0
.L653:
	.word	-1,.L487,0,.L651-.L487
	.half	2
	.byte	145,120
	.word	0,0
.L718:
	.word	-1,.L487,.L1589-.L487,.L1590-.L487
	.half	1
	.byte	95
	.word	0,0
.L730:
	.word	-1,.L487,.L1594-.L487,.L1595-.L487
	.half	1
	.byte	95
	.word	0,0
.L720:
	.word	-1,.L487,.L1591-.L487,.L257-.L487
	.half	1
	.byte	81
	.word	0,0
.L732:
	.word	-1,.L487,.L1596-.L487,.L1597-.L487
	.half	1
	.byte	81
	.word	0,0
.L672:
	.word	0,0
.L748:
	.word	0,0
.L697:
	.word	0,0
.L750:
	.word	0,0
.L664:
	.word	0,0
.L662:
	.word	0,0
.L759:
	.word	0,0
.L706:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetEventAvailable')
	.sect	'.debug_loc'
.L793:
	.word	-1,.L493,0,.L1661-.L493
	.half	1
	.byte	85
	.word	0,0
.L492:
	.word	-1,.L493,0,.L791-.L493
	.half	2
	.byte	138,0
	.word	0,0
.L792:
	.word	-1,.L493,0,.L1662-.L493
	.half	1
	.byte	84
	.word	0,0
.L794:
	.word	-1,.L493,.L1662-.L493,.L791-.L493
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetEventStatus')
	.sect	'.debug_loc'
.L467:
	.word	-1,.L468,0,.L788-.L468
	.half	2
	.byte	138,0
	.word	0,0
.L789:
	.word	-1,.L468,0,.L1502-.L468
	.half	1
	.byte	84
	.word	0,0
.L790:
	.word	-1,.L468,0,.L1502-.L468
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetEventStatusWithEnvData')
	.sect	'.debug_loc'
.L471:
	.word	-1,.L472,0,.L1504-.L472
	.half	2
	.byte	138,0
	.word	.L1504-.L472,.L982-.L472
	.half	2
	.byte	138,8
	.word	.L982-.L472,.L982-.L472
	.half	2
	.byte	138,0
	.word	0,0
.L1097:
	.word	0,0
.L1079:
	.word	-1,.L472,.L1531-.L472,.L63-.L472
	.half	1
	.byte	82
	.word	0,0
.L1010:
	.word	0,0
.L1073:
	.word	0,0
.L1042:
	.word	0,0
.L1048:
	.word	0,0
.L983:
	.word	-1,.L472,0,.L1505-.L472
	.half	1
	.byte	84
	.word	.L1509-.L472,.L982-.L472
	.half	1
	.byte	88
	.word	.L10-.L472,.L1511-.L472
	.half	1
	.byte	84
	.word	.L14-.L472,.L1515-.L472
	.half	1
	.byte	84
	.word	.L1516-.L472,.L1517-.L472
	.half	1
	.byte	84
	.word	.L1526-.L472,.L1527-.L472
	.half	1
	.byte	84
	.word	.L1529-.L472,.L1528-.L472
	.half	1
	.byte	85
	.word	.L1530-.L472,.L62-.L472
	.half	1
	.byte	84
	.word	0,0
.L1037:
	.word	0,0
.L1017:
	.word	0,0
.L1015:
	.word	0,0
.L1035:
	.word	0,0
.L992:
	.word	0,0
.L984:
	.word	-1,.L472,0,.L1506-.L472
	.half	1
	.byte	85
	.word	0,.L982-.L472
	.half	2
	.byte	145,120
	.word	.L10-.L472,.L1512-.L472
	.half	1
	.byte	85
	.word	.L14-.L472,.L1515-.L472
	.half	1
	.byte	85
	.word	0,0
.L1036:
	.word	0,0
.L1075:
	.word	0,0
.L1091:
	.word	0,0
.L1099:
	.word	0,0
.L1006:
	.word	0,0
.L1077:
	.word	0,0
.L1032:
	.word	-1,.L472,.L1524-.L472,.L1525-.L472
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1027:
	.word	-1,.L472,.L1522-.L472,.L1523-.L472
	.half	1
	.byte	81
	.word	0,0
.L997:
	.word	0,0
.L1068:
	.word	0,0
.L995:
	.word	0,0
.L1062:
	.word	0,0
.L1025:
	.word	0,0
.L990:
	.word	0,0
.L988:
	.word	-1,.L472,.L1517-.L472,.L1518-.L472
	.half	1
	.byte	82
	.word	.L27-.L472,.L1519-.L472
	.half	1
	.byte	82
	.word	.L32-.L472,.L1520-.L472
	.half	1
	.byte	82
	.word	.L41-.L472,.L1521-.L472
	.half	1
	.byte	82
	.word	0,0
.L1014:
	.word	0,0
.L1043:
	.word	0,0
.L987:
	.word	-1,.L472,.L1520-.L472,.L41-.L472
	.half	1
	.byte	82
	.word	.L1527-.L472,.L1528-.L472
	.half	1
	.byte	82
	.word	0,0
.L1038:
	.word	0,0
.L985:
	.word	-1,.L472,0,.L1507-.L472
	.half	1
	.byte	86
	.word	.L1510-.L472,.L982-.L472
	.half	1
	.byte	89
	.word	.L10-.L472,.L1513-.L472
	.half	1
	.byte	86
	.word	.L14-.L472,.L1515-.L472
	.half	1
	.byte	86
	.word	0,0
.L1039:
	.word	0,0
.L986:
	.word	-1,.L472,0,.L1508-.L472
	.half	1
	.byte	87
	.word	.L5-.L472,.L982-.L472
	.half	1
	.byte	90
	.word	.L10-.L472,.L1514-.L472
	.half	1
	.byte	87
	.word	.L14-.L472,.L1515-.L472
	.half	1
	.byte	87
	.word	0,0
.L1040:
	.word	0,0
.L1012:
	.word	-1,.L472,.L43-.L472,.L40-.L472
	.half	1
	.byte	108
	.word	0,0
.L1104:
	.word	0,0
.L1087:
	.word	0,0
.L1082:
	.word	0,0
.L1055:
	.word	0,0
.L1000:
	.word	0,0
.L1018:
	.word	0,0
.L1020:
	.word	0,0
.L1044:
	.word	0,0
.L1041:
	.word	0,0
.L1026:
	.word	0,0
.L1013:
	.word	-1,.L472,.L1019-.L472,.L40-.L472
	.half	1
	.byte	110
	.word	.L1029-.L472,.L1527-.L472
	.half	1
	.byte	101
	.word	0,0
.L1011:
	.word	0,0
.L996:
	.word	0,0
.L1066:
	.word	0,0
.L994:
	.word	0,0
.L1060:
	.word	0,0
.L1024:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetEventSuppression')
	.sect	'.debug_loc'
.L496:
	.word	-1,.L417,0,.L1109-.L417
	.half	2
	.byte	138,0
	.word	0,0
.L1116:
	.word	0,0
.L1110:
	.word	-1,.L417,.L419-.L417,.L1663-.L417
	.half	1
	.byte	84
	.word	.L423-.L417,.L1665-.L417
	.half	1
	.byte	84
	.word	.L427-.L417,.L1667-.L417
	.half	1
	.byte	84
	.word	0,0
.L1111:
	.word	-1,.L417,.L419-.L417,.L1664-.L417
	.half	1
	.byte	85
	.word	.L423-.L417,.L1666-.L417
	.half	1
	.byte	85
	.word	.L427-.L417,.L1667-.L417
	.half	1
	.byte	85
	.word	0,0
.L1123:
	.word	0,0
.L1121:
	.word	0,0
.L1115:
	.word	0,0
.L1113:
	.word	-1,.L417,.L1668-.L417,.L1669-.L417
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L1112:
	.word	-1,.L417,.L1670-.L417,.L445-.L417
	.half	1
	.byte	82
	.word	.L446-.L417,.L421-.L417
	.half	1
	.byte	82
	.word	0,0
.L1118:
	.word	0,0
.L1127:
	.word	0,0
.L1133:
	.word	0,0
.L1138:
	.word	0,0
.L1122:
	.word	0,0
.L1120:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Dem_SetEventSuppressionByDTC')
	.sect	'.debug_loc'
.L1142:
	.word	-1,.L498,0,.L1672-.L498
	.half	1
	.byte	84
	.word	.L448-.L498,.L449-.L498
	.half	1
	.byte	84
	.word	0,0
.L1143:
	.word	-1,.L498,0,.L1672-.L498
	.half	1
	.byte	85
	.word	.L448-.L498,.L449-.L498
	.half	1
	.byte	85
	.word	0,0
.L497:
	.word	-1,.L498,0,.L1671-.L498
	.half	2
	.byte	138,0
	.word	.L1671-.L498,.L1141-.L498
	.half	2
	.byte	138,8
	.word	.L1141-.L498,.L1141-.L498
	.half	2
	.byte	138,0
	.word	0,0
.L1144:
	.word	-1,.L498,0,.L1672-.L498
	.half	1
	.byte	86
	.word	.L1673-.L498,.L1141-.L498
	.half	1
	.byte	90
	.word	.L448-.L498,.L449-.L498
	.half	1
	.byte	86
	.word	.L1677-.L498,.L1678-.L498
	.half	1
	.byte	85
	.word	0,0
.L1149:
	.word	-1,.L498,.L1672-.L498,.L448-.L498
	.half	1
	.byte	82
	.word	.L1674-.L498,.L448-.L498
	.half	1
	.byte	88
	.word	.L449-.L498,.L1675-.L498
	.half	1
	.byte	82
	.word	.L449-.L498,.L450-.L498
	.half	1
	.byte	88
	.word	.L454-.L498,.L459-.L498
	.half	1
	.byte	82
	.word	0,0
.L1158:
	.word	0,0
.L1147:
	.word	0,0
.L1146:
	.word	-1,.L498,0,.L1141-.L498
	.half	2
	.byte	145,120
	.word	0,0
.L1151:
	.word	0,0
.L1156:
	.word	0,0
.L1174:
	.word	0,0
.L1169:
	.word	0,0
.L1164:
	.word	0,0
.L1148:
	.word	-1,.L498,.L1676-.L498,.L450-.L498
	.half	1
	.byte	89
	.word	.L1679-.L498,.L450-.L498
	.half	1
	.byte	82
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L2152:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Dem_SetEventStatus')
	.sect	'.debug_frame'
	.word	12
	.word	.L2152,.L468,.L788-.L468
	.sdecl	'.debug_frame',debug,cluster('Dem_ReportErrorStatus')
	.sect	'.debug_frame'
	.word	12
	.word	.L2152,.L470,.L817-.L470
	.sdecl	'.debug_frame',debug,cluster('Dem_SetEventStatusWithEnvData')
	.sect	'.debug_frame'
	.word	36
	.word	.L2152,.L472,.L982-.L472
	.byte	4
	.word	(.L1504-.L472)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L982-.L1504)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventFailed')
	.sect	'.debug_frame'
	.word	12
	.word	.L2152,.L84,.L609-.L84
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventFailed_GeneralEvtInfo')
	.sect	'.debug_frame'
	.word	12
	.word	.L2152,.L475,.L1176-.L475
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventFdcThresholdReached')
	.sect	'.debug_frame'
	.word	24
	.word	.L2152,.L477,.L808-.L477
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_PreInitErrorQueue')
	.sect	'.debug_frame'
	.word	24
	.word	.L2152,.L479,.L1251-.L479
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_ReportErrorStatusDisableQueue')
	.sect	'.debug_frame'
	.word	36
	.word	.L2152,.L481,.L1179-.L481
	.byte	4
	.word	(.L1539-.L481)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L1179-.L1539)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_ReportErrorStatusEnableQueue')
	.sect	'.debug_frame'
	.word	24
	.word	.L2152,.L483,.L1250-.L483
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_ReportErrorStatusWithEnvData')
	.sect	'.debug_frame'
	.word	36
	.word	.L2152,.L485,.L820-.L485
	.byte	4
	.word	(.L1553-.L485)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L820-.L1553)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_ResetEventStatus')
	.sect	'.debug_frame'
	.word	36
	.word	.L2152,.L487,.L651-.L487
	.byte	4
	.word	(.L1583-.L487)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L651-.L1583)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_EvtProcessPassedAndFailed')
	.sect	'.debug_frame'
	.word	36
	.word	.L2152,.L489,.L1252-.L489
	.byte	4
	.word	(.L1603-.L489)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L1252-.L1603)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventSuspicious')
	.sect	'.debug_frame'
	.word	24
	.word	.L2152,.L491,.L811-.L491
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_SetEventAvailable')
	.sect	'.debug_frame'
	.word	12
	.word	.L2152,.L493,.L791-.L493
	.sdecl	'.debug_frame',debug,cluster('Dem_GetEventAvailable')
	.sect	'.debug_frame'
	.word	24
	.word	.L2152,.L495,.L795-.L495
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_SetEventSuppression')
	.sect	'.debug_frame'
	.word	12
	.word	.L2152,.L417,.L1109-.L417
	.sdecl	'.debug_frame',debug,cluster('Dem_SetEventSuppressionByDTC')
	.sect	'.debug_frame'
	.word	36
	.word	.L2152,.L498,.L1141-.L498
	.byte	4
	.word	(.L1671-.L498)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L1141-.L1671)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Dem_AllowHistoryStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L2152,.L500,.L807-.L500
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Dem_GetHistoryStatus')
	.sect	'.debug_frame'
	.word	24
	.word	.L2152,.L502,.L814-.L502
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   938  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   939  /* Enabled if Test Mode reporting is enabled */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   940  #if (DEM_CFG_TESTMODE_SUPPORT == DEM_CFG_TESTMODE_SUPPORT_ON)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   941  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   942  /*  API for Test Mode reporting and setting Event status by application */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   943  Std_ReturnType  Dem_SetEventStatus_TestMode (Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   944  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   945      Dem_EncodeTestModeEventId(&EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   946      return (Dem_SetEventStatusWithEnvData(EventId, EventStatus, 0, 0));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   947  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   948  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   949  /* API for Test Mode reporting and setting Event status by application */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   950  Std_ReturnType Dem_SetEventStatusWithEnvData_TestMode (Dem_EventIdType EventId, Dem_EventStatusType EventStatus, Dem_DebugDataType debug0, Dem_DebugDataType debug1)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   951  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   952      Dem_EncodeTestModeEventId(&EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   953      return (Dem_SetEventStatusWithEnvData(EventId, EventStatus, debug0, debug1));
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   954  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   955  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   956  /* API for Test Mode reporting to Report Error status by application */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   957  void Dem_ReportErrorStatus_TestMode( Dem_EventIdType EventId, Dem_EventStatusType EventStatus )
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   958  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   959      Dem_EncodeTestModeEventId(&EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   960      Dem_ReportErrorStatusWithEnvData (EventId, EventStatus, 0, 0);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   961      return;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   962  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   963  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   964  /* API for Test Mode reporting to Report Error status by application */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   965  void Dem_ReportErrorStatusWithEnvData_TestMode(Dem_EventIdType EventId, Dem_EventStatusType EventStatus, Dem_DebugDataType debug0, Dem_DebugDataType debug1)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   966  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   967      Dem_EncodeTestModeEventId(&EventId);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   968      Dem_ReportErrorStatusWithEnvData(EventId,EventStatus,debug0,debug1);
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   969      return;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   970  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   971  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   972  /* API which allows activate or deactivate Test Mode Reporting */
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   973  void Dem_EnableTestMode (boolean TestModeStatus)
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   974  {
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   975      Dem_TestModeActive = TestModeStatus;
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   976  }
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   977  #endif
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   978  
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   979  #define DEM_STOP_SEC_ROM_CODE
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   980  #include "Dem_Cfg_MemMap.h"
; BSW\src\BSW\Gen\Dem\src\event\Dem_EventFHandling.c	   981  

	; Module end
