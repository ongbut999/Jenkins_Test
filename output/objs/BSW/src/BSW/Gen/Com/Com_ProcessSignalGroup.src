	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc7276a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Com\\Com_ProcessSignalGroup.src BSW\\src\\BSW\\Gen\\Com\\src\\Com_ProcessSignalGroup.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_ProcessSignalGroup.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	13342
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_ProcessSignalGroup.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'unsigned char',0,1,8,2
	.byte	'unsigned short int',0,2,7,3
	.byte	'Bfx_Prv_GetBit_u16u8_u8_Inl',0,3,1,207,2,22
	.word	148
	.byte	1,1,4
	.byte	'Data',0,1,207,2,57
	.word	165
	.byte	4
	.byte	'BitPn',0,1,207,2,69
	.word	148
	.byte	5,0,2
	.byte	'unsigned int',0,4,7,3
	.byte	'Bfx_Prv_GetBit_u32u8_u8_Inl',0,3,1,227,2,22
	.word	148
	.byte	1,1,4
	.byte	'Data',0,1,227,2,57
	.word	258
	.byte	4
	.byte	'BitPn',0,1,227,2,69
	.word	148
	.byte	5,0,3
	.byte	'Bfx_Prv_GetBit_u8u8_u8_Inl',0,3,1,247,2,22
	.word	148
	.byte	1,1,4
	.byte	'Data',0,1,247,2,55
	.word	148
	.byte	4
	.byte	'BitPn',0,1,247,2,67
	.word	148
	.byte	5,0,3
	.byte	'Bfx_Prv_GetBits_u8u8u8_u8_Inl',0,3,1,179,3,20
	.word	148
	.byte	1,1,4
	.byte	'Data',0,1,179,3,56
	.word	148
	.byte	4
	.byte	'BitStartPn',0,1,179,3,68
	.word	148
	.byte	4
	.byte	'BitLn',0,1,179,3,86
	.word	148
	.byte	5,0,6
	.word	165
	.byte	7
	.byte	'Bfx_Prv_PutBit_u16u8u8_Inl',0,3,1,200,3,19,1,1,4
	.byte	'Data',0,1,200,3,54
	.word	508
	.byte	4
	.byte	'BitPn',0,1,200,3,66
	.word	148
	.byte	4
	.byte	'Value',0,1,200,3,81
	.word	148
	.byte	5,0,6
	.word	258
	.byte	7
	.byte	'Bfx_Prv_PutBit_u32u8u8_Inl',0,3,1,224,3,19,1,1,4
	.byte	'Data',0,1,224,3,54
	.word	594
	.byte	4
	.byte	'BitPn',0,1,224,3,66
	.word	148
	.byte	4
	.byte	'Value',0,1,224,3,81
	.word	148
	.byte	5,0,6
	.word	148
	.byte	7
	.byte	'Bfx_Prv_PutBit_u8u8u8_Inl',0,3,1,248,3,19,1,1,4
	.byte	'Data',0,1,248,3,52
	.word	680
	.byte	4
	.byte	'BitPn',0,1,248,3,64
	.word	148
	.byte	4
	.byte	'Value',0,1,248,3,79
	.word	148
	.byte	5,0,3
	.byte	'Bfx_Prv_TstParityEven_u32_u8_Inl',0,3,1,143,10,22
	.word	148
	.byte	1,1,4
	.byte	'Data',0,1,143,10,62
	.word	258
	.byte	5,0,8
	.word	187
	.byte	9
	.word	227
	.byte	9
	.word	241
	.byte	5,0,8
	.word	274
	.byte	9
	.word	314
	.byte	9
	.word	328
	.byte	5,0,8
	.word	345
	.byte	9
	.word	384
	.byte	9
	.word	398
	.byte	5,0,8
	.word	415
	.byte	9
	.word	457
	.byte	9
	.word	471
	.byte	9
	.word	491
	.byte	5,0,8
	.word	513
	.byte	9
	.word	548
	.byte	9
	.word	562
	.byte	9
	.word	577
	.byte	5,0,8
	.word	599
	.byte	9
	.word	634
	.byte	9
	.word	648
	.byte	9
	.word	663
	.byte	5,0,8
	.word	685
	.byte	9
	.word	719
	.byte	9
	.word	733
	.byte	9
	.word	748
	.byte	5,0,8
	.word	765
	.byte	9
	.word	810
	.byte	5,0,10,1,6
	.word	977
	.byte	11
	.byte	'__codeptr',0,2,1,1
	.word	979
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,3,76,25
	.word	1002
	.byte	11
	.byte	'uint8',0,3,81,25
	.word	148
	.byte	11
	.byte	'uint16',0,3,91,25
	.word	165
	.byte	11
	.byte	'uint32',0,3,106,24
	.word	258
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,3,111,30
	.word	1068
	.byte	11
	.byte	'boolean',0,3,127,25
	.word	148
	.byte	11
	.byte	'StatusType',0,4,191,1,27
	.word	148
	.byte	11
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	148
	.byte	12,4,206,1,9,8,13
	.byte	'vendorID',0
	.word	165
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	165
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	148
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	148
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	148
	.byte	1,2,35,6,0,11
	.byte	'Std_VersionInfoType',0,4,213,1,3
	.word	1169
	.byte	11
	.byte	'PduIdType',0,5,22,19
	.word	165
	.byte	11
	.byte	'PduLengthType',0,5,26,19
	.word	165
	.byte	14,6,113,9,4,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,11
	.byte	'TpDataStateType',0,6,118,3
	.word	1359
	.byte	11
	.byte	'Com_SignalIdType',0,7,100,16
	.word	165
	.byte	11
	.byte	'Com_SignalGroupIdType',0,7,102,16
	.word	165
	.byte	11
	.byte	'Com_IpduIdType',0,7,104,15
	.word	148
	.byte	11
	.byte	'Com_GrpSignalIdType',0,7,107,18
	.word	148
	.byte	11
	.byte	'Com_TxIntSignalIdType',0,8,138,3,18
	.word	148
	.byte	11
	.byte	'Com_RxIntSignalIdType',0,8,139,3,18
	.word	148
	.byte	11
	.byte	'Com_BitsizeType',0,8,155,3,17
	.word	148
	.byte	11
	.byte	'Com_BitpositionType',0,8,156,3,15
	.word	148
	.byte	11
	.byte	'Com_RxGwQueueIndexType',0,8,161,3,15
	.word	148
	.byte	11
	.byte	'Com_SigBuffIndexType',0,8,164,3,15
	.word	148
	.byte	11
	.byte	'Com_SigMaxType',0,8,198,3,16
	.word	258
	.byte	11
	.byte	'Com_MainFuncType',0,8,231,3,16
	.word	148
	.byte	11
	.byte	'Com_NumOfIpdusType',0,8,233,3,15
	.word	148
	.byte	11
	.byte	'Com_TimeBaseType',0,8,235,3,15
	.word	148
	.byte	11
	.byte	'Can_IdType',0,9,32,16
	.word	258
	.byte	11
	.byte	'Can_HwHandleType',0,9,43,16
	.word	165
	.byte	12,10,93,9,8,13
	.byte	'Class',0
	.word	148
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	148
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	258
	.byte	4,2,35,4,0,11
	.byte	'OsTrapInfoType',0,10,97,3
	.word	1867
	.byte	16,68
	.word	258
	.byte	17,16,0,12,10,154,1,9,68,13
	.byte	'store',0
	.word	1947
	.byte	68,2,35,0,0,16,68
	.word	1956
	.byte	17,0,0,11
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	1978
	.byte	11
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	258
	.byte	12,10,175,1,9,8,13
	.byte	'sp',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	258
	.byte	4,2,35,4,0,11
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	2038
	.byte	11
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	2038
	.byte	18,1,1,6
	.word	2123
	.byte	11
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	2126
	.byte	11
	.byte	'ApplicationType',0,10,193,1,23
	.word	148
	.byte	19
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,13
	.byte	'app_id',0
	.word	148
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	148
	.byte	1,2,35,1,0,11
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	2189
	.byte	11
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	258
	.byte	11
	.byte	'AreaIdType',0,10,204,1,16
	.word	165
	.byte	11
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	258
	.byte	11
	.byte	'TickType',0,10,221,1,22
	.word	258
	.byte	11
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	258
	.byte	11
	.byte	'Os_Lockable',0,10,234,1,18
	.word	594
	.byte	11
	.byte	'CoreIdType',0,10,236,1,16
	.word	165
	.byte	11
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	165
	.byte	14,10,239,1,9,4,15
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,15
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,11
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	2496
	.byte	14,10,174,2,9,4,15
	.byte	'APPLICATION_ACCESSIBLE',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	2589
	.byte	20
	.byte	'void',0,6
	.word	2701
	.byte	21,1,1,22
	.word	148
	.byte	22
	.word	2707
	.byte	0,6
	.word	2712
	.byte	11
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	2726
	.byte	19
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,13
	.byte	'elapsed',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	258
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	258
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	258
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	2038
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	2038
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	2038
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	2038
	.byte	8,2,35,40,0,11
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	2761
	.byte	6
	.word	2761
	.byte	11
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	2959
	.byte	11
	.byte	'EventMaskType',0,10,206,2,15
	.word	148
	.byte	11
	.byte	'Os_imaskType',0,10,211,2,16
	.word	258
	.byte	19
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,13
	.byte	'meter',0
	.word	2761
	.byte	48,2,35,0,0,11
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	3038
	.byte	6
	.word	3038
	.byte	23
	.word	3099
	.byte	19
	.byte	'Os_ISRType_s',0,10,216,2,16,24,13
	.byte	'entry_function',0
	.word	2131
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	3104
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	258
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	2038
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	148
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	148
	.byte	1,2,35,21,0,11
	.byte	'Os_ISRType',0,10,223,2,3
	.word	3109
	.byte	6
	.word	2123
	.byte	23
	.word	3109
	.byte	6
	.word	3268
	.byte	11
	.byte	'ISRType',0,10,224,2,46
	.word	3273
	.byte	11
	.byte	'Os_bitmask',0,10,239,2,22
	.word	258
	.byte	11
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	258
	.byte	11
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	258
	.byte	11
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	258
	.byte	24,10,243,2,9,4,13
	.byte	'p0',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	258
	.byte	4,2,35,0,0,11
	.byte	'Os_psetType',0,10,247,2,3
	.word	3381
	.byte	24,10,249,2,9,4,13
	.byte	't0',0
	.word	258
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	258
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	258
	.byte	4,2,35,0,0,11
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	3445
	.byte	11
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	148
	.byte	19
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	1987
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	2761
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	148
	.byte	1,2,35,116,0,11
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	3543
	.byte	16,68
	.word	1956
	.byte	17,0,0,6
	.word	3543
	.byte	23
	.word	3669
	.byte	19
	.byte	'Os_TaskType_s',0,10,134,3,16,40,13
	.byte	'dynamic',0
	.word	3674
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	2131
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	3381
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	3445
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	3445
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	165
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	258
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	2038
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	148
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	148
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	148
	.byte	1,2,35,38,0,11
	.byte	'Os_TaskType',0,10,146,3,3
	.word	3679
	.byte	23
	.word	3679
	.byte	6
	.word	3929
	.byte	11
	.byte	'TaskType',0,10,147,3,47
	.word	3934
	.byte	25
	.byte	'Os_TaskStateType',0,10,155,3,6,4,15
	.byte	'SUSPENDED',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'RUNNING',0,3,0,11
	.byte	'TaskStateType',0,10,156,3,31
	.word	3957
	.byte	24,10,167,3,3,4,13
	.byte	'tpmask',0
	.word	3445
	.byte	4,2,35,0,0,19
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,13
	.byte	'saved_priority',0
	.word	4044
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	4067
	.byte	6
	.word	4067
	.byte	23
	.word	4147
	.byte	19
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,13
	.byte	'dynamic',0
	.word	4152
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	3445
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	148
	.byte	1,2,35,8,0,11
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	4157
	.byte	12,10,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	258
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	258
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	4256
	.byte	12,10,206,3,9,8,13
	.byte	'Running',0
	.word	148
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	148
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	258
	.byte	4,2,35,4,0,11
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	4351
	.byte	26
	.word	148
	.byte	1,1,6
	.word	4437
	.byte	11
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	4444
	.byte	19
	.byte	's_swd',0,10,222,3,12,4,13
	.byte	'count',0
	.word	258
	.byte	4,2,35,0,0,24,10,221,3,3,4,13
	.byte	'sw',0
	.word	4480
	.byte	4,2,35,0,0,19
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,13
	.byte	'type_dependent',0
	.word	4508
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	4527
	.byte	6
	.word	4527
	.byte	23
	.word	4605
	.byte	19
	.byte	'Os_CounterType_s',0,10,227,3,16,28,13
	.byte	'dynamic',0
	.word	4610
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	4449
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	4256
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	2707
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	148
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	148
	.byte	1,2,35,25,0,11
	.byte	'Os_CounterType',0,10,234,3,3
	.word	4615
	.byte	6
	.word	4437
	.byte	23
	.word	4615
	.byte	6
	.word	4767
	.byte	11
	.byte	'CounterType',0,10,235,3,52
	.word	4772
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	4798
	.byte	23
	.word	.L6-.L3
	.byte	6
	.word	4998
	.byte	11
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	5003
	.byte	19
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,13
	.byte	'match',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	5008
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	4798
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	165
	.byte	2,2,35,12,0,6
	.word	5035
	.byte	23
	.word	5128
.L6:
	.byte	19
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,13
	.byte	'dynamic',0
	.word	5133
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	4777
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	148
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	165
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	148
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	148
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	148
	.byte	1,2,35,14,0,11
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	5138
	.byte	23
	.word	5138
	.byte	6
	.word	5318
	.byte	23
	.word	4615
	.byte	6
	.word	5328
	.byte	27
	.word	2431
	.byte	27
	.word	3381
	.byte	27
	.word	3278
	.byte	27
	.word	3939
	.byte	27
	.word	3445
	.byte	27
	.word	148
	.byte	27
	.word	3939
	.byte	19
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	1867
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	5338
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	5343
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	5348
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	5353
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	5358
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	2964
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	2761
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	148
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	5363
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	2038
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	148
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	5368
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	2038
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	148
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	148
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	148
	.byte	1,2,35,110,0,11
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	5373
	.byte	6
	.word	258
	.byte	23
	.word	3109
	.byte	6
	.word	5829
	.byte	23
	.word	3679
	.byte	6
	.word	5839
	.byte	6
	.word	2761
	.byte	19
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	258
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	258
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	258
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	258
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	258
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	1987
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	148
	.byte	1,2,35,92,0,11
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	5854
	.byte	11
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	258
	.byte	19
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	148
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	148
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	258
	.byte	4,2,35,4,0,11
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	6131
	.byte	19
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,13
	.byte	'MaskRef',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	258
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	148
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	148
	.byte	1,2,35,9,0,11
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6267
	.byte	16,4
	.word	148
	.byte	17,3,0,19
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	6407
	.byte	4,2,35,0,0,11
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6416
	.byte	19
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	165
	.byte	2,2,35,0,0,11
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6517
	.byte	19
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	165
	.byte	2,2,35,4,0,11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6592
	.byte	23
	.word	6592
	.byte	6
	.word	6757
	.byte	19
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6762
	.byte	4,2,35,0,0,11
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	6767
	.byte	19
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,13
	.byte	'CanEventType',0
	.word	6407
	.byte	4,2,35,0,0,11
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	6867
	.byte	11
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	148
	.byte	11
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	148
	.byte	12,12,168,1,9,12,13
	.byte	'in',0
	.word	2707
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	2707
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	165
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	148
	.byte	1,2,35,10,0,11
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	7013
	.byte	14,12,175,1,9,4,15
	.byte	'RTE_DRA',0,0,15
	.byte	'RTE_WOWP',0,1,15
	.byte	'RTE_TASK',0,2,15
	.byte	'RTE_ARE',0,3,15
	.byte	'RTE_EV',0,4,15
	.byte	'RTE_MSI',0,5,0,11
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	7100
	.byte	6
	.word	7013
	.byte	19
	.byte	'Rte_QCmnType',0,12,184,1,16,24,13
	.byte	'dynamic',0
	.word	7198
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	148
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	165
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	165
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	2707
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	2707
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	7100
	.byte	4,2,35,20,0,11
	.byte	'Rte_QCmnType',0,12,192,1,3
	.word	7203
	.byte	11
	.byte	'Rte_AlarmRefType',0,12,224,1,32
	.word	258
	.byte	11
	.byte	'Rte_AlarmIndexType',0,12,226,1,32
	.word	165
	.byte	16,128,8
	.word	148
	.byte	17,255,7,0,11
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7441
	.byte	11
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	258
	.byte	11
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	165
	.byte	11
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	148
	.byte	11
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	148
	.byte	11
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	148
	.byte	12,13,92,9,2,13
	.byte	'DeviceMode',0
	.word	148
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	148
	.byte	1,2,35,1,0,11
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7632
	.byte	11
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	148
	.byte	11
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	148
	.byte	11
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	148
	.byte	11
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	148
	.byte	11
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	148
	.byte	11
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	165
	.byte	11
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	148
	.byte	12,13,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	165
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	148
	.byte	1,2,35,2,0,11
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	7973
	.byte	11
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	165
	.byte	11
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	148
	.byte	11
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	258
	.byte	11
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	165
	.byte	11
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	148
	.byte	11
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	148
	.byte	12,13,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	258
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	165
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	148
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	148
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	148
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	148
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	148
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	148
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	148
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	148
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	148
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	148
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	148
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	148
	.byte	1,2,35,21,0,11
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8205
	.byte	12,13,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	165
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	165
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	148
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	148
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	148
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	148
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	148
	.byte	1,2,35,8,0,11
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8709
	.byte	11
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	148
	.byte	11
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	148
	.byte	11
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	148
	.byte	11
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	148
	.byte	11
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	148
	.byte	11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7452
	.byte	16,128,8
	.word	148
	.byte	17,255,7,0,11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7452
	.byte	11
	.byte	'Rte_TaskRefType',0,14,184,1,32
	.word	3939
	.byte	11
	.byte	'Rte_EventRefType',0,14,185,1,32
	.word	148
	.byte	11
	.byte	'Rte_EventType',0,14,186,1,32
	.word	258
	.byte	11
	.byte	'Rte_REActCounterType',0,14,252,1,15
	.word	148
	.byte	6
	.word	148
	.byte	11
	.byte	'Rte_REActCounterRefType',0,14,253,1,58
	.word	9631
	.byte	12,14,255,1,9,8,13
	.byte	'task',0
	.word	9527
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	9636
	.byte	4,2,35,4,0,11
	.byte	'Rte_REContainerType',0,14,130,2,3
	.word	9669
	.byte	23
	.word	3679
	.byte	6
	.word	9733
	.byte	6
	.word	148
	.byte	23
	.word	9669
	.byte	6
	.word	9748
	.byte	11
	.byte	'Rte_REContainerRefType',0,14,132,2,60
	.word	9753
	.byte	11
	.byte	'Rte_MSICounterType',0,14,149,2,16
	.word	165
	.byte	6
	.word	165
	.byte	11
	.byte	'Rte_MSICounterRefType',0,14,150,2,56
	.word	9818
	.byte	11
	.byte	'Rte_MSIPendingFlagType',0,14,152,2,17
	.word	148
	.byte	6
	.word	148
	.byte	11
	.byte	'Rte_MSIPendingFlagRefType',0,14,153,2,60
	.word	9886
	.byte	12,14,163,2,9,24,13
	.byte	'counter',0
	.word	9823
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	148
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	9891
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	9527
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	9636
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	148
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	165
	.byte	2,2,35,22,0,11
	.byte	'Rte_MSITableEntry',0,14,172,2,3
	.word	9926
	.byte	6
	.word	165
	.byte	6
	.word	148
	.byte	11
	.byte	'Rte_TaskArrayIndex',0,14,179,2,16
	.word	148
	.byte	11
	.byte	'Rte_NrWaitingTasks',0,14,180,2,16
	.word	148
	.byte	12,14,182,2,9,4,13
	.byte	'pending',0
	.word	148
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	148
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	148
	.byte	1,2,35,2,0,11
	.byte	'Rte_WaitableDatum',0,14,186,2,3
	.word	10144
	.byte	6
	.word	10144
	.byte	12,14,226,2,9,12,13
	.byte	'event_id',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	10236
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	258
	.byte	4,2,35,8,0,11
	.byte	'Rte_WOWP_NotificationType',0,14,230,2,3
	.word	10241
	.byte	23
	.word	10241
	.byte	6
	.word	10330
	.byte	11
	.byte	'Rte_WOWP_NotificationRefType',0,14,232,2,66
	.word	10335
	.byte	11
	.byte	'Rte_ARE_NotificationType',0,14,234,2,29
	.word	9669
	.byte	19
	.byte	'Rte_QTaskType',0,14,243,2,16,28,13
	.byte	'cmn',0
	.word	7203
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9527
	.byte	4,2,35,24,0,11
	.byte	'Rte_QTaskType',0,14,246,2,3
	.word	10412
	.byte	19
	.byte	'Rte_QREType',0,14,250,2,16,28,13
	.byte	'cmn',0
	.word	7203
	.byte	24,2,35,0,13
	.byte	're',0
	.word	9758
	.byte	4,2,35,24,0,11
	.byte	'Rte_QREType',0,14,253,2,3
	.word	10483
	.byte	23
	.word	9669
	.byte	6
	.word	10548
	.byte	19
	.byte	'Rte_QWWPType',0,14,129,3,16,28,13
	.byte	'cmn',0
	.word	7203
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	10340
	.byte	4,2,35,24,0,11
	.byte	'Rte_QWWPType',0,14,132,3,3
	.word	10558
	.byte	23
	.word	10241
	.byte	6
	.word	10626
	.byte	19
	.byte	'Rte_QEvType',0,14,136,3,16,36,13
	.byte	'cmn',0
	.word	7203
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9527
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	148
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9636
	.byte	4,2,35,32,0,11
	.byte	'Rte_QEvType',0,14,141,3,3
	.word	10636
	.byte	19
	.byte	'Rte_QMSIType',0,14,145,3,16,48,13
	.byte	'cmn',0
	.word	7203
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9527
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	148
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9636
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	9823
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	9891
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	165
	.byte	2,2,35,44,0,11
	.byte	'Rte_QMSIType',0,14,153,3,3
	.word	10731
	.byte	12,15,52,9,1,28
	.byte	'isEventTrig',0,1
	.word	148
	.byte	1,7,2,35,0,28
	.byte	'isTriggerIpduSendWithMetadata',0,1
	.word	148
	.byte	1,6,2,35,0,28
	.byte	'isGwIpduSend',0,1
	.word	148
	.byte	1,5,2,35,0,28
	.byte	'isModeChangd',0,1
	.word	148
	.byte	1,4,2,35,0,28
	.byte	'sigTransProp',0,1
	.word	148
	.byte	1,3,2,35,0,28
	.byte	'isTimeoutReq',0,1
	.word	148
	.byte	1,2,2,35,0,28
	.byte	'ignoreRepetitions',0,1
	.word	148
	.byte	1,1,2,35,0,0,11
	.byte	'Com_SendIpduInfo',0,15,61,3
	.word	10886
	.byte	12,15,76,9,8,13
	.byte	'TimePeriodFact',0
	.word	165
	.byte	2,2,35,0,13
	.byte	'TimeOffsetFact',0
	.word	165
	.byte	2,2,35,2,13
	.byte	'RepetitionPeriodFact',0
	.word	165
	.byte	2,2,35,4,13
	.byte	'NumOfRepetitions',0
	.word	148
	.byte	1,2,35,6,13
	.byte	'Mode',0
	.word	148
	.byte	1,2,35,7,0,11
	.byte	'Com_TransModeInfo',0,15,93,2
	.word	11106
	.byte	23
	.word	11106
	.byte	6
	.word	11256
	.byte	11
	.byte	'Com_TMConstPtrType',0,15,103,65
	.word	11261
	.byte	12,15,136,1,9,12,13
	.byte	'Init_Val',0
	.word	258
	.byte	4,2,35,0,13
	.byte	'txSignalFields',0
	.word	165
	.byte	2,2,35,4,13
	.byte	'Bit_Pos',0
	.word	148
	.byte	1,2,35,6,13
	.byte	'BitSize',0
	.word	148
	.byte	1,2,35,7,13
	.byte	'IpduRef',0
	.word	148
	.byte	1,2,35,8,13
	.byte	'General',0
	.word	148
	.byte	1,2,35,9,0,11
	.byte	'Com_Prv_xTxSigCfg_tst',0,15,201,1,2
	.word	11293
	.byte	12,15,247,1,9,16,13
	.byte	'Notification_Cbk',0
	.word	2126
	.byte	4,2,35,0,13
	.byte	'Init_Val',0
	.word	258
	.byte	4,2,35,4,13
	.byte	'Bit_Pos',0
	.word	148
	.byte	1,2,35,8,13
	.byte	'SigBuff_Index',0
	.word	148
	.byte	1,2,35,9,13
	.byte	'BitSize',0
	.word	148
	.byte	1,2,35,10,13
	.byte	'IpduRef',0
	.word	148
	.byte	1,2,35,11,13
	.byte	'General',0
	.word	148
	.byte	1,2,35,12,13
	.byte	'rxSignalFields',0
	.word	148
	.byte	1,2,35,13,0,11
	.byte	'Com_Prv_xRxSigCfg_tst',0,15,171,2,2
	.word	11441
	.byte	23
	.word	11441
	.byte	6
	.word	11638
	.byte	11
	.byte	'Com_RxSigConstPtrType',0,15,180,2,68
	.word	11643
	.byte	12,15,211,5,9,24,13
	.byte	'BuffPtr',0
	.word	680
	.byte	4,2,35,0,13
	.byte	'Com_TMConstPtr',0
	.word	11261
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	165
	.byte	2,2,35,8,13
	.byte	'Timeout_Fact',0
	.word	165
	.byte	2,2,35,10,13
	.byte	'Min_Delay_Time_Fact',0
	.word	165
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	165
	.byte	2,2,35,14,13
	.byte	'PdurId',0
	.word	165
	.byte	2,2,35,16,13
	.byte	'TxSigId_Index',0
	.word	148
	.byte	1,2,35,18,13
	.byte	'txIPduFields',0
	.word	165
	.byte	2,2,35,20,13
	.byte	'MainFunctionRef',0
	.word	148
	.byte	1,2,35,22,13
	.byte	'PaddingByte',0
	.word	148
	.byte	1,2,35,23,0,11
	.byte	'Com_Prv_xTxIpduInfoCfg_tst',0,15,162,6,3
	.word	11679
	.byte	23
	.word	11679
	.byte	6
	.word	11958
	.byte	11
	.byte	'Com_TxIpduConstPtrType',0,15,171,6,72
	.word	11963
	.byte	12,15,137,7,9,20,13
	.byte	'BuffPtr',0
	.word	680
	.byte	4,2,35,0,13
	.byte	'TimeOutNotification_Cbk',0
	.word	2126
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	165
	.byte	2,2,35,8,13
	.byte	'FirstTimeout_Factor',0
	.word	165
	.byte	2,2,35,10,13
	.byte	'Timeout_Fact',0
	.word	165
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	165
	.byte	2,2,35,14,13
	.byte	'RxSigId_Index',0
	.word	148
	.byte	1,2,35,16,13
	.byte	'MainFunctionRef',0
	.word	148
	.byte	1,2,35,17,13
	.byte	'rxIPduFields',0
	.word	148
	.byte	1,2,35,18,0,11
	.byte	'Com_Prv_xRxIpduInfoCfg_tst',0,15,197,7,3
	.word	12000
	.byte	12,15,219,7,9,4,13
	.byte	'FirstIpdu_Index',0
	.word	165
	.byte	2,2,35,0,13
	.byte	'NoOfRxPdus',0
	.word	165
	.byte	2,2,35,2,0,11
	.byte	'Com_Prv_xIpduGrpInfoCfg_tst',0,15,224,7,3
	.word	12251
	.byte	12,15,244,7,9,1,13
	.byte	'txSigRAMFields',0
	.word	148
	.byte	1,2,35,0,0,11
	.byte	'Com_TxSignalFlagType',0,15,248,7,2
	.word	12340
	.byte	12,15,167,8,9,1,13
	.byte	'rxSigRAMFields',0
	.word	148
	.byte	1,2,35,0,0,11
	.byte	'Com_RxSignalFlagType',0,15,171,8,2
	.word	12401
	.byte	12,15,135,9,9,16,13
	.byte	'CurrentTxModePtr',0
	.word	11266
	.byte	4,2,35,0,13
	.byte	'Com_MinDelayTick',0
	.word	165
	.byte	2,2,35,4,13
	.byte	'Com_Tick_Tx',0
	.word	165
	.byte	2,2,35,6,13
	.byte	'Com_n_Tick_Tx',0
	.word	165
	.byte	2,2,35,8,13
	.byte	'Com_TickTxTimeout',0
	.word	165
	.byte	2,2,35,10,13
	.byte	'Com_TxFlags',0
	.word	165
	.byte	2,2,35,12,13
	.byte	'Com_n',0
	.word	148
	.byte	1,2,35,14,13
	.byte	'Com_TransMode',0
	.word	148
	.byte	1,2,35,15,0,11
	.byte	'Com_TxIpduRamData',0,15,189,9,3
	.word	12462
	.byte	23
	.word	11106
	.byte	6
	.word	12678
	.byte	6
	.word	12462
	.byte	11
	.byte	'Com_TxIpduRamPtrType',0,15,198,9,62
	.word	12688
	.byte	12,15,218,9,9,6,13
	.byte	'RxIPduLength',0
	.word	165
	.byte	2,2,35,0,13
	.byte	'RxTicks_u16',0
	.word	165
	.byte	2,2,35,2,13
	.byte	'RxFlags',0
	.word	148
	.byte	1,2,35,4,0,11
	.byte	'Com_RxIpduRamData',0,15,245,9,2
	.word	12723
	.byte	6
	.word	165
	.byte	12,15,128,10,9,8,13
	.byte	'RxGwQueuePtr',0
	.word	12817
	.byte	4,2,35,0,13
	.byte	'Com_RxGwQueueWrite_ux',0
	.word	148
	.byte	1,2,35,4,13
	.byte	'Com_RxGwQueueRead_ux',0
	.word	148
	.byte	1,2,35,5,0,11
	.byte	'Com_RxGwQueueRAMType',0,15,133,10,2
	.word	12822
	.byte	12,15,138,10,9,4,13
	.byte	'indexGwMapSigDestIdArray',0
	.word	165
	.byte	2,2,35,0,13
	.byte	'destCount',0
	.word	148
	.byte	1,2,35,2,0,11
	.byte	'Com_Prv_xGwMapSigCfg_tst',0,15,142,10,2
	.word	12942
	.byte	12,15,147,10,9,2,13
	.byte	'GwMap_DestId',0
	.word	165
	.byte	2,2,35,0,0,11
	.byte	'Com_Prv_xGwMapSigIdCfg_tst',0,15,150,10,2
	.word	13036
	.byte	12,15,183,10,9,4,13
	.byte	'StartIPduId',0
	.word	148
	.byte	1,2,35,0,13
	.byte	'NumOfIpdus',0
	.word	148
	.byte	1,2,35,1,13
	.byte	'TimeBaseInMs',0
	.word	148
	.byte	1,2,35,2,0,11
	.byte	'Com_MainFunctionCfgType',0,15,188,10,3
	.word	13101
	.byte	12,15,194,10,9,12,13
	.byte	'Com_SigType_pu8',0
	.word	680
	.byte	4,2,35,0,13
	.byte	'Com_SigType_pu16',0
	.word	508
	.byte	4,2,35,4,13
	.byte	'Com_SigType_pu32',0
	.word	594
	.byte	4,2,35,8,0,11
	.byte	'Com_Prv_xRxRamBuf_tst',0,15,253,10,3
	.word	13204
	.byte	11
	.byte	'rba_BswSrv_uint64',0,16,66,28
	.word	1068
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,46,1,3
	.byte	8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,21,0,54,15,0,0,11,22,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14
	.byte	4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0,17,33,0,47,15,0,0,18,21,0
	.byte	54,15,39,12,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,59,0,3,8,0,0,21,21,1,54,15,39,12,0,0,22,5,0
	.byte	73,19,0,0,23,38,0,73,19,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0
	.byte	26,21,0,73,19,54,15,39,12,0,0,27,53,0,73,19,0,0,28,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Bfx\\api\\Bfx_Bit_Inl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_ProcessSignalGroup.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg_Internal.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_Prv_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     1  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     2  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     3  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     4   * Preprocessor includes
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     5   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     6  #include "Com_Prv.h"
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     7  #include "Com_Prv_Inl.h"
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     8  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	     9  /* This file contains signal groups processing from the received Pdu.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    10   * Hence complete file contents have to be placed inside this macro */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    11  #ifdef COM_RX_SIGNALGROUP
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    12  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    13   * Local Prototypes
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    14   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    15  #ifdef COM_RxSigGrpUpdateBit
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    16  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Prv_ProcessSigGrpUpdateBit(
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    17                                                  VAR(Com_SignalGroupIdType,AUTOMATIC)            SigGrpId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    18                                                  P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA)  PduInfoPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    19                                                  VAR(uint8, AUTOMATIC)                           UpdateBitStatus,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    20                                                  P2VAR(uint16_least, AUTOMATIC, COM_APPL_DATA)   Idx_SigToutPtr
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    21                                                                     );
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    22  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    23  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    24  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_IpduBuffToSecondBuff(
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    25                                                  VAR(Com_SignalGroupIdType,AUTOMATIC)            SigGrpId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    26                                                  P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)        BufferPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    27                                                  VAR(uint8,AUTOMATIC)                            ValidateSigGrp_u8
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    28                                                                );
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    29  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    30  #if defined(COM_RxSigGrpInvalid) || defined (COM_RxFilters)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    31  LOCAL_INLINE FUNC(uint8,COM_CODE) Com_Prv_ValidateRxSignalGroup(
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    32                                                  VAR(Com_SignalGroupIdType,AUTOMATIC)            SigGrpId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    33                                                  P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)        BufferPtr
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    34                                                                 );
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    35  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    36  LOCAL_INLINE FUNC(uint8,COM_CODE) Com_Prv_ValidateRxGroupSignal(VAR(uint16_least, AUTOMATIC)    Idx_GrpSig_ui,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    37                                                                  VAR(Com_SigMaxType, AUTOMATIC)  RxNewVal_GrpSig);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    38  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    39  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    40  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    41  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_CopySecondaryBuffer(Com_RxSigGrpConstPtrType RxSigGrpConstPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    42                                                                P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) Buffer);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    43  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    44  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    45   * Global functions (declared in header files )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    46   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    47  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    48   Function name    : Com_Prv_ProcessSignalGroup
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    49   Syntax           : void Com_Prv_ProcessSignalGroup(
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    50                                            VAR(PduIdType, AUTOMATIC)                     RxPduId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    51                                            P2CONST(PduInfoType, AUTOMATIC,COM_APPL_DATA) PduInfoPtr
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    52                                                     )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    53   Description      : Process rx-signal groups of the received I-PDU.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    54   Parameter        : ComRxPduId - ID of the received I-PDU.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    55                    : PduInfoPtr - Contains the length (SduLength) of the received I-PDU and
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    56                                   a pointer to a buffer (SduDataPtr) containing the I-PDU.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    57   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    58   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    59  #define COM_START_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    60  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    61  FUNC(void, COM_CODE) Com_Prv_ProcessSignalGroup(
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    62                                  VAR(PduIdType, AUTOMATIC)                      RxPduId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    63                                  P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA) PduInfoPtr
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    64                                                 )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    65  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    66      Com_RxIpduConstPtrType          RxIPduConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    67      Com_RxSigGrpConstPtrType        RxSigGrpConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    68      Com_RxSigGrpRamPtrType          RxSigGrpRamPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    69      VAR(uint16_least, AUTOMATIC)    Idx_SigGrp_ui;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    70      VAR(uint16_least, AUTOMATIC)    limit_ui;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    71      VAR(uint8, AUTOMATIC)           ValidateSigGrp_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    72  #ifdef COM_RxSigGrpUpdateBit
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    73      VAR(uint16_least, AUTOMATIC)    Idx_SigTout;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    74      VAR(uint8, AUTOMATIC)           UpdateBitStatus;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    75  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    76  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    77      RxIPduConstPtr = COM_GET_RX_IPDU_CONSTDATA(RxPduId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    78  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    79  #ifdef COM_RxSigGrpUpdateBit
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    80  #ifdef COM_RxSigGrpUpdateTimeout
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    81  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    82      /* If this IPDU has signal groups with update-bits , initialise the pointers
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    83       * Separate deadline monitoring should be performed for signal groups with update-bit
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    84       * Deadline monitoring should not be done if it is disabled
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    85       */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    86      /* MR12 RULE 13.5 VIOLATION: Below conditional statement access RAM, use of intermediate variables
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    87       * to store and read here, may read obsolete value. Evaluation(or no evaluation) shall not impact the
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    88       * system behaviour. Hence suppressed. */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    89      if ((RxIPduConstPtr->SignalGrpTimeout_Ref != NULL_PTR) && (COM_CheckRxIPduDMStatus(RxPduId)))
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    90      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    91  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    92          /* Update the variable UpdateBitStatus with value UPDATEBIT_APPLICABLE. ie at least one of the signal group
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    93           * within the IPDU is configured with both update-bit and deadline monitoring.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    94           */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    95          UpdateBitStatus = UPDATEBIT_APPLICABLE;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    96      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    97      else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    98  #endif /* #ifdef COM_RxSigGrpUpdateTimeout */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	    99      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   100          /* Reset the variable to default value ie UPDATEBIT_NOT_APPLICABLE */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   101          UpdateBitStatus = UPDATEBIT_NOT_APPLICABLE;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   102      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   103  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   104      /* Initialize the variable to be used to refer the first signal timeout configuration */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   105      Idx_SigTout = 0u;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   106  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   107  #endif /* #ifdef COM_RxSigGrpUpdateBit */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   108  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   109      limit_ui          = (uint16_least)RxIPduConstPtr->FirstRxSigGrp_Index +
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   110                          (uint16_least)RxIPduConstPtr->No_Of_SigGrp_Ref;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   111      RxSigGrpConstPtr  = COM_GET_RXSIGGRP_CONSTDATA(RxIPduConstPtr->FirstRxSigGrp_Index);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   112      RxSigGrpRamPtr    = &COM_GET_RXSIGGRPFLAG(RxIPduConstPtr->FirstRxSigGrp_Index);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   113  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   114      /* Start processing for signal groups. */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   115      for (Idx_SigGrp_ui = RxIPduConstPtr->FirstRxSigGrp_Index; Idx_SigGrp_ui < limit_ui; Idx_SigGrp_ui++)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   116      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   117          ValidateSigGrp_u8  = COM_SET;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   118  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   119          /* SignalGroup is processed only if below conditions are satisfied:
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   120           * 1. Update bit validation for signal groups with Update bit configured.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   121           * 2. Completely received SignalGroup [SWS_Com_00575].
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   122           */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   123          if (
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   124  #ifdef COM_RxSigGrpUpdateBit
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   125              (Com_Prv_ProcessSigGrpUpdateBit( (Com_SignalGroupIdType)Idx_SigGrp_ui, PduInfoPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   126                                                                 UpdateBitStatus, &Idx_SigTout )) &&
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   127  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   128              (RxSigGrpConstPtr->lastByte_u8 <= PduInfoPtr->SduLength)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   129             )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   130          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   131  #if defined(COM_RxSigGrpInvalid) || defined(COM_RxFilters)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   132  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   133              /* MR12 RULE 13.5 VIOLATION: Below conditional statement access RAM, use of intermediate variables
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   134               * to store and read here, may read obsolete value. Evaluation(or no evaluation) shall not impact the
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   135               * system behaviour. Hence suppressed. */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   136              if ((Com_GetValue(RXSIGGRP,_INVACTION,RxSigGrpConstPtr->rxSignalGrpFields) != (uint8)COM_NONE)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   137  #ifdef COM_RxFilters
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   138                 || (Com_GetValue(RXSIGGRP,_FILTEREVALREQ,RxSigGrpConstPtr->rxSignalGrpFields) != COM_FALSE)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   139  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   140                 )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   141              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   142                  ValidateSigGrp_u8 = Com_Prv_ValidateRxSignalGroup((Com_SignalGroupIdType)Idx_SigGrp_ui,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   143                                                                                 PduInfoPtr->SduDataPtr);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   144              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   145  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   146              if (ValidateSigGrp_u8 != (uint8)COM_RESET)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   147  #endif /* #if defined(COM_RxSigGrpInvalid) || defined(COM_RxFilters) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   148              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   149                  /* The processed data is copied into second buffer, because, if the API Com_Recivesignalgroup() is
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   150                   * not interrupt safe there can be data corruption on the group signal values. */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   151                  Com_Prv_IpduBuffToSecondBuff((Com_SignalGroupIdType)Idx_SigGrp_ui, PduInfoPtr->SduDataPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   152                                                                                         ValidateSigGrp_u8);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   153  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   154  #ifdef COM_SIGNALGROUPGATEWAY
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   155  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   156                  if (Com_GetValue(RXSIGGRP,_ISGWSIGGRP,RxSigGrpConstPtr->rxSignalGrpFields))
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   157                  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   158                      /* This part of code updates the Rx Gateway queue If the signal group is to be updated into
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   159                       * signalgroup buffer by one of the below means
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   160                       * 1. Reception of Ipdu and thereby signal update after update bit processing
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   161                       */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   162                      /* If the signal is recieved first time after the last call of Com_MainfunctionRouteSignals then
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   163                       * 1. The fill bit per signal has to be set
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   164                       * 2. Queue entry has to be done for the signal
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   165                       * For the further receptions of the signal, Queue and signal fill bit are not set */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   166                      Com_SetRamValue(RXSIGGRP,_SIGNALFILLBIT,RxSigGrpRamPtr->rxSigGrpRAMFields,COM_TRUE);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   167  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   168                      /* This flag will tell if any GW signal groups in the Ipdu are updated */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   169                      COM_GET_IS_GWSIG_UPDATED( RxPduId ) = COM_TRUE;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   170                  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   171  #endif /* #ifdef COM_SIGNALGROUPGATEWAY */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   172  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   173              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   174          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   175          else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   176          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   177              /* Either Update bit is received with reset state or signalgroup is partially received */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   178              ValidateSigGrp_u8 = COM_RESET;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   179          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   180  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   181  #ifdef COM_RxSignalGrpNotify
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   182          /* Set _SIGNOTIF flag to invoke configured SignalGroup-ComNotification */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   183          Com_SetRamValue(RXSIGGRP,_SIGNOTIF,RxSigGrpRamPtr->rxSigGrpRAMFields,(ValidateSigGrp_u8 != (uint8)COM_RESET));
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   184  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   185  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   186          RxSigGrpConstPtr++;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   187          RxSigGrpRamPtr++;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   188      }/* End of for loop */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   189  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   190  #define COM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   191  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   192  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   193  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   194   Function name    : Com_Prv_ProcessSigGrpUpdateBit
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   195   Syntax           : boolean Com_Prv_ProcessSigGrpUpdateBit(
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   196                                          VAR(Com_SignalIdType,AUTOMATIC)                 SignalId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   197                                          P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA)  PduInfoPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   198                                          VAR(uint8, AUTOMATIC)                           UpdateBitStatus,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   199                                          P2VAR(uint16_least, AUTOMATIC, COM_APPL_DATA)   Idx_SigToutPtr
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   200                                                            )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   201   Description      : Private function to validate signalgroup UpdateBit
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   202   Parameter        : SigGrpId        - ID of rx-signal group.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   203                    : PduInfoPtr      - Contains the length (SduLength) of the received I-PDU and
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   204                                        a pointer to a buffer (SduDataPtr) containing the I-PDU.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   205                      UpdateBitStatus - NOT_APPLICABLE: none of the rx-signals are configured with UB & TO
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   206                                        APPLICABLE    : some of the rx-signals are configured with UB & TO
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   207                      Idx_SigToutPtr -  Offset to be used to refer to the signal with UB & TO
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   208   Return value     : false - UpdateBit is configured & received with reset state.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   209                      true  - other cases
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   210   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   211  #ifdef COM_RxSigGrpUpdateBit
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   212  /* MR12 RULE 8.13 VIOLATION: A pointer parameter(Idx_SigToutPtr) in a function prototype should be declared as pointer
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   213   to variable, if COM_RxSigGrpUpdateTimeout feature is enabled then the pointer will be modified.*/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   214  LOCAL_INLINE FUNC(boolean, COM_CODE) Com_Prv_ProcessSigGrpUpdateBit(
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   215                                                      VAR(Com_SignalGroupIdType,AUTOMATIC)            SigGrpId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   216                                                      P2CONST(PduInfoType, AUTOMATIC, COM_APPL_DATA)  PduInfoPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   217                                                      VAR(uint8, AUTOMATIC)                           UpdateBitStatus,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   218                                                      P2VAR(uint16_least, AUTOMATIC, COM_APPL_DATA)   Idx_SigToutPtr
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   219                                                                     )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   220  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   221      Com_RxSigGrpConstPtrType                                    RxSigGrpConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   222  #ifdef COM_RxSigGrpUpdateTimeout
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   223      Com_RxIpduConstPtrType                                      RxIPduConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   224      P2CONST(Com_SignalTimeoutInfo, AUTOMATIC, COM_APPL_CONST)   SigTimeOutConfigPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   225      P2VAR(uint16, AUTOMATIC, COM_APPL_DATA)                     SigTimeOutTicksPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   226  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   227      VAR(boolean, AUTOMATIC)                                     IsUpdateBitSet;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   228  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   229      /* Initialize update bit to true */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   230      IsUpdateBitSet = COM_TRUE;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   231  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   232      RxSigGrpConstPtr  = COM_GET_RXSIGGRP_CONSTDATA(SigGrpId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   233  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   234      /* Check if the signal group contained within this IPDU has update-bit configured */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   235      if (Com_GetValue(RXSIGGRP,_UPDBITCONF,RxSigGrpConstPtr->rxSignalGrpFields))
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   236      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   237          VAR(PduLengthType, AUTOMATIC)  UB_ByteNo_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   238          VAR(boolean, AUTOMATIC)        updateBitValue_b;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   239  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   240          /* Find the byte No of this Update bit */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   241          UB_ByteNo_u8     = (PduLengthType)(RxSigGrpConstPtr->Update_Bit_Pos >> 3u);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   242  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   243          updateBitValue_b = Com_GetUpdateBitValue( PduInfoPtr->SduDataPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   244                                                    RxSigGrpConstPtr->Update_Bit_Pos,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   245                                                    UB_ByteNo_u8 );
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   246  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   247          /* Start: Check if the Update bit is SET or NOT */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   248          if (((UB_ByteNo_u8 + 1u) <= PduInfoPtr->SduLength) && (updateBitValue_b == COM_FALSE))
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   249          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   250              /* [SWS_Com_00802] If a signal or signal group with an attached update bit is received and
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   251               * the update-bit is not set, the AUTOSAR COM module shall discard this signal.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   252               * If the signal has not been updated, the signal will not be routed via the signal gateway.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   253               * It will only be discarded.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   254               */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   255              IsUpdateBitSet = COM_FALSE;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   256          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   257  #ifdef COM_RxSigGrpUpdateTimeout
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   258          else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   259          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   260             /* [SWS_Com_00794] In case of receiving of a smaller I-PDU than expected results into receiving a
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   261              * signal without its configured update-bit, the AUTOSAR COM module shall treat this signal as if
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   262              * its update bit was set and interpret such a signal as updated.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   263              * If UpdateBitStatus is UPDATEBIT_NOT_APPLICABLE(0x0), then it remains unchanged.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   264              * If UpdateBitStatus is UPDATEBIT_APPLICABLE(0x1), then it is changed to UPDATEBIT_SET(0x2) here.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   265              */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   266             UpdateBitStatus <<= 1u;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   267          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   268  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   269          /* Check if deadline monitoring needs to be performed for signal groups with update-bit, within
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   270           * this IPDU.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   271           * This variable would be set UBDATEBIT_APPLICABLE only if atleast one the signal group within
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   272           * the IPDU has configured update-bit & timeout value and deadline monitoring for IPDU
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   273           * is not disabled.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   274           * check if present signal group with update-bit has configured time out.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   275           * Only the signals with update-bit and configured timeout will be present in structure
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   276           * Com_SignalTimeoutInfo.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   277           */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   278          if (UpdateBitStatus != UPDATEBIT_NOT_APPLICABLE)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   279          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   280              RxIPduConstPtr = COM_GET_RX_IPDU_CONSTDATA(RxSigGrpConstPtr->IpduRef);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   281  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   282              /* Increment pointers to refer to current signal with update-bit & configured timeout
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   283               * (within this IPDU) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   284              SigTimeOutConfigPtr = (RxIPduConstPtr->SignalGrpTimeout_Ref->TimeoutInfo_Ref) + (*Idx_SigToutPtr);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   285  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   286              if (SigTimeOutConfigPtr->SigId == (uint16)SigGrpId)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   287              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   288                  if (UpdateBitStatus == UPDATEBIT_SET)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   289                  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   290                      /* Increment pointer to refer to current signal timer
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   291                       * (within this IPDU) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   292                      SigTimeOutTicksPtr  = (RxIPduConstPtr->SignalGrpTimeout_Ref->TimeoutTicks_p) + (*Idx_SigToutPtr);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   293  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   294                      /* Reload the timer for signal with Timeout value
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   295                       * Timer should be reloaded only if corresponding update-bit is set for the signal group
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   296                       * It is ensured by the code generator that if TimeOut value is zero, then the
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   297                       * signal group is not considered for deadline monitoring and hence an entry is the
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   298                       * structure Com_SignalTimeoutInfo is not present.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   299                       * Hence there is no need to check for zero value of Timeout.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   300                       */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   301                      SchM_Enter_Com_RxSigGrpToTicks();
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   302  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   303  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   304  #if (COM_ENABLE_JITTERFLITER == STD_ON)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   305                      /* CC requirements:
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   306                       * An extra cycle is added to the timeout value after a PDU has been received incase filter is ON
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   307                       * Provides a chance incase of jitter(extra cycle is added in normal case and hence
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   308                       * if JITTERFILTER is enabled extra two cycles are added)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   309                       */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   310                      (*SigTimeOutTicksPtr) = SigTimeOutConfigPtr->Timeout + 2;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   311  #else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   312  /* FC_VariationPoint_END   */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   313                      /* Extra cycle is added to prevent early timeouts */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   314                      (*SigTimeOutTicksPtr) = SigTimeOutConfigPtr->Timeout + 1;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   315  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   316  #endif /* #ifdef COM_ENABLE_JITTERFLITER */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   317  /* FC_VariationPoint_END   */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   318  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   319                      SchM_Exit_Com_RxSigGrpToTicks();
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   320                  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   321  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   322                  /* Increment signal TO instance to refer to next signal with update-bit & configured timeout
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   323                   * (within this IPDU) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   324                  (*Idx_SigToutPtr)++;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   325  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   326              } /* Current signalGroup matches with the signal in the timeout configuration */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   327  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   328          } /* if (UpdateBitStatus != UPDATEBIT_NOT_APPLICABLE) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   329  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   330  #else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   331          /* unused signal timeout parameters */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   332          (void)(UpdateBitStatus);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   333          (void)(Idx_SigToutPtr);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   334  #endif /* #ifdef COM_RxSigGrpUpdateTimeout */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   335  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   336      } /* End of UpdateBit check */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   337  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   338      return IsUpdateBitSet;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   339  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   340  #endif /* #ifdef COM_RxSigGrpUpdateBit */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   341  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   342  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   343   Function name    : Com_Prv_IpduBuffToSecondBuff
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   344   Syntax           : void Com_Prv_IpduBuffToSecondBuff (VAR(Com_SignalGroupIdType,AUTOMATIC) SigGrpId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   345                          P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)  BufferPtr, VAR(uint8,AUTOMATIC) ValidateSigGrp_u8)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   346   Description      : Internal function used for copying the signal group contents from IPdu buffer to second buffer
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   347   Parameter        : SigGrpId          -> Signal Group Id
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   348                    : BufferPtr         -> Pointer to Rx SignalGroup static configuration
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   349                    : ValidateSigGrp_u8 -> Flag to tell if the group signal value should be copied
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   350                                           with Initial values/received value
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   351   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   352   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   353  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   354  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_IpduBuffToSecondBuff(VAR(Com_SignalGroupIdType,AUTOMATIC) SigGrpId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   355                                                                 P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)  BufferPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   356                                                                 VAR(uint8,AUTOMATIC)  ValidateSigGrp_u8 )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   357  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   358      /* Local pointer to hold the address of Rx SignalGroup static configuration */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   359      Com_RxSigGrpConstPtrType            RxSigGrpConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   360  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   361      VAR(Com_MainFuncType, AUTOMATIC)    rxMainFuncId;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   362  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   363  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   364      RxSigGrpConstPtr = COM_GET_RXSIGGRP_CONSTDATA(SigGrpId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   365  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   366      /* Fetch the Rx-MainFunction internal Id */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   367      rxMainFuncId     = (COM_GET_RX_IPDU_CONSTDATA(RxSigGrpConstPtr->IpduRef))->MainFunctionRef;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   368  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   369      if (ValidateSigGrp_u8 != COM_REPLACE_TO_INIT)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   370      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   371  # ifdef COM_RX_SIGNALGROUP_ARRAY
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   372          if (Com_GetValue(RXSIGGRP,_ARRAYACCESS,RxSigGrpConstPtr->rxSignalGrpFields))
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   373          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   374              Com_RxSigGrpArrayConstPtrType RxSigGrpArrayConstPtr; /* Pointer to Rx SignalGroup Array configuration*/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   375              uint8                       * RxSigGrpArrayBufRamPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   376  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   377              RxSigGrpArrayConstPtr  = COM_GET_RXSIGGRP_ARRAY_CONSTDATA( RxSigGrpConstPtr->SigGrpArray_Index );
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   378  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   379              RxSigGrpArrayBufRamPtr =
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   380                                 &COM_GET_RXSIGGRP_ARRAY_BUFF( rxMainFuncId, RxSigGrpArrayConstPtr->RxSigGrpBuf_Index );
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   381  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   382              SchM_Enter_Com_RxSigGrpArrayBuff();
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   383  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   384              /* Copy GroupSignal's received data into RxSignalGroupArray Buffer from IPdu Buffer.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   385               * As it is UINT8 array copy, so RxSignalGroupArray Buffer can also hold other
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   386               * interleaved Signal's received data of the same IPdu */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   387              Com_ByteCopy((uint8 *)(RxSigGrpArrayBufRamPtr),
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   388                            (const uint8 *)(BufferPtr + RxSigGrpArrayConstPtr->FirstByteNo),
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   389                                             ( RxSigGrpConstPtr->lastByte_u8 - RxSigGrpArrayConstPtr->FirstByteNo));
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   390  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   391              SchM_Exit_Com_RxSigGrpArrayBuff();
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   392          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   393          else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   394  # endif /* #ifdef COM_RX_SIGNALGROUP_ARRAY */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   395          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   396              Com_Prv_CopySecondaryBuffer(RxSigGrpConstPtr, BufferPtr);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   397          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   398      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   399      else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   400      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   401          /* Discard GroupSignal's received data and place its SignalInitValues in RxSignalGroupArray Buffer */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   402          Com_Prv_SigGrpReplaceToInit(RxSigGrpConstPtr, rxMainFuncId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   403      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   404  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   405  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   406  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   407   Function name    : Com_Prv_CopySecondaryBuffer
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   408   Syntax           : void Com_Prv_CopySecondaryBuffer(Com_RxSigGrpConstPtrType  RxSigGrpConstPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   409                                                     P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)  Buffer)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   410   Description      : Internal function used for copying the signal group contents from IPdu buffer to second buffer
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   411   Parameter        : RxSigGrpConstPtr  -> Pointer to Rx SignalGroup static configuration
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   412                    : Buffer            -> Address where the data is available
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   413   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   414   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   415  /* HIS METRIC CALLS VIOLATION IN Com_Prv_CopySecondaryBuffer:
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   416     Com_Prv_CopySecondaryBuffer function contains necessary function calls statements.
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   417     HIS metric compliance would decrease readability and maintainability */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   418  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_CopySecondaryBuffer(Com_RxSigGrpConstPtrType RxSigGrpConstPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   419                                                                 P2CONST(uint8, AUTOMATIC, COM_APPL_DATA) Buffer)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   420  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   421  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   422      /* Local pointer to hold the address of Rx GroupSignal static configuration */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   423      Com_RxGrpSigConstPtrType            RxGrpSigConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   424      VAR(uint16_least, AUTOMATIC)        index_ui;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   425      VAR(Com_MainFuncType, AUTOMATIC)    rxMainFuncId;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   426      VAR(uint8, AUTOMATIC)               SigType;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   427  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   428      RxGrpSigConstPtr = COM_GET_RXGRPSIG_CONSTDATA(RxSigGrpConstPtr->FirstGrpSig_Index);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   429  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   430      /* Fetch the Rx-MainFunction internal Id */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   431      rxMainFuncId     = (COM_GET_RX_IPDU_CONSTDATA(RxSigGrpConstPtr->IpduRef))->MainFunctionRef;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   432  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   433      SchM_Enter_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   434      for (index_ui = (uint16_least)RxSigGrpConstPtr->No_Of_GrpSig; index_ui != (uint16_least)0; index_ui--)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   435      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   436          /* SigType = RxGrpSigConstPtr->rxGrpSigFields.SigType */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   437          SigType = Com_GetValue(RXGRPSIG,_TYPE,RxGrpSigConstPtr->rxGrpSigFields);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   438  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   439          if(SigType != (uint8)COM_UINT8_N)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   440          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   441              VAR(uint8, AUTOMATIC) SigEndianess;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   442  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   443              SigEndianess = Com_GetValue(RXGRPSIG,_ENDIANESS,RxGrpSigConstPtr->rxGrpSigFields);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   444  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   445  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   446  # ifdef COM_RXGRPSIG_FLOAT64SUPP
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   447              if(SigType == COM_FLOAT64)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   448              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   449                  float64 RxNewVal_f64;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   450                  /* RxNewVal_f64 = Com_UnPackFloatSignal(RxGrpSigConstPtr->rxGrpSigFields.Endianess,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   451                   *                                               RxGrpSigConstPtr->Bit_Pos,Buffer); */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   452                  RxNewVal_f64 = Com_UnPackFloatSignal( SigEndianess, RxGrpSigConstPtr->Bit_Pos, Buffer );
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   453  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   454                  COM_GET_SECRXGRPSIGTYPEFLOAT64_BUFF(rxMainFuncId,RxGrpSigConstPtr->RxGrpSigBuff_Index) =
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   455                                                                                                    RxNewVal_f64;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   456              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   457              else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   458  # endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   459  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   460              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   461                  VAR(Com_SigMaxType,AUTOMATIC) RxGrpSig_NewVal;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   462  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   463                  RxGrpSig_NewVal = Com_UnpackSignal( SigEndianess,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   464                                                      RxGrpSigConstPtr->Bit_Pos,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   465                                                      RxGrpSigConstPtr->BitSize, Buffer,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   466                                                      ((SigType & (uint8)0x1)) != 0x0u);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   467  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   468                  /* Now copy corresponding Group signal buffer with the received value */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   469                  Com_UpdateRxGroupSignalSecondBuffer(RxGrpSigConstPtr, RxGrpSig_NewVal, rxMainFuncId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   470              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   471          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   472          else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   473          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   474              Com_ByteCopy( &COM_GET_SECRXGRPSIGTYPEU8_BUFF(rxMainFuncId,RxGrpSigConstPtr->RxGrpSigBuff_Index),
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   475                              (Buffer +(RxGrpSigConstPtr->Bit_Pos >> 3u)),
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   476                               RxGrpSigConstPtr->BitSize );
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   477          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   478          RxGrpSigConstPtr++;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   479      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   480      SchM_Exit_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   481  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   482  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   483  #if defined(COM_RxSigGrpInvalid) || defined (COM_RxFilters)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   484  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   485  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   486   Function name    : Com_Prv_ValidateRxSignalGroup
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   487   Syntax           : void Com_Prv_ValidateRxSignalGroup(Com_SignalGroupIdType SigGrpId, const uint8 * BufferPtr)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   488   Description      : Private function to validate and process the configured filters for the given signal group
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   489   Parameter        : SigGrpId  - Signal Group Id to be validated
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   490                      BufferPtr - IPdu buffer pointer
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   491   Return value     : COM_RESET            - discard signalgroup
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   492                      COM_SET              - valid signalgroup is received, copy into local buffer
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   493                      COM_REPLACE_TO_INIT  - replace groupsignals with SignalInit values
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   494   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   495  LOCAL_INLINE FUNC(uint8,COM_CODE) Com_Prv_ValidateRxSignalGroup(
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   496                                                  VAR(Com_SignalGroupIdType, AUTOMATIC)       SigGrpId,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   497                                                  P2CONST(uint8, AUTOMATIC, COM_APPL_DATA)    BufferPtr
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   498                                                                 )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   499  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   500      /* Local pointer to Rx GroupSignal static configuration */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   501      Com_RxGrpSigConstPtrType            RxGrpSigConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   502      /* Local pointer to Rx SignalGroup static configuration */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   503      Com_RxSigGrpConstPtrType            RxSigGrpConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   504      /* Local RAM pointer to SignalGroup RAM structure */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   505      Com_RxSigGrpRamPtrType              RxSigGrpRamPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   506      VAR(Com_SigMaxType, AUTOMATIC)      RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   507      VAR(uint16_least, AUTOMATIC)        Idx_GrpSig_ui;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   508      VAR(uint16_least, AUTOMATIC)        LastGrpSigId;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   509      VAR(uint8, AUTOMATIC)               ConstByteValue_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   510      VAR(uint8, AUTOMATIC)               ValidateSigGrp_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   511      VAR(uint8, AUTOMATIC)               SigType;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   512  #ifdef COM_RxFilters
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   513      VAR(uint8, AUTOMATIC)               filterAlgo_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   514  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   515      VAR(boolean, AUTOMATIC)             InvAction_b;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   516  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   517      ValidateSigGrp_u8 = COM_SET;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   518      RxNewVal_GrpSig   = 0;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   519  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   520      RxSigGrpConstPtr = COM_GET_RXSIGGRP_CONSTDATA(SigGrpId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   521      RxGrpSigConstPtr = COM_GET_RXGRPSIG_CONSTDATA(RxSigGrpConstPtr->FirstGrpSig_Index);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   522      RxSigGrpRamPtr   = &COM_GET_RXSIGGRPFLAG(SigGrpId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   523  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   524      LastGrpSigId = RxSigGrpConstPtr->FirstGrpSig_Index + RxSigGrpConstPtr->No_Of_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   525      for( Idx_GrpSig_ui = RxSigGrpConstPtr->FirstGrpSig_Index;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   526           ((ValidateSigGrp_u8 == COM_SET) && (Idx_GrpSig_ui < LastGrpSigId)); Idx_GrpSig_ui++)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   527      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   528          ConstByteValue_u8 = RxGrpSigConstPtr->rxGrpSigFields;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   529  #ifdef COM_RxFilters
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   530          filterAlgo_u8 = RxGrpSigConstPtr->Filter_Algo;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   531  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   532          InvAction_b   = Com_GetValue(RXGRPSIG,_INVACTION,ConstByteValue_u8);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   533  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   534          /* if(RxGrpSigConstPtr->rxGrpSigFields.GrpSigInvalid != COM_NONE) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   535          if((InvAction_b != COM_FALSE)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   536  #ifdef COM_RxFilters
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   537                  || (filterAlgo_u8 != COM_NOTCONFIGURED)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   538  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   539                  )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   540          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   541              /* SigType = RxGrpSigConstPtr->rxGrpSigFields.Type */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   542              SigType = Com_GetValue(RXGRPSIG,_TYPE,ConstByteValue_u8);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   543  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   544              /*Unpack the group signal value */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   545              if(SigType == (uint8)COM_UINT8_N)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   546              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   547                  RxNewVal_GrpSig = (Com_SigMaxType)Com_UnpackOpaqueSignal(RxGrpSigConstPtr->Bit_Pos,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   548                                                                           RxGrpSigConstPtr->BitSize, BufferPtr);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   549              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   550              /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   551  #ifdef COM_RXGRPSIG_FLOAT64SUPP
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   552              else if(SigType == COM_FLOAT64)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   553              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   554                  /* Do nothing */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   555              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   556  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   557              /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   558              else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   559              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   560                  RxNewVal_GrpSig = Com_UnpackSignal(Com_GetValue(RXGRPSIG,_ENDIANESS,ConstByteValue_u8),
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   561                                                      RxGrpSigConstPtr->Bit_Pos ,RxGrpSigConstPtr->BitSize, BufferPtr,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   562                                                      ((SigType & 0x01u) != 0x0u));
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   563              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   564  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   565              ValidateSigGrp_u8 = Com_Prv_ValidateRxGroupSignal(Idx_GrpSig_ui, RxNewVal_GrpSig);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   566          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   567  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   568          RxGrpSigConstPtr++;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   569      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   570  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   571  #if (defined (COM_RxFilters) && defined (COM_F_MASKEDNEWDIFFERSOLD)) && \ 
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   572                                                      (defined (COM_RxIPduTimeout) || defined (COM_RxSigGrpUpdateTimeout))
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   573      /* Reset the DM filtering flag only if it was set during the previous timeout session */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   574      if(ValidateSigGrp_u8 != COM_RESET)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   575      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   576          /* Resetting this flag which is maintained at SignalGroup level,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   577          * for further reception of the signal, if Rx deadline monitoring timer elapses,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   578          * again this flag shall be set in Com_MainFunctionRx()
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   579          * This flag is resetted after processing all the ComGroupSignal inside this SignalGroup */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   580          Com_SetRamValue(RXSIGGRP,_DMFILTERING,RxSigGrpRamPtr->rxSigGrpRAMFields,COM_FALSE);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   581      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   582  #endif /* #if (defined (COM_RxFilters) && defined (COM_F_MASKEDNEWDIFFERSOLD)) &&
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   583                                                  (defined (COM_RxIPduTimeout) || defined (COM_RxSigGrpUpdateTimeout)) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   584  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   585      return(ValidateSigGrp_u8);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   586  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   587  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   588  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   589   Function name    : Com_Prv_ValidateRxGroupSignal
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   590   Syntax           : uint8 Com_Prv_ValidateRxGroupSignal(VAR(uint16_least, AUTOMATIC)        Idx_GrpSig_ui,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   591                                                      VAR(Com_SigMaxType, AUTOMATIC) RxNewVal_GrpSig,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   592                                                      VAR(uint8, AUTOMATIC)    ValidateSigGrp_u8)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   593   Description      : Internal function for checking invalid values for given signal group
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   594   Parameter        : SignalGrpId - Signal Group Id to be validated
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   595                      Src         - IPdu buffer pointer
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   596   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   597   **********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   598  LOCAL_INLINE FUNC(uint8,COM_CODE) Com_Prv_ValidateRxGroupSignal(VAR(uint16_least, AUTOMATIC)        Idx_GrpSig_ui,
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   599                                                                  VAR(Com_SigMaxType, AUTOMATIC)      RxNewVal_GrpSig)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   600  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   601      /* Local pointer to Rx GroupSignal static configuration */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   602      Com_RxGrpSigConstPtrType                    RxGrpSigConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   603      /* Local pointer to Rx SignalGroup static configuration */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   604      Com_RxSigGrpConstPtrType                    RxSigGrpConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   605      /* Local RAM pointer to SignalGroup RAM structure */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   606      Com_RxSigGrpRamPtrType                      RxSigGrpRamPtr;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   607      VAR(Com_RxIntSignalGroupIdType, AUTOMATIC)  SignalGrpId;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   608      VAR(uint8, AUTOMATIC)                       ConstByteValue_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   609      VAR(uint8, AUTOMATIC)                       ConstByteValue_SignalGroup_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   610      VAR(uint8, AUTOMATIC)                       SigType;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   611      VAR(uint8, AUTOMATIC)                       ValidateSigGrp_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   612  #ifdef COM_RxFilters
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   613      VAR(uint8, AUTOMATIC)                       filterAlgo_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   614      VAR(boolean, AUTOMATIC)                     filterVal_b;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   615  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   616      VAR(boolean, AUTOMATIC)                     InvAction_b;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   617  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   618      RxGrpSigConstPtr    = COM_GET_RXGRPSIG_CONSTDATA(Idx_GrpSig_ui);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   619      SignalGrpId         = RxGrpSigConstPtr->SigGrpRef;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   620      RxSigGrpConstPtr    = COM_GET_RXSIGGRP_CONSTDATA(SignalGrpId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   621      RxSigGrpRamPtr      = &COM_GET_RXSIGGRPFLAG(SignalGrpId);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   622  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   623      ValidateSigGrp_u8 = COM_SET;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   624  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   625  #ifdef COM_RxFilters
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   626      filterAlgo_u8 = RxGrpSigConstPtr->Filter_Algo;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   627  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   628      ConstByteValue_u8 = RxGrpSigConstPtr->rxGrpSigFields;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   629      InvAction_b   = Com_GetValue(RXGRPSIG,_INVACTION,ConstByteValue_u8);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   630      SigType = Com_GetValue(RXGRPSIG,_TYPE,ConstByteValue_u8);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   631  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   632  #if defined(COM_RxSigGrpInvalid)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   633      /* For Float signals the invalid value is type casted to UNIT32 before comparing */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   634      if ((InvAction_b != COM_FALSE)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   635          && ((Com_SigMaxType)RxGrpSigConstPtr->DataInvalid_Val == RxNewVal_GrpSig)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   636          /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   637  #ifdef COM_RXGRPSIG_FLOAT64SUPP
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   638          && (SigType != COM_FLOAT64)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   639  #endif
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   640          /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   641          )
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   642      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   643          ConstByteValue_SignalGroup_u8 = RxSigGrpConstPtr->rxSignalGrpFields;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   644          /* if ( RxSigGrpConstPtr->rxSignalGrpFields.GrpSigInvalid == (uint8)COM_REPLACE) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   645          if (Com_GetValue(RXSIGGRP,_INVACTION,ConstByteValue_SignalGroup_u8) == (uint8)COM_REPLACE)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   646          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   647              /*  set the flag to Replace all the Group Signals(Com_RxNewVal_GrpSig) which is under
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   648               * the same Signal Group with Initial value */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   649              ValidateSigGrp_u8 = COM_REPLACE_TO_INIT;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   650          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   651  #ifdef COM_RxSigGrpInvalidNotify
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   652          else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   653          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   654              /* If invalid action is NOTIFY */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   655              /* Check for invalid notification, only if SigGrpNotify_Flag is TRUE ie invalid notifcation
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   656               * function not called yet..
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   657               * The invalid notification function should be called only once for signal group
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   658               */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   659              ValidateSigGrp_u8 = COM_RESET;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   660  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   661              /* Call Invalid notification for the whole Signal Group as soon as the
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   662               * first group signal with invalid value is encountered
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   663               */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   664              if(RxSigGrpConstPtr->DataInvalid_Indication_Cbk != NULL_PTR)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   665              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   666                  RxSigGrpConstPtr->DataInvalid_Indication_Cbk();
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   667              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   668          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   669  #endif /* #ifdef COM_RxSigGrpInvalidNotify */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   670          /* [SWS_Com_00680] SignalGroup is invalid, so no filtering process has to be done for this signal group
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   671           * Break out of the for loop, as no more processing of group signals is required  */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   672      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   673      else
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   674  #endif /* #if defined(COM_RxSigGrpInvalid) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   675      {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   676  #ifdef COM_RxFilters
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   677          /* Proceed only if the GroupSignal is configured with a filter */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   678          if (filterAlgo_u8 != COM_NOTCONFIGURED)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   679          {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   680              /* The Groupsignal is valid, hence perform filtering */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   681              /* Get The Return value of the Filter which need not be returned if signal is invalid */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   682              /* The last parameter is Information from where the call to Com_Filter happens */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   683              /* NOTE on last parameter:
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   684              * 1.Currently the values for the parameter callContext_u8 are COM_TRUE/COM_FALSE
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   685              * 2.It is used only for filter ONE_EVERYN */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   686  #if defined (COM_F_MASKEDNEWDIFFERSOLD) && (defined (COM_RxIPduTimeout) || defined (COM_RxSigGrpUpdateTimeout))
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   687              if(!((Com_GetRamValue(RXSIGGRP,_DMFILTERING,RxSigGrpRamPtr->rxSigGrpRAMFields) == COM_TRUE) &&
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   688                   (COM_MASKED_NEW_DIFFERS_MASKED_OLD == filterAlgo_u8)))
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   689  #endif /* #if defined (COM_F_MASKEDNEWDIFFERSOLD) && (defined (COM_RxIPduTimeout) || defined (COM_RxSigGrpUpdateTimeout)) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   690              {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   691                  /* Call the Com_Filter API only if the conditions meet:
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   692                   * 1. If the GroupSignal is not invalidated
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   693                   * 2. This SignalGroup was not timed out */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   694                  filterVal_b = Com_Filter((uint32)RxNewVal_GrpSig,filterAlgo_u8,RxGrpSigConstPtr->Filter_Index,COM_TRUE);
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   695  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   696                  if(COM_TRUE != filterVal_b)
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   697                  {
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   698                      /* [SWS_Com_00836]: Break out of the for loop, as no more processing of group signals is
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   699                       * required And discard the whole signal group */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   700                      ValidateSigGrp_u8 = COM_RESET;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   701                  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   702              }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   703          }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   704  #endif /* #ifdef COM_RxFilters */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   705      }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   706      return ValidateSigGrp_u8;
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   707  }
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   708  #endif /* #if defined(COM_RxSigGrpInvalid) || defined (COM_RxFilters) */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   709  
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   710  #endif /* #ifdef COM_RX_SIGNALGROUP */
; BSW\src\BSW\Gen\Com\src\Com_ProcessSignalGroup.c	   711  

	; Module end
