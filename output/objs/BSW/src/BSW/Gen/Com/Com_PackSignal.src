	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc12316a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Com\\Com_PackSignal.src BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackSignal.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackSignal.c'

	
$TC16X
	
	.sdecl	'.text.Com_PackSignal.Com_PackSignal',code,cluster('Com_PackSignal')
	.sect	'.text.Com_PackSignal.Com_PackSignal'
	.align	2
	
	.global	Com_PackSignal

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     1  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     2  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     3  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     4  /* Preprocessor includes                                                                          */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     5  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     6  #include "Com_Prv.h"
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     7  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     8  /* Global functions (declared in header files )                                                   */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	     9  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    10  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    11   Function name    : Com_PackSignal
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    12   Syntax           : void Com_PackSignal(uint8 Endianess,Com_BitpositionType Bit_Pos, Com_BitsizeType Bitsize,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    13                                          Com_SigMaxType Src_Buf,P2VAR(uint8, AUTOMATIC, COM_CODE) Dest_Buf)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    14   Description      : Internal function used for packing the signal into Ipdubuffer
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    15   Parameter        : Endianess -> Little Endian/Big Endian
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    16                    : Bit_Pos ->   Position of the signal in the ipdu
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    17                    : Bitsize ->   Size of the signal
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    18                    : Src_Buf ->   Buffer where signal data is available
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    19                    : Dest_Buf ->  ponter to buffer where the signal data needs to be packed
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    20   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    21  ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    22  #define COM_START_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    23  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    24  FUNC(void, COM_CODE) Com_PackSignal( VAR(uint8, AUTOMATIC)                  Endianess,
; Function Com_PackSignal
.L12:
Com_PackSignal:	.type	func

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    25                                       VAR(Com_BitpositionType, AUTOMATIC)    Bit_Pos,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    26                                       VAR(Com_BitsizeType, AUTOMATIC)        Bitsize,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    27                                       VAR(Com_SigMaxType, AUTOMATIC)         Src_Buf,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    28                                       P2VAR(uint8, AUTOMATIC, COM_APPL_DATA) Dest_Buf )
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    29  {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    30  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    31      /* Bfx - AR specific service library is not used, for the signal packing operations for below reasons
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    32       * 1. There is a function Bfx_GetBits which takes a variable of type (uint8/16/32/64), extracts bits from it,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    33       * returns the data in the same respective type(uint8/16/32/64).
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    34       * If this api is used in Com, there will still be many bit operations(Bitshift etc..)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    35       * which have to be performed in the Com code,hence there is no much help,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    36       * as bit operations (significant in number) are done both in Com and SrvLib.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    37       */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    38  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    39      VAR(PduLengthType, AUTOMATIC) ByteNo;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    40      VAR(uint16_least, AUTOMATIC)  Total_BitsCopied;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    41      VAR(uint16_least, AUTOMATIC)  Bits_left;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    42      VAR(uint8_least, AUTOMATIC)   BitOffsetInByte;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    43      VAR(uint8_least, AUTOMATIC)   a_data;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    44      VAR(uint8, AUTOMATIC)         Mask;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    45  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    46      /* Clear unused bits in the source buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    47      if(Bitsize != COM_SIG_MAX_NO_OF_BITS)
	mov	d15,#32
.L65:
	jeq	d15,d6,.L2
.L66:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    48      {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    49          Src_Buf = Src_Buf & (~(COM_SIG_MAX_DATA << Bitsize));
	mov	d0,#-1
.L67:
	sh	d0,d0,d6
.L68:
	mov	d1,#-1
	xor	d0,d1
.L69:
	and	d7,d0
.L2:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    50      }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    51  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    52      ByteNo          = (PduLengthType)(Bit_Pos >> 3u);
	sha	d2,d5,#-3
.L40:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    53      BitOffsetInByte = (uint8_least)(Bit_Pos % 8u);
	and	d0,d5,#7
.L42:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    54  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    55      a_data = (uint8_least)(Src_Buf << BitOffsetInByte);
	sh	d3,d7,d0
.L44:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    56  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    57      if(Bitsize >= (8u - BitOffsetInByte))
	rsub	d5,d0,#8
.L39:
	jlt.u	d6,d5,.L3
.L70:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    58      {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    59          /* This Part will be executed if the Signal is placed in more than 1 byte */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    60          Mask = (uint8)(~((uint8)(0xFFu << BitOffsetInByte)));
	mov	d15,#255
.L71:
	sh	d0,d15,d0
.L43:
	extr.u	d0,d0,#0,#8
.L72:
	xor	d0,d0,#255
.L46:
	j	.L4
.L3:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    61          Total_BitsCopied = (8u - BitOffsetInByte);
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    62      }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    63      else
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    64      {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    65          /* This Part will be executed if the Signal is placed within the same byte. i.e. Bitsize <= 7 */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    66          Mask = (uint8)(~(((1u << Bitsize) - 1u) << BitOffsetInByte));
	mov	d1,#1
.L73:
	sh	d1,d1,d6
.L74:
	add	d1,#-1
.L75:
	sh	d1,d1,d0
	extr.u	d0,d1,#0,#8
.L47:
	xor	d0,d0,#255
.L48:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    67          Total_BitsCopied = Bitsize;
	mov	d5,d6
.L4:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    68      }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    69  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    70      *(Dest_Buf+ByteNo) = ((*(Dest_Buf+ByteNo)) & Mask) | (uint8)a_data;
	addsc.a	a15,a4,d2,#0
.L76:
	ld.bu	d1,[a15]
.L77:
	and	d1,d0
.L78:
	or	d3,d1
.L45:
	st.b	[a15],d3
.L79:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    71  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    72      while (Total_BitsCopied < Bitsize)
	j	.L5
.L6:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    73      {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    74          Bits_left = Bitsize - Total_BitsCopied;
	sub	d3,d6,d5
.L49:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    75  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    76          if(Endianess != COM_BIGENDIAN)
	jeq	d4,#1,.L7
.L80:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    77          {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    78              ByteNo++;
	add	d2,#1
.L41:
	extr.u	d2,d2,#0,#16
.L50:
	j	.L8
.L7:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    79          }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    80          else
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    81          {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    82              ByteNo--;
	add	d2,#-1
.L51:
	extr.u	d2,d2,#0,#16
.L8:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    83          }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    84  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    85          a_data = (uint8_least)(Src_Buf >> Total_BitsCopied);
	mov	d15,d5
	rsub	d15,#0
	sh	d0,d7,d15
.L52:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    86  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    87          if(Bits_left >= 8u)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    88          {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    89              *(Dest_Buf+ByteNo) = (uint8)a_data;
	addsc.a	a15,a4,d2,#0
.L81:
	jlt.u	d3,#8,.L9
.L82:
	st.b	[a15],d0
.L83:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    90              Total_BitsCopied = Total_BitsCopied + 8u;
	add	d5,d5,#8
.L84:
	j	.L10
.L9:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    91          }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    92          else
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    93          {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    94              Mask = (uint8)(0xFFu << Bits_left);
	mov	d15,#255
.L85:
	sh	d15,d15,d3
.L86:
	extr.u	d15,d15,#0,#8
.L54:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    95              *(Dest_Buf+ByteNo) = *(Dest_Buf+ByteNo) & Mask;
	ld.bu	d1,[a15]
.L87:
	and	d1,d15
.L88:
	st.b	[a15],d1
.L89:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    96              *(Dest_Buf+ByteNo) = *(Dest_Buf+ByteNo) | (uint8)a_data;
	ld.bu	d15,[a15]
.L55:
	or	d0,d15
.L53:
	st.b	[a15],d0
.L90:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    97  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    98              Total_BitsCopied = Total_BitsCopied + Bits_left;
	add	d5,d3
.L10:
.L5:
	jlt.u	d5,d6,.L6
.L91:

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	    99          }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   100      }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   101  }
	ret
.L22:
	
__Com_PackSignal_function_end:
	.size	Com_PackSignal,__Com_PackSignal_function_end-Com_PackSignal
.L21:
	; End of function
	
	.calls	'Com_PackSignal','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L14:
	.word	12902
	.half	3
	.word	.L15
	.byte	4
.L13:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackSignal.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L16
.L23:
	.byte	2
	.byte	'unsigned char',0,1,8
.L31:
	.byte	2
	.byte	'unsigned short int',0,2,7,3
	.byte	'Bfx_Prv_GetBit_u16u8_u8_Inl',0,3,1,207,2,22
	.word	140
	.byte	1,1,4
	.byte	'Data',0,1,207,2,57
	.word	157
	.byte	4
	.byte	'BitPn',0,1,207,2,69
	.word	140
	.byte	5,0
.L27:
	.byte	2
	.byte	'unsigned int',0,4,7,3
	.byte	'Bfx_Prv_GetBit_u32u8_u8_Inl',0,3,1,227,2,22
	.word	140
	.byte	1,1,4
	.byte	'Data',0,1,227,2,57
	.word	250
	.byte	4
	.byte	'BitPn',0,1,227,2,69
	.word	140
	.byte	5,0,3
	.byte	'Bfx_Prv_GetBit_u8u8_u8_Inl',0,3,1,247,2,22
	.word	140
	.byte	1,1,4
	.byte	'Data',0,1,247,2,55
	.word	140
	.byte	4
	.byte	'BitPn',0,1,247,2,67
	.word	140
	.byte	5,0,6
	.word	157
	.byte	7
	.byte	'Bfx_Prv_PutBit_u16u8u8_Inl',0,3,1,200,3,19,1,1,4
	.byte	'Data',0,1,200,3,54
	.word	407
	.byte	4
	.byte	'BitPn',0,1,200,3,66
	.word	140
	.byte	4
	.byte	'Value',0,1,200,3,81
	.word	140
	.byte	5,0,6
	.word	250
	.byte	7
	.byte	'Bfx_Prv_PutBit_u32u8u8_Inl',0,3,1,224,3,19,1,1,4
	.byte	'Data',0,1,224,3,54
	.word	493
	.byte	4
	.byte	'BitPn',0,1,224,3,66
	.word	140
	.byte	4
	.byte	'Value',0,1,224,3,81
	.word	140
	.byte	5,0
.L29:
	.byte	6
	.word	140
	.byte	7
	.byte	'Bfx_Prv_PutBit_u8u8u8_Inl',0,3,1,248,3,19,1,1,4
	.byte	'Data',0,1,248,3,52
	.word	579
	.byte	4
	.byte	'BitPn',0,1,248,3,64
	.word	140
	.byte	4
	.byte	'Value',0,1,248,3,79
	.word	140
	.byte	5,0,3
	.byte	'Bfx_Prv_TstParityEven_u32_u8_Inl',0,3,1,143,10,22
	.word	140
	.byte	1,1,4
	.byte	'Data',0,1,143,10,62
	.word	250
	.byte	5,0,8
	.word	179
	.byte	9
	.word	219
	.byte	9
	.word	233
	.byte	5,0,8
	.word	266
	.byte	9
	.word	306
	.byte	9
	.word	320
	.byte	5,0,8
	.word	337
	.byte	9
	.word	376
	.byte	9
	.word	390
	.byte	5,0,8
	.word	412
	.byte	9
	.word	447
	.byte	9
	.word	461
	.byte	9
	.word	476
	.byte	5,0,8
	.word	498
	.byte	9
	.word	533
	.byte	9
	.word	547
	.byte	9
	.word	562
	.byte	5,0,8
	.word	584
	.byte	9
	.word	618
	.byte	9
	.word	632
	.byte	9
	.word	647
	.byte	5,0,8
	.word	664
	.byte	9
	.word	709
	.byte	5,0
.L33:
	.byte	2
	.byte	'unsigned long int',0,4,7,10,1,6
	.word	875
	.byte	11
	.byte	'__codeptr',0,2,1,1
	.word	877
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,3,76,25
	.word	900
	.byte	11
	.byte	'uint8',0,3,81,25
	.word	140
	.byte	11
	.byte	'uint16',0,3,91,25
	.word	157
	.byte	11
	.byte	'uint32',0,3,106,24
	.word	250
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,3,111,30
	.word	966
	.byte	11
	.byte	'boolean',0,3,127,25
	.word	140
	.byte	11
	.byte	'StatusType',0,4,191,1,27
	.word	140
	.byte	11
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	140
	.byte	12,4,206,1,9,8,13
	.byte	'vendorID',0
	.word	157
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	157
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	140
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	140
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	140
	.byte	1,2,35,6,0,11
	.byte	'Std_VersionInfoType',0,4,213,1,3
	.word	1067
	.byte	11
	.byte	'PduIdType',0,5,22,19
	.word	157
	.byte	11
	.byte	'PduLengthType',0,5,26,19
	.word	157
	.byte	14,6,113,9,4,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,11
	.byte	'TpDataStateType',0,6,118,3
	.word	1257
	.byte	11
	.byte	'Com_SignalIdType',0,7,100,16
	.word	157
	.byte	11
	.byte	'Com_SignalGroupIdType',0,7,102,16
	.word	157
	.byte	11
	.byte	'Com_IpduIdType',0,7,104,15
	.word	140
	.byte	11
	.byte	'Com_GrpSignalIdType',0,7,107,18
	.word	140
	.byte	11
	.byte	'Com_TxIntSignalIdType',0,8,138,3,18
	.word	140
	.byte	11
	.byte	'Com_RxIntSignalIdType',0,8,139,3,18
	.word	140
	.byte	11
	.byte	'Com_BitsizeType',0,8,155,3,17
	.word	140
	.byte	11
	.byte	'Com_BitpositionType',0,8,156,3,15
	.word	140
	.byte	11
	.byte	'Com_RxGwQueueIndexType',0,8,161,3,15
	.word	140
	.byte	11
	.byte	'Com_SigBuffIndexType',0,8,164,3,15
	.word	140
	.byte	11
	.byte	'Com_SigMaxType',0,8,198,3,16
	.word	250
	.byte	11
	.byte	'Com_MainFuncType',0,8,231,3,16
	.word	140
	.byte	11
	.byte	'Com_NumOfIpdusType',0,8,233,3,15
	.word	140
	.byte	11
	.byte	'Com_TimeBaseType',0,8,235,3,15
	.word	140
	.byte	11
	.byte	'Can_IdType',0,9,32,16
	.word	250
	.byte	11
	.byte	'Can_HwHandleType',0,9,43,16
	.word	157
	.byte	12,10,93,9,8,13
	.byte	'Class',0
	.word	140
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	140
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	250
	.byte	4,2,35,4,0,11
	.byte	'OsTrapInfoType',0,10,97,3
	.word	1765
	.byte	16,68
	.word	250
	.byte	17,16,0,12,10,154,1,9,68,13
	.byte	'store',0
	.word	1845
	.byte	68,2,35,0,0,16,68
	.word	1854
	.byte	17,0,0,11
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	1876
	.byte	11
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	250
	.byte	12,10,175,1,9,8,13
	.byte	'sp',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	250
	.byte	4,2,35,4,0,11
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	1936
	.byte	11
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	1936
	.byte	18,1,1,6
	.word	2021
	.byte	11
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	2024
	.byte	11
	.byte	'ApplicationType',0,10,193,1,23
	.word	140
	.byte	19
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,13
	.byte	'app_id',0
	.word	140
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	140
	.byte	1,2,35,1,0,11
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	2087
	.byte	11
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	250
	.byte	11
	.byte	'AreaIdType',0,10,204,1,16
	.word	157
	.byte	11
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	250
	.byte	11
	.byte	'TickType',0,10,221,1,22
	.word	250
	.byte	11
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	250
	.byte	11
	.byte	'Os_Lockable',0,10,234,1,18
	.word	493
	.byte	11
	.byte	'CoreIdType',0,10,236,1,16
	.word	157
	.byte	11
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	157
	.byte	14,10,239,1,9,4,15
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,15
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,11
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	2394
	.byte	14,10,174,2,9,4,15
	.byte	'APPLICATION_ACCESSIBLE',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	2487
	.byte	20
	.byte	'void',0,6
	.word	2599
	.byte	21,1,1,22
	.word	140
	.byte	22
	.word	2605
	.byte	0,6
	.word	2610
	.byte	11
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	2624
	.byte	19
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,13
	.byte	'elapsed',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	250
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	250
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	250
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	1936
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	1936
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	1936
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	1936
	.byte	8,2,35,40,0,11
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	2659
	.byte	6
	.word	2659
	.byte	11
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	2857
	.byte	11
	.byte	'EventMaskType',0,10,206,2,15
	.word	140
	.byte	11
	.byte	'Os_imaskType',0,10,211,2,16
	.word	250
	.byte	19
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,13
	.byte	'meter',0
	.word	2659
	.byte	48,2,35,0,0,11
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	2936
	.byte	6
	.word	2936
	.byte	23
	.word	2997
	.byte	19
	.byte	'Os_ISRType_s',0,10,216,2,16,24,13
	.byte	'entry_function',0
	.word	2029
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	3002
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	250
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	1936
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	140
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	140
	.byte	1,2,35,21,0,11
	.byte	'Os_ISRType',0,10,223,2,3
	.word	3007
	.byte	6
	.word	2021
	.byte	23
	.word	3007
	.byte	6
	.word	3166
	.byte	11
	.byte	'ISRType',0,10,224,2,46
	.word	3171
	.byte	11
	.byte	'Os_bitmask',0,10,239,2,22
	.word	250
	.byte	11
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	250
	.byte	11
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	250
	.byte	11
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	250
	.byte	24,10,243,2,9,4,13
	.byte	'p0',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	250
	.byte	4,2,35,0,0,11
	.byte	'Os_psetType',0,10,247,2,3
	.word	3279
	.byte	24,10,249,2,9,4,13
	.byte	't0',0
	.word	250
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	250
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	250
	.byte	4,2,35,0,0,11
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	3343
	.byte	11
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	140
	.byte	19
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	1885
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	2659
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	140
	.byte	1,2,35,116,0,11
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	3441
	.byte	16,68
	.word	1854
	.byte	17,0,0,6
	.word	3441
	.byte	23
	.word	3567
	.byte	19
	.byte	'Os_TaskType_s',0,10,134,3,16,40,13
	.byte	'dynamic',0
	.word	3572
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	2029
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	3279
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	3343
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	3343
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	157
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	250
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	1936
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	140
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	140
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	140
	.byte	1,2,35,38,0,11
	.byte	'Os_TaskType',0,10,146,3,3
	.word	3577
	.byte	23
	.word	3577
	.byte	6
	.word	3827
	.byte	11
	.byte	'TaskType',0,10,147,3,47
	.word	3832
	.byte	25
	.byte	'Os_TaskStateType',0,10,155,3,6,4,15
	.byte	'SUSPENDED',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'RUNNING',0,3,0,11
	.byte	'TaskStateType',0,10,156,3,31
	.word	3855
	.byte	24,10,167,3,3,4,13
	.byte	'tpmask',0
	.word	3343
	.byte	4,2,35,0,0,19
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,13
	.byte	'saved_priority',0
	.word	3942
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	3965
	.byte	6
	.word	3965
	.byte	23
	.word	4045
	.byte	19
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,13
	.byte	'dynamic',0
	.word	4050
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	3343
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	140
	.byte	1,2,35,8,0,11
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	4055
	.byte	12,10,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	250
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	250
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	4154
	.byte	12,10,206,3,9,8,13
	.byte	'Running',0
	.word	140
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	140
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	250
	.byte	4,2,35,4,0,11
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	4249
	.byte	26
	.word	140
	.byte	1,1,6
	.word	4335
	.byte	11
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	4342
	.byte	19
	.byte	's_swd',0,10,222,3,12,4,13
	.byte	'count',0
	.word	250
	.byte	4,2,35,0,0,24,10,221,3,3,4,13
	.byte	'sw',0
	.word	4378
	.byte	4,2,35,0,0,19
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,13
	.byte	'type_dependent',0
	.word	4406
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	4425
	.byte	6
	.word	4425
	.byte	23
	.word	4503
	.byte	19
	.byte	'Os_CounterType_s',0,10,227,3,16,28,13
	.byte	'dynamic',0
	.word	4508
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	4347
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	4154
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	2605
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	140
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	140
	.byte	1,2,35,25,0,11
	.byte	'Os_CounterType',0,10,234,3,3
	.word	4513
	.byte	6
	.word	4335
	.byte	23
	.word	4513
	.byte	6
	.word	4665
	.byte	11
	.byte	'CounterType',0,10,235,3,52
	.word	4670
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	4696
	.byte	23
	.word	.L56-.L14
	.byte	6
	.word	4896
	.byte	11
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	4901
	.byte	19
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,13
	.byte	'match',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	4906
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	4696
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	157
	.byte	2,2,35,12,0,6
	.word	4933
	.byte	23
	.word	5026
.L56:
	.byte	19
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,13
	.byte	'dynamic',0
	.word	5031
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	4675
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	140
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	157
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	140
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	140
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	140
	.byte	1,2,35,14,0,11
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	5036
	.byte	23
	.word	5036
	.byte	6
	.word	5216
	.byte	23
	.word	4513
	.byte	6
	.word	5226
	.byte	27
	.word	2329
	.byte	27
	.word	3279
	.byte	27
	.word	3176
	.byte	27
	.word	3837
	.byte	27
	.word	3343
	.byte	27
	.word	140
	.byte	27
	.word	3837
	.byte	19
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	1765
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	5236
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	5241
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	5246
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	5251
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	5256
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	2862
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	2659
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	140
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	5261
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	1936
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	140
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	5266
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	1936
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	140
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	140
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	140
	.byte	1,2,35,110,0,11
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	5271
	.byte	6
	.word	250
	.byte	23
	.word	3007
	.byte	6
	.word	5727
	.byte	23
	.word	3577
	.byte	6
	.word	5737
	.byte	6
	.word	2659
	.byte	19
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	250
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	250
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	250
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	250
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	250
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	1885
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	140
	.byte	1,2,35,92,0,11
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	5752
	.byte	11
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	250
	.byte	19
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	140
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	140
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	250
	.byte	4,2,35,4,0,11
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	6029
	.byte	19
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,13
	.byte	'MaskRef',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	250
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	140
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	140
	.byte	1,2,35,9,0,11
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6165
	.byte	16,4
	.word	140
	.byte	17,3,0,19
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	6305
	.byte	4,2,35,0,0,11
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6314
	.byte	19
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	157
	.byte	2,2,35,0,0,11
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6415
	.byte	19
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	157
	.byte	2,2,35,4,0,11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6490
	.byte	23
	.word	6490
	.byte	6
	.word	6655
	.byte	19
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6660
	.byte	4,2,35,0,0,11
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	6665
	.byte	19
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,13
	.byte	'CanEventType',0
	.word	6305
	.byte	4,2,35,0,0,11
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	6765
	.byte	11
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	140
	.byte	11
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	140
	.byte	12,12,168,1,9,12,13
	.byte	'in',0
	.word	2605
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	2605
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	157
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	140
	.byte	1,2,35,10,0,11
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	6911
	.byte	14,12,175,1,9,4,15
	.byte	'RTE_DRA',0,0,15
	.byte	'RTE_WOWP',0,1,15
	.byte	'RTE_TASK',0,2,15
	.byte	'RTE_ARE',0,3,15
	.byte	'RTE_EV',0,4,15
	.byte	'RTE_MSI',0,5,0,11
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	6998
	.byte	6
	.word	6911
	.byte	19
	.byte	'Rte_QCmnType',0,12,184,1,16,24,13
	.byte	'dynamic',0
	.word	7096
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	140
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	157
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	157
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	2605
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	2605
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	6998
	.byte	4,2,35,20,0,11
	.byte	'Rte_QCmnType',0,12,192,1,3
	.word	7101
	.byte	11
	.byte	'Rte_AlarmRefType',0,12,224,1,32
	.word	250
	.byte	11
	.byte	'Rte_AlarmIndexType',0,12,226,1,32
	.word	157
	.byte	16,128,8
	.word	140
	.byte	17,255,7,0,11
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7339
	.byte	11
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	250
	.byte	11
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	157
	.byte	11
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	140
	.byte	11
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	140
	.byte	11
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	140
	.byte	12,13,92,9,2,13
	.byte	'DeviceMode',0
	.word	140
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	140
	.byte	1,2,35,1,0,11
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7530
	.byte	11
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	140
	.byte	11
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	140
	.byte	11
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	140
	.byte	11
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	140
	.byte	11
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	140
	.byte	11
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	157
	.byte	11
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	140
	.byte	12,13,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	157
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	140
	.byte	1,2,35,2,0,11
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	7871
	.byte	11
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	157
	.byte	11
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	140
	.byte	11
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	250
	.byte	11
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	157
	.byte	11
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	140
	.byte	11
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	140
	.byte	12,13,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	250
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	157
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	140
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	140
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	140
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	140
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	140
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	140
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	140
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	140
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	140
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	140
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	140
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	140
	.byte	1,2,35,21,0,11
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8103
	.byte	12,13,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	157
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	157
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	140
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	140
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	140
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	140
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	140
	.byte	1,2,35,8,0,11
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8607
	.byte	11
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	140
	.byte	11
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	140
	.byte	11
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	140
	.byte	11
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	140
	.byte	11
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	140
	.byte	11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7350
	.byte	16,128,8
	.word	140
	.byte	17,255,7,0,11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7350
	.byte	11
	.byte	'Rte_TaskRefType',0,14,184,1,32
	.word	3837
	.byte	11
	.byte	'Rte_EventRefType',0,14,185,1,32
	.word	140
	.byte	11
	.byte	'Rte_EventType',0,14,186,1,32
	.word	250
	.byte	11
	.byte	'Rte_REActCounterType',0,14,252,1,15
	.word	140
	.byte	6
	.word	140
	.byte	11
	.byte	'Rte_REActCounterRefType',0,14,253,1,58
	.word	9529
	.byte	12,14,255,1,9,8,13
	.byte	'task',0
	.word	9425
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	9534
	.byte	4,2,35,4,0,11
	.byte	'Rte_REContainerType',0,14,130,2,3
	.word	9567
	.byte	23
	.word	3577
	.byte	6
	.word	9631
	.byte	6
	.word	140
	.byte	23
	.word	9567
	.byte	6
	.word	9646
	.byte	11
	.byte	'Rte_REContainerRefType',0,14,132,2,60
	.word	9651
	.byte	11
	.byte	'Rte_MSICounterType',0,14,149,2,16
	.word	157
	.byte	6
	.word	157
	.byte	11
	.byte	'Rte_MSICounterRefType',0,14,150,2,56
	.word	9716
	.byte	11
	.byte	'Rte_MSIPendingFlagType',0,14,152,2,17
	.word	140
	.byte	6
	.word	140
	.byte	11
	.byte	'Rte_MSIPendingFlagRefType',0,14,153,2,60
	.word	9784
	.byte	12,14,163,2,9,24,13
	.byte	'counter',0
	.word	9721
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	140
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	9789
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	9425
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	9534
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	140
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	157
	.byte	2,2,35,22,0,11
	.byte	'Rte_MSITableEntry',0,14,172,2,3
	.word	9824
	.byte	6
	.word	157
	.byte	6
	.word	140
	.byte	11
	.byte	'Rte_TaskArrayIndex',0,14,179,2,16
	.word	140
	.byte	11
	.byte	'Rte_NrWaitingTasks',0,14,180,2,16
	.word	140
	.byte	12,14,182,2,9,4,13
	.byte	'pending',0
	.word	140
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	140
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	140
	.byte	1,2,35,2,0,11
	.byte	'Rte_WaitableDatum',0,14,186,2,3
	.word	10042
	.byte	6
	.word	10042
	.byte	12,14,226,2,9,12,13
	.byte	'event_id',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	10134
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	250
	.byte	4,2,35,8,0,11
	.byte	'Rte_WOWP_NotificationType',0,14,230,2,3
	.word	10139
	.byte	23
	.word	10139
	.byte	6
	.word	10228
	.byte	11
	.byte	'Rte_WOWP_NotificationRefType',0,14,232,2,66
	.word	10233
	.byte	11
	.byte	'Rte_ARE_NotificationType',0,14,234,2,29
	.word	9567
	.byte	19
	.byte	'Rte_QTaskType',0,14,243,2,16,28,13
	.byte	'cmn',0
	.word	7101
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9425
	.byte	4,2,35,24,0,11
	.byte	'Rte_QTaskType',0,14,246,2,3
	.word	10310
	.byte	19
	.byte	'Rte_QREType',0,14,250,2,16,28,13
	.byte	'cmn',0
	.word	7101
	.byte	24,2,35,0,13
	.byte	're',0
	.word	9656
	.byte	4,2,35,24,0,11
	.byte	'Rte_QREType',0,14,253,2,3
	.word	10381
	.byte	23
	.word	9567
	.byte	6
	.word	10446
	.byte	19
	.byte	'Rte_QWWPType',0,14,129,3,16,28,13
	.byte	'cmn',0
	.word	7101
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	10238
	.byte	4,2,35,24,0,11
	.byte	'Rte_QWWPType',0,14,132,3,3
	.word	10456
	.byte	23
	.word	10139
	.byte	6
	.word	10524
	.byte	19
	.byte	'Rte_QEvType',0,14,136,3,16,36,13
	.byte	'cmn',0
	.word	7101
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9425
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	140
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9534
	.byte	4,2,35,32,0,11
	.byte	'Rte_QEvType',0,14,141,3,3
	.word	10534
	.byte	19
	.byte	'Rte_QMSIType',0,14,145,3,16,48,13
	.byte	'cmn',0
	.word	7101
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9425
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	140
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9534
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	9721
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	9789
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	157
	.byte	2,2,35,44,0,11
	.byte	'Rte_QMSIType',0,14,153,3,3
	.word	10629
	.byte	12,15,76,9,8,13
	.byte	'TimePeriodFact',0
	.word	157
	.byte	2,2,35,0,13
	.byte	'TimeOffsetFact',0
	.word	157
	.byte	2,2,35,2,13
	.byte	'RepetitionPeriodFact',0
	.word	157
	.byte	2,2,35,4,13
	.byte	'NumOfRepetitions',0
	.word	140
	.byte	1,2,35,6,13
	.byte	'Mode',0
	.word	140
	.byte	1,2,35,7,0,11
	.byte	'Com_TransModeInfo',0,15,93,2
	.word	10784
	.byte	23
	.word	10784
	.byte	6
	.word	10934
	.byte	11
	.byte	'Com_TMConstPtrType',0,15,103,65
	.word	10939
	.byte	12,15,136,1,9,12,13
	.byte	'Init_Val',0
	.word	250
	.byte	4,2,35,0,13
	.byte	'txSignalFields',0
	.word	157
	.byte	2,2,35,4,13
	.byte	'Bit_Pos',0
	.word	140
	.byte	1,2,35,6,13
	.byte	'BitSize',0
	.word	140
	.byte	1,2,35,7,13
	.byte	'IpduRef',0
	.word	140
	.byte	1,2,35,8,13
	.byte	'General',0
	.word	140
	.byte	1,2,35,9,0,11
	.byte	'Com_Prv_xTxSigCfg_tst',0,15,201,1,2
	.word	10971
	.byte	12,15,247,1,9,16,13
	.byte	'Notification_Cbk',0
	.word	2024
	.byte	4,2,35,0,13
	.byte	'Init_Val',0
	.word	250
	.byte	4,2,35,4,13
	.byte	'Bit_Pos',0
	.word	140
	.byte	1,2,35,8,13
	.byte	'SigBuff_Index',0
	.word	140
	.byte	1,2,35,9,13
	.byte	'BitSize',0
	.word	140
	.byte	1,2,35,10,13
	.byte	'IpduRef',0
	.word	140
	.byte	1,2,35,11,13
	.byte	'General',0
	.word	140
	.byte	1,2,35,12,13
	.byte	'rxSignalFields',0
	.word	140
	.byte	1,2,35,13,0,11
	.byte	'Com_Prv_xRxSigCfg_tst',0,15,171,2,2
	.word	11119
	.byte	12,15,211,5,9,24,13
	.byte	'BuffPtr',0
	.word	579
	.byte	4,2,35,0,13
	.byte	'Com_TMConstPtr',0
	.word	10939
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	157
	.byte	2,2,35,8,13
	.byte	'Timeout_Fact',0
	.word	157
	.byte	2,2,35,10,13
	.byte	'Min_Delay_Time_Fact',0
	.word	157
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	157
	.byte	2,2,35,14,13
	.byte	'PdurId',0
	.word	157
	.byte	2,2,35,16,13
	.byte	'TxSigId_Index',0
	.word	140
	.byte	1,2,35,18,13
	.byte	'txIPduFields',0
	.word	157
	.byte	2,2,35,20,13
	.byte	'MainFunctionRef',0
	.word	140
	.byte	1,2,35,22,13
	.byte	'PaddingByte',0
	.word	140
	.byte	1,2,35,23,0,11
	.byte	'Com_Prv_xTxIpduInfoCfg_tst',0,15,162,6,3
	.word	11316
	.byte	12,15,137,7,9,20,13
	.byte	'BuffPtr',0
	.word	579
	.byte	4,2,35,0,13
	.byte	'TimeOutNotification_Cbk',0
	.word	2024
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	157
	.byte	2,2,35,8,13
	.byte	'FirstTimeout_Factor',0
	.word	157
	.byte	2,2,35,10,13
	.byte	'Timeout_Fact',0
	.word	157
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	157
	.byte	2,2,35,14,13
	.byte	'RxSigId_Index',0
	.word	140
	.byte	1,2,35,16,13
	.byte	'MainFunctionRef',0
	.word	140
	.byte	1,2,35,17,13
	.byte	'rxIPduFields',0
	.word	140
	.byte	1,2,35,18,0,11
	.byte	'Com_Prv_xRxIpduInfoCfg_tst',0,15,197,7,3
	.word	11595
	.byte	12,15,219,7,9,4,13
	.byte	'FirstIpdu_Index',0
	.word	157
	.byte	2,2,35,0,13
	.byte	'NoOfRxPdus',0
	.word	157
	.byte	2,2,35,2,0,11
	.byte	'Com_Prv_xIpduGrpInfoCfg_tst',0,15,224,7,3
	.word	11846
	.byte	12,15,244,7,9,1,13
	.byte	'txSigRAMFields',0
	.word	140
	.byte	1,2,35,0,0,11
	.byte	'Com_TxSignalFlagType',0,15,248,7,2
	.word	11935
	.byte	12,15,167,8,9,1,13
	.byte	'rxSigRAMFields',0
	.word	140
	.byte	1,2,35,0,0,11
	.byte	'Com_RxSignalFlagType',0,15,171,8,2
	.word	11996
	.byte	12,15,135,9,9,16,13
	.byte	'CurrentTxModePtr',0
	.word	10944
	.byte	4,2,35,0,13
	.byte	'Com_MinDelayTick',0
	.word	157
	.byte	2,2,35,4,13
	.byte	'Com_Tick_Tx',0
	.word	157
	.byte	2,2,35,6,13
	.byte	'Com_n_Tick_Tx',0
	.word	157
	.byte	2,2,35,8,13
	.byte	'Com_TickTxTimeout',0
	.word	157
	.byte	2,2,35,10,13
	.byte	'Com_TxFlags',0
	.word	157
	.byte	2,2,35,12,13
	.byte	'Com_n',0
	.word	140
	.byte	1,2,35,14,13
	.byte	'Com_TransMode',0
	.word	140
	.byte	1,2,35,15,0,11
	.byte	'Com_TxIpduRamData',0,15,189,9,3
	.word	12057
	.byte	23
	.word	10784
	.byte	6
	.word	12273
	.byte	12,15,218,9,9,6,13
	.byte	'RxIPduLength',0
	.word	157
	.byte	2,2,35,0,13
	.byte	'RxTicks_u16',0
	.word	157
	.byte	2,2,35,2,13
	.byte	'RxFlags',0
	.word	140
	.byte	1,2,35,4,0,11
	.byte	'Com_RxIpduRamData',0,15,245,9,2
	.word	12283
	.byte	6
	.word	157
	.byte	12,15,128,10,9,8,13
	.byte	'RxGwQueuePtr',0
	.word	12377
	.byte	4,2,35,0,13
	.byte	'Com_RxGwQueueWrite_ux',0
	.word	140
	.byte	1,2,35,4,13
	.byte	'Com_RxGwQueueRead_ux',0
	.word	140
	.byte	1,2,35,5,0,11
	.byte	'Com_RxGwQueueRAMType',0,15,133,10,2
	.word	12382
	.byte	12,15,138,10,9,4,13
	.byte	'indexGwMapSigDestIdArray',0
	.word	157
	.byte	2,2,35,0,13
	.byte	'destCount',0
	.word	140
	.byte	1,2,35,2,0,11
	.byte	'Com_Prv_xGwMapSigCfg_tst',0,15,142,10,2
	.word	12502
	.byte	12,15,147,10,9,2,13
	.byte	'GwMap_DestId',0
	.word	157
	.byte	2,2,35,0,0,11
	.byte	'Com_Prv_xGwMapSigIdCfg_tst',0,15,150,10,2
	.word	12596
	.byte	12,15,183,10,9,4,13
	.byte	'StartIPduId',0
	.word	140
	.byte	1,2,35,0,13
	.byte	'NumOfIpdus',0
	.word	140
	.byte	1,2,35,1,13
	.byte	'TimeBaseInMs',0
	.word	140
	.byte	1,2,35,2,0,11
	.byte	'Com_MainFunctionCfgType',0,15,188,10,3
	.word	12661
	.byte	12,15,194,10,9,12,13
	.byte	'Com_SigType_pu8',0
	.word	579
	.byte	4,2,35,0,13
	.byte	'Com_SigType_pu16',0
	.word	407
	.byte	4,2,35,4,13
	.byte	'Com_SigType_pu32',0
	.word	493
	.byte	4,2,35,8,0,11
	.byte	'Com_Prv_xRxRamBuf_tst',0,15,253,10,3
	.word	12764
	.byte	11
	.byte	'rba_BswSrv_uint64',0,16,66,28
	.word	966
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L15:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,46,1,3
	.byte	8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,21,0,54,15,0,0,11,22,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14
	.byte	4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0,17,33,0,47,15,0,0,18,21,0
	.byte	54,15,39,12,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,59,0,3,8,0,0,21,21,1,54,15,39,12,0,0,22,5,0
	.byte	73,19,0,0,23,38,0,73,19,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0
	.byte	26,21,0,73,19,54,15,39,12,0,0,27,53,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L16:
	.word	.L58-.L57
.L57:
	.half	3
	.word	.L60-.L59
.L59:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Bfx\\api\\Bfx_Bit_Inl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackSignal.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg_Internal.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_Prv_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L60:
.L58:
	.sdecl	'.debug_info',debug,cluster('Com_PackSignal')
	.sect	'.debug_info'
.L17:
	.word	428
	.half	3
	.word	.L18
	.byte	4,1
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackSignal.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L20,.L19
	.byte	2
	.word	.L13
	.byte	3
	.byte	'Com_PackSignal',0,1,24,22,1,1,1
	.word	.L12,.L22,.L11
	.byte	4
	.byte	'Endianess',0,1,24,77
	.word	.L23,.L24
	.byte	4
	.byte	'Bit_Pos',0,1,25,77
	.word	.L23,.L25
	.byte	4
	.byte	'Bitsize',0,1,26,77
	.word	.L23,.L26
	.byte	4
	.byte	'Src_Buf',0,1,27,77
	.word	.L27,.L28
	.byte	4
	.byte	'Dest_Buf',0,1,28,77
	.word	.L29,.L30
	.byte	5
	.word	.L12,.L22
	.byte	6
	.byte	'ByteNo',0,1,39,35
	.word	.L31,.L32
	.byte	6
	.byte	'Total_BitsCopied',0,1,40,35
	.word	.L33,.L34
	.byte	6
	.byte	'Bits_left',0,1,41,35
	.word	.L33,.L35
	.byte	6
	.byte	'BitOffsetInByte',0,1,42,35
	.word	.L33,.L36
	.byte	6
	.byte	'a_data',0,1,43,35
	.word	.L33,.L37
	.byte	6
	.byte	'Mask',0,1,44,35
	.word	.L23,.L38
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Com_PackSignal')
	.sect	'.debug_abbrev'
.L18:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Com_PackSignal')
	.sect	'.debug_line'
.L19:
	.word	.L62-.L61
.L61:
	.half	3
	.word	.L64-.L63
.L63:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackSignal.c',0,0,0,0,0
.L64:
	.byte	5,19,7,0,5,2
	.word	.L12
	.byte	3,46,1,5,5,9
	.half	.L65-.L12
	.byte	1,5,32,7,9
	.half	.L66-.L65
	.byte	3,2,1,5,49,9
	.half	.L67-.L66
	.byte	1,5,30,9
	.half	.L68-.L67
	.byte	1,5,27,9
	.half	.L69-.L68
	.byte	1,5,47,9
	.half	.L2-.L69
	.byte	3,3,1,5,37,9
	.half	.L40-.L2
	.byte	3,1,1,5,36,9
	.half	.L42-.L40
	.byte	3,2,1,5,23,9
	.half	.L44-.L42
	.byte	3,2,1,5,5,9
	.half	.L39-.L44
	.byte	1,5,34,7,9
	.half	.L70-.L39
	.byte	3,3,1,5,40,9
	.half	.L71-.L70
	.byte	1,5,26,9
	.half	.L43-.L71
	.byte	1,5,24,9
	.half	.L72-.L43
	.byte	1,5,61,9
	.half	.L46-.L72
	.byte	1,5,28,9
	.half	.L3-.L46
	.byte	3,6,1,5,31,9
	.half	.L73-.L3
	.byte	1,5,43,9
	.half	.L74-.L73
	.byte	1,5,49,9
	.half	.L75-.L74
	.byte	1,5,24,9
	.half	.L47-.L75
	.byte	1,5,26,9
	.half	.L48-.L47
	.byte	3,1,1,5,38,9
	.half	.L4-.L48
	.byte	3,3,1,5,28,9
	.half	.L76-.L4
	.byte	1,5,48,9
	.half	.L77-.L76
	.byte	1,5,24,9
	.half	.L78-.L77
	.byte	1,5,38,9
	.half	.L79-.L78
	.byte	3,2,1,5,29,9
	.half	.L6-.L79
	.byte	3,2,1,5,9,9
	.half	.L49-.L6
	.byte	3,2,1,5,19,7,9
	.half	.L80-.L49
	.byte	3,2,1,5,21,9
	.half	.L50-.L80
	.byte	1,5,19,9
	.half	.L7-.L50
	.byte	3,4,1,5,40,9
	.half	.L8-.L7
	.byte	3,3,1,5,23,9
	.half	.L52-.L8
	.byte	3,4,1,5,9,9
	.half	.L81-.L52
	.byte	3,126,1,5,32,7,9
	.half	.L82-.L81
	.byte	3,2,1,5,49,9
	.half	.L83-.L82
	.byte	3,1,1,5,47,9
	.half	.L84-.L83
	.byte	3,127,1,5,28,9
	.half	.L9-.L84
	.byte	3,5,1,5,34,9
	.half	.L85-.L9
	.byte	1,5,20,9
	.half	.L86-.L85
	.byte	1,5,34,9
	.half	.L54-.L86
	.byte	3,1,1,5,53,9
	.half	.L87-.L54
	.byte	1,5,32,9
	.half	.L88-.L87
	.byte	1,5,34,9
	.half	.L89-.L88
	.byte	3,1,1,5,32,9
	.half	.L55-.L89
	.byte	1,5,49,9
	.half	.L90-.L55
	.byte	3,2,1,5,38,9
	.half	.L5-.L90
	.byte	3,102,1,5,1,7,9
	.half	.L91-.L5
	.byte	3,29,1,7,9
	.half	.L21-.L91
	.byte	0,1,1
.L62:
	.sdecl	'.debug_ranges',debug,cluster('Com_PackSignal')
	.sect	'.debug_ranges'
.L20:
	.word	-1,.L12,0,.L21-.L12,0,0
	.sdecl	'.debug_loc',debug,cluster('Com_PackSignal')
	.sect	'.debug_loc'
.L36:
	.word	-1,.L12,.L42-.L12,.L43-.L12
	.half	5
	.byte	144,32,157,32,0
	.word	.L3-.L12,.L47-.L12
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L25:
	.word	-1,.L12,0,.L39-.L12
	.half	1
	.byte	85
	.word	0,0
.L35:
	.word	-1,.L12,.L49-.L12,.L5-.L12
	.half	1
	.byte	83
	.word	0,0
.L26:
	.word	-1,.L12,0,.L22-.L12
	.half	1
	.byte	86
	.word	0,0
.L32:
	.word	-1,.L12,.L40-.L12,.L41-.L12
	.half	1
	.byte	82
	.word	.L50-.L12,.L51-.L12
	.half	1
	.byte	82
	.word	.L8-.L12,.L22-.L12
	.half	1
	.byte	82
	.word	0,0
.L11:
	.word	-1,.L12,0,.L22-.L12
	.half	2
	.byte	138,0
	.word	0,0
.L30:
	.word	-1,.L12,0,.L22-.L12
	.half	1
	.byte	100
	.word	0,0
.L24:
	.word	-1,.L12,0,.L22-.L12
	.half	1
	.byte	84
	.word	0,0
.L38:
	.word	-1,.L12,.L46-.L12,.L3-.L12
	.half	5
	.byte	144,32,157,32,0
	.word	.L48-.L12,.L6-.L12
	.half	5
	.byte	144,32,157,32,0
	.word	.L54-.L12,.L55-.L12
	.half	1
	.byte	95
	.word	0,0
.L28:
	.word	-1,.L12,0,.L22-.L12
	.half	1
	.byte	87
	.word	0,0
.L34:
	.word	-1,.L12,.L39-.L12,.L22-.L12
	.half	1
	.byte	85
	.word	0,0
.L37:
	.word	-1,.L12,.L44-.L12,.L45-.L12
	.half	1
	.byte	83
	.word	.L52-.L12,.L53-.L12
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L92:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Com_PackSignal')
	.sect	'.debug_frame'
	.word	24
	.word	.L92,.L12,.L22-.L12
	.byte	8,18,8,19,8,21,8,22,8,23,0,0

; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   102  #define COM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   103  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   104  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   105  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   106  #if (defined(COM_TXSIG_FLOAT64SUPP) || defined(COM_TXGRPSIG_FLOAT64SUPP) ||\ 
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   107      (defined(COM_RX_SIGNALGROUP_ARRAY) && defined(COM_RXGRPSIG_FLOAT64SUPP)))
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   108  #define COM_START_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   109  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   110  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   111  /* Global functions (declared in header files )                                                   */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   112  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   113  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   114   Function name    : Com_PackFloatSignal
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   115   Syntax           : void Com_PackFloatSignal(uint8 Endianess,Com_BitpositionType Bit_Pos,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   116                      floa64 Src,P2VAR(uint8, AUTOMATIC, COM_CODE) Dest_Buf)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   117   Description      : Internal function used for packing the signal into Ipdubuffer
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   118   Parameter        : Endianess -> Little Endian/Big Endian
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   119                    : Bit_Pos ->   Position of the signal in the ipdu
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   120                    : Src ->   Buffer where signal data is available
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   121                    : Dest_Buf ->  ponter to buffer where the signal data needs to be packed
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   122   Operation           : This function only packs Float64 signals into Tx Ipdu buffer.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   123   There can be two possibilities in packing a float signal
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   124   1. Signal lies in the byte boundary:
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   125    If signal lies in byte boundary, then all the 8 bytes of float data (64 bits) is copied into the uint8 destination
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   126    buffer using memcpy function
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   127  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   128   2. Signal does not lie in the byte boundary:
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   129    If the signal bit position is not in the byte boundary, then the first and last bytes are displaced from the byte
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   130    boundary and need a bit copy of corresponding displaced bits. Where as the other 7 bytes of data can be copied with
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   131    memcpy function
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   132    i.e : If the Bit position of the signal is 21,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   133          1. first three bits are packed in 3rd byte of IPdu buffer with LSB being bit number 21.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   134          2. Next 7 bytes of float data is copied into the next 7 bytes of IPdu buffer
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   135          3. The 11th byte of Ipdu buffer is then packed with remaining 5 bits of data.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   136   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   137  ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   138  FUNC(void, COM_CODE) Com_PackFloatSignal(VAR(uint8, AUTOMATIC) Endianess, VAR(Com_BitpositionType, AUTOMATIC) Bit_Pos,
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   139                  VAR(float64,AUTOMATIC) Src, P2VAR(uint8, AUTOMATIC, COM_APPL_DATA) Dest_Buf)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   140  {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   141      VAR(PduLengthType, AUTOMATIC) ByteNo;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   142      VAR(PduLengthType, AUTOMATIC) NoofBytes;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   143      VAR(uint8_least, AUTOMATIC) BitOffsetInByte;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   144  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   145      /* Float64 data type has 8 bytes */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   146      NoofBytes = 8u;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   147      ByteNo = Bit_Pos >> 3u;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   148      BitOffsetInByte = (uint8)(Bit_Pos % 8u);
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   149  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   150      if(BitOffsetInByte == 0u )
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   151      {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   152          if(Endianess == COM_LITTLEENDIAN)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   153          {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   154              /* MR12 DIR 1.1 VIOLATION: Explicit cast is provided in line with rba_BswSrv_MemCopy() definition.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   155                 But the void pointer is always deferenced to a type based on the pointers address alignment.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   156                 Hence the alignment warning can safely be ignored. */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   157              (void)rba_BswSrv_MemCopy((void *)(Dest_Buf+ByteNo),(const void *)&Src,NoofBytes);
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   158  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   159          }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   160          else
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   161          {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   162              uint8 index_u8;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   163              uint8 convdata_u8[8];
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   164  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   165              /* This step is needed to perform bit operations on the Src data
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   166               * bit operations cannot be performed on Float data type */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   167              /* MR12 DIR 1.1 VIOLATION: Explicit cast is provided in line with rba_BswSrv_MemCopy() definition.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   168                 But the void pointer is always deferenced to a type based on the pointers address alignment.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   169                 Hence the alignment warning can safely be ignored. */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   170              (void)rba_BswSrv_MemCopy((void *)convdata_u8, (const void *)&Src, NoofBytes);
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   171  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   172              for(index_u8 = 0; index_u8 < NoofBytes; index_u8++)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   173              {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   174                  *(Dest_Buf+ByteNo) = convdata_u8[index_u8];
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   175                  ByteNo--; /* Decrement the byte number to point to the next byte */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   176              }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   177          }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   178      }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   179      else
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   180      {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   181          uint16_least index_u16;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   182          uint8        Mask;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   183          uint8        convdata_u8[8];
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   184  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   185          /* This step is needed to perform bit operations on the Src data
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   186           * bit operations cannot be performed on Float data type */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   187          /* MR12 DIR 1.1 VIOLATION: Explicit cast is provided in line with rba_BswSrv_MemCopy() definition.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   188             But the void pointer is always deferenced to a type based on the pointers address alignment.
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   189             Hence the alignment warning can safely be ignored. */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   190          (void)rba_BswSrv_MemCopy( (void *)convdata_u8, (const void *)&Src, NoofBytes );
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   191  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   192          Mask = (uint8) (~((uint8)(0xFFu << BitOffsetInByte)));
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   193          /* Copy the first byte into the Ipdu buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   194          *(Dest_Buf+ByteNo) = (uint8)((uint8)((uint8)(*(Dest_Buf+ByteNo)) & Mask) |
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   195                                       (uint8)(convdata_u8[0] << BitOffsetInByte));
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   196  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   197          if(Endianess == COM_LITTLEENDIAN)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   198          {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   199              /* Increment the byte number to point to the next byte */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   200              ByteNo++;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   201  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   202              /* The last byte is copied outside the loop, hence run the loop for (NoofBytes-1) times */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   203              for(index_u16 = 0; index_u16 < (NoofBytes-1u); index_u16++)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   204              {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   205                  /* Below Function is to be masked for protection ? */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   206                  /* Copy the left over part of first byte and additional part of next byte into the Ipdu buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   207                  *(Dest_Buf+ByteNo) = (uint8)((uint8)(convdata_u8[index_u16] >> (8u-BitOffsetInByte)) |
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   208                                               (uint8)(convdata_u8[index_u16 + 1u] << BitOffsetInByte));
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   209  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   210                  ByteNo++; /* Increment the byte number to point to the next byte */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   211              }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   212              /* Copy the last byte into the Ipdu buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   213              *(Dest_Buf+ByteNo) = (uint8)((*(Dest_Buf+ByteNo)) & ((uint8)(~Mask))) |
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   214                                   (uint8)(convdata_u8[7] >> (8u-BitOffsetInByte));
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   215          }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   216          else
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   217          {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   218              /* Decrement the byte number to point to the next byte */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   219              ByteNo--;
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   220  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   221              for(index_u16 = 0; index_u16 < (NoofBytes-1u); index_u16++)
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   222              {
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   223                  /* Below Function is to be masked for protection */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   224                  /* Copy the left over part of first byte and additional part of next byte into the Ipdu buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   225                  *(Dest_Buf+ByteNo) = (uint8)((uint8)(convdata_u8[index_u16] >> (8u-BitOffsetInByte)) |
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   226                                               (uint8)((convdata_u8[index_u16 + 1u] << BitOffsetInByte)));
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   227  
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   228                  ByteNo--; /* Decrement the byte number to point to the next byte */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   229              }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   230              /* Copy the last byte into the Ipdu buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   231              *(Dest_Buf+ByteNo) = (uint8)((*(Dest_Buf+ByteNo)) & ((uint8)(~Mask))) |
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   232                                   (uint8)(convdata_u8[7] >> (8u-BitOffsetInByte));
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   233          }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   234      }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   235  }
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   236  #define COM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   237  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   238  #endif
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   239  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_PackSignal.c	   240  

	; Module end
