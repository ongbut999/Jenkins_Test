	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc3804a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Com\\Com_MainFunctionRouteSignals.src BSW\\src\\BSW\\Gen\\Com\\src\\Com_MainFunctionRouteSignals.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_MainFunctionRouteSignals.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	13348
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_MainFunctionRouteSignals.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'unsigned char',0,1,8,2
	.byte	'unsigned short int',0,2,7,3
	.byte	'Bfx_Prv_GetBit_u16u8_u8_Inl',0,3,1,207,2,22
	.word	154
	.byte	1,1,4
	.byte	'Data',0,1,207,2,57
	.word	171
	.byte	4
	.byte	'BitPn',0,1,207,2,69
	.word	154
	.byte	5,0,2
	.byte	'unsigned int',0,4,7,3
	.byte	'Bfx_Prv_GetBit_u32u8_u8_Inl',0,3,1,227,2,22
	.word	154
	.byte	1,1,4
	.byte	'Data',0,1,227,2,57
	.word	264
	.byte	4
	.byte	'BitPn',0,1,227,2,69
	.word	154
	.byte	5,0,3
	.byte	'Bfx_Prv_GetBit_u8u8_u8_Inl',0,3,1,247,2,22
	.word	154
	.byte	1,1,4
	.byte	'Data',0,1,247,2,55
	.word	154
	.byte	4
	.byte	'BitPn',0,1,247,2,67
	.word	154
	.byte	5,0,3
	.byte	'Bfx_Prv_GetBits_u8u8u8_u8_Inl',0,3,1,179,3,20
	.word	154
	.byte	1,1,4
	.byte	'Data',0,1,179,3,56
	.word	154
	.byte	4
	.byte	'BitStartPn',0,1,179,3,68
	.word	154
	.byte	4
	.byte	'BitLn',0,1,179,3,86
	.word	154
	.byte	5,0,6
	.word	171
	.byte	7
	.byte	'Bfx_Prv_PutBit_u16u8u8_Inl',0,3,1,200,3,19,1,1,4
	.byte	'Data',0,1,200,3,54
	.word	514
	.byte	4
	.byte	'BitPn',0,1,200,3,66
	.word	154
	.byte	4
	.byte	'Value',0,1,200,3,81
	.word	154
	.byte	5,0,6
	.word	264
	.byte	7
	.byte	'Bfx_Prv_PutBit_u32u8u8_Inl',0,3,1,224,3,19,1,1,4
	.byte	'Data',0,1,224,3,54
	.word	600
	.byte	4
	.byte	'BitPn',0,1,224,3,66
	.word	154
	.byte	4
	.byte	'Value',0,1,224,3,81
	.word	154
	.byte	5,0,6
	.word	154
	.byte	7
	.byte	'Bfx_Prv_PutBit_u8u8u8_Inl',0,3,1,248,3,19,1,1,4
	.byte	'Data',0,1,248,3,52
	.word	686
	.byte	4
	.byte	'BitPn',0,1,248,3,64
	.word	154
	.byte	4
	.byte	'Value',0,1,248,3,79
	.word	154
	.byte	5,0,3
	.byte	'Bfx_Prv_TstParityEven_u32_u8_Inl',0,3,1,143,10,22
	.word	154
	.byte	1,1,4
	.byte	'Data',0,1,143,10,62
	.word	264
	.byte	5,0,8
	.word	193
	.byte	9
	.word	233
	.byte	9
	.word	247
	.byte	5,0,8
	.word	280
	.byte	9
	.word	320
	.byte	9
	.word	334
	.byte	5,0,8
	.word	351
	.byte	9
	.word	390
	.byte	9
	.word	404
	.byte	5,0,8
	.word	421
	.byte	9
	.word	463
	.byte	9
	.word	477
	.byte	9
	.word	497
	.byte	5,0,8
	.word	519
	.byte	9
	.word	554
	.byte	9
	.word	568
	.byte	9
	.word	583
	.byte	5,0,8
	.word	605
	.byte	9
	.word	640
	.byte	9
	.word	654
	.byte	9
	.word	669
	.byte	5,0,8
	.word	691
	.byte	9
	.word	725
	.byte	9
	.word	739
	.byte	9
	.word	754
	.byte	5,0,8
	.word	771
	.byte	9
	.word	816
	.byte	5,0,10,1,6
	.word	983
	.byte	11
	.byte	'__codeptr',0,2,1,1
	.word	985
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,3,76,25
	.word	1008
	.byte	11
	.byte	'uint8',0,3,81,25
	.word	154
	.byte	11
	.byte	'uint16',0,3,91,25
	.word	171
	.byte	11
	.byte	'uint32',0,3,106,24
	.word	264
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,3,111,30
	.word	1074
	.byte	11
	.byte	'boolean',0,3,127,25
	.word	154
	.byte	11
	.byte	'StatusType',0,4,191,1,27
	.word	154
	.byte	11
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	154
	.byte	12,4,206,1,9,8,13
	.byte	'vendorID',0
	.word	171
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	171
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	154
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	154
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	154
	.byte	1,2,35,6,0,11
	.byte	'Std_VersionInfoType',0,4,213,1,3
	.word	1175
	.byte	11
	.byte	'PduIdType',0,5,22,19
	.word	171
	.byte	11
	.byte	'PduLengthType',0,5,26,19
	.word	171
	.byte	14,6,113,9,4,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,11
	.byte	'TpDataStateType',0,6,118,3
	.word	1365
	.byte	11
	.byte	'Com_SignalIdType',0,7,100,16
	.word	171
	.byte	11
	.byte	'Com_SignalGroupIdType',0,7,102,16
	.word	171
	.byte	11
	.byte	'Com_IpduIdType',0,7,104,15
	.word	154
	.byte	11
	.byte	'Com_GrpSignalIdType',0,7,107,18
	.word	154
	.byte	11
	.byte	'Com_TxIntSignalIdType',0,8,138,3,18
	.word	154
	.byte	11
	.byte	'Com_RxIntSignalIdType',0,8,139,3,18
	.word	154
	.byte	11
	.byte	'Com_BitsizeType',0,8,155,3,17
	.word	154
	.byte	11
	.byte	'Com_BitpositionType',0,8,156,3,15
	.word	154
	.byte	11
	.byte	'Com_RxGwQueueIndexType',0,8,161,3,15
	.word	154
	.byte	11
	.byte	'Com_SigBuffIndexType',0,8,164,3,15
	.word	154
	.byte	11
	.byte	'Com_SigMaxType',0,8,198,3,16
	.word	264
	.byte	11
	.byte	'Com_MainFuncType',0,8,231,3,16
	.word	154
	.byte	11
	.byte	'Com_NumOfIpdusType',0,8,233,3,15
	.word	154
	.byte	11
	.byte	'Com_TimeBaseType',0,8,235,3,15
	.word	154
	.byte	11
	.byte	'Can_IdType',0,9,32,16
	.word	264
	.byte	11
	.byte	'Can_HwHandleType',0,9,43,16
	.word	171
	.byte	12,10,93,9,8,13
	.byte	'Class',0
	.word	154
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	154
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	264
	.byte	4,2,35,4,0,11
	.byte	'OsTrapInfoType',0,10,97,3
	.word	1873
	.byte	16,68
	.word	264
	.byte	17,16,0,12,10,154,1,9,68,13
	.byte	'store',0
	.word	1953
	.byte	68,2,35,0,0,16,68
	.word	1962
	.byte	17,0,0,11
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	1984
	.byte	11
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	264
	.byte	12,10,175,1,9,8,13
	.byte	'sp',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	264
	.byte	4,2,35,4,0,11
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	2044
	.byte	11
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	2044
	.byte	18,1,1,6
	.word	2129
	.byte	11
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	2132
	.byte	11
	.byte	'ApplicationType',0,10,193,1,23
	.word	154
	.byte	19
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,13
	.byte	'app_id',0
	.word	154
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	154
	.byte	1,2,35,1,0,11
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	2195
	.byte	11
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	264
	.byte	11
	.byte	'AreaIdType',0,10,204,1,16
	.word	171
	.byte	11
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	264
	.byte	11
	.byte	'TickType',0,10,221,1,22
	.word	264
	.byte	11
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	264
	.byte	11
	.byte	'Os_Lockable',0,10,234,1,18
	.word	600
	.byte	11
	.byte	'CoreIdType',0,10,236,1,16
	.word	171
	.byte	11
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	171
	.byte	14,10,239,1,9,4,15
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,15
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,11
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	2502
	.byte	14,10,174,2,9,4,15
	.byte	'APPLICATION_ACCESSIBLE',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	2595
	.byte	20
	.byte	'void',0,6
	.word	2707
	.byte	21,1,1,22
	.word	154
	.byte	22
	.word	2713
	.byte	0,6
	.word	2718
	.byte	11
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	2732
	.byte	19
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,13
	.byte	'elapsed',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	264
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	264
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	264
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	2044
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	2044
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	2044
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	2044
	.byte	8,2,35,40,0,11
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	2767
	.byte	6
	.word	2767
	.byte	11
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	2965
	.byte	11
	.byte	'EventMaskType',0,10,206,2,15
	.word	154
	.byte	11
	.byte	'Os_imaskType',0,10,211,2,16
	.word	264
	.byte	19
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,13
	.byte	'meter',0
	.word	2767
	.byte	48,2,35,0,0,11
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	3044
	.byte	6
	.word	3044
	.byte	23
	.word	3105
	.byte	19
	.byte	'Os_ISRType_s',0,10,216,2,16,24,13
	.byte	'entry_function',0
	.word	2137
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	3110
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	264
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	2044
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	154
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	154
	.byte	1,2,35,21,0,11
	.byte	'Os_ISRType',0,10,223,2,3
	.word	3115
	.byte	6
	.word	2129
	.byte	23
	.word	3115
	.byte	6
	.word	3274
	.byte	11
	.byte	'ISRType',0,10,224,2,46
	.word	3279
	.byte	11
	.byte	'Os_bitmask',0,10,239,2,22
	.word	264
	.byte	11
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	264
	.byte	11
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	264
	.byte	11
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	264
	.byte	24,10,243,2,9,4,13
	.byte	'p0',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	264
	.byte	4,2,35,0,0,11
	.byte	'Os_psetType',0,10,247,2,3
	.word	3387
	.byte	24,10,249,2,9,4,13
	.byte	't0',0
	.word	264
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	264
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	264
	.byte	4,2,35,0,0,11
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	3451
	.byte	11
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	154
	.byte	19
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	1993
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	2767
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	154
	.byte	1,2,35,116,0,11
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	3549
	.byte	16,68
	.word	1962
	.byte	17,0,0,6
	.word	3549
	.byte	23
	.word	3675
	.byte	19
	.byte	'Os_TaskType_s',0,10,134,3,16,40,13
	.byte	'dynamic',0
	.word	3680
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	2137
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	3387
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	3451
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	3451
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	171
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	264
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	2044
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	154
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	154
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	154
	.byte	1,2,35,38,0,11
	.byte	'Os_TaskType',0,10,146,3,3
	.word	3685
	.byte	23
	.word	3685
	.byte	6
	.word	3935
	.byte	11
	.byte	'TaskType',0,10,147,3,47
	.word	3940
	.byte	25
	.byte	'Os_TaskStateType',0,10,155,3,6,4,15
	.byte	'SUSPENDED',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'RUNNING',0,3,0,11
	.byte	'TaskStateType',0,10,156,3,31
	.word	3963
	.byte	24,10,167,3,3,4,13
	.byte	'tpmask',0
	.word	3451
	.byte	4,2,35,0,0,19
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,13
	.byte	'saved_priority',0
	.word	4050
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	4073
	.byte	6
	.word	4073
	.byte	23
	.word	4153
	.byte	19
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,13
	.byte	'dynamic',0
	.word	4158
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	3451
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	154
	.byte	1,2,35,8,0,11
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	4163
	.byte	12,10,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	264
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	264
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	4262
	.byte	12,10,206,3,9,8,13
	.byte	'Running',0
	.word	154
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	154
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	264
	.byte	4,2,35,4,0,11
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	4357
	.byte	26
	.word	154
	.byte	1,1,6
	.word	4443
	.byte	11
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	4450
	.byte	19
	.byte	's_swd',0,10,222,3,12,4,13
	.byte	'count',0
	.word	264
	.byte	4,2,35,0,0,24,10,221,3,3,4,13
	.byte	'sw',0
	.word	4486
	.byte	4,2,35,0,0,19
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,13
	.byte	'type_dependent',0
	.word	4514
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	4533
	.byte	6
	.word	4533
	.byte	23
	.word	4611
	.byte	19
	.byte	'Os_CounterType_s',0,10,227,3,16,28,13
	.byte	'dynamic',0
	.word	4616
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	4455
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	4262
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	2713
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	154
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	154
	.byte	1,2,35,25,0,11
	.byte	'Os_CounterType',0,10,234,3,3
	.word	4621
	.byte	6
	.word	4443
	.byte	23
	.word	4621
	.byte	6
	.word	4773
	.byte	11
	.byte	'CounterType',0,10,235,3,52
	.word	4778
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	4804
	.byte	23
	.word	.L6-.L3
	.byte	6
	.word	5004
	.byte	11
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	5009
	.byte	19
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,13
	.byte	'match',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	5014
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	4804
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	171
	.byte	2,2,35,12,0,6
	.word	5041
	.byte	23
	.word	5134
.L6:
	.byte	19
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,13
	.byte	'dynamic',0
	.word	5139
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	4783
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	154
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	171
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	154
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	154
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	154
	.byte	1,2,35,14,0,11
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	5144
	.byte	23
	.word	5144
	.byte	6
	.word	5324
	.byte	23
	.word	4621
	.byte	6
	.word	5334
	.byte	27
	.word	2437
	.byte	27
	.word	3387
	.byte	27
	.word	3284
	.byte	27
	.word	3945
	.byte	27
	.word	3451
	.byte	27
	.word	154
	.byte	27
	.word	3945
	.byte	19
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	1873
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	5344
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	5349
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	5354
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	5359
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	5364
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	2970
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	2767
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	154
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	5369
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	2044
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	154
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	5374
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	2044
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	154
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	154
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	154
	.byte	1,2,35,110,0,11
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	5379
	.byte	6
	.word	264
	.byte	23
	.word	3115
	.byte	6
	.word	5835
	.byte	23
	.word	3685
	.byte	6
	.word	5845
	.byte	6
	.word	2767
	.byte	19
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	264
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	264
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	264
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	264
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	264
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	1993
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	154
	.byte	1,2,35,92,0,11
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	5860
	.byte	11
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	264
	.byte	19
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	154
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	154
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	264
	.byte	4,2,35,4,0,11
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	6137
	.byte	19
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,13
	.byte	'MaskRef',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	264
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	154
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	154
	.byte	1,2,35,9,0,11
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6273
	.byte	16,4
	.word	154
	.byte	17,3,0,19
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	6413
	.byte	4,2,35,0,0,11
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6422
	.byte	19
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	171
	.byte	2,2,35,0,0,11
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6523
	.byte	19
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	171
	.byte	2,2,35,4,0,11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6598
	.byte	23
	.word	6598
	.byte	6
	.word	6763
	.byte	19
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6768
	.byte	4,2,35,0,0,11
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	6773
	.byte	19
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,13
	.byte	'CanEventType',0
	.word	6413
	.byte	4,2,35,0,0,11
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	6873
	.byte	11
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	154
	.byte	11
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	154
	.byte	12,12,168,1,9,12,13
	.byte	'in',0
	.word	2713
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	2713
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	171
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	154
	.byte	1,2,35,10,0,11
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	7019
	.byte	14,12,175,1,9,4,15
	.byte	'RTE_DRA',0,0,15
	.byte	'RTE_WOWP',0,1,15
	.byte	'RTE_TASK',0,2,15
	.byte	'RTE_ARE',0,3,15
	.byte	'RTE_EV',0,4,15
	.byte	'RTE_MSI',0,5,0,11
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	7106
	.byte	6
	.word	7019
	.byte	19
	.byte	'Rte_QCmnType',0,12,184,1,16,24,13
	.byte	'dynamic',0
	.word	7204
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	154
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	171
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	171
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	2713
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	2713
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	7106
	.byte	4,2,35,20,0,11
	.byte	'Rte_QCmnType',0,12,192,1,3
	.word	7209
	.byte	11
	.byte	'Rte_AlarmRefType',0,12,224,1,32
	.word	264
	.byte	11
	.byte	'Rte_AlarmIndexType',0,12,226,1,32
	.word	171
	.byte	16,128,8
	.word	154
	.byte	17,255,7,0,11
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7447
	.byte	11
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	264
	.byte	11
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	171
	.byte	11
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	154
	.byte	11
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	154
	.byte	11
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	154
	.byte	12,13,92,9,2,13
	.byte	'DeviceMode',0
	.word	154
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	154
	.byte	1,2,35,1,0,11
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7638
	.byte	11
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	154
	.byte	11
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	154
	.byte	11
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	154
	.byte	11
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	154
	.byte	11
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	154
	.byte	11
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	171
	.byte	11
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	154
	.byte	12,13,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	171
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	154
	.byte	1,2,35,2,0,11
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	7979
	.byte	11
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	171
	.byte	11
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	154
	.byte	11
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	264
	.byte	11
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	171
	.byte	11
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	154
	.byte	11
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	154
	.byte	12,13,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	264
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	171
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	154
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	154
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	154
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	154
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	154
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	154
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	154
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	154
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	154
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	154
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	154
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	154
	.byte	1,2,35,21,0,11
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8211
	.byte	12,13,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	171
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	171
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	154
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	154
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	154
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	154
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	154
	.byte	1,2,35,8,0,11
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8715
	.byte	11
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	154
	.byte	11
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	154
	.byte	11
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	154
	.byte	11
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	154
	.byte	11
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	154
	.byte	11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7458
	.byte	16,128,8
	.word	154
	.byte	17,255,7,0,11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7458
	.byte	11
	.byte	'Rte_TaskRefType',0,14,184,1,32
	.word	3945
	.byte	11
	.byte	'Rte_EventRefType',0,14,185,1,32
	.word	154
	.byte	11
	.byte	'Rte_EventType',0,14,186,1,32
	.word	264
	.byte	11
	.byte	'Rte_REActCounterType',0,14,252,1,15
	.word	154
	.byte	6
	.word	154
	.byte	11
	.byte	'Rte_REActCounterRefType',0,14,253,1,58
	.word	9637
	.byte	12,14,255,1,9,8,13
	.byte	'task',0
	.word	9533
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	9642
	.byte	4,2,35,4,0,11
	.byte	'Rte_REContainerType',0,14,130,2,3
	.word	9675
	.byte	23
	.word	3685
	.byte	6
	.word	9739
	.byte	6
	.word	154
	.byte	23
	.word	9675
	.byte	6
	.word	9754
	.byte	11
	.byte	'Rte_REContainerRefType',0,14,132,2,60
	.word	9759
	.byte	11
	.byte	'Rte_MSICounterType',0,14,149,2,16
	.word	171
	.byte	6
	.word	171
	.byte	11
	.byte	'Rte_MSICounterRefType',0,14,150,2,56
	.word	9824
	.byte	11
	.byte	'Rte_MSIPendingFlagType',0,14,152,2,17
	.word	154
	.byte	6
	.word	154
	.byte	11
	.byte	'Rte_MSIPendingFlagRefType',0,14,153,2,60
	.word	9892
	.byte	12,14,163,2,9,24,13
	.byte	'counter',0
	.word	9829
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	154
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	9897
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	9533
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	9642
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	154
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	171
	.byte	2,2,35,22,0,11
	.byte	'Rte_MSITableEntry',0,14,172,2,3
	.word	9932
	.byte	6
	.word	171
	.byte	6
	.word	154
	.byte	11
	.byte	'Rte_TaskArrayIndex',0,14,179,2,16
	.word	154
	.byte	11
	.byte	'Rte_NrWaitingTasks',0,14,180,2,16
	.word	154
	.byte	12,14,182,2,9,4,13
	.byte	'pending',0
	.word	154
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	154
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	154
	.byte	1,2,35,2,0,11
	.byte	'Rte_WaitableDatum',0,14,186,2,3
	.word	10150
	.byte	6
	.word	10150
	.byte	12,14,226,2,9,12,13
	.byte	'event_id',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	10242
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	264
	.byte	4,2,35,8,0,11
	.byte	'Rte_WOWP_NotificationType',0,14,230,2,3
	.word	10247
	.byte	23
	.word	10247
	.byte	6
	.word	10336
	.byte	11
	.byte	'Rte_WOWP_NotificationRefType',0,14,232,2,66
	.word	10341
	.byte	11
	.byte	'Rte_ARE_NotificationType',0,14,234,2,29
	.word	9675
	.byte	19
	.byte	'Rte_QTaskType',0,14,243,2,16,28,13
	.byte	'cmn',0
	.word	7209
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9533
	.byte	4,2,35,24,0,11
	.byte	'Rte_QTaskType',0,14,246,2,3
	.word	10418
	.byte	19
	.byte	'Rte_QREType',0,14,250,2,16,28,13
	.byte	'cmn',0
	.word	7209
	.byte	24,2,35,0,13
	.byte	're',0
	.word	9764
	.byte	4,2,35,24,0,11
	.byte	'Rte_QREType',0,14,253,2,3
	.word	10489
	.byte	23
	.word	9675
	.byte	6
	.word	10554
	.byte	19
	.byte	'Rte_QWWPType',0,14,129,3,16,28,13
	.byte	'cmn',0
	.word	7209
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	10346
	.byte	4,2,35,24,0,11
	.byte	'Rte_QWWPType',0,14,132,3,3
	.word	10564
	.byte	23
	.word	10247
	.byte	6
	.word	10632
	.byte	19
	.byte	'Rte_QEvType',0,14,136,3,16,36,13
	.byte	'cmn',0
	.word	7209
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9533
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	154
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9642
	.byte	4,2,35,32,0,11
	.byte	'Rte_QEvType',0,14,141,3,3
	.word	10642
	.byte	19
	.byte	'Rte_QMSIType',0,14,145,3,16,48,13
	.byte	'cmn',0
	.word	7209
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9533
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	154
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9642
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	9829
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	9897
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	171
	.byte	2,2,35,44,0,11
	.byte	'Rte_QMSIType',0,14,153,3,3
	.word	10737
	.byte	12,15,52,9,1,28
	.byte	'isEventTrig',0,1
	.word	154
	.byte	1,7,2,35,0,28
	.byte	'isTriggerIpduSendWithMetadata',0,1
	.word	154
	.byte	1,6,2,35,0,28
	.byte	'isGwIpduSend',0,1
	.word	154
	.byte	1,5,2,35,0,28
	.byte	'isModeChangd',0,1
	.word	154
	.byte	1,4,2,35,0,28
	.byte	'sigTransProp',0,1
	.word	154
	.byte	1,3,2,35,0,28
	.byte	'isTimeoutReq',0,1
	.word	154
	.byte	1,2,2,35,0,28
	.byte	'ignoreRepetitions',0,1
	.word	154
	.byte	1,1,2,35,0,0,11
	.byte	'Com_SendIpduInfo',0,15,61,3
	.word	10892
	.byte	12,15,76,9,8,13
	.byte	'TimePeriodFact',0
	.word	171
	.byte	2,2,35,0,13
	.byte	'TimeOffsetFact',0
	.word	171
	.byte	2,2,35,2,13
	.byte	'RepetitionPeriodFact',0
	.word	171
	.byte	2,2,35,4,13
	.byte	'NumOfRepetitions',0
	.word	154
	.byte	1,2,35,6,13
	.byte	'Mode',0
	.word	154
	.byte	1,2,35,7,0,11
	.byte	'Com_TransModeInfo',0,15,93,2
	.word	11112
	.byte	23
	.word	11112
	.byte	6
	.word	11262
	.byte	11
	.byte	'Com_TMConstPtrType',0,15,103,65
	.word	11267
	.byte	12,15,136,1,9,12,13
	.byte	'Init_Val',0
	.word	264
	.byte	4,2,35,0,13
	.byte	'txSignalFields',0
	.word	171
	.byte	2,2,35,4,13
	.byte	'Bit_Pos',0
	.word	154
	.byte	1,2,35,6,13
	.byte	'BitSize',0
	.word	154
	.byte	1,2,35,7,13
	.byte	'IpduRef',0
	.word	154
	.byte	1,2,35,8,13
	.byte	'General',0
	.word	154
	.byte	1,2,35,9,0,11
	.byte	'Com_Prv_xTxSigCfg_tst',0,15,201,1,2
	.word	11299
	.byte	12,15,247,1,9,16,13
	.byte	'Notification_Cbk',0
	.word	2132
	.byte	4,2,35,0,13
	.byte	'Init_Val',0
	.word	264
	.byte	4,2,35,4,13
	.byte	'Bit_Pos',0
	.word	154
	.byte	1,2,35,8,13
	.byte	'SigBuff_Index',0
	.word	154
	.byte	1,2,35,9,13
	.byte	'BitSize',0
	.word	154
	.byte	1,2,35,10,13
	.byte	'IpduRef',0
	.word	154
	.byte	1,2,35,11,13
	.byte	'General',0
	.word	154
	.byte	1,2,35,12,13
	.byte	'rxSignalFields',0
	.word	154
	.byte	1,2,35,13,0,11
	.byte	'Com_Prv_xRxSigCfg_tst',0,15,171,2,2
	.word	11447
	.byte	23
	.word	11447
	.byte	6
	.word	11644
	.byte	11
	.byte	'Com_RxSigConstPtrType',0,15,180,2,68
	.word	11649
	.byte	12,15,211,5,9,24,13
	.byte	'BuffPtr',0
	.word	686
	.byte	4,2,35,0,13
	.byte	'Com_TMConstPtr',0
	.word	11267
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	171
	.byte	2,2,35,8,13
	.byte	'Timeout_Fact',0
	.word	171
	.byte	2,2,35,10,13
	.byte	'Min_Delay_Time_Fact',0
	.word	171
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	171
	.byte	2,2,35,14,13
	.byte	'PdurId',0
	.word	171
	.byte	2,2,35,16,13
	.byte	'TxSigId_Index',0
	.word	154
	.byte	1,2,35,18,13
	.byte	'txIPduFields',0
	.word	171
	.byte	2,2,35,20,13
	.byte	'MainFunctionRef',0
	.word	154
	.byte	1,2,35,22,13
	.byte	'PaddingByte',0
	.word	154
	.byte	1,2,35,23,0,11
	.byte	'Com_Prv_xTxIpduInfoCfg_tst',0,15,162,6,3
	.word	11685
	.byte	23
	.word	11685
	.byte	6
	.word	11964
	.byte	11
	.byte	'Com_TxIpduConstPtrType',0,15,171,6,72
	.word	11969
	.byte	12,15,137,7,9,20,13
	.byte	'BuffPtr',0
	.word	686
	.byte	4,2,35,0,13
	.byte	'TimeOutNotification_Cbk',0
	.word	2132
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	171
	.byte	2,2,35,8,13
	.byte	'FirstTimeout_Factor',0
	.word	171
	.byte	2,2,35,10,13
	.byte	'Timeout_Fact',0
	.word	171
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	171
	.byte	2,2,35,14,13
	.byte	'RxSigId_Index',0
	.word	154
	.byte	1,2,35,16,13
	.byte	'MainFunctionRef',0
	.word	154
	.byte	1,2,35,17,13
	.byte	'rxIPduFields',0
	.word	154
	.byte	1,2,35,18,0,11
	.byte	'Com_Prv_xRxIpduInfoCfg_tst',0,15,197,7,3
	.word	12006
	.byte	12,15,219,7,9,4,13
	.byte	'FirstIpdu_Index',0
	.word	171
	.byte	2,2,35,0,13
	.byte	'NoOfRxPdus',0
	.word	171
	.byte	2,2,35,2,0,11
	.byte	'Com_Prv_xIpduGrpInfoCfg_tst',0,15,224,7,3
	.word	12257
	.byte	12,15,244,7,9,1,13
	.byte	'txSigRAMFields',0
	.word	154
	.byte	1,2,35,0,0,11
	.byte	'Com_TxSignalFlagType',0,15,248,7,2
	.word	12346
	.byte	12,15,167,8,9,1,13
	.byte	'rxSigRAMFields',0
	.word	154
	.byte	1,2,35,0,0,11
	.byte	'Com_RxSignalFlagType',0,15,171,8,2
	.word	12407
	.byte	12,15,135,9,9,16,13
	.byte	'CurrentTxModePtr',0
	.word	11272
	.byte	4,2,35,0,13
	.byte	'Com_MinDelayTick',0
	.word	171
	.byte	2,2,35,4,13
	.byte	'Com_Tick_Tx',0
	.word	171
	.byte	2,2,35,6,13
	.byte	'Com_n_Tick_Tx',0
	.word	171
	.byte	2,2,35,8,13
	.byte	'Com_TickTxTimeout',0
	.word	171
	.byte	2,2,35,10,13
	.byte	'Com_TxFlags',0
	.word	171
	.byte	2,2,35,12,13
	.byte	'Com_n',0
	.word	154
	.byte	1,2,35,14,13
	.byte	'Com_TransMode',0
	.word	154
	.byte	1,2,35,15,0,11
	.byte	'Com_TxIpduRamData',0,15,189,9,3
	.word	12468
	.byte	23
	.word	11112
	.byte	6
	.word	12684
	.byte	6
	.word	12468
	.byte	11
	.byte	'Com_TxIpduRamPtrType',0,15,198,9,62
	.word	12694
	.byte	12,15,218,9,9,6,13
	.byte	'RxIPduLength',0
	.word	171
	.byte	2,2,35,0,13
	.byte	'RxTicks_u16',0
	.word	171
	.byte	2,2,35,2,13
	.byte	'RxFlags',0
	.word	154
	.byte	1,2,35,4,0,11
	.byte	'Com_RxIpduRamData',0,15,245,9,2
	.word	12729
	.byte	6
	.word	171
	.byte	12,15,128,10,9,8,13
	.byte	'RxGwQueuePtr',0
	.word	12823
	.byte	4,2,35,0,13
	.byte	'Com_RxGwQueueWrite_ux',0
	.word	154
	.byte	1,2,35,4,13
	.byte	'Com_RxGwQueueRead_ux',0
	.word	154
	.byte	1,2,35,5,0,11
	.byte	'Com_RxGwQueueRAMType',0,15,133,10,2
	.word	12828
	.byte	12,15,138,10,9,4,13
	.byte	'indexGwMapSigDestIdArray',0
	.word	171
	.byte	2,2,35,0,13
	.byte	'destCount',0
	.word	154
	.byte	1,2,35,2,0,11
	.byte	'Com_Prv_xGwMapSigCfg_tst',0,15,142,10,2
	.word	12948
	.byte	12,15,147,10,9,2,13
	.byte	'GwMap_DestId',0
	.word	171
	.byte	2,2,35,0,0,11
	.byte	'Com_Prv_xGwMapSigIdCfg_tst',0,15,150,10,2
	.word	13042
	.byte	12,15,183,10,9,4,13
	.byte	'StartIPduId',0
	.word	154
	.byte	1,2,35,0,13
	.byte	'NumOfIpdus',0
	.word	154
	.byte	1,2,35,1,13
	.byte	'TimeBaseInMs',0
	.word	154
	.byte	1,2,35,2,0,11
	.byte	'Com_MainFunctionCfgType',0,15,188,10,3
	.word	13107
	.byte	12,15,194,10,9,12,13
	.byte	'Com_SigType_pu8',0
	.word	686
	.byte	4,2,35,0,13
	.byte	'Com_SigType_pu16',0
	.word	514
	.byte	4,2,35,4,13
	.byte	'Com_SigType_pu32',0
	.word	600
	.byte	4,2,35,8,0,11
	.byte	'Com_Prv_xRxRamBuf_tst',0,15,253,10,3
	.word	13210
	.byte	11
	.byte	'rba_BswSrv_uint64',0,16,66,28
	.word	1074
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,46,1,3
	.byte	8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,21,0,54,15,0,0,11,22,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14
	.byte	4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0,17,33,0,47,15,0,0,18,21,0
	.byte	54,15,39,12,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,59,0,3,8,0,0,21,21,1,54,15,39,12,0,0,22,5,0
	.byte	73,19,0,0,23,38,0,73,19,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0
	.byte	26,21,0,73,19,54,15,39,12,0,0,27,53,0,73,19,0,0,28,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Bfx\\api\\Bfx_Bit_Inl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_MainFunctionRouteSignals.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg_Internal.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_Prv_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     1  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     2  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     3  /*********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     4  * Preprocessor includes
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     5  *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     6  #include "Com_Prv.h"
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     7  #include "Com_Prv_Inl.h"
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     8  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	     9  /*********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    10  * Global functions (declared in header files )
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    11  *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    12  #if defined (COM_SIGNALGATEWAY) || defined (COM_SIGNALGROUPGATEWAY)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    13  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    14  static INLINE FUNC(Std_ReturnType, COM_CODE) Com_ReadSigGwReceiveQueue(PduIdType*             ComRxPduId,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    15                                                                         Com_RxGwQueueIndexType l_Com_RxGwQueueWrite_ux);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    16  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    17  LOCAL_INLINE FUNC(void,COM_CODE)    Com_Prv_PrepareTxIpdu(void);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    18  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    19  LOCAL_INLINE FUNC(void, COM_CODE)   Com_Prv_ReadRxQueueAndProcess(void);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    20  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    21  #ifdef COM_SIGNALGATEWAY
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    22  LOCAL_INLINE FUNC(void, COM_CODE)   Com_Prv_ProcessRxSignalGateway(Com_RxIpduConstPtrType RxIPduConstPtr);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    23  #endif /* #ifdef COM_SIGNALGATEWAY */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    24  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    25  #if defined COM_SIGNALGROUPGATEWAY && (defined (COM_RX_SIGNALGROUP) && defined (COM_TX_SIGNALGROUP))
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    26  LOCAL_INLINE FUNC(void, COM_CODE)   Com_Prv_ProcessRxSigGrpGateway(Com_RxIpduConstPtrType RxIPduConstPtr);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    27  #endif /* #if defined COM_SIGNALGROUPGATEWAY && (defined (COM_RX_SIGNALGROUP) && defined (COM_TX_SIGNALGROUP)) */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    28  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    29  /*********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    30   Function name    : Com_MainFunctionRouteSignals
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    31   Syntax           : void Com_MainFunctionRouteSignals(void)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    32   Description      : Service that Calls the signal gateway part of the AUTOSAR COM module
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    33                      to forward received signals to be routed.
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    34   Parameter        : void
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    35   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    36   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    37  #define COM_START_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    38  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    39  FUNC(void, COM_CODE) Com_MainFunctionRouteSignals( void )
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    40  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    41  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    42      /* Check if Com module is initialized */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    43      if (
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    44      #if(COM_CONFIGURATION_USE_DET == STD_ON)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    45          /* Report DET error COM_E_UNINIT when Com module is not initialized */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    46          Com_Prv_DETCheck_Void(COMServiceId_MainFunctionRouteSignals)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    47      #else
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    48          (Com_Uninit_Flag == COM_INIT)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    49      #endif /* #if(COM_CONFIGURATION_USE_DET == STD_ON) */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    50      )
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    51      {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    52          /* Call function to read Rx queue and process */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    53          Com_Prv_ReadRxQueueAndProcess();
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    54  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    55          /* Call function to send the IPdu */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    56          Com_Prv_PrepareTxIpdu();
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    57      }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    58  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    59  #define COM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    60  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    61  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    62  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    63   Function name    : Com_WriteSigGwReceiveQueue
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    64   Syntax           : Std_ReturnType Com_WriteSigGwReceiveQueue(ComRxPduId)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    65   Description      : this function writes into the Rx Gw queue and updated the pointers accordingly
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    66   To Be considered before using this function
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    67   --------------------------------------------
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    68  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    69   Parameter        : ComRxPduId
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    70   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    71   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    72  #define COM_START_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    73  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    74  FUNC(Std_ReturnType, COM_CODE) Com_WriteSigGwReceiveQueue( PduIdType ComRxPduId)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    75  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    76      /* Local variables */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    77      Com_RxGwQueuePtrType l_RxGwQueuePtr_struc;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    78      uint8 Status;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    79  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    80      /* Initialization of variables */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    81      l_RxGwQueuePtr_struc = COM_GET_RXGWQUEUE_S;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    82      Status = E_OK;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    83  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    84      /* The write operation need not be conditional,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    85       * 1. As the length of the queue is fixed and queue need not be updated for any new updates on the signal */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    86      l_RxGwQueuePtr_struc->RxGwQueuePtr[l_RxGwQueuePtr_struc->Com_RxGwQueueWrite_ux] = ComRxPduId;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    87      /* Perform a modulo to get to the next available location */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    88      l_RxGwQueuePtr_struc->Com_RxGwQueueWrite_ux = ( Com_RxGwQueueIndexType )
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    89                                                    ( ( l_RxGwQueuePtr_struc->Com_RxGwQueueWrite_ux + 1 ) %
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    90                                                      ( COM_GET_NUM_GWSRC_IPDUS + 1u ) );
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    91  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    92  #if(COM_CONFIGURATION_USE_DET == STD_ON)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    93     /* If the buffer is full and there is a request to write into the queue, It is taken care that no new request are
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    94      * recieved after that. Hence if DET is enabled call DET Function to check DET Error COM_E_PARAM
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    95      */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    96      if (COM_FALSE == (Com_Prv_DETCheck_Param_Only((
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    97                        ((l_RxGwQueuePtr_struc->Com_RxGwQueueWrite_ux) % (COM_GET_NUM_GWSRC_IPDUS+1u)) ==
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    98                         (l_RxGwQueuePtr_struc->Com_RxGwQueueRead_ux)), COMServiceId_MainFunctionRouteSignals)))
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	    99      {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   100          /* Return with E_NOT_OK because of DET error COM_E_PARAM or COM_E_UNINIT */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   101          Status = E_NOT_OK;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   102      }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   103  #endif /* #if(COM_CONFIGURATION_USE_DET == STD_ON) */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   104  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   105      return(Status);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   106  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   107  #define COM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   108  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   109  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   110  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   111   Function name    : Com_ReadSigGwReceiveQueue
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   112   Syntax           : Std_ReturnType Com_ReadSigGwReceiveQueue( PduIdType*             ComRxPduId,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   113                                                                Com_RxGwQueueIndexType l_Com_RxGwQueueWrite_ux)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   114   Description      : this function reads from the Rx Gw queue and updated the pointers accordingly
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   115   --------------------------------------------
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   116  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   117   Parameter        : (IN/OUT)ComRxPduId
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   118                      (IN)    l_Com_RxGwQueueWrite_ux
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   119   Return value     : Std_ReturnType
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   120   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   121  static INLINE FUNC(Std_ReturnType, COM_CODE) Com_ReadSigGwReceiveQueue( PduIdType*             ComRxPduId,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   122                                                                          Com_RxGwQueueIndexType l_Com_RxGwQueueWrite_ux)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   123  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   124      Com_RxGwQueuePtrType l_RxGwQueuePtr_struc;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   125      Std_ReturnType       retVal_uo;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   126  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   127      l_RxGwQueuePtr_struc = COM_GET_RXGWQUEUE_S;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   128      retVal_uo            = E_NOT_OK;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   129  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   130      /* This operation is performed before every read to confirm if the data is present in the queue */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   131      if(l_Com_RxGwQueueWrite_ux != l_RxGwQueuePtr_struc->Com_RxGwQueueRead_ux)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   132      {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   133          /* The Read operation need not be conditional,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   134           * 1. As the length of the queue is fixed and queue need not be updated for any new updates on the signal */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   135          *ComRxPduId = l_RxGwQueuePtr_struc->RxGwQueuePtr[l_RxGwQueuePtr_struc->Com_RxGwQueueRead_ux];
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   136          /* Perform a modulo to get to the next available location */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   137          l_RxGwQueuePtr_struc->Com_RxGwQueueRead_ux = ( Com_RxGwQueueIndexType )
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   138                                                       ( ( l_RxGwQueuePtr_struc->Com_RxGwQueueRead_ux + 1 ) %
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   139                                                         ( COM_GET_NUM_GWSRC_IPDUS + 1u ) );
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   140          retVal_uo = E_OK;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   141      }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   142  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   143      return(retVal_uo);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   144  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   145  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   146  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   147   Function name    : Com_Prv_PrepareTxIpdu
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   148   Syntax           : void Com_Prv_PrepareTxIpdu(void)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   149   Description      : This function process the Ipdu transmission
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   150   Parameter        : None
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   151   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   152   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   153  /* HIS METRIC CALLS VIOLATION IN Com_Prv_PrepareTxIpdu:
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   154     Com_Prv_PrepareTxIpdu function contains necessary function calls statements.
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   155     HIS metric compliance would decrease readability and maintainability */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   156  LOCAL_INLINE FUNC(void,COM_CODE) Com_Prv_PrepareTxIpdu(void)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   157  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   158  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   159      Com_TxIpduConstPtrType       TxIPduConstPtr; /* Local pointer to the Tx ipdu static configuration */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   160      Com_TxIpduRamPtrType         TxIpduRamPtr;   /* Local pointer to the Tx ipdu RAM structure        */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   161      VAR(uint16_least, AUTOMATIC) Index_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   162  #if defined (COM_SIGNALGROUPGATEWAY) && defined (COM_TX_SIGNALGROUP)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   163      Com_TxSigGrpRamPtrType       TxSigGrpRamPtr;   /* Local pointer to Tx SignalGroup status structure     */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   164      VAR(uint16_least, AUTOMATIC) Idx_SigGrp_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   165      VAR(uint16_least, AUTOMATIC) limit_siggrp_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   166  #endif
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   167      TxIpduRamPtr   = &COM_GET_TXPDURAM_S(0);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   168  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   169      TxIPduConstPtr = COM_GET_TX_IPDU_CONSTDATA(0);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   170  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   171      for(Index_ui = COM_ZERO; Index_ui < COM_GET_NUM_TX_IPDU; Index_ui++)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   172      {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   173  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   174          /* MR12 RULE 13.5 VIOLATION: Below conditional statement reads signal field status.
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   175          *  HIS-LEVEL parameter will be violated if more conditional statements are added.
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   176          *  Hence the warning is suppressed. */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   177          /* Check if IPdu group is started */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   178          if((Com_GetValue(TXIPDU,_ISGWPDU,TxIPduConstPtr->txIPduFields) != COM_FALSE) &&
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   179             (Com_CheckTxIPduStatus((PduIdType)Index_ui)))
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   180          {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   181              /* Process Tx-IPdu transmission */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   182  #if defined (COM_SIGNALGROUPGATEWAY) && defined (COM_TX_SIGNALGROUP)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   183              limit_siggrp_ui  = (uint32)TxIPduConstPtr->FirstTxSigGrp_Index +
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   184                                 (uint32)TxIPduConstPtr->No_Of_SigGrp_Ref;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   185  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   186              TxSigGrpRamPtr   = &COM_GET_TXSIGGRPFLAG(TxIPduConstPtr->FirstTxSigGrp_Index);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   187  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   188              for( Idx_SigGrp_ui = (uint32)TxIPduConstPtr->FirstTxSigGrp_Index;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   189                   Idx_SigGrp_ui < limit_siggrp_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   190                   Idx_SigGrp_ui++)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   191              {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   192                  /* TxSigGrpRamPtr ->txSigGrpRAMFields.IsGwUpdated = COM_TRUE */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   193                  if(Com_GetRamValue(TXSIGGRP,_ISGWUPDTD,TxSigGrpRamPtr ->txSigGrpRAMFields) == COM_TRUE)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   194                  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   195                      /* TxSigGrpRamPtr ->txSigGrpRAMFields.IsGwUpdated = COM_FALSE */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   196                      Com_SetRamValue(TXSIGGRP,_ISGWUPDTD,TxSigGrpRamPtr ->txSigGrpRAMFields,COM_FALSE);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   197  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   198                      /* 1. Set the UpdateBit
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   199                       * 2. Update TxIPdu buffer with the latest Tx-GroupSignal data
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   200                       * 3. Evaluate TMC of GroupSignals
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   201                       * 4. Evaluate TMS of TxIPdu
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   202                       * Return value is based on IPduGroup status that can be ignored here,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   203                       * as it is checked later in Com_MainFunctionRouteSignals()
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   204                       */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   205                      (void)Com_InternalSendSignalGroup( (Com_SignalGroupIdType)Idx_SigGrp_ui );
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   206                  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   207                  TxSigGrpRamPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   208              }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   209  #endif /* #if defined (COM_SIGNALGROUPGATEWAY) && defined (COM_TX_SIGNALGROUP) */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   210  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   211              /* MR12 RULE 13.5 VIOLATION: Below conditional statement reads flag status.
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   212              * Evaluation(or no evaluation) of the 2nd or 3rd operands does not impact the system behaviour,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   213              * moreover HIS-LEVEL parameter will be violated if more conditional statements are added.
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   214              * Hence the warning is suppressed. */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   215              if (((Com_GetRamValue(TXIPDU,_ISGWTRIGGRD,TxIpduRamPtr->Com_TxFlags) != COM_FALSE) &&
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   216                  (Com_GetRamValue(TXIPDU,_LATESTMODE,TxIpduRamPtr->Com_TransMode) <= COM_TXMODE_MIXED))
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   217                  #ifdef COM_TxFilters
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   218                  || (Com_GetRamValue(TXIPDU,_GWIPDUTMSCHANGED,TxIpduRamPtr->Com_TxFlags) != COM_FALSE)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   219                  #endif /* #ifdef COM_TxFilters */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   220              )
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   221              {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   222  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   223                  /* All unused flags are reset here */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   224                  Com_SendIpduInfo sendIpduFlag_u16 = COM_CLEAR_SENDIPDU_FLAGS;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   225  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   226                  /* For the direct part of the Mixed TM, Signal Transfer property is set directly from
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   227                   * _ISGWTRIGGRD flag. In all the other cases, it is ignored. */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   228                  sendIpduFlag_u16.sigTransProp =
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   229                        COM_BOOL_TO_UNSIGNED(Com_GetRamValue(TXIPDU,_ISGWTRIGGRD,TxIpduRamPtr->Com_TxFlags));
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   230  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   231                  /* Reset the global flag that stores if any triggered Signal/SignalGroup is updated */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   232                  Com_SetRamValue(TXIPDU,_ISGWTRIGGRD,TxIpduRamPtr->Com_TxFlags,COM_FALSE);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   233  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   234              #ifdef COM_TxFilters
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   235                  sendIpduFlag_u16.isModeChangd =
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   236                              COM_BOOL_TO_UNSIGNED(Com_GetRamValue(TXIPDU,_GWIPDUTMSCHANGED,TxIpduRamPtr->Com_TxFlags));
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   237  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   238                  /* Reset the global flag that stores the IPdu TMS Change after the last transmission */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   239                  Com_SetRamValue(TXIPDU,_GWIPDUTMSCHANGED,TxIpduRamPtr->Com_TxFlags,COM_FALSE);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   240              #endif /* #ifdef COM_TxFilters */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   241  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   242                  /* this flag will be set, as call happens from Com_MainFunctionRouteSignals */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   243                  sendIpduFlag_u16.isEventTrig      = COM_SET;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   244  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   245                  sendIpduFlag_u16.isGwIpduSend     = COM_SET;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   246  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   247              #ifdef COM_TxIPduTimeOut
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   248                  /* Set the timeout flag if the signal contributes for Timeout and
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   249                   * the transmission mode is MIXED/DIRECT.
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   250                   * For PERIODIC TM, it is handled from Com_MainFunctionTx().
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   251                   */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   252                  if (Com_GetRamValue(TXIPDU,_ISTOENABLED,TxIpduRamPtr->Com_TxFlags)== COM_TRUE)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   253                  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   254                      sendIpduFlag_u16.isTimeoutReq = COM_SET;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   255                      /* This flag is reset after starting Timeout monitoring*/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   256                      Com_SetRamValue(TXIPDU,_ISTOENABLED,TxIpduRamPtr->Com_TxFlags,COM_FALSE);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   257                  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   258              #endif /* #ifdef COM_TxIPduTimeOut */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   259                  /* Call function for Transmitting Tx Ipdu's*/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   260                  Com_Prv_SendIpdu((PduIdType)Index_ui, sendIpduFlag_u16);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   261              }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   262          } /* end of IPdu group started check */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   263  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   264          TxIPduConstPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   265          TxIpduRamPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   266      } /* end of for loop */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   267  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   268  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   269  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   270  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   271   Function name    : Com_Prv_ReadRxQueueAndProcess
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   272   Syntax           : FUNC(void, COM_CODE) Com_Prv_ReadRxQueueAndProcess(void)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   273   Description      : This function writes into the Rx Gw queue and update the pointers accordingly
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   274   Parameter        : None
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   275   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   276   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   277  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_ReadRxQueueAndProcess(void)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   278  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   279  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   280      /* Variable declaration */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   281      Com_RxGwQueuePtrType    RxGwQueuePtr_l;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   282      Com_RxGwQueueIndexType  l_Com_RxGwQueueWrite_ux;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   283      PduIdType               l_Ipduid;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   284      uint8                   l_IpduSyncCounter;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   285  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   286      RxGwQueuePtr_l          = COM_GET_RXGWQUEUE_S;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   287  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   288      /* Take a local copy of the Write pointer
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   289       * Only the receptions which till this step are processed in the current call of Com_MainfunctionRouteSignals()*/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   290      l_Com_RxGwQueueWrite_ux = RxGwQueuePtr_l->Com_RxGwQueueWrite_ux;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   291      {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   292  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   293          /* Run through the loop for all the new elements in the queue, and process each element in the queue */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   294          /* Read the queue here; The queue read pointer is moved to the next location in the below operation
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   295           * Read is to be performed carefully, if called two time the read pointer is moved */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   296          while (Com_ReadSigGwReceiveQueue(&l_Ipduid,l_Com_RxGwQueueWrite_ux) == (Std_ReturnType)E_OK)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   297          {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   298              /* Start the counter with this value, as this the maximum times the Ipdu will be processed for
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   299               * synchronisation of Signals within Ipdu */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   300              l_IpduSyncCounter = COM_ZERO;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   301  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   302              /* This below part of the code(do-while) is needed for Signal level data synchronisation within one Rx Ipdu
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   303               * Scenario:  If while processing this signal in the queue There was an update on the rx side,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   304               * it is possible that one signal can have old value and other signals can have new value.
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   305               * Method : During the complete Gw routing operation if a new update on the Ipdu was recieved,
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   306               * then all the signals are updated to new values  */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   307              do
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   308              {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   309                  Com_RxIpduConstPtrType RxIPduConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   310  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   311                  SchM_Enter_Com_RxSigGwQueueProtArea();
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   312                  /* Here the Ipdu entry is popped out of the queue, this flag is reset to capture the changes in
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   313                   * Com_RxIndication. Set the Ipdu processed flag to TRUE, this is to capture any further updates
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   314                   * during the processing */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   315                  Com_SetRamValue(RXIPDU,_GWPDU_TOBEPROCESSED,COM_GET_RXPDURAM_S(l_Ipduid).RxFlags,COM_FALSE);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   316                  SchM_Exit_Com_RxSigGwQueueProtArea();
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   317  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   318                  RxIPduConstPtr = COM_GET_RX_IPDU_CONSTDATA(l_Ipduid);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   319  #ifdef COM_SIGNALGATEWAY
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   320                  if(RxIPduConstPtr->numOfGwSrcSignals > COM_ZERO)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   321                  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   322                      /* Call function to process SignalGateway data */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   323                      Com_Prv_ProcessRxSignalGateway(RxIPduConstPtr);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   324                  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   325  #endif /* #ifdef COM_SIGNALGATEWAY */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   326  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   327  #if defined COM_SIGNALGROUPGATEWAY && (defined (COM_RX_SIGNALGROUP) && defined (COM_TX_SIGNALGROUP))
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   328                  if(RxIPduConstPtr->numOfGwSrcSignalGrps > COM_ZERO)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   329                  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   330                      /* Call function to process SignalGroup Gateway data */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   331                      Com_Prv_ProcessRxSigGrpGateway(RxIPduConstPtr);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   332                  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   333  #endif /* #if defined COM_SIGNALGROUPGATEWAY && (defined (COM_RX_SIGNALGROUP) && defined (COM_TX_SIGNALGROUP)) */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   334                  /* This part will control the loop to run 2 times after the main processing
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   335                   * in case there was a new Reception of Ipdu
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   336                   */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   337                  l_IpduSyncCounter =
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   338                   ((Com_GetRamValue(RXIPDU,_GWPDU_TOBEPROCESSED,COM_GET_RXPDURAM_S(l_Ipduid).RxFlags) == COM_TRUE) ?
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   339                           ((l_IpduSyncCounter+1) % (COM_MAXIMUM_GWSYNC_REPITIONS+1)) : (COM_ZERO));
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   340              }while (l_IpduSyncCounter != COM_ZERO);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   341          }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   342      }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   343  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   344  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   345  #ifdef COM_SIGNALGATEWAY
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   346  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   347   Function name    : Com_Prv_ProcessRxSignalGateway
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   348   Syntax           : void Com_Prv_ProcessRxSignalGateway(Com_RxIpduConstPtrType RxIPduConstPtr)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   349   Description      : This function writes into the Rx Gw queue for Signals and trigger for transmission
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   350                      of signals
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   351   Parameter        : RxIPduConstPtr  -> Address of the RxIpdu
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   352   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   353   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   354  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_ProcessRxSignalGateway(Com_RxIpduConstPtrType RxIPduConstPtr)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   355  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   356  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   357      Com_GwMapSigConfPtrType          ComGwMapSigConfPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   358      Com_GwMapSigIdConfPtrType        ComGwMapSigIdConfPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   359      Com_RxSigRamPtrType              RxSigRamPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   360      Com_RxSigConstPtrType            RxSigConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   361      Com_SignalIdType                 l_TxGwDestId;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   362      VAR(Com_SignalIdType, AUTOMATIC) SigId_u32;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   363      VAR(uint16_least, AUTOMATIC)     limit_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   364      VAR(uint16_least, AUTOMATIC)     loopIndex_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   365  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   366      limit_ui      = (uint32)RxIPduConstPtr->RxSigId_Index + (uint32)RxIPduConstPtr->numOfGwSrcSignals;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   367      RxSigRamPtr   = &COM_GET_RXSIGNALFLAG(RxIPduConstPtr->RxSigId_Index);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   368  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   369      RxSigConstPtr = COM_GET_RXSIG_CONSTDATA(RxIPduConstPtr->RxSigId_Index);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   370  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   371      for(SigId_u32 = RxIPduConstPtr->RxSigId_Index; SigId_u32 < limit_ui; SigId_u32++)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   372      {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   373          /* The processing of the signals within one Rx Ipdu could be done with an earlier signal entry in the queue;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   374           * This is to ensure that only new data updates are processed and not missed for other signals in the Ipdu
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   375           * This will also ensure Update bit handling for an Rx signal with set update bit
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   376           */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   377          /* Process only the 1. Gw signals fill bit set  */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   378          if(Com_GetRamValue(RXSIG,_SIGNALFILLBIT,RxSigRamPtr ->rxSigRAMFields) != COM_FALSE)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   379          {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   380              ComGwMapSigConfPtr   = COM_GET_GWSIG_CONSTDATA(SigId_u32);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   381              ComGwMapSigIdConfPtr = COM_GET_GWSIGIDMAP_CONSTDATA(ComGwMapSigConfPtr->indexGwMapSigDestIdArray);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   382  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   383              /* Loop for 1:N signalgatewaying,this packs the signaldata into all the configured destination Ipdubuffer*/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   384              for(loopIndex_ui = COM_ZERO; loopIndex_ui < ComGwMapSigConfPtr->destCount; loopIndex_ui++)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   385              {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   386                  l_TxGwDestId = ComGwMapSigIdConfPtr->GwMap_DestId;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   387  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   388                  Com_Prv_PackRxSignalGwBufferData(RxSigConstPtr,l_TxGwDestId);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   389  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   390                  ComGwMapSigIdConfPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   391              }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   392              /* Set the Signal data update flag to FALSE, After processing this Rx signal */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   393              Com_SetRamValue(RXSIG,_SIGNALFILLBIT,RxSigRamPtr ->rxSigRAMFields,COM_FALSE);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   394          }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   395          RxSigRamPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   396          RxSigConstPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   397      }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   398  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   399  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   400  #endif /* #ifdef COM_SIGNALGATEWAY */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   401  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   402  #if defined COM_SIGNALGROUPGATEWAY && (defined (COM_RX_SIGNALGROUP) && defined (COM_TX_SIGNALGROUP))
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   403  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   404   Function name    : Com_Prv_ProcessRxSigGrpGateway
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   405   Syntax           : FUNC(void, COM_CODE) Com_Prv_ProcessRxSigGrpGateway(Com_RxIpduConstPtrType, RxIPduConstPtr)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   406   Description      : This function writes into the Rx Gw queue for signal groups and trigger for transmission
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   407                      of signal groups
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   408   Parameter        : RxIPduConstPtr      -> Address to Ipdu configuration
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   409   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   410   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   411  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_ProcessRxSigGrpGateway(Com_RxIpduConstPtrType RxIPduConstPtr)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   412  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   413  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   414      /* Variable Declaration */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   415      Com_RxSigGrpConstPtrType        RxSigGrpConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   416      Com_RxSigGrpRamPtrType          RxSigGrpRamPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   417      Com_RxGrpSigConstPtrType        RxGrpSigConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   418      Com_GwMapGrpSigConfPtrType      GwMapGrpSigConfigPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   419      Com_GwMapGrpSigIdConfPtrType    GwMapGrpSigIdConfigPtr;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   420      Com_TxIntGrpSignalIdType        l_TxGwDestId;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   421      VAR(Com_TxIntGrpSignalIdType, AUTOMATIC) SigGrp_u32;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   422      VAR(uint16_least, AUTOMATIC)    Idx_GrpSig_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   423      VAR(uint16_least, AUTOMATIC)    limit_grpsig_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   424      VAR(uint16_least, AUTOMATIC)    limit_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   425      VAR(uint16_least, AUTOMATIC)    loopIndex_ui;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   426  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   427      RxSigGrpConstPtr    = COM_GET_RXSIGGRP_CONSTDATA(RxIPduConstPtr->FirstRxSigGrp_Index);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   428  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   429      RxSigGrpRamPtr      =  &COM_GET_RXSIGGRPFLAG(RxIPduConstPtr->FirstRxSigGrp_Index);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   430      limit_ui            = (uint32)RxIPduConstPtr->FirstRxSigGrp_Index +(uint32)RxIPduConstPtr->numOfGwSrcSignalGrps;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   431  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   432      for(SigGrp_u32 = RxIPduConstPtr->FirstRxSigGrp_Index; SigGrp_u32 < limit_ui; SigGrp_u32++)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   433      {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   434          /* The processing of the signal groups within one Rx Ipdu could be done with an earlier signal entry in the queue;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   435           * This is to ensure that only new data updates are processed and not missed for other signal groups in the Ipdu
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   436           * This will also ensure Update bit handling for an Rx signal group with set update bit
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   437           */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   438          /* Process only the 1. Gw signal group fill bit set  */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   439          /* Report an error if the GrpSignal to be routed is not a Gw signal id */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   440          if(Com_GetRamValue(RXSIGGRP,_SIGNALFILLBIT,RxSigGrpRamPtr ->rxSigGrpRAMFields) != COM_FALSE)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   441          {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   442  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   443              RxGrpSigConstPtr    = COM_GET_RXGRPSIG_CONSTDATA(RxSigGrpConstPtr->FirstGrpSig_Index);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   444  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   445              limit_grpsig_ui     = RxSigGrpConstPtr->FirstGrpSig_Index + RxSigGrpConstPtr->numOfGwSrcGrpSignals;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   446  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   447              for(Idx_GrpSig_ui = (uint32)RxSigGrpConstPtr->FirstGrpSig_Index;Idx_GrpSig_ui < limit_grpsig_ui;Idx_GrpSig_ui++)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   448              {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   449  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   450                  GwMapGrpSigConfigPtr = COM_GET_GWGRPSIG_CONSTDATA((Idx_GrpSig_ui - COM_GET_NUM_GRPSIG_NOGW));
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   451                  GwMapGrpSigIdConfigPtr =
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   452                               COM_GET_GWGRPSIGIDMAP_CONSTDATA(GwMapGrpSigConfigPtr->indexGwMapGrpSigDestIdArray);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   453  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   454                  for(loopIndex_ui = COM_ZERO; loopIndex_ui < GwMapGrpSigConfigPtr->destCount; loopIndex_ui++)
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   455                  {
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   456                      l_TxGwDestId = GwMapGrpSigIdConfigPtr->GwMap_DestGrpSigId;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   457  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   458                      /* Refer to Com_Cfg_SchM file; this is a multi-core lock */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   459                      SchM_Enter_Com_RxSigGwMcLockProtArea();
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   460                      Com_Prv_PackRxGrpSigGwBufferData(RxGrpSigConstPtr,l_TxGwDestId);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   461                      SchM_Exit_Com_RxSigGwMcLockProtArea();
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   462                      GwMapGrpSigIdConfigPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   463                  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   464                  RxGrpSigConstPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   465              }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   466              /* Set the Signal data update flag to TRUE, this is to capture any further updates during the processing */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   467              Com_SetRamValue(RXSIGGRP,_SIGNALFILLBIT,RxSigGrpRamPtr ->rxSigGrpRAMFields,COM_FALSE);
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   468          }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   469          RxSigGrpConstPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   470          RxSigGrpRamPtr++;
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   471      }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   472  }
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   473  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   474  #endif /* #if defined COM_SIGNALGROUPGATEWAY && (defined (COM_RX_SIGNALGROUP) || defined (COM_TX_SIGNALGROUP)) */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   475  
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   476  #endif /* #if defined (COM_SIGNALGATEWAY) || defined (COM_SIGNALGROUPGATEWAY) */
; BSW\src\BSW\Gen\Com\src\Com_MainFunctionRouteSignals.c	   477  

	; Module end
