	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc10372a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Com\\Com_PackGwMappings.src BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackGwMappings.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackGwMappings.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	12861
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackGwMappings.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'unsigned char',0,1,8,2
	.byte	'unsigned short int',0,2,7,3
	.byte	'Bfx_Prv_GetBit_u16u8_u8_Inl',0,3,1,207,2,22
	.word	144
	.byte	1,1,4
	.byte	'Data',0,1,207,2,57
	.word	161
	.byte	4
	.byte	'BitPn',0,1,207,2,69
	.word	144
	.byte	5,0,2
	.byte	'unsigned int',0,4,7,3
	.byte	'Bfx_Prv_GetBit_u32u8_u8_Inl',0,3,1,227,2,22
	.word	144
	.byte	1,1,4
	.byte	'Data',0,1,227,2,57
	.word	254
	.byte	4
	.byte	'BitPn',0,1,227,2,69
	.word	144
	.byte	5,0,3
	.byte	'Bfx_Prv_GetBit_u8u8_u8_Inl',0,3,1,247,2,22
	.word	144
	.byte	1,1,4
	.byte	'Data',0,1,247,2,55
	.word	144
	.byte	4
	.byte	'BitPn',0,1,247,2,67
	.word	144
	.byte	5,0,6
	.word	161
	.byte	7
	.byte	'Bfx_Prv_PutBit_u16u8u8_Inl',0,3,1,200,3,19,1,1,4
	.byte	'Data',0,1,200,3,54
	.word	411
	.byte	4
	.byte	'BitPn',0,1,200,3,66
	.word	144
	.byte	4
	.byte	'Value',0,1,200,3,81
	.word	144
	.byte	5,0,6
	.word	254
	.byte	7
	.byte	'Bfx_Prv_PutBit_u32u8u8_Inl',0,3,1,224,3,19,1,1,4
	.byte	'Data',0,1,224,3,54
	.word	497
	.byte	4
	.byte	'BitPn',0,1,224,3,66
	.word	144
	.byte	4
	.byte	'Value',0,1,224,3,81
	.word	144
	.byte	5,0,6
	.word	144
	.byte	7
	.byte	'Bfx_Prv_PutBit_u8u8u8_Inl',0,3,1,248,3,19,1,1,4
	.byte	'Data',0,1,248,3,52
	.word	583
	.byte	4
	.byte	'BitPn',0,1,248,3,64
	.word	144
	.byte	4
	.byte	'Value',0,1,248,3,79
	.word	144
	.byte	5,0,3
	.byte	'Bfx_Prv_TstParityEven_u32_u8_Inl',0,3,1,143,10,22
	.word	144
	.byte	1,1,4
	.byte	'Data',0,1,143,10,62
	.word	254
	.byte	5,0,8
	.word	183
	.byte	9
	.word	223
	.byte	9
	.word	237
	.byte	5,0,8
	.word	270
	.byte	9
	.word	310
	.byte	9
	.word	324
	.byte	5,0,8
	.word	341
	.byte	9
	.word	380
	.byte	9
	.word	394
	.byte	5,0,8
	.word	416
	.byte	9
	.word	451
	.byte	9
	.word	465
	.byte	9
	.word	480
	.byte	5,0,8
	.word	502
	.byte	9
	.word	537
	.byte	9
	.word	551
	.byte	9
	.word	566
	.byte	5,0,8
	.word	588
	.byte	9
	.word	622
	.byte	9
	.word	636
	.byte	9
	.word	651
	.byte	5,0,8
	.word	668
	.byte	9
	.word	713
	.byte	5,0,10,1,6
	.word	858
	.byte	11
	.byte	'__codeptr',0,2,1,1
	.word	860
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,3,76,25
	.word	883
	.byte	11
	.byte	'uint8',0,3,81,25
	.word	144
	.byte	11
	.byte	'uint16',0,3,91,25
	.word	161
	.byte	11
	.byte	'uint32',0,3,106,24
	.word	254
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,3,111,30
	.word	949
	.byte	11
	.byte	'boolean',0,3,127,25
	.word	144
	.byte	11
	.byte	'StatusType',0,4,191,1,27
	.word	144
	.byte	11
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	144
	.byte	12,4,206,1,9,8,13
	.byte	'vendorID',0
	.word	161
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	161
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	144
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	144
	.byte	1,2,35,6,0,11
	.byte	'Std_VersionInfoType',0,4,213,1,3
	.word	1050
	.byte	11
	.byte	'PduIdType',0,5,22,19
	.word	161
	.byte	11
	.byte	'PduLengthType',0,5,26,19
	.word	161
	.byte	14,6,113,9,4,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,11
	.byte	'TpDataStateType',0,6,118,3
	.word	1240
	.byte	11
	.byte	'Com_SignalIdType',0,7,100,16
	.word	161
	.byte	11
	.byte	'Com_SignalGroupIdType',0,7,102,16
	.word	161
	.byte	11
	.byte	'Com_IpduIdType',0,7,104,15
	.word	144
	.byte	11
	.byte	'Com_GrpSignalIdType',0,7,107,18
	.word	144
	.byte	11
	.byte	'Com_TxIntSignalIdType',0,8,138,3,18
	.word	144
	.byte	11
	.byte	'Com_RxIntSignalIdType',0,8,139,3,18
	.word	144
	.byte	11
	.byte	'Com_BitsizeType',0,8,155,3,17
	.word	144
	.byte	11
	.byte	'Com_BitpositionType',0,8,156,3,15
	.word	144
	.byte	11
	.byte	'Com_RxGwQueueIndexType',0,8,161,3,15
	.word	144
	.byte	11
	.byte	'Com_SigBuffIndexType',0,8,164,3,15
	.word	144
	.byte	11
	.byte	'Com_MainFuncType',0,8,231,3,16
	.word	144
	.byte	11
	.byte	'Com_NumOfIpdusType',0,8,233,3,15
	.word	144
	.byte	11
	.byte	'Com_TimeBaseType',0,8,235,3,15
	.word	144
	.byte	11
	.byte	'Can_IdType',0,9,32,16
	.word	254
	.byte	11
	.byte	'Can_HwHandleType',0,9,43,16
	.word	161
	.byte	12,10,93,9,8,13
	.byte	'Class',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	254
	.byte	4,2,35,4,0,11
	.byte	'OsTrapInfoType',0,10,97,3
	.word	1724
	.byte	16,68
	.word	254
	.byte	17,16,0,12,10,154,1,9,68,13
	.byte	'store',0
	.word	1804
	.byte	68,2,35,0,0,16,68
	.word	1813
	.byte	17,0,0,11
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	1835
	.byte	11
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	254
	.byte	12,10,175,1,9,8,13
	.byte	'sp',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	254
	.byte	4,2,35,4,0,11
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	1895
	.byte	11
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	1895
	.byte	18,1,1,6
	.word	1980
	.byte	11
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	1983
	.byte	11
	.byte	'ApplicationType',0,10,193,1,23
	.word	144
	.byte	19
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,13
	.byte	'app_id',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	144
	.byte	1,2,35,1,0,11
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	2046
	.byte	11
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	254
	.byte	11
	.byte	'AreaIdType',0,10,204,1,16
	.word	161
	.byte	11
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	254
	.byte	11
	.byte	'TickType',0,10,221,1,22
	.word	254
	.byte	11
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	254
	.byte	11
	.byte	'Os_Lockable',0,10,234,1,18
	.word	497
	.byte	11
	.byte	'CoreIdType',0,10,236,1,16
	.word	161
	.byte	11
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	161
	.byte	14,10,239,1,9,4,15
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,15
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,11
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	2353
	.byte	14,10,174,2,9,4,15
	.byte	'APPLICATION_ACCESSIBLE',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	2446
	.byte	20
	.byte	'void',0,6
	.word	2558
	.byte	21,1,1,22
	.word	144
	.byte	22
	.word	2564
	.byte	0,6
	.word	2569
	.byte	11
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	2583
	.byte	19
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,13
	.byte	'elapsed',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	254
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	254
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	254
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	1895
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	1895
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	1895
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	1895
	.byte	8,2,35,40,0,11
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	2618
	.byte	6
	.word	2618
	.byte	11
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	2816
	.byte	11
	.byte	'EventMaskType',0,10,206,2,15
	.word	144
	.byte	11
	.byte	'Os_imaskType',0,10,211,2,16
	.word	254
	.byte	19
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,13
	.byte	'meter',0
	.word	2618
	.byte	48,2,35,0,0,11
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	2895
	.byte	6
	.word	2895
	.byte	23
	.word	2956
	.byte	19
	.byte	'Os_ISRType_s',0,10,216,2,16,24,13
	.byte	'entry_function',0
	.word	1988
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	2961
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	254
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	1895
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	144
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	144
	.byte	1,2,35,21,0,11
	.byte	'Os_ISRType',0,10,223,2,3
	.word	2966
	.byte	6
	.word	1980
	.byte	23
	.word	2966
	.byte	6
	.word	3125
	.byte	11
	.byte	'ISRType',0,10,224,2,46
	.word	3130
	.byte	11
	.byte	'Os_bitmask',0,10,239,2,22
	.word	254
	.byte	11
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	254
	.byte	11
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	254
	.byte	11
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	254
	.byte	24,10,243,2,9,4,13
	.byte	'p0',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	254
	.byte	4,2,35,0,0,11
	.byte	'Os_psetType',0,10,247,2,3
	.word	3238
	.byte	24,10,249,2,9,4,13
	.byte	't0',0
	.word	254
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	254
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	254
	.byte	4,2,35,0,0,11
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	3302
	.byte	11
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	144
	.byte	19
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	1844
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	2618
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	144
	.byte	1,2,35,116,0,11
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	3400
	.byte	16,68
	.word	1813
	.byte	17,0,0,6
	.word	3400
	.byte	23
	.word	3526
	.byte	19
	.byte	'Os_TaskType_s',0,10,134,3,16,40,13
	.byte	'dynamic',0
	.word	3531
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	1988
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	3238
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	3302
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	3302
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	161
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	254
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	1895
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	144
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	144
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	144
	.byte	1,2,35,38,0,11
	.byte	'Os_TaskType',0,10,146,3,3
	.word	3536
	.byte	23
	.word	3536
	.byte	6
	.word	3786
	.byte	11
	.byte	'TaskType',0,10,147,3,47
	.word	3791
	.byte	25
	.byte	'Os_TaskStateType',0,10,155,3,6,4,15
	.byte	'SUSPENDED',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'RUNNING',0,3,0,11
	.byte	'TaskStateType',0,10,156,3,31
	.word	3814
	.byte	24,10,167,3,3,4,13
	.byte	'tpmask',0
	.word	3302
	.byte	4,2,35,0,0,19
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,13
	.byte	'saved_priority',0
	.word	3901
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	3924
	.byte	6
	.word	3924
	.byte	23
	.word	4004
	.byte	19
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,13
	.byte	'dynamic',0
	.word	4009
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	3302
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	144
	.byte	1,2,35,8,0,11
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	4014
	.byte	12,10,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	254
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	254
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	4113
	.byte	12,10,206,3,9,8,13
	.byte	'Running',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	254
	.byte	4,2,35,4,0,11
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	4208
	.byte	26
	.word	144
	.byte	1,1,6
	.word	4294
	.byte	11
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	4301
	.byte	19
	.byte	's_swd',0,10,222,3,12,4,13
	.byte	'count',0
	.word	254
	.byte	4,2,35,0,0,24,10,221,3,3,4,13
	.byte	'sw',0
	.word	4337
	.byte	4,2,35,0,0,19
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,13
	.byte	'type_dependent',0
	.word	4365
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	4384
	.byte	6
	.word	4384
	.byte	23
	.word	4462
	.byte	19
	.byte	'Os_CounterType_s',0,10,227,3,16,28,13
	.byte	'dynamic',0
	.word	4467
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	4306
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	4113
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	2564
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	144
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	144
	.byte	1,2,35,25,0,11
	.byte	'Os_CounterType',0,10,234,3,3
	.word	4472
	.byte	6
	.word	4294
	.byte	23
	.word	4472
	.byte	6
	.word	4624
	.byte	11
	.byte	'CounterType',0,10,235,3,52
	.word	4629
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	4655
	.byte	23
	.word	.L6-.L3
	.byte	6
	.word	4855
	.byte	11
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	4860
	.byte	19
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,13
	.byte	'match',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	4865
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	4655
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	161
	.byte	2,2,35,12,0,6
	.word	4892
	.byte	23
	.word	4985
.L6:
	.byte	19
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,13
	.byte	'dynamic',0
	.word	4990
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	4634
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	161
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	144
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	144
	.byte	1,2,35,14,0,11
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	4995
	.byte	23
	.word	4995
	.byte	6
	.word	5175
	.byte	23
	.word	4472
	.byte	6
	.word	5185
	.byte	27
	.word	2288
	.byte	27
	.word	3238
	.byte	27
	.word	3135
	.byte	27
	.word	3796
	.byte	27
	.word	3302
	.byte	27
	.word	144
	.byte	27
	.word	3796
	.byte	19
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	1724
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	5195
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	5200
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	5205
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	5210
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	5215
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	2821
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	2618
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	144
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	5220
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	1895
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	144
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	5225
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	1895
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	144
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	144
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	144
	.byte	1,2,35,110,0,11
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	5230
	.byte	6
	.word	254
	.byte	23
	.word	2966
	.byte	6
	.word	5686
	.byte	23
	.word	3536
	.byte	6
	.word	5696
	.byte	6
	.word	2618
	.byte	19
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	254
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	254
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	254
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	254
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	254
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	1844
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	144
	.byte	1,2,35,92,0,11
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	5711
	.byte	11
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	254
	.byte	19
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	254
	.byte	4,2,35,4,0,11
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	5988
	.byte	19
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,13
	.byte	'MaskRef',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	254
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	144
	.byte	1,2,35,9,0,11
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6124
	.byte	16,4
	.word	144
	.byte	17,3,0,19
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	6264
	.byte	4,2,35,0,0,11
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6273
	.byte	19
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	161
	.byte	2,2,35,0,0,11
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6374
	.byte	19
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	161
	.byte	2,2,35,4,0,11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6449
	.byte	23
	.word	6449
	.byte	6
	.word	6614
	.byte	19
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6619
	.byte	4,2,35,0,0,11
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	6624
	.byte	19
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,13
	.byte	'CanEventType',0
	.word	6264
	.byte	4,2,35,0,0,11
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	6724
	.byte	11
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	144
	.byte	11
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	144
	.byte	12,12,168,1,9,12,13
	.byte	'in',0
	.word	2564
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	2564
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	161
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	144
	.byte	1,2,35,10,0,11
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	6870
	.byte	14,12,175,1,9,4,15
	.byte	'RTE_DRA',0,0,15
	.byte	'RTE_WOWP',0,1,15
	.byte	'RTE_TASK',0,2,15
	.byte	'RTE_ARE',0,3,15
	.byte	'RTE_EV',0,4,15
	.byte	'RTE_MSI',0,5,0,11
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	6957
	.byte	6
	.word	6870
	.byte	19
	.byte	'Rte_QCmnType',0,12,184,1,16,24,13
	.byte	'dynamic',0
	.word	7055
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	161
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	161
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	2564
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	2564
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	6957
	.byte	4,2,35,20,0,11
	.byte	'Rte_QCmnType',0,12,192,1,3
	.word	7060
	.byte	11
	.byte	'Rte_AlarmRefType',0,12,224,1,32
	.word	254
	.byte	11
	.byte	'Rte_AlarmIndexType',0,12,226,1,32
	.word	161
	.byte	16,128,8
	.word	144
	.byte	17,255,7,0,11
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7298
	.byte	11
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	254
	.byte	11
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	161
	.byte	11
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	144
	.byte	11
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	144
	.byte	11
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	144
	.byte	12,13,92,9,2,13
	.byte	'DeviceMode',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	144
	.byte	1,2,35,1,0,11
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7489
	.byte	11
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	144
	.byte	11
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	144
	.byte	11
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	144
	.byte	11
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	144
	.byte	11
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	144
	.byte	11
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	161
	.byte	11
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	144
	.byte	12,13,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	161
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	144
	.byte	1,2,35,2,0,11
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	7830
	.byte	11
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	161
	.byte	11
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	144
	.byte	11
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	254
	.byte	11
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	161
	.byte	11
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	144
	.byte	11
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	144
	.byte	12,13,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	254
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	161
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	144
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	144
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	144
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	144
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	144
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	144
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	144
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	144
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	144
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	144
	.byte	1,2,35,21,0,11
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8062
	.byte	12,13,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	161
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	161
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	144
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	144
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	144
	.byte	1,2,35,8,0,11
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8566
	.byte	11
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	144
	.byte	11
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	144
	.byte	11
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	144
	.byte	11
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	144
	.byte	11
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	144
	.byte	11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7309
	.byte	16,128,8
	.word	144
	.byte	17,255,7,0,11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7309
	.byte	11
	.byte	'Rte_TaskRefType',0,14,184,1,32
	.word	3796
	.byte	11
	.byte	'Rte_EventRefType',0,14,185,1,32
	.word	144
	.byte	11
	.byte	'Rte_EventType',0,14,186,1,32
	.word	254
	.byte	11
	.byte	'Rte_REActCounterType',0,14,252,1,15
	.word	144
	.byte	6
	.word	144
	.byte	11
	.byte	'Rte_REActCounterRefType',0,14,253,1,58
	.word	9488
	.byte	12,14,255,1,9,8,13
	.byte	'task',0
	.word	9384
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	9493
	.byte	4,2,35,4,0,11
	.byte	'Rte_REContainerType',0,14,130,2,3
	.word	9526
	.byte	23
	.word	3536
	.byte	6
	.word	9590
	.byte	6
	.word	144
	.byte	23
	.word	9526
	.byte	6
	.word	9605
	.byte	11
	.byte	'Rte_REContainerRefType',0,14,132,2,60
	.word	9610
	.byte	11
	.byte	'Rte_MSICounterType',0,14,149,2,16
	.word	161
	.byte	6
	.word	161
	.byte	11
	.byte	'Rte_MSICounterRefType',0,14,150,2,56
	.word	9675
	.byte	11
	.byte	'Rte_MSIPendingFlagType',0,14,152,2,17
	.word	144
	.byte	6
	.word	144
	.byte	11
	.byte	'Rte_MSIPendingFlagRefType',0,14,153,2,60
	.word	9743
	.byte	12,14,163,2,9,24,13
	.byte	'counter',0
	.word	9680
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	9748
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	9384
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	9493
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	144
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	161
	.byte	2,2,35,22,0,11
	.byte	'Rte_MSITableEntry',0,14,172,2,3
	.word	9783
	.byte	6
	.word	161
	.byte	6
	.word	144
	.byte	11
	.byte	'Rte_TaskArrayIndex',0,14,179,2,16
	.word	144
	.byte	11
	.byte	'Rte_NrWaitingTasks',0,14,180,2,16
	.word	144
	.byte	12,14,182,2,9,4,13
	.byte	'pending',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	144
	.byte	1,2,35,2,0,11
	.byte	'Rte_WaitableDatum',0,14,186,2,3
	.word	10001
	.byte	6
	.word	10001
	.byte	12,14,226,2,9,12,13
	.byte	'event_id',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	10093
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	254
	.byte	4,2,35,8,0,11
	.byte	'Rte_WOWP_NotificationType',0,14,230,2,3
	.word	10098
	.byte	23
	.word	10098
	.byte	6
	.word	10187
	.byte	11
	.byte	'Rte_WOWP_NotificationRefType',0,14,232,2,66
	.word	10192
	.byte	11
	.byte	'Rte_ARE_NotificationType',0,14,234,2,29
	.word	9526
	.byte	19
	.byte	'Rte_QTaskType',0,14,243,2,16,28,13
	.byte	'cmn',0
	.word	7060
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9384
	.byte	4,2,35,24,0,11
	.byte	'Rte_QTaskType',0,14,246,2,3
	.word	10269
	.byte	19
	.byte	'Rte_QREType',0,14,250,2,16,28,13
	.byte	'cmn',0
	.word	7060
	.byte	24,2,35,0,13
	.byte	're',0
	.word	9615
	.byte	4,2,35,24,0,11
	.byte	'Rte_QREType',0,14,253,2,3
	.word	10340
	.byte	23
	.word	9526
	.byte	6
	.word	10405
	.byte	19
	.byte	'Rte_QWWPType',0,14,129,3,16,28,13
	.byte	'cmn',0
	.word	7060
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	10197
	.byte	4,2,35,24,0,11
	.byte	'Rte_QWWPType',0,14,132,3,3
	.word	10415
	.byte	23
	.word	10098
	.byte	6
	.word	10483
	.byte	19
	.byte	'Rte_QEvType',0,14,136,3,16,36,13
	.byte	'cmn',0
	.word	7060
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9384
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	144
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9493
	.byte	4,2,35,32,0,11
	.byte	'Rte_QEvType',0,14,141,3,3
	.word	10493
	.byte	19
	.byte	'Rte_QMSIType',0,14,145,3,16,48,13
	.byte	'cmn',0
	.word	7060
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9384
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	144
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9493
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	9680
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	9748
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	161
	.byte	2,2,35,44,0,11
	.byte	'Rte_QMSIType',0,14,153,3,3
	.word	10588
	.byte	12,15,76,9,8,13
	.byte	'TimePeriodFact',0
	.word	161
	.byte	2,2,35,0,13
	.byte	'TimeOffsetFact',0
	.word	161
	.byte	2,2,35,2,13
	.byte	'RepetitionPeriodFact',0
	.word	161
	.byte	2,2,35,4,13
	.byte	'NumOfRepetitions',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'Mode',0
	.word	144
	.byte	1,2,35,7,0,11
	.byte	'Com_TransModeInfo',0,15,93,2
	.word	10743
	.byte	23
	.word	10743
	.byte	6
	.word	10893
	.byte	11
	.byte	'Com_TMConstPtrType',0,15,103,65
	.word	10898
	.byte	12,15,136,1,9,12,13
	.byte	'Init_Val',0
	.word	254
	.byte	4,2,35,0,13
	.byte	'txSignalFields',0
	.word	161
	.byte	2,2,35,4,13
	.byte	'Bit_Pos',0
	.word	144
	.byte	1,2,35,6,13
	.byte	'BitSize',0
	.word	144
	.byte	1,2,35,7,13
	.byte	'IpduRef',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'General',0
	.word	144
	.byte	1,2,35,9,0,11
	.byte	'Com_Prv_xTxSigCfg_tst',0,15,201,1,2
	.word	10930
	.byte	12,15,247,1,9,16,13
	.byte	'Notification_Cbk',0
	.word	1983
	.byte	4,2,35,0,13
	.byte	'Init_Val',0
	.word	254
	.byte	4,2,35,4,13
	.byte	'Bit_Pos',0
	.word	144
	.byte	1,2,35,8,13
	.byte	'SigBuff_Index',0
	.word	144
	.byte	1,2,35,9,13
	.byte	'BitSize',0
	.word	144
	.byte	1,2,35,10,13
	.byte	'IpduRef',0
	.word	144
	.byte	1,2,35,11,13
	.byte	'General',0
	.word	144
	.byte	1,2,35,12,13
	.byte	'rxSignalFields',0
	.word	144
	.byte	1,2,35,13,0,11
	.byte	'Com_Prv_xRxSigCfg_tst',0,15,171,2,2
	.word	11078
	.byte	12,15,211,5,9,24,13
	.byte	'BuffPtr',0
	.word	583
	.byte	4,2,35,0,13
	.byte	'Com_TMConstPtr',0
	.word	10898
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	161
	.byte	2,2,35,8,13
	.byte	'Timeout_Fact',0
	.word	161
	.byte	2,2,35,10,13
	.byte	'Min_Delay_Time_Fact',0
	.word	161
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	161
	.byte	2,2,35,14,13
	.byte	'PdurId',0
	.word	161
	.byte	2,2,35,16,13
	.byte	'TxSigId_Index',0
	.word	144
	.byte	1,2,35,18,13
	.byte	'txIPduFields',0
	.word	161
	.byte	2,2,35,20,13
	.byte	'MainFunctionRef',0
	.word	144
	.byte	1,2,35,22,13
	.byte	'PaddingByte',0
	.word	144
	.byte	1,2,35,23,0,11
	.byte	'Com_Prv_xTxIpduInfoCfg_tst',0,15,162,6,3
	.word	11275
	.byte	12,15,137,7,9,20,13
	.byte	'BuffPtr',0
	.word	583
	.byte	4,2,35,0,13
	.byte	'TimeOutNotification_Cbk',0
	.word	1983
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	161
	.byte	2,2,35,8,13
	.byte	'FirstTimeout_Factor',0
	.word	161
	.byte	2,2,35,10,13
	.byte	'Timeout_Fact',0
	.word	161
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	161
	.byte	2,2,35,14,13
	.byte	'RxSigId_Index',0
	.word	144
	.byte	1,2,35,16,13
	.byte	'MainFunctionRef',0
	.word	144
	.byte	1,2,35,17,13
	.byte	'rxIPduFields',0
	.word	144
	.byte	1,2,35,18,0,11
	.byte	'Com_Prv_xRxIpduInfoCfg_tst',0,15,197,7,3
	.word	11554
	.byte	12,15,219,7,9,4,13
	.byte	'FirstIpdu_Index',0
	.word	161
	.byte	2,2,35,0,13
	.byte	'NoOfRxPdus',0
	.word	161
	.byte	2,2,35,2,0,11
	.byte	'Com_Prv_xIpduGrpInfoCfg_tst',0,15,224,7,3
	.word	11805
	.byte	12,15,244,7,9,1,13
	.byte	'txSigRAMFields',0
	.word	144
	.byte	1,2,35,0,0,11
	.byte	'Com_TxSignalFlagType',0,15,248,7,2
	.word	11894
	.byte	12,15,167,8,9,1,13
	.byte	'rxSigRAMFields',0
	.word	144
	.byte	1,2,35,0,0,11
	.byte	'Com_RxSignalFlagType',0,15,171,8,2
	.word	11955
	.byte	12,15,135,9,9,16,13
	.byte	'CurrentTxModePtr',0
	.word	10903
	.byte	4,2,35,0,13
	.byte	'Com_MinDelayTick',0
	.word	161
	.byte	2,2,35,4,13
	.byte	'Com_Tick_Tx',0
	.word	161
	.byte	2,2,35,6,13
	.byte	'Com_n_Tick_Tx',0
	.word	161
	.byte	2,2,35,8,13
	.byte	'Com_TickTxTimeout',0
	.word	161
	.byte	2,2,35,10,13
	.byte	'Com_TxFlags',0
	.word	161
	.byte	2,2,35,12,13
	.byte	'Com_n',0
	.word	144
	.byte	1,2,35,14,13
	.byte	'Com_TransMode',0
	.word	144
	.byte	1,2,35,15,0,11
	.byte	'Com_TxIpduRamData',0,15,189,9,3
	.word	12016
	.byte	23
	.word	10743
	.byte	6
	.word	12232
	.byte	12,15,218,9,9,6,13
	.byte	'RxIPduLength',0
	.word	161
	.byte	2,2,35,0,13
	.byte	'RxTicks_u16',0
	.word	161
	.byte	2,2,35,2,13
	.byte	'RxFlags',0
	.word	144
	.byte	1,2,35,4,0,11
	.byte	'Com_RxIpduRamData',0,15,245,9,2
	.word	12242
	.byte	6
	.word	161
	.byte	12,15,128,10,9,8,13
	.byte	'RxGwQueuePtr',0
	.word	12336
	.byte	4,2,35,0,13
	.byte	'Com_RxGwQueueWrite_ux',0
	.word	144
	.byte	1,2,35,4,13
	.byte	'Com_RxGwQueueRead_ux',0
	.word	144
	.byte	1,2,35,5,0,11
	.byte	'Com_RxGwQueueRAMType',0,15,133,10,2
	.word	12341
	.byte	12,15,138,10,9,4,13
	.byte	'indexGwMapSigDestIdArray',0
	.word	161
	.byte	2,2,35,0,13
	.byte	'destCount',0
	.word	144
	.byte	1,2,35,2,0,11
	.byte	'Com_Prv_xGwMapSigCfg_tst',0,15,142,10,2
	.word	12461
	.byte	12,15,147,10,9,2,13
	.byte	'GwMap_DestId',0
	.word	161
	.byte	2,2,35,0,0,11
	.byte	'Com_Prv_xGwMapSigIdCfg_tst',0,15,150,10,2
	.word	12555
	.byte	12,15,183,10,9,4,13
	.byte	'StartIPduId',0
	.word	144
	.byte	1,2,35,0,13
	.byte	'NumOfIpdus',0
	.word	144
	.byte	1,2,35,1,13
	.byte	'TimeBaseInMs',0
	.word	144
	.byte	1,2,35,2,0,11
	.byte	'Com_MainFunctionCfgType',0,15,188,10,3
	.word	12620
	.byte	12,15,194,10,9,12,13
	.byte	'Com_SigType_pu8',0
	.word	583
	.byte	4,2,35,0,13
	.byte	'Com_SigType_pu16',0
	.word	411
	.byte	4,2,35,4,13
	.byte	'Com_SigType_pu32',0
	.word	497
	.byte	4,2,35,8,0,11
	.byte	'Com_Prv_xRxRamBuf_tst',0,15,253,10,3
	.word	12723
	.byte	11
	.byte	'rba_BswSrv_uint64',0,16,66,28
	.word	949
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,46,1,3
	.byte	8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,21,0,54,15,0,0,11,22,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14
	.byte	4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0,17,33,0,47,15,0,0,18,21,0
	.byte	54,15,39,12,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,59,0,3,8,0,0,21,21,1,54,15,39,12,0,0,22,5,0
	.byte	73,19,0,0,23,38,0,73,19,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0
	.byte	26,21,0,73,19,54,15,39,12,0,0,27,53,0,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Bfx\\api\\Bfx_Bit_Inl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_PackGwMappings.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg_Internal.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_Prv_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     1  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     2  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     3  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     4   * Preprocessor includes
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     5   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     6  #include "Com_Prv.h"
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     7  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     8   * Global functions (declared in header files )
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	     9   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    10  #ifdef COM_SIGNALGATEWAY
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    11  #define COM_START_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    12  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    13  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    14   * Function name  : Com_Prv_PackRxSignalGwBufferData
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    15   * Syntax         : void Com_Prv_PackRxSignalGwBufferData(Com_RxSigConstPtrType RxSigConstPtr,
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    16   *                                                        Com_SignalIdType l_TxGwDestId)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    17   * Description    : This function is called to
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    18   * 1. Set Update bit if relevant
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    19   * 2. Copy the data from the Rx signal buffer and pack into Tx Ipdu buffer
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    20   * 3. Evaluate transfer property and transmission mode selection for each signal and update the Tx Ipdu flag accordingly
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    21   * --------------------------------------------
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    22   * Parameter      : Com_RxSigConstPtrType RxSigConstPtr
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    23   *                : Com_SignalIdType      l_TxGwDestId
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    24   * Return value   : void
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    25   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    26  FUNC(void, COM_CODE) Com_Prv_PackRxSignalGwBufferData(Com_RxSigConstPtrType RxSigConstPtr,
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    27                                                       Com_SignalIdType l_TxGwDestId)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    28  {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    29      Com_TxSigConstPtrType                TxSigConstPtr;  /* Local pointer to Tx SignalGroup static configuration */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    30  #if defined(COM_TXSIG_FLOAT64SUPP) && defined(COM_RXSIG_FLOAT64SUPP)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    31      VAR(float64, AUTOMATIC)              TxNewVal_f64;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    32  #endif
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    33      VAR(Com_SigBuffIndexType, AUTOMATIC) RxSigBuff_Index;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    34      VAR(Com_SigMaxType, AUTOMATIC)       TxNewVal;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    35      VAR(uint8, AUTOMATIC)                Type;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    36      VAR(Com_MainFuncType, AUTOMATIC)     rxMainFuncId; /* Local variable that holds internal Rx-MainFunction Id */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    37  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    38      TxSigConstPtr   = COM_GET_TXSIG_CONSTDATA(l_TxGwDestId);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    39      Type            = Com_GetValue(GEN,_TYPE,TxSigConstPtr->General);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    40  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    41      /* Fetch the Rx-MainFunction internal Id */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    42      rxMainFuncId    = (COM_GET_RX_IPDU_CONSTDATA(RxSigConstPtr->IpduRef))->MainFunctionRef;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    43  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    44      RxSigBuff_Index = RxSigConstPtr->SigBuff_Index;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    45      TxNewVal        = (Com_SigMaxType)0;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    46  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    47      if(Type != (uint8)COM_UINT8_N)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    48      {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    49          /* Refer to Com_Cfg_SchM file; this is a multi-core lock */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    50          SchM_Enter_Com_RxSigGwMcLockProtArea();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    51  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    52          switch(Type >> 1u)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    53          {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    54          case 0x00u:     /* COM_UINT8 & COM_SINT8 */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    55          case (COM_BOOLEAN >> 1):
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    56              /* Update the Src_Buf with the data i.e typecast the data to uint8*/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    57              TxNewVal = (Com_SigMaxType)COM_GET_SIGTYPEUINT8_BUFF(rxMainFuncId, RxSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    58              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    59  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    60          case 0x01u:     /* COM_UINT16 & COM_SINT16 */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    61              /* Update the Src_Buf with the data i.e typecast the data to uint16*/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    62              TxNewVal = (Com_SigMaxType)COM_GET_SIGTYPEUINT16_BUFF(rxMainFuncId, RxSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    63              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    64  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    65          case 0x02u:     /* COM_UINT32 & COM_SINT32 */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    66  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    67  #ifdef COM_FLOAT32SUPP
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    68          case (COM_FLOAT32 >> 1):
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    69  #endif /* #ifdef COM_FLOAT32SUPP */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    70  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    71              /* Update the Src_Buf with the data i.e typecast the data to the uint32 variable*/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    72              TxNewVal = (Com_SigMaxType)COM_GET_SIGTYPEUINT32_BUFF(rxMainFuncId, RxSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    73              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    74  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    75  #if defined(COM_RXSIG_INT64) && defined(COM_TXSIG_INT64)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    76          case 0x08u:     /* COM_UINT64 & COM_SINT64 */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    77              /* Update the Src_Buf with the data i.e typecast the data to the uint64 variable*/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    78              TxNewVal = COM_GET_SIGTYPEUINT64_BUFF(rxMainFuncId, RxSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    79              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    80  #endif /* #if defined(COM_RXSIG_INT64) && defined(COM_TXSIG_INT64) */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    81  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    82  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    83  #if defined(COM_TXSIG_FLOAT64SUPP) && defined(COM_RXSIG_FLOAT64SUPP)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    84          case (COM_FLOAT64 >> 1):
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    85              TxNewVal_f64 = COM_GET_SIGTYPEFLOAT64_BUFF(rxMainFuncId, RxSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    86              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    87  #endif /* #if defined(COM_TXSIG_FLOAT64SUPP) && defined(COM_RXSIG_FLOAT64SUPP) */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    88  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    89          default:
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    90              /**
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    91               * Default case is mandatory in switch syntax. Moreover only AUTOSAR Com defined signal types are allowed
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    92               * to be configured, hence default case is intentionally left empty.
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    93               */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    94              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    95          }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    96  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    97          SchM_Exit_Com_RxSigGwMcLockProtArea();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    98  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	    99  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   100  #if defined(COM_TXSIG_FLOAT64SUPP) && defined(COM_RXSIG_FLOAT64SUPP)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   101          if(Type == COM_FLOAT64)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   102          {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   103              /* 1. Set the UpdateBit, if configured
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   104               * 2. Update TxIPdu buffer with the routed Signal data
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   105               * Return value is based on IPduGroup status that can be ignored here, as it is checked later
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   106               * in Com_MainFunctionRouteSignals()
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   107               */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   108              /* MR12 DIR 1.1 VIOLATION: Explicit cast is provided in line with Com_InternalSendSignal() definition.
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   109                 But the void pointer is always deferenced to a same type. Hence the alignment warning
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   110                 can safely be ignored. */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   111              (void)Com_InternalSendSignal( l_TxGwDestId, (const void *)&TxNewVal_f64 );
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   112  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   113          }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   114          else
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   115  #endif /* #if defined(COM_TXSIG_FLOAT64SUPP) && defined(COM_RXSIG_FLOAT64SUPP) */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   116  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   117          {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   118              /* 1. Set the UpdateBit, if configured
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   119               * 2. Update TxIPdu buffer with the routed Signal data
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   120               * 3. Evaluate TMC of Signal
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   121               * 4. Evaluate TMS of TxIPdu
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   122               * Return value is based on IPduGroup status that can be ignored here, as it is checked later
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   123               * in Com_MainFunctionRouteSignals()
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   124               */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   125              /* MR12 DIR 1.1 VIOLATION: Explicit cast is provided in line with Com_InternalSendSignal() definition.
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   126                 But the void pointer is always deferenced to a same/lesser integer type & it is 32bit aligned.
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   127                 Hence the alignment warning can safely be ignored. */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   128              (void)Com_InternalSendSignal( l_TxGwDestId, (const void *)&TxNewVal );
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   129  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   130          }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   131      }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   132      else
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   133      {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   134          /* Refer to Com_Cfg_SchM file; this is a multi-core lock */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   135          SchM_Enter_Com_RxSigGwMcLockProtArea();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   136  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   137          /* SignalType: UINT8_N */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   138          /* 1. Set the UpdateBit, if configured
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   139           * 2. Update TxIPdu buffer with the routed Signal data
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   140           * 3. Evaluate TMC of Signal
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   141           * 4. Evaluate TMS of TxIPdu
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   142           * Return value is based on IPduGroup status that can be ignored here, as it is checked later
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   143           * in Com_MainFunctionRouteSignals()
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   144           */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   145          /* MR12 DIR 1.1 VIOLATION: Explicit cast is provided in line with Com_InternalSendSignal() definition.
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   146             But the void pointer is always deferenced to a same type. Hence the alignment warning
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   147             can safely be ignored. */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   148          (void)Com_InternalSendSignal( l_TxGwDestId, (const void *)&COM_GET_SIGTYPEUINT8_BUFF(rxMainFuncId, RxSigBuff_Index) );
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   149  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   150          SchM_Exit_Com_RxSigGwMcLockProtArea();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   151      }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   152  }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   153  #define COM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   154  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   155  #endif /* #ifdef COM_SIGNALGATEWAY */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   156  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   157  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   158  #if defined COM_SIGNALGROUPGATEWAY && (defined (COM_RX_SIGNALGROUP) && defined (COM_TX_SIGNALGROUP))
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   159  #define COM_START_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   160  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   161  /**********************************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   162   Function name    : Com_Prv_PackRxGrpSigGwBufferData
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   163   Syntax           : void Com_Prv_PackRxGrpSigGwBufferData(Com_RxGrpSigConstPtrType RxGrpSigConstPtr,
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   164                                                        Com_TxIntGrpSignalIdType l_TxGwDestId)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   165   Description      : This function is called to
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   166   *                   Copy the data from the Rx GroupSignal buffer to its corresponding Tx GroupSignal
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   167   Parameter        : Com_RxGrpSigConstPtrType RxGrpSigConstPtr
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   168                    : Com_TxIntGrpSignalIdType l_TxGwDestId
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   169   Return value     : void
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   170   *********************************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   171  /* HIS METRIC CALLS VIOLATION IN Com_Prv_PackRxGrpSigGwBufferData:
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   172     Com_Prv_PackRxGrpSigGwBufferData function contains necessary function calls statements.
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   173     HIS metric compliance would decrease readability and maintainability */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   174  FUNC(void, COM_CODE) Com_Prv_PackRxGrpSigGwBufferData( Com_RxGrpSigConstPtrType RxGrpSigConstPtr,
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   175                                                        Com_TxIntGrpSignalIdType l_TxGwDestId)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   176  {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   177      Com_TxGrpSigConstPtrType                TxGrpSigConstPtr; /* Local pointer to Tx GroupSignal static configuration */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   178      Com_TxSigGrpRamPtrType                  TxSigGrpRamPtr;   /* Local pointer to status of the Tx SignalGroup */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   179      VAR(Com_SigMaxType, AUTOMATIC)          TxNewVal;         /* Local variable to store the new value */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   180      VAR(Com_RxGrpSigBuffIndexType, AUTOMATIC) rxGrpSignalBuffIndex;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   181      VAR(uint8, AUTOMATIC)                   Type;             /* Type of the GroupSignal */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   182      VAR(Com_MainFuncType, AUTOMATIC)        rxMainFuncId;     /* Local variable holds MainFunction reference */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   183      VAR(Com_MainFuncType,AUTOMATIC)         txMainFuncId;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   184  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   185      TxGrpSigConstPtr = COM_GET_TXGRPSIG_CONSTDATA(l_TxGwDestId);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   186  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   187      TxSigGrpRamPtr   = &COM_GET_TXSIGGRPFLAG(TxGrpSigConstPtr->SigGrpRef);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   188  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   189      Type = Com_GetValue(RXGRPSIG,_TYPE,RxGrpSigConstPtr->rxGrpSigFields);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   190  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   191      /* Fetch the Rx-MainFunction internal Id */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   192      rxMainFuncId = (COM_GET_RX_IPDU_CONSTDATA((COM_GET_RXSIGGRP_CONSTDATA(RxGrpSigConstPtr->SigGrpRef))->IpduRef))->MainFunctionRef;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   193      /* Fetch the Tx-MainFunction internal Id */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   194      txMainFuncId = (COM_GET_TX_IPDU_CONSTDATA((COM_GET_TXSIGGRP_CONSTDATA(TxGrpSigConstPtr->SigGrpRef))->IpduRef))->MainFunctionRef;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   195  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   196      TxNewVal = 0u;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   197  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   198      rxGrpSignalBuffIndex = RxGrpSigConstPtr->RxGrpSigBuff_Index;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   199  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   200      /* Even if the IPDU Group is stopped this API will update the data in the Internal Buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   201      if(Type != (uint8)COM_UINT8_N)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   202      {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   203          SchM_Enter_Com_TxGrpSigBuffer();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   204          switch(Type >> 1u)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   205          {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   206          case 0x00u:     /* COM_UINT8 & COM_SINT8 */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   207          case (COM_BOOLEAN >> 1):
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   208              /* Update the Src_Buf with the data i.e typecast the data to uint8*/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   209              TxNewVal = (Com_SigMaxType)COM_GET_SECRXGRPSIGTYPEU8_BUFF(rxMainFuncId, rxGrpSignalBuffIndex);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   210              COM_GET_TXGRPSIGTYPEU8_BUFF(txMainFuncId, TxGrpSigConstPtr->TxGrpSigBuff_Index)  = (uint8)TxNewVal;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   211              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   212  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   213          case 0x01u:     /* COM_UINT16 & COM_SINT16 */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   214              #if (CPU_TYPE == CPU_TYPE_8)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   215              SchM_Enter_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   216              #endif
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   217              /* Update the Src_Buf with the data i.e typecast the data to uint16*/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   218              TxNewVal = (Com_SigMaxType)COM_GET_SECRXGRPSIGTYPEU16_BUFF(rxMainFuncId, rxGrpSignalBuffIndex);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   219              #if (CPU_TYPE == CPU_TYPE_8)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   220              SchM_Exit_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   221              #endif
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   222              COM_GET_TXGRPSIGTYPEU16_BUFF(txMainFuncId, TxGrpSigConstPtr->TxGrpSigBuff_Index)  = (uint16)TxNewVal;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   223              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   224  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   225          case 0x02u:     /* COM_UINT32 & COM_SINT32 */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   226  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   227  #ifdef COM_GRPSIGFLOAT32SUPP
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   228          case (COM_FLOAT32 >> 1u):
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   229  #endif /* #ifdef COM_GRPSIGFLOAT32SUPP */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   230  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   231              #if (CPU_TYPE != CPU_TYPE_32)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   232              SchM_Enter_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   233              #endif
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   234              /* Update the Src_Buf with the data i.e typecast the data to the uint32 variable*/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   235              TxNewVal = (Com_SigMaxType)COM_GET_SECRXGRPSIGTYPEU32_BUFF(rxMainFuncId, rxGrpSignalBuffIndex);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   236              #if (CPU_TYPE != CPU_TYPE_32)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   237              SchM_Exit_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   238              #endif
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   239              COM_GET_TXGRPSIGTYPEU32_BUFF(txMainFuncId, TxGrpSigConstPtr->TxGrpSigBuff_Index)  = (uint32)TxNewVal;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   240              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   241  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   242  #if defined(COM_RXGRPSIG_INT64) && defined(COM_TXGRPSIG_INT64)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   243          case 0x08u:     /* COM_UINT64 & COM_SINT64 */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   244              SchM_Enter_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   245              /* Update the Src_Buf with the data i.e typecast the data to the uint64 variable*/
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   246              TxNewVal = COM_GET_SECRXGRPSIGTYPEU64_BUFF(rxMainFuncId, rxGrpSignalBuffIndex);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   247              SchM_Exit_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   248              COM_GET_TXGRPSIGTYPEU64_BUFF(txMainFuncId, TxGrpSigConstPtr->TxGrpSigBuff_Index)  = TxNewVal;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   249              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   250  #endif /* #if defined(COM_RXGRPSIG_INT64) && defined(COM_TXGRPSIG_INT64) */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   251  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   252  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   253  #if defined(COM_TXGRPSIG_FLOAT64SUPP) && defined(COM_RXGRPSIG_FLOAT64SUPP)
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   254          case (COM_FLOAT64 >> 1):
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   255              SchM_Enter_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   256              /* Pack the float value into float64 shadow buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   257              COM_GET_TXGRPSIGTYPEFLOAT64_BUFF(txMainFuncId, TxGrpSigConstPtr->TxGrpSigBuff_Index) =
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   258                           COM_GET_SECRXGRPSIGTYPEFLOAT64_BUFF(rxMainFuncId, rxGrpSignalBuffIndex);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   259              SchM_Exit_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   260              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   261  #endif /* #if defined(COM_TXGRPSIG_FLOAT64SUPP) && defined(COM_RXGRPSIG_FLOAT64SUPP) */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   262  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   263          default:
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   264              /**
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   265               * Default case is mandatory in switch syntax. Moreover only AUTOSAR Com defined signal types are allowed
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   266               * to be configured, hence default case is intentionally left empty.
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   267               */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   268              break;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   269  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   270          }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   271          SchM_Exit_Com_TxGrpSigBuffer();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   272  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   273          /* Before updating endianess conversion should be performed */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   274          /* Update the Signal in the Shadow buffer, here you have to find the bitposition in the shadow
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   275           * buffer for this signal  */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   276  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   277  #ifdef COM_EffectiveSigGrpTOC
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   278          /* Check if the group signal contributes to evaluation of transfer property of signal group */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   279          /* if((TxGrpSigConstPtr->txGrpSigFields.TransProp != (uint8)COM_FALSE)  &&
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   280           *    (COM_GET_OLDVALTRIGONCHANGE(TxGrpSigConstPtr->OldValue_Index) != TxNewVal)) */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   281          if((Com_GetValue(TXGRPSIG,_TP,TxGrpSigConstPtr->txGrpSigFields) != COM_FALSE)  &&
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   282             (COM_GET_OLDVALTRIGONCHANGE(TxGrpSigConstPtr->OldValue_Index) != (Com_OldValTrigOnChngType)TxNewVal))
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   283          {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   284              /* Update the old value */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   285              COM_GET_OLDVALTRIGONCHANGE(TxGrpSigConstPtr->OldValue_Index) = (Com_OldValTrigOnChngType)TxNewVal;
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   286              /* TxSigGrpRamPtr ->txSigGrpRAMFields.TrigOnChange = COM_TRUE */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   287              Com_SetRamValue(TXSIGGRP,_TRIGONCHNG,TxSigGrpRamPtr->txSigGrpRAMFields,COM_TRUE);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   288          }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   289  #endif
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   290  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   291      }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   292      else
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   293      {
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   294          /* The locks inside the function Com_ByteCopy() are removed.
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   295           * Hence locks are used here
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   296           * Copy the *SignalDataPtr to all the Bytes of this signal in Shadow buffer */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   297          SchM_Enter_Com_TxGrpSigBuffer();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   298          SchM_Enter_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   299          Com_ByteCopy(&COM_GET_TXGRPSIGTYPEU8_BUFF(txMainFuncId, TxGrpSigConstPtr->TxGrpSigBuff_Index),
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   300                       &COM_GET_SECRXGRPSIGTYPEU8_BUFF(rxMainFuncId, rxGrpSignalBuffIndex),(uint32)TxGrpSigConstPtr->BitSize);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   301          SchM_Exit_Com_RxGrpSigSecBuff();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   302          SchM_Exit_Com_TxGrpSigBuffer();
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   303  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   304      }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   305  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   306      /* This is to flag the signal group, that a group signal within it was updated */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   307      /* TxSigGrpRamPtr ->txSigGrpRAMFields.IsGwUpdated = COM_TRUE */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   308      Com_SetRamValue(TXSIGGRP,_ISGWUPDTD,TxSigGrpRamPtr->txSigGrpRAMFields,COM_TRUE);
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   309  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   310  }
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   311  #define COM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   312  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   313  
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   314  #endif /* #if defined COM_SIGNALGROUPGATEWAY && (defined (COM_RX_SIGNALGROUP) && defined (COM_TX_SIGNALGROUP)) */
; BSW\src\BSW\Gen\Com\src\Com_PackGwMappings.c	   315  

	; Module end
