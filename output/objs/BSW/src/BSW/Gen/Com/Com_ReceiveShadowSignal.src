	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc14148a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\BSW\\src\\BSW\\Gen\\Com\\Com_ReceiveShadowSignal.src BSW\\src\\BSW\\Gen\\Com\\src\\Com_ReceiveShadowSignal.c"
	.compiler_name		"ctc"
	;source	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_ReceiveShadowSignal.c'

	
$TC16X
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	13343
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_ReceiveShadowSignal.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'unsigned char',0,1,8,2
	.byte	'unsigned short int',0,2,7,3
	.byte	'Bfx_Prv_GetBit_u16u8_u8_Inl',0,3,1,207,2,22
	.word	149
	.byte	1,1,4
	.byte	'Data',0,1,207,2,57
	.word	166
	.byte	4
	.byte	'BitPn',0,1,207,2,69
	.word	149
	.byte	5,0,2
	.byte	'unsigned int',0,4,7,3
	.byte	'Bfx_Prv_GetBit_u32u8_u8_Inl',0,3,1,227,2,22
	.word	149
	.byte	1,1,4
	.byte	'Data',0,1,227,2,57
	.word	259
	.byte	4
	.byte	'BitPn',0,1,227,2,69
	.word	149
	.byte	5,0,3
	.byte	'Bfx_Prv_GetBit_u8u8_u8_Inl',0,3,1,247,2,22
	.word	149
	.byte	1,1,4
	.byte	'Data',0,1,247,2,55
	.word	149
	.byte	4
	.byte	'BitPn',0,1,247,2,67
	.word	149
	.byte	5,0,3
	.byte	'Bfx_Prv_GetBits_u8u8u8_u8_Inl',0,3,1,179,3,20
	.word	149
	.byte	1,1,4
	.byte	'Data',0,1,179,3,56
	.word	149
	.byte	4
	.byte	'BitStartPn',0,1,179,3,68
	.word	149
	.byte	4
	.byte	'BitLn',0,1,179,3,86
	.word	149
	.byte	5,0,6
	.word	166
	.byte	7
	.byte	'Bfx_Prv_PutBit_u16u8u8_Inl',0,3,1,200,3,19,1,1,4
	.byte	'Data',0,1,200,3,54
	.word	509
	.byte	4
	.byte	'BitPn',0,1,200,3,66
	.word	149
	.byte	4
	.byte	'Value',0,1,200,3,81
	.word	149
	.byte	5,0,6
	.word	259
	.byte	7
	.byte	'Bfx_Prv_PutBit_u32u8u8_Inl',0,3,1,224,3,19,1,1,4
	.byte	'Data',0,1,224,3,54
	.word	595
	.byte	4
	.byte	'BitPn',0,1,224,3,66
	.word	149
	.byte	4
	.byte	'Value',0,1,224,3,81
	.word	149
	.byte	5,0,6
	.word	149
	.byte	7
	.byte	'Bfx_Prv_PutBit_u8u8u8_Inl',0,3,1,248,3,19,1,1,4
	.byte	'Data',0,1,248,3,52
	.word	681
	.byte	4
	.byte	'BitPn',0,1,248,3,64
	.word	149
	.byte	4
	.byte	'Value',0,1,248,3,79
	.word	149
	.byte	5,0,3
	.byte	'Bfx_Prv_TstParityEven_u32_u8_Inl',0,3,1,143,10,22
	.word	149
	.byte	1,1,4
	.byte	'Data',0,1,143,10,62
	.word	259
	.byte	5,0,8
	.word	188
	.byte	9
	.word	228
	.byte	9
	.word	242
	.byte	5,0,8
	.word	275
	.byte	9
	.word	315
	.byte	9
	.word	329
	.byte	5,0,8
	.word	346
	.byte	9
	.word	385
	.byte	9
	.word	399
	.byte	5,0,8
	.word	416
	.byte	9
	.word	458
	.byte	9
	.word	472
	.byte	9
	.word	492
	.byte	5,0,8
	.word	514
	.byte	9
	.word	549
	.byte	9
	.word	563
	.byte	9
	.word	578
	.byte	5,0,8
	.word	600
	.byte	9
	.word	635
	.byte	9
	.word	649
	.byte	9
	.word	664
	.byte	5,0,8
	.word	686
	.byte	9
	.word	720
	.byte	9
	.word	734
	.byte	9
	.word	749
	.byte	5,0,8
	.word	766
	.byte	9
	.word	811
	.byte	5,0,10,1,6
	.word	978
	.byte	11
	.byte	'__codeptr',0,2,1,1
	.word	980
	.byte	2
	.byte	'char',0,1,6,11
	.byte	'sint8',0,3,76,25
	.word	1003
	.byte	11
	.byte	'uint8',0,3,81,25
	.word	149
	.byte	11
	.byte	'uint16',0,3,91,25
	.word	166
	.byte	11
	.byte	'uint32',0,3,106,24
	.word	259
	.byte	2
	.byte	'unsigned long long int',0,8,7,11
	.byte	'uint64',0,3,111,30
	.word	1069
	.byte	11
	.byte	'boolean',0,3,127,25
	.word	149
	.byte	11
	.byte	'StatusType',0,4,191,1,27
	.word	149
	.byte	11
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	149
	.byte	12,4,206,1,9,8,13
	.byte	'vendorID',0
	.word	166
	.byte	2,2,35,0,13
	.byte	'moduleID',0
	.word	166
	.byte	2,2,35,2,13
	.byte	'sw_major_version',0
	.word	149
	.byte	1,2,35,4,13
	.byte	'sw_minor_version',0
	.word	149
	.byte	1,2,35,5,13
	.byte	'sw_patch_version',0
	.word	149
	.byte	1,2,35,6,0,11
	.byte	'Std_VersionInfoType',0,4,213,1,3
	.word	1170
	.byte	11
	.byte	'PduIdType',0,5,22,19
	.word	166
	.byte	11
	.byte	'PduLengthType',0,5,26,19
	.word	166
	.byte	14,6,113,9,4,15
	.byte	'TP_DATACONF',0,0,15
	.byte	'TP_DATARETRY',0,1,15
	.byte	'TP_CONFPENDING',0,2,0,11
	.byte	'TpDataStateType',0,6,118,3
	.word	1360
	.byte	11
	.byte	'Com_SignalIdType',0,7,100,16
	.word	166
	.byte	11
	.byte	'Com_SignalGroupIdType',0,7,102,16
	.word	166
	.byte	11
	.byte	'Com_IpduIdType',0,7,104,15
	.word	149
	.byte	11
	.byte	'Com_GrpSignalIdType',0,7,107,18
	.word	149
	.byte	11
	.byte	'Com_TxIntSignalIdType',0,8,138,3,18
	.word	149
	.byte	11
	.byte	'Com_RxIntSignalIdType',0,8,139,3,18
	.word	149
	.byte	11
	.byte	'Com_BitsizeType',0,8,155,3,17
	.word	149
	.byte	11
	.byte	'Com_BitpositionType',0,8,156,3,15
	.word	149
	.byte	11
	.byte	'Com_RxGwQueueIndexType',0,8,161,3,15
	.word	149
	.byte	11
	.byte	'Com_SigBuffIndexType',0,8,164,3,15
	.word	149
	.byte	11
	.byte	'Com_SigMaxType',0,8,198,3,16
	.word	259
	.byte	11
	.byte	'Com_MainFuncType',0,8,231,3,16
	.word	149
	.byte	11
	.byte	'Com_NumOfIpdusType',0,8,233,3,15
	.word	149
	.byte	11
	.byte	'Com_TimeBaseType',0,8,235,3,15
	.word	149
	.byte	11
	.byte	'Can_IdType',0,9,32,16
	.word	259
	.byte	11
	.byte	'Can_HwHandleType',0,9,43,16
	.word	166
	.byte	12,10,93,9,8,13
	.byte	'Class',0
	.word	149
	.byte	1,2,35,0,13
	.byte	'TIN',0
	.word	149
	.byte	1,2,35,1,13
	.byte	'ReturnAddress',0
	.word	259
	.byte	4,2,35,4,0,11
	.byte	'OsTrapInfoType',0,10,97,3
	.word	1868
	.byte	16,68
	.word	259
	.byte	17,16,0,12,10,154,1,9,68,13
	.byte	'store',0
	.word	1948
	.byte	68,2,35,0,0,16,68
	.word	1957
	.byte	17,0,0,11
	.byte	'Os_JumpBufType',0,10,156,1,3
	.word	1979
	.byte	11
	.byte	'Os_StackTraceType',0,10,174,1,18
	.word	259
	.byte	12,10,175,1,9,8,13
	.byte	'sp',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'ctx',0
	.word	259
	.byte	4,2,35,4,0,11
	.byte	'Os_StackValueType',0,10,175,1,63
	.word	2039
	.byte	11
	.byte	'Os_StackSizeType',0,10,176,1,27
	.word	2039
	.byte	18,1,1,6
	.word	2124
	.byte	11
	.byte	'Os_VoidVoidFunctionType',0,10,179,1,16
	.word	2127
	.byte	11
	.byte	'ApplicationType',0,10,193,1,23
	.word	149
	.byte	19
	.byte	'Os_ApplicationConfigurationType_s',0,10,198,1,16,2,13
	.byte	'app_id',0
	.word	149
	.byte	1,2,35,0,13
	.byte	'access',0
	.word	149
	.byte	1,2,35,1,0,11
	.byte	'Os_ApplicationConfigurationType',0,10,201,1,3
	.word	2190
	.byte	11
	.byte	'Os_CoreStateType',0,10,203,1,16
	.word	259
	.byte	11
	.byte	'AreaIdType',0,10,204,1,16
	.word	166
	.byte	11
	.byte	'Os_PeripheralAddressType',0,10,212,1,22
	.word	259
	.byte	11
	.byte	'TickType',0,10,221,1,22
	.word	259
	.byte	11
	.byte	'Os_StopwatchTickType',0,10,225,1,22
	.word	259
	.byte	11
	.byte	'Os_Lockable',0,10,234,1,18
	.word	595
	.byte	11
	.byte	'CoreIdType',0,10,236,1,16
	.word	166
	.byte	11
	.byte	'SpinlockIdType',0,10,237,1,16
	.word	166
	.byte	14,10,239,1,9,4,15
	.byte	'TRYTOGETSPINLOCK_SUCCESS',0,0,15
	.byte	'TRYTOGETSPINLOCK_NOSUCCESS',0,1,0,11
	.byte	'TryToGetSpinlockType',0,10,239,1,74
	.word	2497
	.byte	14,10,174,2,9,4,15
	.byte	'APPLICATION_ACCESSIBLE',0,0,15
	.byte	'APPLICATION_RESTARTING',0,1,15
	.byte	'APPLICATION_TERMINATED',0,2,0,11
	.byte	'ApplicationStateType',0,10,174,2,92
	.word	2590
	.byte	20
	.byte	'void',0,6
	.word	2702
	.byte	21,1,1,22
	.word	149
	.byte	22
	.word	2708
	.byte	0,6
	.word	2713
	.byte	11
	.byte	'Os_FunctionEntryType',0,10,183,2,16
	.word	2727
	.byte	19
	.byte	'Os_MeterInfoType_s',0,10,193,2,16,48,13
	.byte	'elapsed',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'previous',0
	.word	259
	.byte	4,2,35,4,13
	.byte	'max',0
	.word	259
	.byte	4,2,35,8,13
	.byte	'cumulative',0
	.word	259
	.byte	4,2,35,12,13
	.byte	'stackbase',0
	.word	2039
	.byte	8,2,35,16,13
	.byte	'stackusage',0
	.word	2039
	.byte	8,2,35,24,13
	.byte	'stackmax',0
	.word	2039
	.byte	8,2,35,32,13
	.byte	'stackbudget',0
	.word	2039
	.byte	8,2,35,40,0,11
	.byte	'Os_MeterInfoType',0,10,202,2,3
	.word	2762
	.byte	6
	.word	2762
	.byte	11
	.byte	'Os_MeterInfoRefType',0,10,203,2,50
	.word	2960
	.byte	11
	.byte	'EventMaskType',0,10,206,2,15
	.word	149
	.byte	11
	.byte	'Os_imaskType',0,10,211,2,16
	.word	259
	.byte	19
	.byte	'Os_ISRDynType_s',0,10,213,2,16,48,13
	.byte	'meter',0
	.word	2762
	.byte	48,2,35,0,0,11
	.byte	'Os_ISRDynType',0,10,215,2,3
	.word	3039
	.byte	6
	.word	3039
	.byte	23
	.word	3100
	.byte	19
	.byte	'Os_ISRType_s',0,10,216,2,16,24,13
	.byte	'entry_function',0
	.word	2132
	.byte	4,2,35,0,13
	.byte	'dynamic',0
	.word	3105
	.byte	4,2,35,4,13
	.byte	'imask',0
	.word	259
	.byte	4,2,35,8,13
	.byte	'stackbudget',0
	.word	2039
	.byte	8,2,35,12,13
	.byte	'access',0
	.word	149
	.byte	1,2,35,20,13
	.byte	'application',0
	.word	149
	.byte	1,2,35,21,0,11
	.byte	'Os_ISRType',0,10,223,2,3
	.word	3110
	.byte	6
	.word	2124
	.byte	23
	.word	3110
	.byte	6
	.word	3269
	.byte	11
	.byte	'ISRType',0,10,224,2,46
	.word	3274
	.byte	11
	.byte	'Os_bitmask',0,10,239,2,22
	.word	259
	.byte	11
	.byte	'Os_pset0Type',0,10,240,2,20
	.word	259
	.byte	11
	.byte	'Os_pset1Type',0,10,241,2,20
	.word	259
	.byte	11
	.byte	'Os_pset2Type',0,10,242,2,20
	.word	259
	.byte	24,10,243,2,9,4,13
	.byte	'p0',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'p1',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'p2',0
	.word	259
	.byte	4,2,35,0,0,11
	.byte	'Os_psetType',0,10,247,2,3
	.word	3382
	.byte	24,10,249,2,9,4,13
	.byte	't0',0
	.word	259
	.byte	4,2,35,0,13
	.byte	't1',0
	.word	259
	.byte	4,2,35,0,13
	.byte	't2',0
	.word	259
	.byte	4,2,35,0,0,11
	.byte	'Os_tpmaskType',0,10,253,2,3
	.word	3446
	.byte	11
	.byte	'Os_ActivationCountType',0,10,254,2,23
	.word	149
	.byte	19
	.byte	'Os_TaskDynType_s',0,10,128,3,16,120,13
	.byte	'terminate_jump_buf',0
	.word	1988
	.byte	68,2,35,0,13
	.byte	'meter',0
	.word	2762
	.byte	48,2,35,68,13
	.byte	'activation_count',0
	.word	149
	.byte	1,2,35,116,0,11
	.byte	'Os_TaskDynType',0,10,132,3,3
	.word	3544
	.byte	16,68
	.word	1957
	.byte	17,0,0,6
	.word	3544
	.byte	23
	.word	3670
	.byte	19
	.byte	'Os_TaskType_s',0,10,134,3,16,40,13
	.byte	'dynamic',0
	.word	3675
	.byte	4,2,35,0,13
	.byte	'entry_function',0
	.word	2132
	.byte	4,2,35,4,13
	.byte	'pset',0
	.word	3382
	.byte	4,2,35,8,13
	.byte	'base_tpmask',0
	.word	3446
	.byte	4,2,35,12,13
	.byte	'tpmask',0
	.word	3446
	.byte	4,2,35,16,13
	.byte	'core_id',0
	.word	166
	.byte	2,2,35,20,13
	.byte	'index',0
	.word	259
	.byte	4,2,35,24,13
	.byte	'stackbudget',0
	.word	2039
	.byte	8,2,35,28,13
	.byte	'activation_count',0
	.word	149
	.byte	1,2,35,36,13
	.byte	'access',0
	.word	149
	.byte	1,2,35,37,13
	.byte	'application',0
	.word	149
	.byte	1,2,35,38,0,11
	.byte	'Os_TaskType',0,10,146,3,3
	.word	3680
	.byte	23
	.word	3680
	.byte	6
	.word	3930
	.byte	11
	.byte	'TaskType',0,10,147,3,47
	.word	3935
	.byte	25
	.byte	'Os_TaskStateType',0,10,155,3,6,4,15
	.byte	'SUSPENDED',0,0,15
	.byte	'READY',0,1,15
	.byte	'WAITING',0,2,15
	.byte	'RUNNING',0,3,0,11
	.byte	'TaskStateType',0,10,156,3,31
	.word	3958
	.byte	24,10,167,3,3,4,13
	.byte	'tpmask',0
	.word	3446
	.byte	4,2,35,0,0,19
	.byte	'Os_ResourceDynType_s',0,10,166,3,16,4,13
	.byte	'saved_priority',0
	.word	4045
	.byte	4,2,35,0,0,11
	.byte	'Os_ResourceDynType',0,10,170,3,3
	.word	4068
	.byte	6
	.word	4068
	.byte	23
	.word	4148
	.byte	19
	.byte	'Os_ResourceType_s',0,10,171,3,16,12,13
	.byte	'dynamic',0
	.word	4153
	.byte	4,2,35,0,13
	.byte	'tpmask',0
	.word	3446
	.byte	4,2,35,4,13
	.byte	'access',0
	.word	149
	.byte	1,2,35,8,0,11
	.byte	'Os_ResourceType',0,10,175,3,3
	.word	4158
	.byte	12,10,181,3,9,12,13
	.byte	'maxallowedvalue',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'ticksperbase',0
	.word	259
	.byte	4,2,35,4,13
	.byte	'mincycle',0
	.word	259
	.byte	4,2,35,8,0,11
	.byte	'AlarmBaseType',0,10,185,3,3
	.word	4257
	.byte	12,10,206,3,9,8,13
	.byte	'Running',0
	.word	149
	.byte	1,2,35,0,13
	.byte	'Pending',0
	.word	149
	.byte	1,2,35,1,13
	.byte	'Delay',0
	.word	259
	.byte	4,2,35,4,0,11
	.byte	'Os_CounterStatusType',0,10,210,3,3
	.word	4352
	.byte	26
	.word	149
	.byte	1,1,6
	.word	4438
	.byte	11
	.byte	'Os_CounterIncrAdvType',0,10,217,3,22
	.word	4445
	.byte	19
	.byte	's_swd',0,10,222,3,12,4,13
	.byte	'count',0
	.word	259
	.byte	4,2,35,0,0,24,10,221,3,3,4,13
	.byte	'sw',0
	.word	4481
	.byte	4,2,35,0,0,19
	.byte	'Os_CounterDynType_s',0,10,220,3,16,4,13
	.byte	'type_dependent',0
	.word	4509
	.byte	4,2,35,0,0,11
	.byte	'Os_CounterDynType',0,10,226,3,3
	.word	4528
	.byte	6
	.word	4528
	.byte	23
	.word	4606
	.byte	19
	.byte	'Os_CounterType_s',0,10,227,3,16,28,13
	.byte	'dynamic',0
	.word	4611
	.byte	4,2,35,0,13
	.byte	'advincr',0
	.word	4450
	.byte	4,2,35,4,13
	.byte	'base',0
	.word	4257
	.byte	12,2,35,8,13
	.byte	'core',0
	.word	2708
	.byte	4,2,35,20,13
	.byte	'access',0
	.word	149
	.byte	1,2,35,24,13
	.byte	'application',0
	.word	149
	.byte	1,2,35,25,0,11
	.byte	'Os_CounterType',0,10,234,3,3
	.word	4616
	.byte	6
	.word	4438
	.byte	23
	.word	4616
	.byte	6
	.word	4768
	.byte	11
	.byte	'CounterType',0,10,235,3,52
	.word	4773
	.byte	25
	.byte	'Os_ScheduleTableStatusType',0,10,240,3,6,4,15
	.byte	'SCHEDULETABLE_STOPPED',0,0,15
	.byte	'SCHEDULETABLE_NEXT',0,1,15
	.byte	'SCHEDULETABLE_WAITING',0,2,15
	.byte	'SCHEDULETABLE_RUNNING',0,3,15
	.byte	'SCHEDULETABLE_RUNNING_AND_SYNCHRONOUS',0,4,0,11
	.byte	'ScheduleTableStatusType',0,10,241,3,41
	.word	4799
	.byte	23
	.word	.L6-.L3
	.byte	6
	.word	4999
	.byte	11
	.byte	'ScheduleTableType',0,10,128,4,58
	.word	5004
	.byte	19
	.byte	'Os_ScheduleTableDynType_s',0,10,130,4,16,16,13
	.byte	'match',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'next',0
	.word	5009
	.byte	4,2,35,4,13
	.byte	'state',0
	.word	4799
	.byte	4,2,35,8,13
	.byte	'config',0
	.word	166
	.byte	2,2,35,12,0,6
	.word	5036
	.byte	23
	.word	5129
.L6:
	.byte	19
	.byte	'Os_ScheduleTableType_s',0,10,247,3,16,16,13
	.byte	'dynamic',0
	.word	5134
	.byte	4,2,35,0,13
	.byte	'counter',0
	.word	4778
	.byte	4,2,35,4,13
	.byte	'repeat',0
	.word	149
	.byte	1,2,35,8,13
	.byte	'config',0
	.word	166
	.byte	2,2,35,10,13
	.byte	'initial',0
	.word	149
	.byte	1,2,35,12,13
	.byte	'access',0
	.word	149
	.byte	1,2,35,13,13
	.byte	'application',0
	.word	149
	.byte	1,2,35,14,0,11
	.byte	'Os_ScheduleTableType',0,10,255,3,3
	.word	5139
	.byte	23
	.word	5139
	.byte	6
	.word	5319
	.byte	23
	.word	4616
	.byte	6
	.word	5329
	.byte	27
	.word	2432
	.byte	27
	.word	3382
	.byte	27
	.word	3279
	.byte	27
	.word	3940
	.byte	27
	.word	3446
	.byte	27
	.word	149
	.byte	27
	.word	3940
	.byte	19
	.byte	'Os_ControlledCoreType_s',0,10,251,6,16,112,13
	.byte	'TrapInfo',0
	.word	1868
	.byte	8,2,35,0,13
	.byte	'lock_taskaccess',0
	.word	5339
	.byte	4,2,35,8,13
	.byte	'ReadyTasks',0
	.word	5344
	.byte	4,2,35,12,13
	.byte	'RunningISR',0
	.word	5349
	.byte	4,2,35,16,13
	.byte	'RunningTask',0
	.word	5354
	.byte	4,2,35,20,13
	.byte	'RunningTPMask',0
	.word	5359
	.byte	4,2,35,24,13
	.byte	'CurrentMeteredObject',0
	.word	2965
	.byte	4,2,35,28,13
	.byte	'IdleMeter',0
	.word	2762
	.byte	48,2,35,32,13
	.byte	'AppAccess',0
	.word	149
	.byte	1,2,35,80,13
	.byte	'AppOverride',0
	.word	5364
	.byte	1,2,35,81,13
	.byte	'GetStackValueAdjust',0
	.word	2039
	.byte	8,2,35,84,13
	.byte	'InErrorHook',0
	.word	149
	.byte	1,2,35,92,13
	.byte	'ChainTaskRef',0
	.word	5369
	.byte	4,2,35,96,13
	.byte	'GetStackUsageAdjust',0
	.word	2039
	.byte	8,2,35,100,13
	.byte	'InProtectionHook',0
	.word	149
	.byte	1,2,35,108,13
	.byte	'CoreIsActive',0
	.word	149
	.byte	1,2,35,109,13
	.byte	'InShutdownHook',0
	.word	149
	.byte	1,2,35,110,0,11
	.byte	'Os_ControlledCoreType',0,10,141,7,3
	.word	5374
	.byte	6
	.word	259
	.byte	23
	.word	3110
	.byte	6
	.word	5830
	.byte	23
	.word	3680
	.byte	6
	.word	5840
	.byte	6
	.word	2762
	.byte	19
	.byte	'Os_AnyCoreType_s',0,10,151,7,16,96,13
	.byte	'DisableAllImask',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'SuspendAllImask',0
	.word	259
	.byte	4,2,35,4,13
	.byte	'SuspendOSImask',0
	.word	259
	.byte	4,2,35,8,13
	.byte	'DisableAllCount',0
	.word	259
	.byte	4,2,35,12,13
	.byte	'SuspendAllCount',0
	.word	259
	.byte	4,2,35,16,13
	.byte	'SuspendOSCount',0
	.word	259
	.byte	4,2,35,20,13
	.byte	'RestartJumpBuf',0
	.word	1988
	.byte	68,2,35,24,13
	.byte	'Restartable',0
	.word	149
	.byte	1,2,35,92,0,11
	.byte	'Os_AnyCoreType',0,10,160,7,3
	.word	5855
	.byte	11
	.byte	'Can_TxObjPriorityClassType',0,11,219,3,16
	.word	259
	.byte	19
	.byte	'Can_TxHwObjectConfigType',0,11,231,3,16,8,13
	.byte	'MsgObjId',0
	.word	149
	.byte	1,2,35,0,13
	.byte	'HwControllerId',0
	.word	149
	.byte	1,2,35,1,13
	.byte	'TxObjPriorityClass',0
	.word	259
	.byte	4,2,35,4,0,11
	.byte	'Can_TxHwObjectConfigType',0,11,252,3,3
	.word	6132
	.byte	19
	.byte	'Can_RxHwObjectConfigType',0,11,129,4,16,12,13
	.byte	'MaskRef',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'MsgId',0
	.word	259
	.byte	4,2,35,4,13
	.byte	'MsgObjId',0
	.word	149
	.byte	1,2,35,8,13
	.byte	'HwControllerId',0
	.word	149
	.byte	1,2,35,9,0,11
	.byte	'Can_RxHwObjectConfigType',0,11,147,4,3
	.word	6268
	.byte	16,4
	.word	149
	.byte	17,3,0,19
	.byte	'Can_ControllerMOMapConfigType',0,11,181,4,16,4,13
	.byte	'ControllerMOMap',0
	.word	6408
	.byte	4,2,35,0,0,11
	.byte	'Can_ControllerMOMapConfigType',0,11,184,4,3
	.word	6417
	.byte	19
	.byte	'Can_NPCRValueType',0,11,188,4,16,2,13
	.byte	'Can_NPCRValue',0
	.word	166
	.byte	2,2,35,0,0,11
	.byte	'Can_NPCRValueType',0,11,191,4,3
	.word	6518
	.byte	19
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,194,4,16,8,13
	.byte	'CanControllerBaudrate',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'CanControllerBaudrateCfg',0
	.word	166
	.byte	2,2,35,4,0,11
	.byte	'Can_17_MCanP_ControllerBaudrateConfigType',0,11,198,4,3
	.word	6593
	.byte	23
	.word	6593
	.byte	6
	.word	6758
	.byte	19
	.byte	'Can_BaudrateConfigPtrType',0,11,201,4,16,4,13
	.byte	'Can_kBaudrateConfigPtr',0
	.word	6763
	.byte	4,2,35,0,0,11
	.byte	'Can_BaudrateConfigPtrType',0,11,204,4,3
	.word	6768
	.byte	19
	.byte	'Can_EventHandlingType',0,11,226,4,16,4,13
	.byte	'CanEventType',0
	.word	6408
	.byte	4,2,35,0,0,11
	.byte	'Can_EventHandlingType',0,11,229,4,3
	.word	6868
	.byte	11
	.byte	'Rte_TransformerErrorCode',0,12,130,1,15
	.word	149
	.byte	11
	.byte	'Rte_TransformerClass',0,12,131,1,15
	.word	149
	.byte	12,12,168,1,9,12,13
	.byte	'in',0
	.word	2708
	.byte	4,2,35,0,13
	.byte	'out',0
	.word	2708
	.byte	4,2,35,4,13
	.byte	'used',0
	.word	166
	.byte	2,2,35,8,13
	.byte	'lost_data',0
	.word	149
	.byte	1,2,35,10,0,11
	.byte	'Rte_QDynType',0,12,173,1,3
	.word	7014
	.byte	14,12,175,1,9,4,15
	.byte	'RTE_DRA',0,0,15
	.byte	'RTE_WOWP',0,1,15
	.byte	'RTE_TASK',0,2,15
	.byte	'RTE_ARE',0,3,15
	.byte	'RTE_EV',0,4,15
	.byte	'RTE_MSI',0,5,0,11
	.byte	'Rte_NotificationType',0,12,182,1,3
	.word	7101
	.byte	6
	.word	7014
	.byte	19
	.byte	'Rte_QCmnType',0,12,184,1,16,24,13
	.byte	'dynamic',0
	.word	7199
	.byte	4,2,35,0,13
	.byte	'copy',0
	.word	149
	.byte	1,2,35,4,13
	.byte	'queue_size',0
	.word	166
	.byte	2,2,35,6,13
	.byte	'element_size',0
	.word	166
	.byte	2,2,35,8,13
	.byte	'buffer_start',0
	.word	2708
	.byte	4,2,35,12,13
	.byte	'buffer_end',0
	.word	2708
	.byte	4,2,35,16,13
	.byte	'notification_type',0
	.word	7101
	.byte	4,2,35,20,0,11
	.byte	'Rte_QCmnType',0,12,192,1,3
	.word	7204
	.byte	11
	.byte	'Rte_AlarmRefType',0,12,224,1,32
	.word	259
	.byte	11
	.byte	'Rte_AlarmIndexType',0,12,226,1,32
	.word	166
	.byte	16,128,8
	.word	149
	.byte	17,255,7,0,11
	.byte	'Impl_NVM_DstPtrType_1024',0,13,50,15
	.word	7442
	.byte	11
	.byte	'CanIf_u32_impl',0,13,69,16
	.word	259
	.byte	11
	.byte	'CanIf_u16_impl',0,13,71,16
	.word	166
	.byte	11
	.byte	'CanIf_u8_impl',0,13,73,15
	.word	149
	.byte	11
	.byte	'CanIf_ControllerModeType_Enum_impl',0,13,88,15
	.word	149
	.byte	11
	.byte	'CanIf_PduModeType_Enum_impl',0,13,90,15
	.word	149
	.byte	12,13,92,9,2,13
	.byte	'DeviceMode',0
	.word	149
	.byte	1,2,35,0,13
	.byte	'ChannelMode',0
	.word	149
	.byte	1,2,35,1,0,11
	.byte	'CanIf_ControllerStateType_struct_impl',0,13,95,3
	.word	7633
	.byte	11
	.byte	'CanIf_NotifStatusType_Enum_impl',0,13,100,15
	.word	149
	.byte	11
	.byte	'CanSM_boolean_Impl',0,13,120,15
	.word	149
	.byte	11
	.byte	'CanSM_u8_Impl',0,13,123,15
	.word	149
	.byte	11
	.byte	'CanSM_BusOffRecoveryStateType_Enum_impl',0,13,128,1,15
	.word	149
	.byte	11
	.byte	'CanSM_NetworkModeStateType_Enum_impl',0,13,132,1,15
	.word	149
	.byte	11
	.byte	'CanSM_u16_Impl',0,13,136,1,16
	.word	166
	.byte	11
	.byte	'CanSM_TimerStateType_Enum_impl',0,13,138,1,15
	.word	149
	.byte	12,13,140,1,9,4,13
	.byte	'cntTick_u16',0
	.word	166
	.byte	2,2,35,0,13
	.byte	'stTimer',0
	.word	149
	.byte	1,2,35,2,0,11
	.byte	'CanSM_TimerConfig_tst_struct_impl',0,13,143,1,3
	.word	7974
	.byte	11
	.byte	'Com_impl_u16',0,13,154,1,16
	.word	166
	.byte	11
	.byte	'Com_impl_u8',0,13,157,1,15
	.word	149
	.byte	11
	.byte	'ComM_uint32_Impl',0,13,173,1,16
	.word	259
	.byte	11
	.byte	'ComM_uint16_Impl',0,13,175,1,16
	.word	166
	.byte	11
	.byte	'ComM_uint8_Impl',0,13,177,1,15
	.word	149
	.byte	11
	.byte	'ComM_bool_Impl',0,13,179,1,15
	.word	149
	.byte	12,13,181,1,9,24,13
	.byte	'ChannelState_e',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'LightTimeoutCtr_u32',0
	.word	259
	.byte	4,2,35,4,13
	.byte	'MinFullComTimeoutCtr_u16',0
	.word	166
	.byte	2,2,35,8,13
	.byte	'ChannelMode_u8',0
	.word	149
	.byte	1,2,35,10,13
	.byte	'BusSmMode_u8',0
	.word	149
	.byte	1,2,35,11,13
	.byte	'UserRequestCtr_u8',0
	.word	149
	.byte	1,2,35,12,13
	.byte	'PassiveRequestState_u8',0
	.word	149
	.byte	1,2,35,13,13
	.byte	'PncRequestCtr_u8',0
	.word	149
	.byte	1,2,35,14,13
	.byte	'InhibitionReqStatus_u8',0
	.word	149
	.byte	1,2,35,15,13
	.byte	'NmNetworkRequestStatus_b',0
	.word	149
	.byte	1,2,35,16,13
	.byte	'DiagnosticRequestState_b',0
	.word	149
	.byte	1,2,35,17,13
	.byte	'CommunicationAllowed_b',0
	.word	149
	.byte	1,2,35,18,13
	.byte	'NmBusSleepIndicationStatus_b',0
	.word	149
	.byte	1,2,35,19,13
	.byte	'NmPrepareBusSleepIndicationStatus_b',0
	.word	149
	.byte	1,2,35,20,13
	.byte	'NmNetworkModeStatus_b',0
	.word	149
	.byte	1,2,35,21,0,11
	.byte	'ComM_ChannelStruct_Impl',0,13,197,1,3
	.word	8206
	.byte	12,13,206,1,9,10,13
	.byte	'WakeUpInhibitionCtr_u16',0
	.word	166
	.byte	2,2,35,0,13
	.byte	'LimitToNoComCtr_u16',0
	.word	166
	.byte	2,2,35,2,13
	.byte	'RequestedUserMode_t',0
	.word	149
	.byte	1,2,35,4,13
	.byte	'IndicatedUserMode_t',0
	.word	149
	.byte	1,2,35,5,13
	.byte	'numChannelsInFullCom_u8',0
	.word	149
	.byte	1,2,35,6,13
	.byte	'numChannelsInSilentCom_u8',0
	.word	149
	.byte	1,2,35,7,13
	.byte	'numChannelsInNoCom_u8',0
	.word	149
	.byte	1,2,35,8,0,11
	.byte	'ComM_UserStruct_Impl',0,13,214,1,3
	.word	8710
	.byte	11
	.byte	'Dcm_IOOperationResponseType',0,13,252,1,15
	.word	149
	.byte	11
	.byte	'Dcm_RequestDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspRequestRoutineResultsOutSignal_0PrimitivType',0
	.byte	13,138,2,15
	.word	149
	.byte	11
	.byte	'Dcm_StartDataIn_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineInSignalPrimitivType',0,13,146,2,15
	.word	149
	.byte	11
	.byte	'Dcm_StartDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStartRoutineOutSignalPrimitivType',0,13,150,2,15
	.word	149
	.byte	11
	.byte	'Dcm_StopDataOut_DcmDspRoutine_DriveVacuumPump_DcmDspStopRoutineOutSignalPrimitivType',0,13,154,2,15
	.word	149
	.byte	11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockNative_1024_Type',0,13,243,3,34
	.word	7453
	.byte	16,128,8
	.word	149
	.byte	17,255,7,0,11
	.byte	'Rte_PimType_ASW_NVM_ASW_NVM_BlockRedundant_1024_Type',0,13,246,3,34
	.word	7453
	.byte	11
	.byte	'Rte_TaskRefType',0,14,184,1,32
	.word	3940
	.byte	11
	.byte	'Rte_EventRefType',0,14,185,1,32
	.word	149
	.byte	11
	.byte	'Rte_EventType',0,14,186,1,32
	.word	259
	.byte	11
	.byte	'Rte_REActCounterType',0,14,252,1,15
	.word	149
	.byte	6
	.word	149
	.byte	11
	.byte	'Rte_REActCounterRefType',0,14,253,1,58
	.word	9632
	.byte	12,14,255,1,9,8,13
	.byte	'task',0
	.word	9528
	.byte	4,2,35,0,13
	.byte	'acnt',0
	.word	9637
	.byte	4,2,35,4,0,11
	.byte	'Rte_REContainerType',0,14,130,2,3
	.word	9670
	.byte	23
	.word	3680
	.byte	6
	.word	9734
	.byte	6
	.word	149
	.byte	23
	.word	9670
	.byte	6
	.word	9749
	.byte	11
	.byte	'Rte_REContainerRefType',0,14,132,2,60
	.word	9754
	.byte	11
	.byte	'Rte_MSICounterType',0,14,149,2,16
	.word	166
	.byte	6
	.word	166
	.byte	11
	.byte	'Rte_MSICounterRefType',0,14,150,2,56
	.word	9819
	.byte	11
	.byte	'Rte_MSIPendingFlagType',0,14,152,2,17
	.word	149
	.byte	6
	.word	149
	.byte	11
	.byte	'Rte_MSIPendingFlagRefType',0,14,153,2,60
	.word	9887
	.byte	12,14,163,2,9,24,13
	.byte	'counter',0
	.word	9824
	.byte	4,2,35,0,13
	.byte	'incCounter',0
	.word	149
	.byte	1,2,35,4,13
	.byte	'pending',0
	.word	9892
	.byte	4,2,35,8,13
	.byte	'osTask',0
	.word	9528
	.byte	4,2,35,12,13
	.byte	'acnt',0
	.word	9637
	.byte	4,2,35,16,13
	.byte	'osEvent',0
	.word	149
	.byte	1,2,35,20,13
	.byte	'MSIInit',0
	.word	166
	.byte	2,2,35,22,0,11
	.byte	'Rte_MSITableEntry',0,14,172,2,3
	.word	9927
	.byte	6
	.word	166
	.byte	6
	.word	149
	.byte	11
	.byte	'Rte_TaskArrayIndex',0,14,179,2,16
	.word	149
	.byte	11
	.byte	'Rte_NrWaitingTasks',0,14,180,2,16
	.word	149
	.byte	12,14,182,2,9,4,13
	.byte	'pending',0
	.word	149
	.byte	1,2,35,0,13
	.byte	'count',0
	.word	149
	.byte	1,2,35,1,13
	.byte	'firstWaitingTask',0
	.word	149
	.byte	1,2,35,2,0,11
	.byte	'Rte_WaitableDatum',0,14,186,2,3
	.word	10145
	.byte	6
	.word	10145
	.byte	12,14,226,2,9,12,13
	.byte	'event_id',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'wd',0
	.word	10237
	.byte	4,2,35,4,13
	.byte	'timeout',0
	.word	259
	.byte	4,2,35,8,0,11
	.byte	'Rte_WOWP_NotificationType',0,14,230,2,3
	.word	10242
	.byte	23
	.word	10242
	.byte	6
	.word	10331
	.byte	11
	.byte	'Rte_WOWP_NotificationRefType',0,14,232,2,66
	.word	10336
	.byte	11
	.byte	'Rte_ARE_NotificationType',0,14,234,2,29
	.word	9670
	.byte	19
	.byte	'Rte_QTaskType',0,14,243,2,16,28,13
	.byte	'cmn',0
	.word	7204
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9528
	.byte	4,2,35,24,0,11
	.byte	'Rte_QTaskType',0,14,246,2,3
	.word	10413
	.byte	19
	.byte	'Rte_QREType',0,14,250,2,16,28,13
	.byte	'cmn',0
	.word	7204
	.byte	24,2,35,0,13
	.byte	're',0
	.word	9759
	.byte	4,2,35,24,0,11
	.byte	'Rte_QREType',0,14,253,2,3
	.word	10484
	.byte	23
	.word	9670
	.byte	6
	.word	10549
	.byte	19
	.byte	'Rte_QWWPType',0,14,129,3,16,28,13
	.byte	'cmn',0
	.word	7204
	.byte	24,2,35,0,13
	.byte	'wwp',0
	.word	10341
	.byte	4,2,35,24,0,11
	.byte	'Rte_QWWPType',0,14,132,3,3
	.word	10559
	.byte	23
	.word	10242
	.byte	6
	.word	10627
	.byte	19
	.byte	'Rte_QEvType',0,14,136,3,16,36,13
	.byte	'cmn',0
	.word	7204
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9528
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	149
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9637
	.byte	4,2,35,32,0,11
	.byte	'Rte_QEvType',0,14,141,3,3
	.word	10637
	.byte	19
	.byte	'Rte_QMSIType',0,14,145,3,16,48,13
	.byte	'cmn',0
	.word	7204
	.byte	24,2,35,0,13
	.byte	'task',0
	.word	9528
	.byte	4,2,35,24,13
	.byte	'mask',0
	.word	149
	.byte	1,2,35,28,13
	.byte	'acnt',0
	.word	9637
	.byte	4,2,35,32,13
	.byte	'msiCounter',0
	.word	9824
	.byte	4,2,35,36,13
	.byte	'msiPending',0
	.word	9892
	.byte	4,2,35,40,13
	.byte	'msiLimit',0
	.word	166
	.byte	2,2,35,44,0,11
	.byte	'Rte_QMSIType',0,14,153,3,3
	.word	10732
	.byte	12,15,52,9,1,28
	.byte	'isEventTrig',0,1
	.word	149
	.byte	1,7,2,35,0,28
	.byte	'isTriggerIpduSendWithMetadata',0,1
	.word	149
	.byte	1,6,2,35,0,28
	.byte	'isGwIpduSend',0,1
	.word	149
	.byte	1,5,2,35,0,28
	.byte	'isModeChangd',0,1
	.word	149
	.byte	1,4,2,35,0,28
	.byte	'sigTransProp',0,1
	.word	149
	.byte	1,3,2,35,0,28
	.byte	'isTimeoutReq',0,1
	.word	149
	.byte	1,2,2,35,0,28
	.byte	'ignoreRepetitions',0,1
	.word	149
	.byte	1,1,2,35,0,0,11
	.byte	'Com_SendIpduInfo',0,15,61,3
	.word	10887
	.byte	12,15,76,9,8,13
	.byte	'TimePeriodFact',0
	.word	166
	.byte	2,2,35,0,13
	.byte	'TimeOffsetFact',0
	.word	166
	.byte	2,2,35,2,13
	.byte	'RepetitionPeriodFact',0
	.word	166
	.byte	2,2,35,4,13
	.byte	'NumOfRepetitions',0
	.word	149
	.byte	1,2,35,6,13
	.byte	'Mode',0
	.word	149
	.byte	1,2,35,7,0,11
	.byte	'Com_TransModeInfo',0,15,93,2
	.word	11107
	.byte	23
	.word	11107
	.byte	6
	.word	11257
	.byte	11
	.byte	'Com_TMConstPtrType',0,15,103,65
	.word	11262
	.byte	12,15,136,1,9,12,13
	.byte	'Init_Val',0
	.word	259
	.byte	4,2,35,0,13
	.byte	'txSignalFields',0
	.word	166
	.byte	2,2,35,4,13
	.byte	'Bit_Pos',0
	.word	149
	.byte	1,2,35,6,13
	.byte	'BitSize',0
	.word	149
	.byte	1,2,35,7,13
	.byte	'IpduRef',0
	.word	149
	.byte	1,2,35,8,13
	.byte	'General',0
	.word	149
	.byte	1,2,35,9,0,11
	.byte	'Com_Prv_xTxSigCfg_tst',0,15,201,1,2
	.word	11294
	.byte	12,15,247,1,9,16,13
	.byte	'Notification_Cbk',0
	.word	2127
	.byte	4,2,35,0,13
	.byte	'Init_Val',0
	.word	259
	.byte	4,2,35,4,13
	.byte	'Bit_Pos',0
	.word	149
	.byte	1,2,35,8,13
	.byte	'SigBuff_Index',0
	.word	149
	.byte	1,2,35,9,13
	.byte	'BitSize',0
	.word	149
	.byte	1,2,35,10,13
	.byte	'IpduRef',0
	.word	149
	.byte	1,2,35,11,13
	.byte	'General',0
	.word	149
	.byte	1,2,35,12,13
	.byte	'rxSignalFields',0
	.word	149
	.byte	1,2,35,13,0,11
	.byte	'Com_Prv_xRxSigCfg_tst',0,15,171,2,2
	.word	11442
	.byte	23
	.word	11442
	.byte	6
	.word	11639
	.byte	11
	.byte	'Com_RxSigConstPtrType',0,15,180,2,68
	.word	11644
	.byte	12,15,211,5,9,24,13
	.byte	'BuffPtr',0
	.word	681
	.byte	4,2,35,0,13
	.byte	'Com_TMConstPtr',0
	.word	11262
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	166
	.byte	2,2,35,8,13
	.byte	'Timeout_Fact',0
	.word	166
	.byte	2,2,35,10,13
	.byte	'Min_Delay_Time_Fact',0
	.word	166
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	166
	.byte	2,2,35,14,13
	.byte	'PdurId',0
	.word	166
	.byte	2,2,35,16,13
	.byte	'TxSigId_Index',0
	.word	149
	.byte	1,2,35,18,13
	.byte	'txIPduFields',0
	.word	166
	.byte	2,2,35,20,13
	.byte	'MainFunctionRef',0
	.word	149
	.byte	1,2,35,22,13
	.byte	'PaddingByte',0
	.word	149
	.byte	1,2,35,23,0,11
	.byte	'Com_Prv_xTxIpduInfoCfg_tst',0,15,162,6,3
	.word	11680
	.byte	23
	.word	11680
	.byte	6
	.word	11959
	.byte	11
	.byte	'Com_TxIpduConstPtrType',0,15,171,6,72
	.word	11964
	.byte	12,15,137,7,9,20,13
	.byte	'BuffPtr',0
	.word	681
	.byte	4,2,35,0,13
	.byte	'TimeOutNotification_Cbk',0
	.word	2127
	.byte	4,2,35,4,13
	.byte	'Size',0
	.word	166
	.byte	2,2,35,8,13
	.byte	'FirstTimeout_Factor',0
	.word	166
	.byte	2,2,35,10,13
	.byte	'Timeout_Fact',0
	.word	166
	.byte	2,2,35,12,13
	.byte	'No_Of_Sig_Ref',0
	.word	166
	.byte	2,2,35,14,13
	.byte	'RxSigId_Index',0
	.word	149
	.byte	1,2,35,16,13
	.byte	'MainFunctionRef',0
	.word	149
	.byte	1,2,35,17,13
	.byte	'rxIPduFields',0
	.word	149
	.byte	1,2,35,18,0,11
	.byte	'Com_Prv_xRxIpduInfoCfg_tst',0,15,197,7,3
	.word	12001
	.byte	12,15,219,7,9,4,13
	.byte	'FirstIpdu_Index',0
	.word	166
	.byte	2,2,35,0,13
	.byte	'NoOfRxPdus',0
	.word	166
	.byte	2,2,35,2,0,11
	.byte	'Com_Prv_xIpduGrpInfoCfg_tst',0,15,224,7,3
	.word	12252
	.byte	12,15,244,7,9,1,13
	.byte	'txSigRAMFields',0
	.word	149
	.byte	1,2,35,0,0,11
	.byte	'Com_TxSignalFlagType',0,15,248,7,2
	.word	12341
	.byte	12,15,167,8,9,1,13
	.byte	'rxSigRAMFields',0
	.word	149
	.byte	1,2,35,0,0,11
	.byte	'Com_RxSignalFlagType',0,15,171,8,2
	.word	12402
	.byte	12,15,135,9,9,16,13
	.byte	'CurrentTxModePtr',0
	.word	11267
	.byte	4,2,35,0,13
	.byte	'Com_MinDelayTick',0
	.word	166
	.byte	2,2,35,4,13
	.byte	'Com_Tick_Tx',0
	.word	166
	.byte	2,2,35,6,13
	.byte	'Com_n_Tick_Tx',0
	.word	166
	.byte	2,2,35,8,13
	.byte	'Com_TickTxTimeout',0
	.word	166
	.byte	2,2,35,10,13
	.byte	'Com_TxFlags',0
	.word	166
	.byte	2,2,35,12,13
	.byte	'Com_n',0
	.word	149
	.byte	1,2,35,14,13
	.byte	'Com_TransMode',0
	.word	149
	.byte	1,2,35,15,0,11
	.byte	'Com_TxIpduRamData',0,15,189,9,3
	.word	12463
	.byte	23
	.word	11107
	.byte	6
	.word	12679
	.byte	6
	.word	12463
	.byte	11
	.byte	'Com_TxIpduRamPtrType',0,15,198,9,62
	.word	12689
	.byte	12,15,218,9,9,6,13
	.byte	'RxIPduLength',0
	.word	166
	.byte	2,2,35,0,13
	.byte	'RxTicks_u16',0
	.word	166
	.byte	2,2,35,2,13
	.byte	'RxFlags',0
	.word	149
	.byte	1,2,35,4,0,11
	.byte	'Com_RxIpduRamData',0,15,245,9,2
	.word	12724
	.byte	6
	.word	166
	.byte	12,15,128,10,9,8,13
	.byte	'RxGwQueuePtr',0
	.word	12818
	.byte	4,2,35,0,13
	.byte	'Com_RxGwQueueWrite_ux',0
	.word	149
	.byte	1,2,35,4,13
	.byte	'Com_RxGwQueueRead_ux',0
	.word	149
	.byte	1,2,35,5,0,11
	.byte	'Com_RxGwQueueRAMType',0,15,133,10,2
	.word	12823
	.byte	12,15,138,10,9,4,13
	.byte	'indexGwMapSigDestIdArray',0
	.word	166
	.byte	2,2,35,0,13
	.byte	'destCount',0
	.word	149
	.byte	1,2,35,2,0,11
	.byte	'Com_Prv_xGwMapSigCfg_tst',0,15,142,10,2
	.word	12943
	.byte	12,15,147,10,9,2,13
	.byte	'GwMap_DestId',0
	.word	166
	.byte	2,2,35,0,0,11
	.byte	'Com_Prv_xGwMapSigIdCfg_tst',0,15,150,10,2
	.word	13037
	.byte	12,15,183,10,9,4,13
	.byte	'StartIPduId',0
	.word	149
	.byte	1,2,35,0,13
	.byte	'NumOfIpdus',0
	.word	149
	.byte	1,2,35,1,13
	.byte	'TimeBaseInMs',0
	.word	149
	.byte	1,2,35,2,0,11
	.byte	'Com_MainFunctionCfgType',0,15,188,10,3
	.word	13102
	.byte	12,15,194,10,9,12,13
	.byte	'Com_SigType_pu8',0
	.word	681
	.byte	4,2,35,0,13
	.byte	'Com_SigType_pu16',0
	.word	509
	.byte	4,2,35,4,13
	.byte	'Com_SigType_pu32',0
	.word	595
	.byte	4,2,35,8,0,11
	.byte	'Com_Prv_xRxRamBuf_tst',0,15,253,10,3
	.word	13205
	.byte	11
	.byte	'rba_BswSrv_uint64',0,16,66,28
	.word	1069
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,46,1,3,8,32,13,58,15,59,15
	.byte	57,15,73,19,54,15,39,12,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,15,0,73,19,0,0,7,46,1,3
	.byte	8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,8,46,1,49,19,0,0,9,5,0,49,19,0,0,10,21,0,54,15,0,0,11,22,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,12,19,1,58,15,59,15,57,15,11,15,0,0,13,13,0,3,8,73,19,11,15,56,9,0,0,14
	.byte	4,1,58,15,59,15,57,15,11,15,0,0,15,40,0,3,8,28,13,0,0,16,1,1,11,15,73,19,0,0,17,33,0,47,15,0,0,18,21,0
	.byte	54,15,39,12,0,0,19,19,1,3,8,58,15,59,15,57,15,11,15,0,0,20,59,0,3,8,0,0,21,21,1,54,15,39,12,0,0,22,5,0
	.byte	73,19,0,0,23,38,0,73,19,0,0,24,23,1,58,15,59,15,57,15,11,15,0,0,25,4,1,3,8,58,15,59,15,57,15,11,15,0,0
	.byte	26,21,0,73,19,54,15,39,12,0,0,27,53,0,73,19,0,0,28,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L8-.L7
.L7:
	.half	3
	.word	.L10-.L9
.L9:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Bfx\\api\\Bfx_Bit_Inl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_ReceiveShadowSignal.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Com\\Com_Cfg_Internal.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Can_GeneralTypes.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\RTOS_T\\Gen\\inc\\Os.h',0,0,0,0
	.byte	'.\\Targets\\TC275\\MCAL\\MCAL_Modules\\Can_17_MCanP\\inc\\Can_17_MCanP.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Type.h',0,0,0,0
	.byte	'.\\RTE\\gen\\Rte_Intl.h',0,0,0,0
	.byte	'BSW\\src\\BSW\\Gen\\Com\\src\\Com_Prv_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L10:
.L8:

; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     1  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     2  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     3  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     4  /* Preprocessor includes                                                                          */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     5  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     6  #include "Com_Prv.h"
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     7  #include "Com_Prv_Inl.h"
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     8  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	     9  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    10  /* Global functions (declared in header files )                                                   */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    11  /**************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    12  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    13  #ifdef COM_RX_SIGNALGROUP
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    14  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    15  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_CopyData_UnsignedType( VAR(Com_SignalIdType, AUTOMATIC)      IntSignalId,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    16                                                                   P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    17                                                                   VAR(Com_MainFuncType,AUTOMATIC)       RxMainFuncId );
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    18  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    19  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_CopyData_SignedType(   VAR(Com_SignalIdType, AUTOMATIC)      IntSignalId,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    20                                                                   P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    21                                                                   VAR(Com_MainFuncType,AUTOMATIC)       RxMainFuncId );
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    22  #endif /* #ifdef COM_RX_SIGNALGROUP */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    23  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    24  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    25   Function name    : Com_ReceiveShadowSignal
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    26   Syntax           : void Com_ReceiveShadowSignal(Com_SignalIdType  SignalId, void*  SignalDataPtr)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    27   Description      : Service for receiving the shadow Signal
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    28   Parameter        : SignalId      -> Id of the signal
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    29                    : SignalDataPtr -> Pointer to the the signal data
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    30   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    31   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    32  #ifdef COM_RX_SIGNALGROUP
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    33  #define COM_START_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    34  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    35  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    36  FUNC(void, COM_CODE) Com_ReceiveShadowSignal( VAR(Com_SignalIdType, AUTOMATIC)      SignalId,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    37                                                P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    38  {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    39      /* Local Variables */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    40      Com_RxGrpSigConstPtrType                    RxGrpSigConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    41      VAR(uint8, AUTOMATIC)                       SigType;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    42      VAR(Com_MainFuncType,AUTOMATIC)             rxMainFuncId;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    43  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    44  #if(COM_CONFIGURATION_USE_DET == STD_ON)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    45      /* Call DET Function to check for the DET Errors COM_E_UNINIT, COM_E_PARAM and COM_E_PARAM_POINTER */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    46      if(Com_Prv_DETCheck_Param_Ptr((SignalId >= COM_GET_NUM_RX_GRPSIGNALS), (SignalDataPtr == NULL_PTR),
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    47                                     COMServiceId_ReceiveShadowSignal))
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    48  #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    49      {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    50          SignalId            = COM_GET_RXGRPSIGNAL_ID(SignalId);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    51  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    52          RxGrpSigConstPtr    = COM_GET_RXGRPSIG_CONSTDATA(SignalId);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    53  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    54          SigType             = Com_GetValue(RXGRPSIG,_TYPE,RxGrpSigConstPtr->rxGrpSigFields);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    55  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    56          /* Fetch the Rx-MainFunction internal Id */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    57          rxMainFuncId = (COM_GET_RX_IPDU_CONSTDATA((COM_GET_RXSIGGRP_CONSTDATA(RxGrpSigConstPtr->SigGrpRef))->IpduRef))->MainFunctionRef;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    58  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    59          /* The last known value has to be given back even if IPDU Group is stopped
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    60           * So No need of checking Ipdu Group Status */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    61          if((SigType % COM_TWO) == COM_ZERO)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    62          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    63              /* Copy Data of Unsigned Signal Types */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    64              Com_Prv_CopyData_UnsignedType(SignalId, SignalDataPtr, rxMainFuncId);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    65          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    66          else
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    67          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    68              /* Copy Data of Signed Signal Types */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    69              Com_Prv_CopyData_SignedType(SignalId, SignalDataPtr, rxMainFuncId);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    70          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    71      }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    72  }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    73  #define COM_STOP_SEC_CODE
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    74  #include "Com_MemMap.h"
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    75  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    76  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    77  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    78   Function name    : Com_Prv_CopyData_UnsignedType
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    79   Syntax           : void Com_Prv_CopyData_UnsignedType( VAR(Com_SignalIdType, AUTOMATIC)      IntSignalId,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    80                                                          P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    81                                                          VAR(Com_MainFuncType,AUTOMATIC)       RxMainFuncId )
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    82   Description      : Service to copy the data for UnSigned Signal type
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    83   Parameter        : SignalId      -> Id of the signal
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    84                      SignalDataPtr -> Pointer to the the signal data
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    85                      RxMainFuncId  -> MainFunction Id to access GroupSignal buffer
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    86   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    87   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    88  LOCAL_INLINE FUNC(void, COM_CODE) Com_Prv_CopyData_UnsignedType( VAR(Com_SignalIdType, AUTOMATIC)      IntSignalId,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    89                                                                   P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    90                                                                   VAR(Com_MainFuncType,AUTOMATIC)       RxMainFuncId )
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    91  {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    92      /* Local Variables */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    93      Com_RxGrpSigConstPtrType                    RxGrpSigConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    94      VAR(Com_RxGrpSigBuffIndexType, AUTOMATIC)   GrpSigBuff_Index;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    95      VAR(uint8, AUTOMATIC)                       SigType;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    96      VAR(Com_SigMaxType, AUTOMATIC)              RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    97  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    98      RxGrpSigConstPtr = COM_GET_RXGRPSIG_CONSTDATA(IntSignalId);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	    99  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   100      SigType          = Com_GetValue(RXGRPSIG,_TYPE,RxGrpSigConstPtr->rxGrpSigFields);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   101      GrpSigBuff_Index = RxGrpSigConstPtr->RxGrpSigBuff_Index;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   102  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   103      /* Copy GroupSignal data from shadow buffer into SignalDataPtr */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   104      switch( SigType )
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   105      {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   106  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   107          case COM_UINT8:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   108          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   109              RxNewVal_GrpSig = (Com_SigMaxType)COM_GET_RXGRPSIGTYPEUINT8_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   110              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification, to support
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   111               * different groupsignal types. On call to this api, application has to pass a valid datatype pointer address.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   112               * Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   113               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   114              *(uint8*)SignalDataPtr  =  (uint8)RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   115          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   116          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   117          case COM_UINT16:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   118          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   119              #if (CPU_TYPE == CPU_TYPE_8)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   120              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   121              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   122              RxNewVal_GrpSig = (Com_SigMaxType)COM_GET_RXGRPSIGTYPEUINT16_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   123              #if (CPU_TYPE == CPU_TYPE_8)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   124              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   125              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   126              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification, to support
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   127               * different groupsignal types. On call to this api, application has to pass a valid datatype pointer address.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   128               * Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   129               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   130              *(uint16*)SignalDataPtr =  (uint16)RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   131          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   132          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   133          case COM_UINT32:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   134          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   135              #if (CPU_TYPE != CPU_TYPE_32)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   136              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   137              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   138              RxNewVal_GrpSig = (Com_SigMaxType)COM_GET_RXGRPSIGTYPEUINT32_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   139              #if (CPU_TYPE != CPU_TYPE_32)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   140              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   141              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   142              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification, to support
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   143               * different groupsignal types. On call to this api, application has to pass a valid datatype pointer address.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   144               * Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   145               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   146              *(uint32*)SignalDataPtr =  (uint32)RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   147          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   148          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   149  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   150  #ifdef COM_RXGRPSIG_INT64
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   151          case COM_UINT64:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   152          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   153              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   154              RxNewVal_GrpSig = COM_GET_RXGRPSIGTYPEUINT64_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   155              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   156              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   157               * to support different groupsignal types. On call to this api, application has to pass a valid datatype
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   158               * pointer address. Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   159               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   160              *(uint64*)SignalDataPtr =  (uint64)RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   161          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   162          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   163  #endif /* #ifdef COM_RXGRPSIG_INT64 */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   164  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   165          case COM_BOOLEAN:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   166          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   167              RxNewVal_GrpSig = (Com_SigMaxType)COM_GET_RXGRPSIGTYPEUINT8_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   168              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   169               * to support different groupsignal types. On call to this api, application has to pass a valid datatype
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   170               * pointer address. Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   171               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   172              *(boolean*)SignalDataPtr =  (boolean)(RxNewVal_GrpSig != 0u);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   173          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   174          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   175  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   176  /* FC_VariationPoint_START */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   177  #ifdef COM_GRPSIGFLOAT32SUPP
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   178          case COM_FLOAT32:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   179          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   180              #if (CPU_TYPE != CPU_TYPE_32)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   181              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   182              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   183              RxNewVal_GrpSig = (Com_SigMaxType)COM_GET_RXGRPSIGTYPEUINT32_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   184              #if (CPU_TYPE != CPU_TYPE_32)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   185              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   186              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   187              /* Convert the 32 bit stream into float value */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   188              /* MR12 DIR 1.1 VIOLATION: Explicit cast is provided in line with rba_BswSrv_MemCopy() definition.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   189               * But the void pointer is always deferenced to a type, based on the pointers alignment.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   190               * Hence the alignment warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   191               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   192             (void)rba_BswSrv_MemCopy(SignalDataPtr,(const void *)&RxNewVal_GrpSig,4);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   193          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   194          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   195  #endif /* COM_GRPSIGFLOAT32SUPP */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   196  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   197  #ifdef COM_RXGRPSIG_FLOAT64SUPP
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   198          case COM_FLOAT64:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   199          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   200              VAR(float64, AUTOMATIC) RxNewVal_GrpSig_f64;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   201              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   202              RxNewVal_GrpSig_f64 =  (float64)COM_GET_RXGRPSIGTYPEFLOAT64_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   203              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   204              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   205               * to support different groupsignal types. On call to this api, application has to pass a valid datatype
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   206               * pointer address. Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   207               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   208              *(float64*)SignalDataPtr =  (float64)RxNewVal_GrpSig_f64;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   209          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   210          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   211  #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   212  /* FC_VariationPoint_END */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   213         case COM_UINT8_N:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   214          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   215              /* UINT8[n] Signal */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   216              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   217  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   218              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   219               * to support different groupsignal types. On call to this api, application has to pass a valid datatype
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   220               * pointer address. Hence this warning can safely be ignored. */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   221              Com_ByteCopy( (uint8*)SignalDataPtr, &(COM_GET_RXGRPSIGTYPEUINT8_BUFF(RxMainFuncId,GrpSigBuff_Index)),
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   222                            (uint32)RxGrpSigConstPtr->BitSize);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   223  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   224              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   225          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   226          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   227          default:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   228              /**
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   229               * Default case is mandatory in switch syntax. Moreover only AUTOSAR Com defined signal types are allowed
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   230               * to be configured, hence default case is intentionally left empty.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   231               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   232          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   233      }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   234  }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   235  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   236  /***************************************************************************************************
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   237   Function name    : Com_Prv_CopyData_SignedType
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   238   Syntax           : void Com_Prv_CopyData_SignedType( VAR(Com_SignalIdType, AUTOMATIC)      IntSignalId,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   239                                                        P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   240                                                        VAR(Com_MainFuncType,AUTOMATIC)       RxMainFuncId )
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   241   Description      : Service to copy the data for Signed Signal type
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   242   Parameter        : SignalId      -> Id of the signal
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   243                      SignalDataPtr -> Pointer to the the signal data
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   244                      RxMainFuncId  -> MainFunction Id to access GroupSignal buffer
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   245   Return value     : None
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   246   ***************************************************************************************************/
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   247  LOCAL_INLINE FUNC(void, COM_CODE)  Com_Prv_CopyData_SignedType( VAR(Com_SignalIdType, AUTOMATIC)      IntSignalId,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   248                                                                  P2VAR(void, AUTOMATIC, COM_APPL_DATA) SignalDataPtr,
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   249                                                                  VAR(Com_MainFuncType,AUTOMATIC)       RxMainFuncId )
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   250  {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   251      /* Local Variables */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   252      Com_RxGrpSigConstPtrType                    RxGrpSigConstPtr;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   253      VAR(Com_RxGrpSigBuffIndexType, AUTOMATIC)   GrpSigBuff_Index;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   254      VAR(uint8, AUTOMATIC)                       SigType;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   255      VAR(Com_SigMaxType, AUTOMATIC)              RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   256  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   257      RxGrpSigConstPtr = COM_GET_RXGRPSIG_CONSTDATA(IntSignalId);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   258  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   259      SigType          = Com_GetValue(RXGRPSIG,_TYPE,RxGrpSigConstPtr->rxGrpSigFields);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   260      GrpSigBuff_Index = RxGrpSigConstPtr->RxGrpSigBuff_Index;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   261  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   262      /* Copy GroupSignal data from shadow buffer into SignalDataPtr */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   263      switch( SigType )
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   264      {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   265          case COM_SINT8:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   266          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   267              RxNewVal_GrpSig = (Com_SigMaxType)COM_GET_RXGRPSIGTYPEUINT8_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   268              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification, to support
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   269               * different groupsignal types. On call to this api, application has to pass a valid datatype pointer address.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   270               * Hence this warning can safely be ignored. */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   271              *(sint8*)SignalDataPtr  =  (sint8)RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   272          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   273          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   274          case COM_SINT16:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   275          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   276              #if (CPU_TYPE == CPU_TYPE_8)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   277              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   278              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   279              RxNewVal_GrpSig = (Com_SigMaxType)COM_GET_RXGRPSIGTYPEUINT16_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   280              #if (CPU_TYPE == CPU_TYPE_8)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   281              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   282              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   283              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification, to support
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   284               * different groupsignal types. On call to this api, application has to pass a valid datatype pointer address.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   285               * Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   286               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   287              *(sint16*)SignalDataPtr =  (sint16)RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   288          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   289          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   290          case COM_SINT32:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   291          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   292              #if (CPU_TYPE != CPU_TYPE_32)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   293              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   294              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   295              RxNewVal_GrpSig = (Com_SigMaxType)COM_GET_RXGRPSIGTYPEUINT32_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   296              #if (CPU_TYPE != CPU_TYPE_32)
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   297              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   298              #endif
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   299              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification, to support
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   300               * different groupsignal types. On call to this api, application has to pass a valid datatype pointer address.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   301               * Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   302               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   303              *(sint32*)SignalDataPtr =  (sint32)RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   304          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   305          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   306  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   307  #ifdef COM_RXGRPSIG_INT64
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   308          case COM_SINT64:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   309          {
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   310              SchM_Enter_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   311              RxNewVal_GrpSig = COM_GET_RXGRPSIGTYPEUINT64_BUFF(RxMainFuncId,GrpSigBuff_Index);
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   312              SchM_Exit_Com_RxGrpSigBuff();
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   313              /* MR12 RULE 11.5 VIOLATION: SignalDataPtr is defined as void pointer in the AUTOSAR specification, to support
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   314               * different groupsignal types. On call to this api, application has to pass a valid datatype pointer address.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   315               * Hence this warning can safely be ignored.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   316               */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   317              *(sint64*)SignalDataPtr =  (sint64)RxNewVal_GrpSig;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   318          }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   319          break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   320  #endif /* #ifdef COM_RXGRPSIG_INT64 */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   321  
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   322          default:
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   323         /**
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   324           * Default case is mandatory in switch syntax. Moreover only AUTOSAR Com defined signal types are allowed
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   325           * to be configured, hence default case is intentionally left empty.
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   326           */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   327         break;
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   328      }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   329  }
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   330  #endif /* #ifdef COM_RX_SIGNALGROUP */
; BSW\src\BSW\Gen\Com\src\Com_ReceiveShadowSignal.c	   331  

	; Module end
