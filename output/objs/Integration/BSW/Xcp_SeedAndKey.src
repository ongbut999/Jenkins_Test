	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc18504a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\Integration\\BSW\\Xcp_SeedAndKey.src Integration\\BSW\\Src\\Xcp_SeedAndKey.c"
	.compiler_name		"ctc"
	;source	'Integration\\BSW\\Src\\Xcp_SeedAndKey.c'

	
$TC16X
	
	.sdecl	'.text.Xcp_SeedAndKey.XcpAppl_GetSeed',code,cluster('XcpAppl_GetSeed')
	.sect	'.text.Xcp_SeedAndKey.XcpAppl_GetSeed'
	.align	2
	
	.global	XcpAppl_GetSeed

; Integration\BSW\Src\Xcp_SeedAndKey.c	     1  /*
; Integration\BSW\Src\Xcp_SeedAndKey.c	     2   * This is a template file. It defines integration functions necessary to complete RTA-BSW.
; Integration\BSW\Src\Xcp_SeedAndKey.c	     3   * The integrator must complete the templates before deploying software containing functions defined in this file.
; Integration\BSW\Src\Xcp_SeedAndKey.c	     4   * Once templates have been completed, the integrator should delete the #error line.
; Integration\BSW\Src\Xcp_SeedAndKey.c	     5   * Note: The integrator is responsible for updates made to this file.
; Integration\BSW\Src\Xcp_SeedAndKey.c	     6   *
; Integration\BSW\Src\Xcp_SeedAndKey.c	     7   * To remove the following error define the macro NOT_READY_FOR_TESTING_OR_DEPLOYMENT with a compiler option (e.g. -D NOT_READY_FOR_TESTING_OR_DEPLOYMENT)
; Integration\BSW\Src\Xcp_SeedAndKey.c	     8   * The removal of the error only allows the user to proceed with the building phase
; Integration\BSW\Src\Xcp_SeedAndKey.c	     9   */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    10  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    11  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    12  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    13  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    14  /***************************************************************************************************
; Integration\BSW\Src\Xcp_SeedAndKey.c	    15  * Includes
; Integration\BSW\Src\Xcp_SeedAndKey.c	    16  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_SeedAndKey.c	    17  #include "Xcp_Cbk.h"
; Integration\BSW\Src\Xcp_SeedAndKey.c	    18  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    19  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    20  /***************************************************************************************************
; Integration\BSW\Src\Xcp_SeedAndKey.c	    21  * Variables
; Integration\BSW\Src\Xcp_SeedAndKey.c	    22  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_SeedAndKey.c	    23  #define XCP_START_SEC_VAR_CLEARED_UNSPECIFIED
; Integration\BSW\Src\Xcp_SeedAndKey.c	    24  #include "Xcp_MemMap.h"
; Integration\BSW\Src\Xcp_SeedAndKey.c	    25  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    26  #if ((XCP_CMD_GET_SEED_AVAILABLE == STD_ON) || (XCP_CMD_UNLOCK_AVAILABLE == STD_ON))
; Integration\BSW\Src\Xcp_SeedAndKey.c	    27  /*-------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_SeedAndKey.c	    28  /* This part is project specific and shall be totally reworked */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    29  /*-------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_SeedAndKey.c	    30  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    31  /* Application seed length - can be adjusted up to 255 */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    32  #define XCP_APPL_SEED_LENGTH 4u
; Integration\BSW\Src\Xcp_SeedAndKey.c	    33  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    34  /* Application seed length - can be adjusted up to 255 */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    35  #define XCP_APPL_KEY_LENGTH 4u
; Integration\BSW\Src\Xcp_SeedAndKey.c	    36  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    37  /* Structure for holding Seed and Resource type */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    38  typedef struct
; Integration\BSW\Src\Xcp_SeedAndKey.c	    39  {
; Integration\BSW\Src\Xcp_SeedAndKey.c	    40    uint8 Seed[XCP_APPL_SEED_LENGTH];
; Integration\BSW\Src\Xcp_SeedAndKey.c	    41    uint8 ResourceType;
; Integration\BSW\Src\Xcp_SeedAndKey.c	    42    uint8 Key[XCP_APPL_KEY_LENGTH];
; Integration\BSW\Src\Xcp_SeedAndKey.c	    43    uint8 KeyLength;
; Integration\BSW\Src\Xcp_SeedAndKey.c	    44  }XcpAppl_SeedKeyData_t;
; Integration\BSW\Src\Xcp_SeedAndKey.c	    45  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    46  /* Table with internal data for SeedAndKey for every existing protocol layer */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    47  static XcpAppl_SeedKeyData_t XcpAppl_SeedKeyData[XCP_PL_IDS];
; Integration\BSW\Src\Xcp_SeedAndKey.c	    48  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    49  #endif
; Integration\BSW\Src\Xcp_SeedAndKey.c	    50  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    51  #define XCP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; Integration\BSW\Src\Xcp_SeedAndKey.c	    52  #include "Xcp_MemMap.h"
; Integration\BSW\Src\Xcp_SeedAndKey.c	    53  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    54  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    55  /***************************************************************************************************
; Integration\BSW\Src\Xcp_SeedAndKey.c	    56  * Functions
; Integration\BSW\Src\Xcp_SeedAndKey.c	    57  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_SeedAndKey.c	    58  /* ------------------------------------------------------------------------ */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    59  /* Begin section for code */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    60  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    61  #define XCP_START_SEC_CALLOUT_CODE
; Integration\BSW\Src\Xcp_SeedAndKey.c	    62  #include "Xcp_MemMap.h"
; Integration\BSW\Src\Xcp_SeedAndKey.c	    63  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    64  #if (XCP_CMD_GET_SEED_AVAILABLE == STD_ON)
; Integration\BSW\Src\Xcp_SeedAndKey.c	    65  /**
; Integration\BSW\Src\Xcp_SeedAndKey.c	    66  ****************************************************************************************************
; Integration\BSW\Src\Xcp_SeedAndKey.c	    67  Template of function which returns seed for unlock command
; Integration\BSW\Src\Xcp_SeedAndKey.c	    68  \param[out] SeedAdrPtr        Address of pointer to the Seed
; Integration\BSW\Src\Xcp_SeedAndKey.c	    69  \param[in]  ResourceType      Type of the resource to be unlocked
; Integration\BSW\Src\Xcp_SeedAndKey.c	    70  \param[in]  ProtocolLayerId   Id of protocol layer which is requesting SeedAndKey procedure
; Integration\BSW\Src\Xcp_SeedAndKey.c	    71  \return     Length of the Seed
; Integration\BSW\Src\Xcp_SeedAndKey.c	    72  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_SeedAndKey.c	    73  uint8 XcpAppl_GetSeed(uint8** SeedAdrPtr, uint8 ResourceType, uint8 ProtocolLayerId)
; Function XcpAppl_GetSeed
.L24:
XcpAppl_GetSeed:	.type	func

; Integration\BSW\Src\Xcp_SeedAndKey.c	    74  {
; Integration\BSW\Src\Xcp_SeedAndKey.c	    75    /*-----------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_SeedAndKey.c	    76    /* This function is project specific and shall be totally reworked */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    77    /*-----------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_SeedAndKey.c	    78  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    79    /* Local variables */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    80    uint8 i;
; Integration\BSW\Src\Xcp_SeedAndKey.c	    81  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    82    /* Check if not null pointer */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    83    if (SeedAdrPtr != NULL_PTR)
	jz.a	a4,.L2
.L87:

; Integration\BSW\Src\Xcp_SeedAndKey.c	    84    {
; Integration\BSW\Src\Xcp_SeedAndKey.c	    85      /* Store resource Resource Type */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    86      XcpAppl_SeedKeyData[ProtocolLayerId].ResourceType = ResourceType;
	mul	d15,d5,#10
.L88:
	movh.a	a15,#@his(XcpAppl_SeedKeyData)
	lea	a15,[a15]@los(XcpAppl_SeedKeyData)
.L89:
	addsc.a	a15,a15,d15,#0
.L90:
	st.b	[a15]4,d4
.L91:

; Integration\BSW\Src\Xcp_SeedAndKey.c	    87  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    88      /* Set address of the pointer to the seed as return parameter */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    89      *SeedAdrPtr = XcpAppl_SeedKeyData[ProtocolLayerId].Seed;
	st.a	[a4],a15
.L92:

; Integration\BSW\Src\Xcp_SeedAndKey.c	    90  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    91      /* Fill the Seed */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    92      for (i = 0 ; i < XCP_APPL_SEED_LENGTH; i++)
	mov	d15,#0
.L66:
	j	.L3
.L4:

; Integration\BSW\Src\Xcp_SeedAndKey.c	    93      {
; Integration\BSW\Src\Xcp_SeedAndKey.c	    94        /* Just an example seed */
; Integration\BSW\Src\Xcp_SeedAndKey.c	    95        XcpAppl_SeedKeyData[ProtocolLayerId].Seed[i] = i;
	addsc.a	a2,a15,d15,#0
.L93:
	st.b	[a2],d15
.L94:
	add	d15,#1
.L3:
	jlt.u	d15,#4,.L4
.L2:
	mul	d15,d5,#10
.L95:
	movh.a	a15,#@his(XcpAppl_SeedKeyData)
	lea	a15,[a15]@los(XcpAppl_SeedKeyData)
.L96:
	addsc.a	a15,a15,d15,#0
.L97:

; Integration\BSW\Src\Xcp_SeedAndKey.c	    96      }
; Integration\BSW\Src\Xcp_SeedAndKey.c	    97    }
; Integration\BSW\Src\Xcp_SeedAndKey.c	    98  
; Integration\BSW\Src\Xcp_SeedAndKey.c	    99    /* Reset received key length */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   100    XcpAppl_SeedKeyData[ProtocolLayerId].KeyLength = 0;
	mov	d15,#0
.L98:
	st.b	[a15]9,d15
.L99:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   101  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   102    /* Return seed length */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   103    return(XCP_APPL_SEED_LENGTH);
	mov	d2,#4
.L100:
	j	.L5

; Integration\BSW\Src\Xcp_SeedAndKey.c	   104  }
.L5:
	ret
.L44:
	
__XcpAppl_GetSeed_function_end:
	.size	XcpAppl_GetSeed,__XcpAppl_GetSeed_function_end-XcpAppl_GetSeed
.L35:
	; End of function
	
	.sdecl	'.text.Xcp_SeedAndKey.XcpAppl_Unlock',code,cluster('XcpAppl_Unlock')
	.sect	'.text.Xcp_SeedAndKey.XcpAppl_Unlock'
	.align	2
	
	.global	XcpAppl_Unlock

; Integration\BSW\Src\Xcp_SeedAndKey.c	   105  #endif
; Integration\BSW\Src\Xcp_SeedAndKey.c	   106  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   107  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   108  #if (XCP_CMD_UNLOCK_AVAILABLE == STD_ON)
; Integration\BSW\Src\Xcp_SeedAndKey.c	   109  /**
; Integration\BSW\Src\Xcp_SeedAndKey.c	   110  ****************************************************************************************************
; Integration\BSW\Src\Xcp_SeedAndKey.c	   111  Template of function which checks received key if is matching to calculated one
; Integration\BSW\Src\Xcp_SeedAndKey.c	   112  \param[in]  KeyPtr                Pointer to unlock Key
; Integration\BSW\Src\Xcp_SeedAndKey.c	   113  \param[in]  KeyPartLength         Length of actually received part of the Ke
; Integration\BSW\Src\Xcp_SeedAndKey.c	   114  \param[in]  RemainingKeyLength    Remaining length of the unlock Key
; Integration\BSW\Src\Xcp_SeedAndKey.c	   115  \param[out] UnlockedResource      Pointer to UnlockedResource
; Integration\BSW\Src\Xcp_SeedAndKey.c	   116  \param[in]  ProtocolLayerId       Id of protocol layer which is requesting SeedAndKey procedure
; Integration\BSW\Src\Xcp_SeedAndKey.c	   117  \retval     XCP_ERR_ACCESS_LOCKED if key is invalid
; Integration\BSW\Src\Xcp_SeedAndKey.c	   118  \retval     XCP_ERR_OUT_OF_RANGE  if key is too long
; Integration\BSW\Src\Xcp_SeedAndKey.c	   119  \retval     XCP_ERR_SEQUENCE      if key is too short
; Integration\BSW\Src\Xcp_SeedAndKey.c	   120  \retval     XCP_NO_ERROR          if the full key was not received UnlockedResource = 0 otherwise it will be:
; Integration\BSW\Src\Xcp_SeedAndKey.c	   121                                    - XCP_RESOURCE_CALPAG
; Integration\BSW\Src\Xcp_SeedAndKey.c	   122                                    - XCP_RESOURCE_DAQ
; Integration\BSW\Src\Xcp_SeedAndKey.c	   123                                    - XCP_RESOURCE_STIM
; Integration\BSW\Src\Xcp_SeedAndKey.c	   124                                    - XCP_RESOURCE_PGM
; Integration\BSW\Src\Xcp_SeedAndKey.c	   125  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_SeedAndKey.c	   126  Xcp_ErrorCode XcpAppl_Unlock(const uint8* KeyPtr, uint8 KeyPartLength, uint8 RemainingKeyLength, uint8* UnlockedResource, uint8 ProtocolLayerId)
; Function XcpAppl_Unlock
.L26:
XcpAppl_Unlock:	.type	func
	sub.a	a10,#8
.L67:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   127  {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   128    /*-----------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_SeedAndKey.c	   129    /* This function is project specific and shall be totally reworked */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   130    /*-----------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_SeedAndKey.c	   131  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   132    /* Local variables */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   133    uint8 CalculatedKey[XCP_APPL_KEY_LENGTH];
; Integration\BSW\Src\Xcp_SeedAndKey.c	   134    uint8 i;
; Integration\BSW\Src\Xcp_SeedAndKey.c	   135    uint8 ExpectedKeyLength;
; Integration\BSW\Src\Xcp_SeedAndKey.c	   136    Xcp_ErrorCode Error;
; Integration\BSW\Src\Xcp_SeedAndKey.c	   137    boolean KeyMatching;
; Integration\BSW\Src\Xcp_SeedAndKey.c	   138  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   139    /* Initial values */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   140    *UnlockedResource = 0;
	mov	d15,#0
.L105:
	st.b	[a5],d15
.L106:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   141  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   142    /* Calculate expected full key length */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   143    ExpectedKeyLength = RemainingKeyLength + XcpAppl_SeedKeyData[ProtocolLayerId].KeyLength;
	mul	d15,d6,#10
.L107:
	movh.a	a15,#@his(XcpAppl_SeedKeyData)
	lea	a15,[a15]@los(XcpAppl_SeedKeyData)
.L108:
	addsc.a	a2,a15,d15,#0
.L109:
	lea	a6,[a2]9
	ld.bu	d15,[a6]
.L110:
	add	d5,d15
.L68:
	extr.u	d15,d5,#0,#8
.L69:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   144  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   145    /* Check if expected Key length is valid */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   146    if (ExpectedKeyLength == XCP_APPL_KEY_LENGTH)
	jne	d15,#4,.L6
.L111:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   147    {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   148      /* Copy or concatenate Key to internal buffer reached */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   149      for (i = 0 ; i < KeyPartLength ; i++)
	mov	d15,#0
.L70:
	j	.L7
.L8:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   150      {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   151        XcpAppl_SeedKeyData[ProtocolLayerId].Key[XcpAppl_SeedKeyData[ProtocolLayerId].KeyLength + i] = KeyPtr[i];
	ld.bu	d0,[a6]
.L112:
	add	d0,d15
.L113:
	addsc.a	a15,a2,d0,#0
.L114:
	addsc.a	a7,a4,d15,#0
	ld.bu	d0,[a7]
.L115:
	st.b	[a15]5,d0
.L116:
	add	d15,#1
.L71:
	extr.u	d15,d15,#0,#8
.L7:
	jlt.u	d15,d4,.L8
.L117:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   152      }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   153      XcpAppl_SeedKeyData[ProtocolLayerId].KeyLength += KeyPartLength;
	ld.bu	d15,[a6]
.L72:
	add	d15,d4
	st.b	[a6],d15
.L118:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   154  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   155      /* Check if already full key received */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   156      if (XcpAppl_SeedKeyData[ProtocolLayerId].KeyLength == XCP_APPL_KEY_LENGTH)
	ld.bu	d15,[a6]
.L119:
	jne	d15,#4,.L9
.L120:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   157      {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   158        /* Generate Key from seed */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   159        for (i = 0 ; i < XCP_APPL_KEY_LENGTH ; i++)
	mov	d15,#0
.L73:
	j	.L10
.L11:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   160        {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   161          /* Simple key algorithm: Add ResourceType to every byte of seed */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   162          CalculatedKey[i] = XcpAppl_SeedKeyData[ProtocolLayerId].Seed[i] + 1;
	addsc.a	a15,a10,d15,#0
.L121:
	addsc.a	a4,a2,d15,#0
	ld.bu	d0,[a4]
.L122:
	add	d0,#1
.L123:
	st.b	[a15],d0
.L124:
	add	d15,#1
.L10:
	jlt.u	d15,#4,.L11
.L125:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   163        }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   164  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   165        /* Init flag */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   166        KeyMatching = TRUE;
	mov	d0,#1
.L75:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   167  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   168        /* Compare received and generated Key */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   169        for (i = 0 ; i < XCP_APPL_KEY_LENGTH ; i++)
	mov	d1,#0
.L74:
	j	.L12
.L13:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   170        {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   171          /* Compare Key */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   172          if (CalculatedKey[i] != XcpAppl_SeedKeyData[ProtocolLayerId].Key[i])
	addsc.a	a15,a10,d1,#0
	ld.bu	d2,[a15]
.L126:
	addsc.a	a15,a2,d1,#0
	ld.bu	d15,[a15]5
.L127:
	jeq	d15,d2,.L14
.L128:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   173          {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   174            KeyMatching = FALSE;
	mov	d0,#0
.L129:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   175  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   176            /* Stop comparing */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   177            break;
	j	.L15
.L14:
	add	d1,#1
.L12:
	jlt.u	d1,#4,.L13

; Integration\BSW\Src\Xcp_SeedAndKey.c	   178          }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   179        }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   180  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   181        /* Check if Key is matching for requested resource */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   182        if (KeyMatching == TRUE)
.L15:
	jne	d0,#1,.L16
.L130:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   183        {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   184          /* Set return value as requested ResourceType */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   185          *UnlockedResource = XcpAppl_SeedKeyData[ProtocolLayerId].ResourceType;
	ld.bu	d15,[a2]4
.L131:
	st.b	[a5],d15
.L132:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   186  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   187          /* OK */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   188          Error = XCP_NO_ERROR;
	mov	d2,#255
.L76:
	j	.L17
.L16:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   189        }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   190        else
; Integration\BSW\Src\Xcp_SeedAndKey.c	   191        {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   192          /* Invalid Key */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   193          Error = XCP_ERR_ACCESS_LOCKED;
	mov	d2,#37
.L17:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   194        }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   195  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   196        /* Reset received key length */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   197        XcpAppl_SeedKeyData[ProtocolLayerId].KeyLength = 0;
	mov	d15,#0
.L133:
	st.b	[a6],d15
.L134:
	j	.L18
.L9:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   198      }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   199      else
; Integration\BSW\Src\Xcp_SeedAndKey.c	   200      {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   201        /* Mark that function has not received full key yet */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   202        *UnlockedResource = 0;
	mov	d15,#0
.L135:
	st.b	[a5],d15
.L136:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   203        Error = XCP_NO_ERROR;
	mov	d2,#255
.L18:
	j	.L19
.L6:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   204      }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   205    }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   206    else if (ExpectedKeyLength < XCP_APPL_KEY_LENGTH)
	ge.u	d0,d15,#4
.L137:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   207    {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   208      /* Mark that function is expecting longer Key */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   209      Error = XCP_ERR_SEQUENCE;
	mov	d15,#41
.L77:
	seln	d2,d0,d15,#34
.L78:
	j	.L21
.L20:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   210    }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   211    else
; Integration\BSW\Src\Xcp_SeedAndKey.c	   212    {
; Integration\BSW\Src\Xcp_SeedAndKey.c	   213      /* Mark that key is too long and not supported */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   214      Error = XCP_ERR_OUT_OF_RANGE;
	mov	d2,#34
.L21:
.L19:

; Integration\BSW\Src\Xcp_SeedAndKey.c	   215    }
; Integration\BSW\Src\Xcp_SeedAndKey.c	   216  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   217    /* Return Error code */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   218    return (Error);
	j	.L22

; Integration\BSW\Src\Xcp_SeedAndKey.c	   219  }
.L22:
	ret
.L51:
	
__XcpAppl_Unlock_function_end:
	.size	XcpAppl_Unlock,__XcpAppl_Unlock_function_end-XcpAppl_Unlock
.L40:
	; End of function
	
	.sdecl	'.bss.Xcp_SeedAndKey.XcpAppl_SeedKeyData',data,cluster('XcpAppl_SeedKeyData')
	.sect	'.bss.Xcp_SeedAndKey.XcpAppl_SeedKeyData'
	.align	2
XcpAppl_SeedKeyData:	.type	object
	.size	XcpAppl_SeedKeyData,10
	.space	10
	.calls	'XcpAppl_GetSeed','',0
	.calls	'XcpAppl_Unlock','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L28:
	.word	3234
	.half	3
	.word	.L29
	.byte	4
.L27:
	.byte	1
	.byte	'Integration\\BSW\\Src\\Xcp_SeedAndKey.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L30
.L43:
	.byte	2
	.byte	'unsigned char',0,1,8
.L56:
	.byte	3
	.word	136
.L45:
	.byte	3
	.word	153
.L50:
	.byte	4,1,177,3,9,4,5
	.byte	'XCP_ERR_CMD_SYNCH',0,0,5
	.byte	'XCP_ERR_CMD_BUSY',0,16,5
	.byte	'XCP_ERR_DAQ_ACTIVE',0,17,5
	.byte	'XCP_ERR_PGM_ACTIVE',0,18,5
	.byte	'XCP_ERR_CMD_UNKNOWN',0,32,5
	.byte	'XCP_ERR_CMD_SYNTAX',0,33,5
	.byte	'XCP_ERR_OUT_OF_RANGE',0,34,5
	.byte	'XCP_ERR_WRITE_PROTECTED',0,35,5
	.byte	'XCP_ERR_ACCESS_DENIED',0,36,5
	.byte	'XCP_ERR_ACCESS_LOCKED',0,37,5
	.byte	'XCP_ERR_PAGE_NOT_VALID',0,38,5
	.byte	'XCP_ERR_MODE_NOT_VALID',0,39,5
	.byte	'XCP_ERR_SEGMENT_NOT_VALID',0,40,5
	.byte	'XCP_ERR_SEQUENCE',0,41,5
	.byte	'XCP_ERR_DAQ_CONFIG',0,42,5
	.byte	'XCP_ERR_MEMORY_OVERFLOW',0,48,5
	.byte	'XCP_ERR_GENERIC',0,49,5
	.byte	'XCP_ERR_VERIFY',0,50,5
	.byte	'XCP_ERR_RES_TEMP_NOT_ACCESS',0,51,5
	.byte	'XCP_ERR_SUBCMD_UNKNOWN',0,52,5
	.byte	'XCP_REPEAT_COMMAND',0,252,1,5
	.byte	'XCP_NO_ACCESS_HIDE',0,253,1,5
	.byte	'XCP_NO_RESPONSE',0,254,1,5
	.byte	'XCP_NO_ERROR',0,255,1,0,6
	.word	136
.L52:
	.byte	3
	.word	704
.L59:
	.byte	7,4
	.word	136
	.byte	8,3,0,9,1,3
	.word	723
	.byte	10
	.byte	'__codeptr',0,2,1,1
	.word	725
	.byte	10
	.byte	'uint8',0,3,81,25
	.word	136
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,3,91,25
	.word	762
	.byte	2
	.byte	'unsigned int',0,4,7,10
	.byte	'uint32',0,3,106,24
	.word	799
	.byte	10
	.byte	'boolean',0,3,127,25
	.word	136
	.byte	10
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	136
	.byte	10
	.byte	'PduLengthType',0,5,26,19
	.word	762
	.byte	4,6,113,9,4,5
	.byte	'TP_DATACONF',0,0,5
	.byte	'TP_DATARETRY',0,1,5
	.byte	'TP_CONFPENDING',0,2,0,10
	.byte	'TpDataStateType',0,6,118,3
	.word	892
	.byte	4,1,225,1,9,4,5
	.byte	'XCP_STATE_DISCONNECTED',0,0,5
	.byte	'XCP_STATE_DISCONNECTING',0,1,5
	.byte	'XCP_STATE_CONNECTED',0,2,5
	.byte	'XCP_STATE_RESUME',0,3,5
	.byte	'XCP_STATE_DISABLED',0,240,1,0,10
	.byte	'Xcp_State_t',0,1,231,1,2
	.word	968
	.byte	10
	.byte	'Xcp_AddrValue',0,1,165,3,23
	.word	799
	.byte	10
	.byte	'Xcp_PduIdType',0,1,174,3,15
	.word	136
	.byte	10
	.byte	'Xcp_ErrorCode',0,1,204,3,2
	.word	163
	.byte	4,1,223,3,9,4,5
	.byte	'XCP_DAQ_NO_OVERLOAD_INDICATION',0,0,5
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_PID',0,1,5
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_EVENT',0,2,0,10
	.byte	'Xcp_Overload_t',0,1,228,3,2
	.word	1179
	.byte	4,1,233,3,9,4,5
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE',0,1,5
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE',0,2,5
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD',0,3,5
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED',0,4,0,10
	.byte	'Xcp_IdField_t',0,1,239,3,2
	.word	1313
	.byte	4,1,242,3,9,4,5
	.byte	'XCP_ODT_OPTIMIZATION_OM_DEFAULT',0,0,5
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_16',0,1,5
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_32',0,2,5
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_64',0,3,5
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_ALIGNMENT',0,4,5
	.byte	'XCP_ODT_OPTIMIZATION_OM_MAX_ENTRY_SIZE',0,5,0,10
	.byte	'Xcp_OdtOptimizationType_t',0,1,250,3,2
	.word	1530
	.byte	4,1,253,3,9,4,5
	.byte	'XCP_CONSISTENCY_ODT',0,0,5
	.byte	'XCP_CONSISTENCY_DAQ',0,1,5
	.byte	'XCP_CONSISTENCY_EVENT',0,2,5
	.byte	'XCP_CONSISTENCY_NONE',0,3,0,10
	.byte	'Xcp_Consistency_t',0,1,131,4,2
	.word	1806
	.byte	4,1,134,4,9,4,5
	.byte	'XCP_TIMESTAMP_TYPE_NO_TIME_STAMP',0,0,5
	.byte	'XCP_TIMESTAMP_TYPE_ONE_BYTE',0,1,5
	.byte	'XCP_TIMESTAMP_TYPE_TWO_BYTE',0,2,5
	.byte	'XCP_TIMESTAMP_TYPE_FOUR_BYTE',0,4,0,10
	.byte	'Xcp_Timestamp_t',0,1,140,4,2
	.word	1931
	.byte	11,6,71,9,8,12
	.byte	'SduDataPtr',0
	.word	153
	.byte	4,2,35,0,12
	.byte	'SduLength',0
	.word	762
	.byte	2,2,35,4,0,6
	.word	2089
	.byte	3
	.word	2134
	.byte	13
	.word	136
	.byte	1,1,14
	.word	2139
	.byte	14
	.word	136
	.byte	14
	.word	136
	.byte	0,3
	.word	2144
	.byte	15,1,1,14
	.word	136
	.byte	14
	.word	136
	.byte	0,3
	.word	2172
	.byte	15,1,1,14
	.word	136
	.byte	0,3
	.word	2191
	.byte	13
	.word	136
	.byte	1,1,14
	.word	136
	.byte	0,3
	.word	2205
	.byte	3
	.word	2089
	.byte	15,1,1,14
	.word	2139
	.byte	14
	.word	2223
	.byte	14
	.word	136
	.byte	0,3
	.word	2228
	.byte	13
	.word	136
	.byte	1,1,14
	.word	136
	.byte	14
	.word	762
	.byte	14
	.word	136
	.byte	0,3
	.word	2252
	.byte	11,7,164,1,9,56,12
	.byte	'TLTransmit_pfct',0
	.word	2167
	.byte	4,2,35,0,12
	.byte	'TLInit_pfct',0
	.word	2186
	.byte	4,2,35,4,12
	.byte	'TLConnect_pfct',0
	.word	2200
	.byte	4,2,35,8,12
	.byte	'TLDisconnect_pfct',0
	.word	2218
	.byte	4,2,35,12,12
	.byte	'TLTransportLayerCmd_pfct',0
	.word	2247
	.byte	4,2,35,16,12
	.byte	'TLGetTxPduId_pfct',0
	.word	2275
	.byte	4,2,35,20,12
	.byte	'MaxCto_u8',0
	.word	136
	.byte	1,2,35,24,12
	.byte	'MaxDto_u16',0
	.word	762
	.byte	2,2,35,26,12
	.byte	'TimestampType_en',0
	.word	1931
	.byte	4,2,35,28,12
	.byte	'IdFieldType_en',0
	.word	1313
	.byte	4,2,35,32,12
	.byte	'OverloadType_en',0
	.word	1179
	.byte	4,2,35,36,12
	.byte	'OdtOptimizationType_en',0
	.word	1530
	.byte	4,2,35,40,12
	.byte	'Consistency_en',0
	.word	1806
	.byte	4,2,35,44,12
	.byte	'PdRam_u32',0
	.word	799
	.byte	4,2,35,48,12
	.byte	'EdRam_u32',0
	.word	799
	.byte	4,2,35,52,0,10
	.byte	'Xcp_PL_TL_Cfg_t',0,7,184,1,2
	.word	2280
	.byte	4,7,188,1,9,4,5
	.byte	'XCP_RAMSECTION_INVALID',0,0,5
	.byte	'XCP_RAMSECTION_PD',0,1,5
	.byte	'XCP_RAMSECTION_ED',0,2,0,10
	.byte	'Xcp_RamSectionType_t',0,7,193,1,2
	.word	2678
	.byte	11,7,195,1,9,12,12
	.byte	'DaqRamPtr_pu8',0
	.word	153
	.byte	4,2,35,0,12
	.byte	'DaqRamTotalSize_u32',0
	.word	799
	.byte	4,2,35,4,12
	.byte	'RamSectionType_en',0
	.word	2678
	.byte	4,2,35,8,0,10
	.byte	'Xcp_DaqRamSection_Cfg_t',0,7,200,1,2
	.word	2780
	.byte	11,7,230,1,9,4,12
	.byte	'EventChannelDirection_u8',0
	.word	136
	.byte	1,2,35,0,12
	.byte	'EventChannelTimeCycle_u8',0
	.word	136
	.byte	1,2,35,1,12
	.byte	'EventChannelTimeUnit_u8',0
	.word	136
	.byte	1,2,35,2,12
	.byte	'EventChannelPriority_u8',0
	.word	136
	.byte	1,2,35,3,0,10
	.byte	'Xcp_EventChannel_Cfg_t',0,7,236,1,2
	.word	2899
	.byte	2
	.byte	'unsigned long long int',0,8,7,10
	.byte	'rba_BswSrv_uint64',0,8,66,28
	.word	3072
	.byte	11,2,38,9,10,12
	.byte	'Seed',0
	.word	714
	.byte	4,2,35,0,12
	.byte	'ResourceType',0
	.word	136
	.byte	1,2,35,4,12
	.byte	'Key',0
	.word	714
	.byte	4,2,35,5,12
	.byte	'KeyLength',0
	.word	136
	.byte	1,2,35,9,0,10
	.byte	'XcpAppl_SeedKeyData_t',0,2,44,2
	.word	3124
.L65:
	.byte	7,10
	.word	3124
	.byte	8,0,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L29:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,15,0,73,19,0,0,4,4,1,58,15
	.byte	59,15,57,15,11,15,0,0,5,40,0,3,8,28,13,0,0,6,38,0,73,19,0,0,7,1,1,11,15,73,19,0,0,8,33,0,47,15,0,0,9,21
	.byte	0,54,15,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,19,1,58,15,59,15,57,15,11,15,0,0,12,13,0,3,8,73
	.byte	19,11,15,56,9,0,0,13,21,1,73,19,54,15,39,12,0,0,14,5,0,73,19,0,0,15,21,1,54,15,39,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L30:
	.word	.L80-.L79
.L79:
	.half	3
	.word	.L82-.L81
.L81:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Types.h',0,0,0,0
	.byte	'Integration\\BSW\\Src\\Xcp_SeedAndKey.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L82:
.L80:
	.sdecl	'.debug_info',debug,cluster('XcpAppl_GetSeed')
	.sect	'.debug_info'
.L31:
	.word	282
	.half	3
	.word	.L32
	.byte	4,1
	.byte	'Integration\\BSW\\Src\\Xcp_SeedAndKey.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L34,.L33
	.byte	2
	.word	.L27
	.byte	3
	.byte	'XcpAppl_GetSeed',0,1,73,7
	.word	.L43
	.byte	1,1,1
	.word	.L24,.L44,.L23
	.byte	4
	.byte	'SeedAdrPtr',0,1,73,31
	.word	.L45,.L46
	.byte	4
	.byte	'ResourceType',0,1,73,49
	.word	.L43,.L47
	.byte	4
	.byte	'ProtocolLayerId',0,1,73,69
	.word	.L43,.L48
	.byte	5
	.word	.L24,.L44
	.byte	6
	.byte	'i',0,1,80,9
	.word	.L43,.L49
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('XcpAppl_GetSeed')
	.sect	'.debug_abbrev'
.L32:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('XcpAppl_GetSeed')
	.sect	'.debug_line'
.L33:
	.word	.L84-.L83
.L83:
	.half	3
	.word	.L86-.L85
.L85:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Integration\\BSW\\Src\\Xcp_SeedAndKey.c',0,0,0,0,0
.L86:
	.byte	5,3,7,0,5,2
	.word	.L24
	.byte	3,210,0,1,5,24,7,9
	.half	.L87-.L24
	.byte	3,3,1,5,5,9
	.half	.L88-.L87
	.byte	1,5,24,9
	.half	.L89-.L88
	.byte	1,5,55,9
	.half	.L90-.L89
	.byte	1,5,17,9
	.half	.L91-.L90
	.byte	3,3,1,5,12,9
	.half	.L92-.L91
	.byte	3,3,1,5,42,9
	.half	.L66-.L92
	.byte	1,5,48,9
	.half	.L4-.L66
	.byte	3,3,1,5,52,9
	.half	.L93-.L4
	.byte	1,5,45,9
	.half	.L94-.L93
	.byte	3,125,1,5,42,9
	.half	.L3-.L94
	.byte	1,5,24,7,9
	.half	.L2-.L3
	.byte	3,122,1,5,5,9
	.half	.L95-.L2
	.byte	1,5,24,9
	.half	.L96-.L95
	.byte	1,5,52,9
	.half	.L97-.L96
	.byte	3,14,1,5,50,9
	.half	.L98-.L97
	.byte	1,5,10,9
	.half	.L99-.L98
	.byte	3,3,1,5,3,9
	.half	.L100-.L99
	.byte	1,5,1,9
	.half	.L5-.L100
	.byte	3,1,1,7,9
	.half	.L35-.L5
	.byte	0,1,1
.L84:
	.sdecl	'.debug_ranges',debug,cluster('XcpAppl_GetSeed')
	.sect	'.debug_ranges'
.L34:
	.word	-1,.L24,0,.L35-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('XcpAppl_Unlock')
	.sect	'.debug_info'
.L36:
	.word	442
	.half	3
	.word	.L37
	.byte	4,1
	.byte	'Integration\\BSW\\Src\\Xcp_SeedAndKey.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L39,.L38
	.byte	2
	.word	.L27
	.byte	3
	.byte	'XcpAppl_Unlock',0,1,126,15
	.word	.L50
	.byte	1,1,1
	.word	.L26,.L51,.L25
	.byte	4
	.byte	'KeyPtr',0,1,126,43
	.word	.L52,.L53
	.byte	4
	.byte	'KeyPartLength',0,1,126,57
	.word	.L43,.L54
	.byte	4
	.byte	'RemainingKeyLength',0,1,126,78
	.word	.L43,.L55
	.byte	4
	.byte	'UnlockedResource',0,1,126,105
	.word	.L56,.L57
	.byte	4
	.byte	'ProtocolLayerId',0,1,126,129,1
	.word	.L43,.L58
	.byte	5
	.word	.L26,.L51
	.byte	6
	.byte	'CalculatedKey',0,1,133,1,9
	.word	.L59,.L60
	.byte	6
	.byte	'i',0,1,134,1,9
	.word	.L43,.L61
	.byte	6
	.byte	'ExpectedKeyLength',0,1,135,1,9
	.word	.L43,.L62
	.byte	6
	.byte	'Error',0,1,136,1,17
	.word	.L50,.L63
	.byte	6
	.byte	'KeyMatching',0,1,137,1,11
	.word	.L43,.L64
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('XcpAppl_Unlock')
	.sect	'.debug_abbrev'
.L37:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('XcpAppl_Unlock')
	.sect	'.debug_line'
.L38:
	.word	.L102-.L101
.L101:
	.half	3
	.word	.L104-.L103
.L103:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Integration\\BSW\\Src\\Xcp_SeedAndKey.c',0,0,0,0,0
.L104:
	.byte	5,15,7,0,5,2
	.word	.L26
	.byte	3,253,0,1,5,23,9
	.half	.L67-.L26
	.byte	3,14,1,5,21,9
	.half	.L105-.L67
	.byte	1,5,63,9
	.half	.L106-.L105
	.byte	3,3,1,5,44,9
	.half	.L107-.L106
	.byte	1,5,63,9
	.half	.L108-.L107
	.byte	1,5,80,9
	.half	.L109-.L108
	.byte	1,5,42,9
	.half	.L110-.L109
	.byte	1,5,3,9
	.half	.L69-.L110
	.byte	3,3,1,5,12,7,9
	.half	.L111-.L69
	.byte	3,3,1,5,36,9
	.half	.L70-.L111
	.byte	1,5,84,9
	.half	.L8-.L70
	.byte	3,2,1,5,95,9
	.half	.L112-.L8
	.byte	1,5,47,9
	.half	.L113-.L112
	.byte	1,5,108,9
	.half	.L114-.L113
	.byte	1,5,100,9
	.half	.L115-.L114
	.byte	1,5,39,9
	.half	.L116-.L115
	.byte	3,126,1,5,36,9
	.half	.L7-.L116
	.byte	1,5,41,7,9
	.half	.L117-.L7
	.byte	3,4,1,5,52,9
	.half	.L72-.L117
	.byte	1,5,45,9
	.half	.L118-.L72
	.byte	3,3,1,5,5,9
	.half	.L119-.L118
	.byte	1,5,14,7,9
	.half	.L120-.L119
	.byte	3,3,1,5,44,9
	.half	.L73-.L120
	.byte	1,5,22,9
	.half	.L11-.L73
	.byte	3,3,1,5,69,9
	.half	.L121-.L11
	.byte	1,5,73,9
	.half	.L122-.L121
	.byte	1,5,26,9
	.half	.L123-.L122
	.byte	1,5,47,9
	.half	.L124-.L123
	.byte	3,125,1,5,44,9
	.half	.L10-.L124
	.byte	1,5,19,7,9
	.half	.L125-.L10
	.byte	3,7,1,5,14,9
	.half	.L75-.L125
	.byte	3,3,1,5,44,9
	.half	.L74-.L75
	.byte	1,5,26,9
	.half	.L13-.L74
	.byte	3,3,1,5,73,9
	.half	.L126-.L13
	.byte	1,5,9,9
	.half	.L127-.L126
	.byte	1,5,23,7,9
	.half	.L128-.L127
	.byte	3,2,1,5,11,9
	.half	.L129-.L128
	.byte	3,3,1,5,47,9
	.half	.L14-.L129
	.byte	3,120,1,5,44,9
	.half	.L12-.L14
	.byte	1,5,7,7,9
	.half	.L15-.L12
	.byte	3,13,1,5,65,7,9
	.half	.L130-.L15
	.byte	3,3,1,5,27,9
	.half	.L131-.L130
	.byte	1,5,15,9
	.half	.L132-.L131
	.byte	3,3,1,5,78,9
	.half	.L76-.L132
	.byte	3,125,1,5,15,9
	.half	.L16-.L76
	.byte	3,8,1,5,56,9
	.half	.L17-.L16
	.byte	3,4,1,5,54,9
	.half	.L133-.L17
	.byte	1,5,57,9
	.half	.L134-.L133
	.byte	1,5,27,9
	.half	.L9-.L134
	.byte	3,5,1,5,25,9
	.half	.L135-.L9
	.byte	1,5,13,9
	.half	.L136-.L135
	.byte	3,1,1,5,5,9
	.half	.L18-.L136
	.byte	3,124,1,5,8,9
	.half	.L6-.L18
	.byte	3,7,1,5,11,9
	.half	.L137-.L6
	.byte	3,3,1,5,29,9
	.half	.L78-.L137
	.byte	1,5,11,9
	.half	.L20-.L78
	.byte	3,5,1,5,3,9
	.half	.L19-.L20
	.byte	3,4,1,5,1,9
	.half	.L22-.L19
	.byte	3,1,1,7,9
	.half	.L40-.L22
	.byte	0,1,1
.L102:
	.sdecl	'.debug_ranges',debug,cluster('XcpAppl_Unlock')
	.sect	'.debug_ranges'
.L39:
	.word	-1,.L26,0,.L40-.L26,0,0
	.sdecl	'.debug_info',debug,cluster('XcpAppl_SeedKeyData')
	.sect	'.debug_info'
.L41:
	.word	168
	.half	3
	.word	.L42
	.byte	4,1
	.byte	'Integration\\BSW\\Src\\Xcp_SeedAndKey.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L27
	.byte	3
	.byte	'XcpAppl_SeedKeyData',0,2,47,30
	.word	.L65
	.byte	5,3
	.word	XcpAppl_SeedKeyData
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('XcpAppl_SeedKeyData')
	.sect	'.debug_abbrev'
.L42:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('XcpAppl_GetSeed')
	.sect	'.debug_loc'
.L48:
	.word	-1,.L24,0,.L44-.L24
	.half	1
	.byte	85
	.word	0,0
.L47:
	.word	-1,.L24,0,.L44-.L24
	.half	1
	.byte	84
	.word	0,0
.L46:
	.word	-1,.L24,0,.L44-.L24
	.half	1
	.byte	100
	.word	0,0
.L23:
	.word	-1,.L24,0,.L44-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L49:
	.word	-1,.L24,.L66-.L24,.L2-.L24
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('XcpAppl_Unlock')
	.sect	'.debug_loc'
.L60:
	.word	-1,.L26,0,.L20-.L26
	.half	2
	.byte	145,120
	.word	.L19-.L26,.L51-.L26
	.half	2
	.byte	145,120
	.word	0,0
.L63:
	.word	-1,.L26,.L76-.L26,.L16-.L26
	.half	1
	.byte	82
	.word	.L17-.L26,.L9-.L26
	.half	1
	.byte	82
	.word	.L18-.L26,.L6-.L26
	.half	1
	.byte	82
	.word	.L78-.L26,.L20-.L26
	.half	1
	.byte	82
	.word	.L19-.L26,.L51-.L26
	.half	1
	.byte	82
	.word	0,0
.L62:
	.word	-1,.L26,.L69-.L26,.L70-.L26
	.half	1
	.byte	95
	.word	.L6-.L26,.L77-.L26
	.half	1
	.byte	95
	.word	0,0
.L64:
	.word	-1,.L26,.L75-.L26,.L9-.L26
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L54:
	.word	-1,.L26,0,.L20-.L26
	.half	1
	.byte	84
	.word	.L19-.L26,.L51-.L26
	.half	1
	.byte	84
	.word	0,0
.L53:
	.word	-1,.L26,0,.L11-.L26
	.half	1
	.byte	100
	.word	.L9-.L26,.L18-.L26
	.half	1
	.byte	100
	.word	.L6-.L26,.L20-.L26
	.half	1
	.byte	100
	.word	0,0
.L58:
	.word	-1,.L26,0,.L20-.L26
	.half	1
	.byte	86
	.word	.L19-.L26,.L51-.L26
	.half	1
	.byte	86
	.word	0,0
.L55:
	.word	-1,.L26,0,.L68-.L26
	.half	1
	.byte	85
	.word	0,0
.L57:
	.word	-1,.L26,0,.L20-.L26
	.half	1
	.byte	101
	.word	.L19-.L26,.L51-.L26
	.half	1
	.byte	101
	.word	0,0
.L25:
	.word	-1,.L26,0,.L67-.L26
	.half	2
	.byte	138,0
	.word	.L67-.L26,.L51-.L26
	.half	2
	.byte	138,8
	.word	.L51-.L26,.L51-.L26
	.half	2
	.byte	138,0
	.word	0,0
.L61:
	.word	-1,.L26,.L70-.L26,.L71-.L26
	.half	1
	.byte	95
	.word	.L7-.L26,.L72-.L26
	.half	1
	.byte	95
	.word	.L73-.L26,.L74-.L26
	.half	1
	.byte	95
	.word	.L74-.L26,.L9-.L26
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L138:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('XcpAppl_GetSeed')
	.sect	'.debug_frame'
	.word	20
	.word	.L138,.L24,.L44-.L24
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('XcpAppl_Unlock')
	.sect	'.debug_frame'
	.word	36
	.word	.L138,.L26,.L51-.L26
	.byte	8,19,4
	.word	(.L67-.L26)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L51-.L67)/2
	.byte	19,0,8,26

; Integration\BSW\Src\Xcp_SeedAndKey.c	   220  #endif
; Integration\BSW\Src\Xcp_SeedAndKey.c	   221  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   222  /* ------------------------------------------------------------------------ */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   223  /* End section for code */
; Integration\BSW\Src\Xcp_SeedAndKey.c	   224  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   225  #define XCP_STOP_SEC_CALLOUT_CODE
; Integration\BSW\Src\Xcp_SeedAndKey.c	   226  #include "Xcp_MemMap.h"
; Integration\BSW\Src\Xcp_SeedAndKey.c	   227  
; Integration\BSW\Src\Xcp_SeedAndKey.c	   228  

	; Module end
