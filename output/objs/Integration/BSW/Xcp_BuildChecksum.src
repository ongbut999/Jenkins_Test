	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc18692a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\Integration\\BSW\\Xcp_BuildChecksum.src Integration\\BSW\\Src\\Xcp_BuildChecksum.c"
	.compiler_name		"ctc"
	;source	'Integration\\BSW\\Src\\Xcp_BuildChecksum.c'

	
$TC16X
	
	.sdecl	'.text.Xcp_BuildChecksum.XcpAppl_BuildChecksumTrigger',code,cluster('XcpAppl_BuildChecksumTrigger')
	.sect	'.text.Xcp_BuildChecksum.XcpAppl_BuildChecksumTrigger'
	.align	2
	
	.global	XcpAppl_BuildChecksumTrigger

; Integration\BSW\Src\Xcp_BuildChecksum.c	     1  /*
; Integration\BSW\Src\Xcp_BuildChecksum.c	     2   * This is a template file. It defines integration functions necessary to complete RTA-BSW.
; Integration\BSW\Src\Xcp_BuildChecksum.c	     3   * The integrator must complete the templates before deploying software containing functions defined in this file.
; Integration\BSW\Src\Xcp_BuildChecksum.c	     4   * Once templates have been completed, the integrator should delete the #error line.
; Integration\BSW\Src\Xcp_BuildChecksum.c	     5   * Note: The integrator is responsible for updates made to this file.
; Integration\BSW\Src\Xcp_BuildChecksum.c	     6   *
; Integration\BSW\Src\Xcp_BuildChecksum.c	     7   * To remove the following error define the macro NOT_READY_FOR_TESTING_OR_DEPLOYMENT with a compiler option (e.g. -D NOT_READY_FOR_TESTING_OR_DEPLOYMENT)
; Integration\BSW\Src\Xcp_BuildChecksum.c	     8   * The removal of the error only allows the user to proceed with the building phase
; Integration\BSW\Src\Xcp_BuildChecksum.c	     9   */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    10  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    11  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    12  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    13  /***************************************************************************************************
; Integration\BSW\Src\Xcp_BuildChecksum.c	    14  * Includes
; Integration\BSW\Src\Xcp_BuildChecksum.c	    15  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_BuildChecksum.c	    16  #include "Xcp_Cbk.h"
; Integration\BSW\Src\Xcp_BuildChecksum.c	    17  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    18  /* This include is needed for CRC calculation function */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    19  //#include "Crc.h"
; Integration\BSW\Src\Xcp_BuildChecksum.c	    20  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    21  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    22  /***************************************************************************************************
; Integration\BSW\Src\Xcp_BuildChecksum.c	    23  * Variables
; Integration\BSW\Src\Xcp_BuildChecksum.c	    24  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_BuildChecksum.c	    25  #define XCP_START_SEC_VAR_CLEARED_UNSPECIFIED
; Integration\BSW\Src\Xcp_BuildChecksum.c	    26  #include "Xcp_MemMap.h"
; Integration\BSW\Src\Xcp_BuildChecksum.c	    27  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    28  #if (XCP_CMD_BUILD_CHECKSUM_AVAILABLE == STD_ON)
; Integration\BSW\Src\Xcp_BuildChecksum.c	    29  /*-------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_BuildChecksum.c	    30  /* This part is project specific and shall be totally reworked */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    31  /*-------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_BuildChecksum.c	    32  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    33  /** Maximum size of block which can be used for checksum calculation at once.
; Integration\BSW\Src\Xcp_BuildChecksum.c	    34      If the requested block size is bigger it will be splitted into parts with defined size */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    35  #define XCPAPPL_CHECKSUM_BLOCKSIZE_SPLIT (uint32)1024
; Integration\BSW\Src\Xcp_BuildChecksum.c	    36  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    37  /** Checksum global data structure */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    38  typedef struct
; Integration\BSW\Src\Xcp_BuildChecksum.c	    39  {
; Integration\BSW\Src\Xcp_BuildChecksum.c	    40    uint32 BlockSize_u32;
; Integration\BSW\Src\Xcp_BuildChecksum.c	    41    uint32 ChecksumValue;
; Integration\BSW\Src\Xcp_BuildChecksum.c	    42    Xcp_AddrValue XcpAddress;
; Integration\BSW\Src\Xcp_BuildChecksum.c	    43  }XcpAppl_BuildChecksum_t;
; Integration\BSW\Src\Xcp_BuildChecksum.c	    44  static XcpAppl_BuildChecksum_t XcpAppl_BuildChecksumData[XCP_PL_IDS];
; Integration\BSW\Src\Xcp_BuildChecksum.c	    45  #endif /* (XCP_CMD_BUILD_CHECKSUM_AVAILABLE == STD_ON) */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    46  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    47  #define XCP_STOP_SEC_VAR_CLEARED_UNSPECIFIED
; Integration\BSW\Src\Xcp_BuildChecksum.c	    48  #include "Xcp_MemMap.h"
; Integration\BSW\Src\Xcp_BuildChecksum.c	    49  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    50  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    51  /***************************************************************************************************
; Integration\BSW\Src\Xcp_BuildChecksum.c	    52  * Functions
; Integration\BSW\Src\Xcp_BuildChecksum.c	    53  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_BuildChecksum.c	    54  /* ------------------------------------------------------------------------ */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    55  /* Begin section for code */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    56  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    57  #define XCP_START_SEC_CALLOUT_CODE
; Integration\BSW\Src\Xcp_BuildChecksum.c	    58  #include "Xcp_MemMap.h"
; Integration\BSW\Src\Xcp_BuildChecksum.c	    59  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    60  #if (XCP_CMD_BUILD_CHECKSUM_AVAILABLE == STD_ON)
; Integration\BSW\Src\Xcp_BuildChecksum.c	    61  /**
; Integration\BSW\Src\Xcp_BuildChecksum.c	    62  ****************************************************************************************************
; Integration\BSW\Src\Xcp_BuildChecksum.c	    63  Function triggers checksum calculation
; Integration\BSW\Src\Xcp_BuildChecksum.c	    64  \param[in]  XcpAddr           start address of memory block
; Integration\BSW\Src\Xcp_BuildChecksum.c	    65  \param[in]  BlockSize         size of memory block from which the checksum should be calculated
; Integration\BSW\Src\Xcp_BuildChecksum.c	    66  \param[in]  ProtocolLayerId   protocol layer id
; Integration\BSW\Src\Xcp_BuildChecksum.c	    67  \return     ErrorCode
; Integration\BSW\Src\Xcp_BuildChecksum.c	    68  \retval     XCP_NO_ERROR      calculation started
; Integration\BSW\Src\Xcp_BuildChecksum.c	    69  \retval     XCP_ERR_CMD_BUSY  another calculation in progress
; Integration\BSW\Src\Xcp_BuildChecksum.c	    70  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_BuildChecksum.c	    71  Xcp_ErrorCode XcpAppl_BuildChecksumTrigger(const Xcp_AddrType_t XcpAddr, uint32 BlockSize, uint8 ProtocolLayerId)
; Function XcpAppl_BuildChecksumTrigger
.L13:
XcpAppl_BuildChecksumTrigger:	.type	func

; Integration\BSW\Src\Xcp_BuildChecksum.c	    72  {
; Integration\BSW\Src\Xcp_BuildChecksum.c	    73    /*-----------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_BuildChecksum.c	    74    /* This function is project specific and shall be totally reworked */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    75    /* In case of no use of CalPage this code template can be used.    */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    76    /* This is fully working CRC32 example without CalPage.            */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    77    /*-----------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_BuildChecksum.c	    78  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    79    /* Local variables */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    80    Xcp_ErrorCode Error;
; Integration\BSW\Src\Xcp_BuildChecksum.c	    81  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    82    /* Check if not another calculation in progress */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    83    if (XcpAppl_BuildChecksumData[ProtocolLayerId].BlockSize_u32 == 0u)
	mul	d15,d7,#12
.L72:
	movh.a	a15,#@his(XcpAppl_BuildChecksumData)
	lea	a15,[a15]@los(XcpAppl_BuildChecksumData)
.L73:
	addsc.a	a15,a15,d15,#0
.L74:
	ld.w	d15,[a15]
.L75:
	jne	d15,#0,.L2
.L76:

; Integration\BSW\Src\Xcp_BuildChecksum.c	    84    {
; Integration\BSW\Src\Xcp_BuildChecksum.c	    85      /* Initial value for checksum calculation */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    86      XcpAppl_BuildChecksumData[ProtocolLayerId].ChecksumValue = 0;
	mov	d15,#0
.L77:
	st.w	[a15]4,d15
.L78:

; Integration\BSW\Src\Xcp_BuildChecksum.c	    87  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    88      /* Store data for background checksum calculation */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    89      XcpAppl_BuildChecksumData[ProtocolLayerId].XcpAddress = XcpAddr.AddrValue;
	st.w	[a15]8,d4
.L79:

; Integration\BSW\Src\Xcp_BuildChecksum.c	    90      /* Shall be at the end, because BlockSize > 0 is trigger for checksum calculation */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    91      XcpAppl_BuildChecksumData[ProtocolLayerId].BlockSize_u32 = BlockSize;
	st.w	[a15],d6
.L80:

; Integration\BSW\Src\Xcp_BuildChecksum.c	    92  
; Integration\BSW\Src\Xcp_BuildChecksum.c	    93      /* Set return value */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    94      Error = XCP_NO_ERROR;
	mov	d2,#255
.L54:
	j	.L3
.L2:

; Integration\BSW\Src\Xcp_BuildChecksum.c	    95    }
; Integration\BSW\Src\Xcp_BuildChecksum.c	    96    else
; Integration\BSW\Src\Xcp_BuildChecksum.c	    97    {
; Integration\BSW\Src\Xcp_BuildChecksum.c	    98      /* Set return value */
; Integration\BSW\Src\Xcp_BuildChecksum.c	    99      Error = XCP_ERR_CMD_BUSY;
	mov	d2,#16
.L3:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   100    }
; Integration\BSW\Src\Xcp_BuildChecksum.c	   101    return (Error);
	j	.L4

; Integration\BSW\Src\Xcp_BuildChecksum.c	   102  }
.L4:
	ret
.L33:
	
__XcpAppl_BuildChecksumTrigger_function_end:
	.size	XcpAppl_BuildChecksumTrigger,__XcpAppl_BuildChecksumTrigger_function_end-XcpAppl_BuildChecksumTrigger
.L24:
	; End of function
	
	.sdecl	'.text.Xcp_BuildChecksum.XcpAppl_BuildChecksumMainFunction',code,cluster('XcpAppl_BuildChecksumMainFunction')
	.sect	'.text.Xcp_BuildChecksum.XcpAppl_BuildChecksumMainFunction'
	.align	2
	
	.global	XcpAppl_BuildChecksumMainFunction

; Integration\BSW\Src\Xcp_BuildChecksum.c	   103  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   104  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   105  /**
; Integration\BSW\Src\Xcp_BuildChecksum.c	   106  ****************************************************************************************************
; Integration\BSW\Src\Xcp_BuildChecksum.c	   107  Function to process checksum calculation
; Integration\BSW\Src\Xcp_BuildChecksum.c	   108  \param[out] ChecksumPtr       pointer to where calculated checksum should be stored
; Integration\BSW\Src\Xcp_BuildChecksum.c	   109  \param[out] ChecksumType      type of the checksum calculated by the process
; Integration\BSW\Src\Xcp_BuildChecksum.c	   110  \param[in]  ProtocolLayerId   Protocol Layer Id
; Integration\BSW\Src\Xcp_BuildChecksum.c	   111  \return     ErorCode
; Integration\BSW\Src\Xcp_BuildChecksum.c	   112  \retval     XCP_NO_ERROR            calculation finished
; Integration\BSW\Src\Xcp_BuildChecksum.c	   113  \retval     XCP_ERR_ACCESS_DENIED   wrong calpage, addr, etc
; Integration\BSW\Src\Xcp_BuildChecksum.c	   114  \retval     XCP_ERR_CMD_BUSY        another calculation in progress
; Integration\BSW\Src\Xcp_BuildChecksum.c	   115  \retval     XCP_NO_RESPONSE         nothing to do
; Integration\BSW\Src\Xcp_BuildChecksum.c	   116  ***************************************************************************************************/
; Integration\BSW\Src\Xcp_BuildChecksum.c	   117  Xcp_ErrorCode XcpAppl_BuildChecksumMainFunction(uint32* ChecksumPtr, uint8* ChecksumType, uint8 ProtocolLayerId)
; Function XcpAppl_BuildChecksumMainFunction
.L15:
XcpAppl_BuildChecksumMainFunction:	.type	func

; Integration\BSW\Src\Xcp_BuildChecksum.c	   118  {
; Integration\BSW\Src\Xcp_BuildChecksum.c	   119    /*-----------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_BuildChecksum.c	   120    /* This function is project specific and shall be totally reworked */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   121    /* In case of no use of CalPage this code template can be used.    */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   122    /* This is fully working ADD_14 example without CalPage.            */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   123    /*-----------------------------------------------------------------*/
; Integration\BSW\Src\Xcp_BuildChecksum.c	   124  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   125    /* Local variables */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   126    Xcp_ErrorCode Error = XCP_ERR_ACCESS_DENIED;
; Integration\BSW\Src\Xcp_BuildChecksum.c	   127    uint32 CalcLength = 0;
; Integration\BSW\Src\Xcp_BuildChecksum.c	   128    uint32 CalcChecksum = 0;
; Integration\BSW\Src\Xcp_BuildChecksum.c	   129    uint32 byteidx = 0;
; Integration\BSW\Src\Xcp_BuildChecksum.c	   130    const uint8* byteptr = NULL_PTR;
; Integration\BSW\Src\Xcp_BuildChecksum.c	   131  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   132    /* Check if calculation in progress - also checked in Xcp_BuildChecksumMainFunction */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   133    if (XcpAppl_BuildChecksumData[ProtocolLayerId].BlockSize_u32 > 0u)
	mul	d15,d4,#12
.L85:
	movh.a	a15,#@his(XcpAppl_BuildChecksumData)
	lea	a15,[a15]@los(XcpAppl_BuildChecksumData)
.L86:
	addsc.a	a15,a15,d15,#0
.L87:
	ld.w	d15,[a15]
.L88:
	jeq	d15,#0,.L5
.L89:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   134    {
; Integration\BSW\Src\Xcp_BuildChecksum.c	   135      /* Check if requested size is bigger than maximum block size which can be calculated at once */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   136      if (XcpAppl_BuildChecksumData[ProtocolLayerId].BlockSize_u32 > XCPAPPL_CHECKSUM_BLOCKSIZE_SPLIT)
	mov	d0,#1024
.L55:
	jge.u	d0,d15,.L6
.L90:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   137      {
; Integration\BSW\Src\Xcp_BuildChecksum.c	   138        /* Set block length for actual calculation */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   139        CalcLength = XCPAPPL_CHECKSUM_BLOCKSIZE_SPLIT;
; Integration\BSW\Src\Xcp_BuildChecksum.c	   140  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   141        /* Calculation in progress */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   142        Error = XCP_NO_RESPONSE;
	mov	d2,#254
.L57:
	j	.L7
.L6:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   143      }
; Integration\BSW\Src\Xcp_BuildChecksum.c	   144      else
; Integration\BSW\Src\Xcp_BuildChecksum.c	   145      {
; Integration\BSW\Src\Xcp_BuildChecksum.c	   146        /* Set block length for actual calculation */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   147        CalcLength = XcpAppl_BuildChecksumData[ProtocolLayerId].BlockSize_u32;
	mov	d0,d15
.L91:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   148  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   149        /* Calculation done */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   150        Error = XCP_NO_ERROR;
	mov	d2,#255
.L7:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   151      }
; Integration\BSW\Src\Xcp_BuildChecksum.c	   152  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   153      CalcChecksum = 0;
	mov	d1,#0
.L58:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   154      byteptr =  XcpAppl_BuildChecksumData[ProtocolLayerId].XcpAddress;
	lea	a2,[a15]8
	ld.w	d15,[a2]
.L59:
	mov.a	a6,d15
.L61:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   155  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   156      for (byteidx = 0; byteidx < CalcLength; byteidx++)
	mov	d15,#0
.L60:
	j	.L8
.L9:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   157      {
; Integration\BSW\Src\Xcp_BuildChecksum.c	   158        CalcChecksum += byteptr[byteidx];
	addsc.a	a7,a6,d15,#0
	ld.bu	d3,[a7]
.L92:
	add	d1,d3
.L93:
	add	d15,#1
.L8:
	jlt.u	d15,d0,.L9
.L94:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   159      }
; Integration\BSW\Src\Xcp_BuildChecksum.c	   160  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   161      /* Calculate ADD_14 checksum */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   162      XcpAppl_BuildChecksumData[ProtocolLayerId].ChecksumValue = CalcChecksum;
	mov.aa	a6,a15
.L62:
	add.a	a6,#4
.L95:
	st.w	[a6],d1
.L96:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   163  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   164      /* Update address and block size */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   165      XcpAppl_BuildChecksumData[ProtocolLayerId].BlockSize_u32 -= CalcLength;
	ld.w	d15,[a15]
.L63:
	sub	d15,d0
	st.w	[a15],d15
.L97:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   166      XcpAppl_BuildChecksumData[ProtocolLayerId].XcpAddress += CalcLength;
	ld.w	d15,[a2]
.L98:
	add	d0,d15
.L56:
	st.w	[a2],d0
.L99:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   167  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   168      /* Set type of checksum to return parameter */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   169      *ChecksumType = XCP_CHECKSUM_TYPE_ADD_14;
	mov	d15,#3
.L100:
	st.b	[a5],d15
.L101:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   170  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   171      /* Set value of checksum to return parameter */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   172      *ChecksumPtr = XcpAppl_BuildChecksumData[ProtocolLayerId].ChecksumValue;
	ld.w	d15,[a6]
.L102:
	st.w	[a4],d15
.L103:
	j	.L10
.L5:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   173    }
; Integration\BSW\Src\Xcp_BuildChecksum.c	   174    else
; Integration\BSW\Src\Xcp_BuildChecksum.c	   175    {
; Integration\BSW\Src\Xcp_BuildChecksum.c	   176      Error = XCP_ERR_RES_TEMP_NOT_ACCESS;
	mov	d2,#51
.L10:

; Integration\BSW\Src\Xcp_BuildChecksum.c	   177    }
; Integration\BSW\Src\Xcp_BuildChecksum.c	   178    return(Error);
	j	.L11

; Integration\BSW\Src\Xcp_BuildChecksum.c	   179  }
.L11:
	ret
.L41:
	
__XcpAppl_BuildChecksumMainFunction_function_end:
	.size	XcpAppl_BuildChecksumMainFunction,__XcpAppl_BuildChecksumMainFunction_function_end-XcpAppl_BuildChecksumMainFunction
.L29:
	; End of function
	
	.sdecl	'.bss.Xcp_BuildChecksum.XcpAppl_BuildChecksumData',data,cluster('XcpAppl_BuildChecksumData')
	.sect	'.bss.Xcp_BuildChecksum.XcpAppl_BuildChecksumData'
	.align	4
XcpAppl_BuildChecksumData:	.type	object
	.size	XcpAppl_BuildChecksumData,12
	.space	12
	.calls	'XcpAppl_BuildChecksumTrigger','',0
	.calls	'XcpAppl_BuildChecksumMainFunction','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L17:
	.word	3302
	.half	3
	.word	.L18
	.byte	4
.L16:
	.byte	1
	.byte	'Integration\\BSW\\Src\\Xcp_BuildChecksum.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L19
.L32:
	.byte	2,1,177,3,9,4,3
	.byte	'XCP_ERR_CMD_SYNCH',0,0,3
	.byte	'XCP_ERR_CMD_BUSY',0,16,3
	.byte	'XCP_ERR_DAQ_ACTIVE',0,17,3
	.byte	'XCP_ERR_PGM_ACTIVE',0,18,3
	.byte	'XCP_ERR_CMD_UNKNOWN',0,32,3
	.byte	'XCP_ERR_CMD_SYNTAX',0,33,3
	.byte	'XCP_ERR_OUT_OF_RANGE',0,34,3
	.byte	'XCP_ERR_WRITE_PROTECTED',0,35,3
	.byte	'XCP_ERR_ACCESS_DENIED',0,36,3
	.byte	'XCP_ERR_ACCESS_LOCKED',0,37,3
	.byte	'XCP_ERR_PAGE_NOT_VALID',0,38,3
	.byte	'XCP_ERR_MODE_NOT_VALID',0,39,3
	.byte	'XCP_ERR_SEGMENT_NOT_VALID',0,40,3
	.byte	'XCP_ERR_SEQUENCE',0,41,3
	.byte	'XCP_ERR_DAQ_CONFIG',0,42,3
	.byte	'XCP_ERR_MEMORY_OVERFLOW',0,48,3
	.byte	'XCP_ERR_GENERIC',0,49,3
	.byte	'XCP_ERR_VERIFY',0,50,3
	.byte	'XCP_ERR_RES_TEMP_NOT_ACCESS',0,51,3
	.byte	'XCP_ERR_SUBCMD_UNKNOWN',0,52,3
	.byte	'XCP_REPEAT_COMMAND',0,252,1,3
	.byte	'XCP_NO_ACCESS_HIDE',0,253,1,3
	.byte	'XCP_NO_RESPONSE',0,254,1,3
	.byte	'XCP_NO_ERROR',0,255,1,0
.L36:
	.byte	4
	.byte	'unsigned int',0,4,7
.L38:
	.byte	4
	.byte	'unsigned char',0,1,8,5,1,168,3,9,8,6
	.byte	'AddrValue',0
	.word	680
	.byte	4,2,35,0,6
	.byte	'Extension',0
	.word	696
	.byte	1,2,35,4,0
.L34:
	.byte	7
	.word	713
.L42:
	.byte	8
	.word	680
.L44:
	.byte	8
	.word	696
	.byte	7
	.word	696
.L51:
	.byte	8
	.word	773
	.byte	9,1,8
	.word	783
	.byte	10
	.byte	'__codeptr',0,2,1,1
	.word	785
	.byte	10
	.byte	'uint8',0,3,81,25
	.word	696
	.byte	4
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,3,91,25
	.word	822
	.byte	10
	.byte	'uint32',0,3,106,24
	.word	680
	.byte	10
	.byte	'boolean',0,3,127,25
	.word	696
	.byte	10
	.byte	'Std_ReturnType',0,4,199,1,15
	.word	696
	.byte	10
	.byte	'PduLengthType',0,5,26,19
	.word	822
	.byte	2,6,113,9,4,3
	.byte	'TP_DATACONF',0,0,3
	.byte	'TP_DATARETRY',0,1,3
	.byte	'TP_CONFPENDING',0,2,0,10
	.byte	'TpDataStateType',0,6,118,3
	.word	936
	.byte	2,1,225,1,9,4,3
	.byte	'XCP_STATE_DISCONNECTED',0,0,3
	.byte	'XCP_STATE_DISCONNECTING',0,1,3
	.byte	'XCP_STATE_CONNECTED',0,2,3
	.byte	'XCP_STATE_RESUME',0,3,3
	.byte	'XCP_STATE_DISABLED',0,240,1,0,10
	.byte	'Xcp_State_t',0,1,231,1,2
	.word	1012
	.byte	10
	.byte	'Xcp_AddrValue',0,1,165,3,23
	.word	680
	.byte	10
	.byte	'Xcp_AddrType_t',0,1,172,3,3
	.word	713
	.byte	10
	.byte	'Xcp_PduIdType',0,1,174,3,15
	.word	696
	.byte	10
	.byte	'Xcp_ErrorCode',0,1,204,3,2
	.word	139
	.byte	2,1,223,3,9,4,3
	.byte	'XCP_DAQ_NO_OVERLOAD_INDICATION',0,0,3
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_PID',0,1,3
	.byte	'XCP_DAQ_OVERLOAD_INDICATION_EVENT',0,2,0,10
	.byte	'Xcp_Overload_t',0,1,228,3,2
	.word	1247
	.byte	2,1,233,3,9,4,3
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_ABSOLUTE',0,1,3
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE',0,2,3
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD',0,3,3
	.byte	'XCP_IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED',0,4,0,10
	.byte	'Xcp_IdField_t',0,1,239,3,2
	.word	1381
	.byte	2,1,242,3,9,4,3
	.byte	'XCP_ODT_OPTIMIZATION_OM_DEFAULT',0,0,3
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_16',0,1,3
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_32',0,2,3
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_64',0,3,3
	.byte	'XCP_ODT_OPTIMIZATION_OM_ODT_TYPE_ALIGNMENT',0,4,3
	.byte	'XCP_ODT_OPTIMIZATION_OM_MAX_ENTRY_SIZE',0,5,0,10
	.byte	'Xcp_OdtOptimizationType_t',0,1,250,3,2
	.word	1598
	.byte	2,1,253,3,9,4,3
	.byte	'XCP_CONSISTENCY_ODT',0,0,3
	.byte	'XCP_CONSISTENCY_DAQ',0,1,3
	.byte	'XCP_CONSISTENCY_EVENT',0,2,3
	.byte	'XCP_CONSISTENCY_NONE',0,3,0,10
	.byte	'Xcp_Consistency_t',0,1,131,4,2
	.word	1874
	.byte	2,1,134,4,9,4,3
	.byte	'XCP_TIMESTAMP_TYPE_NO_TIME_STAMP',0,0,3
	.byte	'XCP_TIMESTAMP_TYPE_ONE_BYTE',0,1,3
	.byte	'XCP_TIMESTAMP_TYPE_TWO_BYTE',0,2,3
	.byte	'XCP_TIMESTAMP_TYPE_FOUR_BYTE',0,4,0,10
	.byte	'Xcp_Timestamp_t',0,1,140,4,2
	.word	1999
	.byte	5,6,71,9,8,6
	.byte	'SduDataPtr',0
	.word	768
	.byte	4,2,35,0,6
	.byte	'SduLength',0
	.word	822
	.byte	2,2,35,4,0,7
	.word	2157
	.byte	8
	.word	2202
	.byte	11
	.word	696
	.byte	1,1,12
	.word	2207
	.byte	12
	.word	696
	.byte	12
	.word	696
	.byte	0,8
	.word	2212
	.byte	13,1,1,12
	.word	696
	.byte	12
	.word	696
	.byte	0,8
	.word	2240
	.byte	13,1,1,12
	.word	696
	.byte	0,8
	.word	2259
	.byte	11
	.word	696
	.byte	1,1,12
	.word	696
	.byte	0,8
	.word	2273
	.byte	8
	.word	2157
	.byte	13,1,1,12
	.word	2207
	.byte	12
	.word	2291
	.byte	12
	.word	696
	.byte	0,8
	.word	2296
	.byte	11
	.word	696
	.byte	1,1,12
	.word	696
	.byte	12
	.word	822
	.byte	12
	.word	696
	.byte	0,8
	.word	2320
	.byte	5,7,164,1,9,56,6
	.byte	'TLTransmit_pfct',0
	.word	2235
	.byte	4,2,35,0,6
	.byte	'TLInit_pfct',0
	.word	2254
	.byte	4,2,35,4,6
	.byte	'TLConnect_pfct',0
	.word	2268
	.byte	4,2,35,8,6
	.byte	'TLDisconnect_pfct',0
	.word	2286
	.byte	4,2,35,12,6
	.byte	'TLTransportLayerCmd_pfct',0
	.word	2315
	.byte	4,2,35,16,6
	.byte	'TLGetTxPduId_pfct',0
	.word	2343
	.byte	4,2,35,20,6
	.byte	'MaxCto_u8',0
	.word	696
	.byte	1,2,35,24,6
	.byte	'MaxDto_u16',0
	.word	822
	.byte	2,2,35,26,6
	.byte	'TimestampType_en',0
	.word	1999
	.byte	4,2,35,28,6
	.byte	'IdFieldType_en',0
	.word	1381
	.byte	4,2,35,32,6
	.byte	'OverloadType_en',0
	.word	1247
	.byte	4,2,35,36,6
	.byte	'OdtOptimizationType_en',0
	.word	1598
	.byte	4,2,35,40,6
	.byte	'Consistency_en',0
	.word	1874
	.byte	4,2,35,44,6
	.byte	'PdRam_u32',0
	.word	680
	.byte	4,2,35,48,6
	.byte	'EdRam_u32',0
	.word	680
	.byte	4,2,35,52,0,10
	.byte	'Xcp_PL_TL_Cfg_t',0,7,184,1,2
	.word	2348
	.byte	2,7,188,1,9,4,3
	.byte	'XCP_RAMSECTION_INVALID',0,0,3
	.byte	'XCP_RAMSECTION_PD',0,1,3
	.byte	'XCP_RAMSECTION_ED',0,2,0,10
	.byte	'Xcp_RamSectionType_t',0,7,193,1,2
	.word	2746
	.byte	5,7,195,1,9,12,6
	.byte	'DaqRamPtr_pu8',0
	.word	768
	.byte	4,2,35,0,6
	.byte	'DaqRamTotalSize_u32',0
	.word	680
	.byte	4,2,35,4,6
	.byte	'RamSectionType_en',0
	.word	2746
	.byte	4,2,35,8,0,10
	.byte	'Xcp_DaqRamSection_Cfg_t',0,7,200,1,2
	.word	2848
	.byte	5,7,230,1,9,4,6
	.byte	'EventChannelDirection_u8',0
	.word	696
	.byte	1,2,35,0,6
	.byte	'EventChannelTimeCycle_u8',0
	.word	696
	.byte	1,2,35,1,6
	.byte	'EventChannelTimeUnit_u8',0
	.word	696
	.byte	1,2,35,2,6
	.byte	'EventChannelPriority_u8',0
	.word	696
	.byte	1,2,35,3,0,10
	.byte	'Xcp_EventChannel_Cfg_t',0,7,236,1,2
	.word	2967
	.byte	4
	.byte	'unsigned long long int',0,8,7,10
	.byte	'rba_BswSrv_uint64',0,8,66,28
	.word	3140
	.byte	5,2,38,9,12,6
	.byte	'BlockSize_u32',0
	.word	680
	.byte	4,2,35,0,6
	.byte	'ChecksumValue',0
	.word	680
	.byte	4,2,35,4,6
	.byte	'XcpAddress',0
	.word	680
	.byte	4,2,35,8,0,10
	.byte	'XcpAppl_BuildChecksum_t',0,2,43,2
	.word	3192
.L53:
	.byte	14,12
	.word	3192
	.byte	15,0,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L18:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,4,1,58,15,59,15,57,15,11,15,0,0,3,40,0,3,8,28,13,0,0,4
	.byte	36,0,3,8,11,15,62,15,0,0,5,19,1,58,15,59,15,57,15,11,15,0,0,6,13,0,3,8,73,19,11,15,56,9,0,0,7,38,0,73
	.byte	19,0,0,8,15,0,73,19,0,0,9,21,0,54,15,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,1,73,19,54,15,39
	.byte	12,0,0,12,5,0,73,19,0,0,13,21,1,54,15,39,12,0,0,14,1,1,11,15,73,19,0,0,15,33,0,47,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L19:
	.word	.L65-.L64
.L64:
	.half	3
	.word	.L67-.L66
.L66:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\api\\Xcp_Types.h',0,0,0,0
	.byte	'Integration\\BSW\\Src\\Xcp_BuildChecksum.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\Std_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Cfg.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\ComStack\\ComStack_Types.h',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Xcp\\Xcp_Cfg.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L67:
.L65:
	.sdecl	'.debug_info',debug,cluster('XcpAppl_BuildChecksumTrigger')
	.sect	'.debug_info'
.L20:
	.word	296
	.half	3
	.word	.L21
	.byte	4,1
	.byte	'Integration\\BSW\\Src\\Xcp_BuildChecksum.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L23,.L22
	.byte	2
	.word	.L16
	.byte	3
	.byte	'XcpAppl_BuildChecksumTrigger',0,1,71,15
	.word	.L32
	.byte	1,1,1
	.word	.L13,.L33,.L12
	.byte	4
	.byte	'XcpAddr',0,1,71,65
	.word	.L34,.L35
	.byte	4
	.byte	'BlockSize',0,1,71,81
	.word	.L36,.L37
	.byte	4
	.byte	'ProtocolLayerId',0,1,71,98
	.word	.L38,.L39
	.byte	5
	.word	.L13,.L33
	.byte	6
	.byte	'Error',0,1,80,17
	.word	.L32,.L40
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('XcpAppl_BuildChecksumTrigger')
	.sect	'.debug_abbrev'
.L21:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('XcpAppl_BuildChecksumTrigger')
	.sect	'.debug_line'
.L22:
	.word	.L69-.L68
.L68:
	.half	3
	.word	.L71-.L70
.L70:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Integration\\BSW\\Src\\Xcp_BuildChecksum.c',0,0,0,0,0
.L71:
	.byte	5,32,7,0,5,2
	.word	.L13
	.byte	3,210,0,1,5,7,9
	.half	.L72-.L13
	.byte	1,5,32,9
	.half	.L73-.L72
	.byte	1,5,49,9
	.half	.L74-.L73
	.byte	1,5,3,9
	.half	.L75-.L74
	.byte	1,5,64,7,9
	.half	.L76-.L75
	.byte	3,3,1,5,62,9
	.half	.L77-.L76
	.byte	1,5,59,9
	.half	.L78-.L77
	.byte	3,3,1,5,62,9
	.half	.L79-.L78
	.byte	3,2,1,5,11,9
	.half	.L80-.L79
	.byte	3,3,1,5,65,9
	.half	.L54-.L80
	.byte	3,120,1,5,11,9
	.half	.L2-.L54
	.byte	3,13,1,5,3,9
	.half	.L3-.L2
	.byte	3,2,1,5,1,9
	.half	.L4-.L3
	.byte	3,1,1,7,9
	.half	.L24-.L4
	.byte	0,1,1
.L69:
	.sdecl	'.debug_ranges',debug,cluster('XcpAppl_BuildChecksumTrigger')
	.sect	'.debug_ranges'
.L23:
	.word	-1,.L13,0,.L24-.L13,0,0
	.sdecl	'.debug_info',debug,cluster('XcpAppl_BuildChecksumMainFunction')
	.sect	'.debug_info'
.L25:
	.word	399
	.half	3
	.word	.L26
	.byte	4,1
	.byte	'Integration\\BSW\\Src\\Xcp_BuildChecksum.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L28,.L27
	.byte	2
	.word	.L16
	.byte	3
	.byte	'XcpAppl_BuildChecksumMainFunction',0,1,117,15
	.word	.L32
	.byte	1,1,1
	.word	.L15,.L41,.L14
	.byte	4
	.byte	'ChecksumPtr',0,1,117,57
	.word	.L42,.L43
	.byte	4
	.byte	'ChecksumType',0,1,117,77
	.word	.L44,.L45
	.byte	4
	.byte	'ProtocolLayerId',0,1,117,97
	.word	.L38,.L46
	.byte	5
	.word	.L15,.L41
	.byte	6
	.byte	'Error',0,1,126,17
	.word	.L32,.L47
	.byte	6
	.byte	'CalcLength',0,1,127,10
	.word	.L36,.L48
	.byte	6
	.byte	'CalcChecksum',0,1,128,1,10
	.word	.L36,.L49
	.byte	6
	.byte	'byteidx',0,1,129,1,10
	.word	.L36,.L50
	.byte	6
	.byte	'byteptr',0,1,130,1,16
	.word	.L51,.L52
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('XcpAppl_BuildChecksumMainFunction')
	.sect	'.debug_abbrev'
.L26:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('XcpAppl_BuildChecksumMainFunction')
	.sect	'.debug_line'
.L27:
	.word	.L82-.L81
.L81:
	.half	3
	.word	.L84-.L83
.L83:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Integration\\BSW\\Src\\Xcp_BuildChecksum.c',0,0,0,0,0
.L84:
	.byte	5,32,7,0,5,2
	.word	.L15
	.byte	3,132,1,1,5,7,9
	.half	.L85-.L15
	.byte	1,5,32,9
	.half	.L86-.L85
	.byte	1,5,49,9
	.half	.L87-.L86
	.byte	1,5,3,9
	.half	.L88-.L87
	.byte	1,5,68,7,9
	.half	.L89-.L88
	.byte	3,3,1,5,5,9
	.half	.L55-.L89
	.byte	1,5,13,7,9
	.half	.L90-.L55
	.byte	3,6,1,5,52,9
	.half	.L57-.L90
	.byte	3,125,1,5,18,9
	.half	.L6-.L57
	.byte	3,8,1,5,13,9
	.half	.L91-.L6
	.byte	3,3,1,5,18,9
	.half	.L7-.L91
	.byte	3,3,1,5,58,9
	.half	.L58-.L7
	.byte	3,1,1,5,13,9
	.half	.L59-.L58
	.byte	1,5,18,9
	.half	.L61-.L59
	.byte	3,2,1,5,43,9
	.half	.L60-.L61
	.byte	1,5,30,9
	.half	.L9-.L60
	.byte	3,2,1,5,20,9
	.half	.L92-.L9
	.byte	1,5,52,9
	.half	.L93-.L92
	.byte	3,126,1,5,43,9
	.half	.L8-.L93
	.byte	1,5,47,7,9
	.half	.L94-.L8
	.byte	3,6,1,5,62,9
	.half	.L95-.L94
	.byte	1,5,47,9
	.half	.L96-.L95
	.byte	3,3,1,5,62,9
	.half	.L63-.L96
	.byte	1,5,47,9
	.half	.L97-.L63
	.byte	3,1,1,5,59,9
	.half	.L98-.L97
	.byte	1,5,21,9
	.half	.L99-.L98
	.byte	3,3,1,5,19,9
	.half	.L100-.L99
	.byte	1,5,62,9
	.half	.L101-.L100
	.byte	3,3,1,5,18,9
	.half	.L102-.L101
	.byte	1,5,76,9
	.half	.L103-.L102
	.byte	3,118,1,5,11,9
	.half	.L5-.L103
	.byte	3,14,1,5,3,9
	.half	.L10-.L5
	.byte	3,2,1,5,1,9
	.half	.L11-.L10
	.byte	3,1,1,7,9
	.half	.L29-.L11
	.byte	0,1,1
.L82:
	.sdecl	'.debug_ranges',debug,cluster('XcpAppl_BuildChecksumMainFunction')
	.sect	'.debug_ranges'
.L28:
	.word	-1,.L15,0,.L29-.L15,0,0
	.sdecl	'.debug_info',debug,cluster('XcpAppl_BuildChecksumData')
	.sect	'.debug_info'
.L30:
	.word	177
	.half	3
	.word	.L31
	.byte	4,1
	.byte	'Integration\\BSW\\Src\\Xcp_BuildChecksum.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1,2
	.word	.L16
	.byte	3
	.byte	'XcpAppl_BuildChecksumData',0,2,44,32
	.word	.L53
	.byte	5,3
	.word	XcpAppl_BuildChecksumData
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('XcpAppl_BuildChecksumData')
	.sect	'.debug_abbrev'
.L31:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('XcpAppl_BuildChecksumMainFunction')
	.sect	'.debug_loc'
.L49:
	.word	-1,.L15,.L58-.L15,.L5-.L15
	.half	1
	.byte	81
	.word	0,0
.L48:
	.word	-1,.L15,.L55-.L15,.L56-.L15
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L43:
	.word	-1,.L15,0,.L41-.L15
	.half	1
	.byte	100
	.word	0,0
.L45:
	.word	-1,.L15,0,.L41-.L15
	.half	1
	.byte	101
	.word	0,0
.L47:
	.word	-1,.L15,.L57-.L15,.L6-.L15
	.half	1
	.byte	82
	.word	.L7-.L15,.L5-.L15
	.half	1
	.byte	82
	.word	.L10-.L15,.L41-.L15
	.half	1
	.byte	82
	.word	0,0
.L46:
	.word	-1,.L15,0,.L41-.L15
	.half	1
	.byte	84
	.word	0,0
.L14:
	.word	-1,.L15,0,.L41-.L15
	.half	2
	.byte	138,0
	.word	0,0
.L50:
	.word	-1,.L15,.L60-.L15,.L63-.L15
	.half	1
	.byte	95
	.word	0,0
.L52:
	.word	-1,.L15,.L59-.L15,.L60-.L15
	.half	1
	.byte	95
	.word	.L61-.L15,.L62-.L15
	.half	1
	.byte	102
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('XcpAppl_BuildChecksumTrigger')
	.sect	'.debug_loc'
.L37:
	.word	-1,.L13,0,.L33-.L13
	.half	1
	.byte	86
	.word	0,0
.L40:
	.word	-1,.L13,.L54-.L13,.L2-.L13
	.half	1
	.byte	82
	.word	.L3-.L13,.L33-.L13
	.half	1
	.byte	82
	.word	0,0
.L39:
	.word	-1,.L13,0,.L33-.L13
	.half	1
	.byte	87
	.word	0,0
.L35:
	.word	-1,.L13,0,.L33-.L13
	.half	2
	.byte	144,34
	.word	0,0
.L12:
	.word	-1,.L13,0,.L33-.L13
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L104:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('XcpAppl_BuildChecksumTrigger')
	.sect	'.debug_frame'
	.word	24
	.word	.L104,.L13,.L33-.L13
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('XcpAppl_BuildChecksumMainFunction')
	.sect	'.debug_frame'
	.word	16
	.word	.L104,.L15,.L41-.L15
	.byte	8,19,0,0

; Integration\BSW\Src\Xcp_BuildChecksum.c	   180  #endif /* (XCP_CMD_BUILD_CHECKSUM_AVAILABLE == STD_ON) */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   181  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   182  /* ------------------------------------------------------------------------ */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   183  /* End section for code */
; Integration\BSW\Src\Xcp_BuildChecksum.c	   184  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   185  #define XCP_STOP_SEC_CALLOUT_CODE
; Integration\BSW\Src\Xcp_BuildChecksum.c	   186  #include "Xcp_MemMap.h"
; Integration\BSW\Src\Xcp_BuildChecksum.c	   187  
; Integration\BSW\Src\Xcp_BuildChecksum.c	   188  

	; Module end
