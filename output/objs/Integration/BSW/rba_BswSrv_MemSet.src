	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.2r2 Build 19053136 SN 09001910"
	.compiler_invocation	"ctc -f cc16684a -c99 --integer-enumeration -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x --eabi-compliant --fp-model=-float -D_TASKING_C_TRICORE_=1 -I.\\output\\inc -g2 -t4 --language=-comments,-gcc,+volatile,-strings --default-near-size=0 -O2ROPYGKLF-predict --default-a1-size=0 --default-a0-size=0 --source --switch=auto -o output\\objs\\Integration\\BSW\\rba_BswSrv_MemSet.src Integration\\BSW\\Src\\rba_BswSrv_MemSet.c"
	.compiler_name		"ctc"
	;source	'Integration\\BSW\\Src\\rba_BswSrv_MemSet.c'

	
$TC16X
	
	.sdecl	'.text.rba_BswSrv_MemSet.rba_BswSrv_MemSet',code,cluster('rba_BswSrv_MemSet')
	.sect	'.text.rba_BswSrv_MemSet.rba_BswSrv_MemSet'
	.align	2
	
	.global	rba_BswSrv_MemSet

; Integration\BSW\Src\rba_BswSrv_MemSet.c	     1  /*
; Integration\BSW\Src\rba_BswSrv_MemSet.c	     2   * This is a template file. It defines integration functions necessary to complete RTA-BSW.
; Integration\BSW\Src\rba_BswSrv_MemSet.c	     3   * The integrator must complete the templates before deploying software containing functions defined in this file.
; Integration\BSW\Src\rba_BswSrv_MemSet.c	     4   * Once templates have been completed, the integrator should delete the #error line.
; Integration\BSW\Src\rba_BswSrv_MemSet.c	     5   * Note: The integrator is responsible for updates made to this file.
; Integration\BSW\Src\rba_BswSrv_MemSet.c	     6   *
; Integration\BSW\Src\rba_BswSrv_MemSet.c	     7   * To remove the following error define the macro NOT_READY_FOR_TESTING_OR_DEPLOYMENT with a compiler option (e.g. -D NOT_READY_FOR_TESTING_OR_DEPLOYMENT)
; Integration\BSW\Src\rba_BswSrv_MemSet.c	     8   * The removal of the error only allows the user to proceed with the building phase
; Integration\BSW\Src\rba_BswSrv_MemSet.c	     9   */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    10  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    11  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    12  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    13  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    14  /*
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    15   *********************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    16   * Includes
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    17   *********************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    18   */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    19  #include "rba_BswSrv.h"
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    20  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    21  /*
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    22   *********************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    23   * Defines
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    24   *********************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    25   */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    26  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    27  /*
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    28   *********************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    29   * Variables
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    30   *********************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    31   */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    32  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    33  /*
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    34   *********************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    35   * Functions
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    36   *********************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    37   */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    38  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    39  #define RBA_BSWSRV_START_SEC_CODE
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    40  #include "rba_BswSrv_MemMap.h"
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    41  /**
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    42   ***********************************************************************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    43   * \brief MemSet with the same parameters as C90-memset
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    44   *
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    45   * This function implements MemSet with the same parameters as C90-memset
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    46   * It Writes 32 bit data, if possible. So it is save to initialize structures which require consistent 32 bit data.
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    47   *
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    48   * \param[in]       void* xDest_pv, sint32 xPattern_u32, uint32 numBytes_u32
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    49   * \return          void*
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    50   ***********************************************************************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    51   */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    52   
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    53  void* rba_BswSrv_MemSet(void* xDest_pv, sint32 xPattern_u32, uint32 numBytes_u32)
; Function rba_BswSrv_MemSet
.L12:
rba_BswSrv_MemSet:	.type	func

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    54  {
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    55      /* MISRA RULE 11.3 VIOLATION: cast cannot be avoided here */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    56      uint32  adDest_u32 = (uint32)xDest_pv;
	mov.d	d0,a4
.L40:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    57      uint32* xDest_pu32;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    58      uint16* xDest_pu16;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    59      uint8* xDest_pu8;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    60      uint8  xPattern_u8  = (uint8)xPattern_u32;
	extr.u	d1,d4,#0,#8
.L41:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    61      uint32 ctLoop_u32;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    62  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    63      /* only lower 8 bit are used for initialization */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    64      xPattern_u32 = xPattern_u8 + (xPattern_u8 << 8) + (xPattern_u8 << 16) + (xPattern_u8 << 24);
	sha	d15,d1,#8
.L56:
	add	d15,d1
.L57:
	sha	d2,d1,#16
.L58:
	add	d15,d2
.L59:
	sha	d1,d1,#24
.L42:
	add	d1,d15
.L39:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    65      
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    66      /* 8 bit leading gap */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    67      if ((numBytes_u32 >= 1) && ((adDest_u32 & 0x01) != 0))
	jeq	d5,#0,.L2
.L60:
	jz.t	d0:0,.L3
.L61:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    68      {
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    69          /* MISRA RULE 11.3 VIOLATION: cast cannot be avoided here */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    70          xDest_pu8 = (uint8*)adDest_u32;
	mov.a	a15,d0
.L43:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    71          numBytes_u32 -= 1;
	add	d5,#-1
.L62:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    72          *xDest_pu8 = (uint8)xPattern_u32;
	st.b	[a15],d1
.L63:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    73          adDest_u32++;
	add	d0,#1
.L3:
.L2:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    74      }
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    75  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    76      /* 16 bit leading gap */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    77      if ((numBytes_u32 >= 2) && ((adDest_u32 & 0x02) != 0))
	jlt.u	d5,#2,.L4
.L64:
	jz.t	d0:1,.L5
.L65:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    78      {
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    79          /* MISRA RULE 11.3 VIOLATION: cast cannot be avoided here */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    80          xDest_pu16 = (uint16*)adDest_u32;
	mov.a	a15,d0
.L44:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    81          numBytes_u32 -= 2;
	add	d5,#-2
.L66:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    82          *xDest_pu16 = (uint16)xPattern_u32;
	st.h	[a15],d1
.L67:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    83          adDest_u32 += 2;
	add	d0,#2
.L5:
.L4:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    84      }
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    85  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    86      /* 32 bit set */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    87      /* MISRA RULE 11.3 VIOLATION: cast cannot be avoided here */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    88      xDest_pu32 = (uint32*)adDest_u32;
	mov.a	a15,d0
.L45:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    89      if (numBytes_u32 >= 4)
	jlt.u	d5,#4,.L6
.L68:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    90      {
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    91          ctLoop_u32 = numBytes_u32 / 4;
	sh	d15,d5,#-2
.L46:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    92          numBytes_u32 &= 0x03;
	and	d5,d5,#3

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    93          do
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    94          {
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    95              *xDest_pu32 = (uint32)xPattern_u32;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    96              xDest_pu32++;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    97              ctLoop_u32--;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	    98          } while(ctLoop_u32 > 0);
.L7:
	st.w	[a15],d1
.L69:
	add.a	a15,#4
.L70:
	add	d15,#-1
.L71:
	jne	d15,#0,.L7
.L6:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	    99      }
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   100  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   101      /* 16 bit set */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   102      /* MISRA RULE 11.4 VIOLATION: cast cannot be avoided here */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   103      xDest_pu16 = (uint16*)xDest_pu32;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   104      if (numBytes_u32 >= 2)
	jlt.u	d5,#2,.L8
.L72:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	   105      {
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   106          numBytes_u32 -= 2;
	add	d5,#-2
.L73:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	   107          *xDest_pu16 = (uint16)xPattern_u32;
	st.h	[a15],d1
.L74:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	   108          xDest_pu16++;
	add.a	a15,#2
.L8:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	   109      }
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   110  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   111      /* 8 bit set */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   112      /* MISRA RULE 11.4 VIOLATION: cast cannot be avoided here */
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   113      xDest_pu8 = (uint8*)xDest_pu16;
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   114      if(numBytes_u32 > 0)
	jeq	d5,#0,.L9
.L75:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	   115      {
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   116          *xDest_pu8 = (uint8)xPattern_u32;
	st.b	[a15],d1
.L9:

; Integration\BSW\Src\rba_BswSrv_MemSet.c	   117      }
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   118      return xDest_pv;
	mov.aa	a2,a4
.L47:
	j	.L10

; Integration\BSW\Src\rba_BswSrv_MemSet.c	   119  }
.L10:
	ret
.L23:
	
__rba_BswSrv_MemSet_function_end:
	.size	rba_BswSrv_MemSet,__rba_BswSrv_MemSet_function_end-rba_BswSrv_MemSet
.L21:
	; End of function
	
	.calls	'rba_BswSrv_MemSet','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L14:
	.word	360
	.half	3
	.word	.L15
	.byte	4
.L13:
	.byte	1
	.byte	'Integration\\BSW\\Src\\rba_BswSrv_MemSet.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L16
	.byte	2
	.byte	'void',0
.L22:
	.byte	3
	.word	139
.L25:
	.byte	4
	.byte	'int',0,4,5
.L27:
	.byte	4
	.byte	'unsigned int',0,4,7
.L30:
	.byte	3
	.word	157
	.byte	4
	.byte	'unsigned short int',0,2,7
.L32:
	.byte	3
	.word	178
.L36:
	.byte	4
	.byte	'unsigned char',0,1,8
.L34:
	.byte	3
	.word	205
	.byte	5,1,3
	.word	227
	.byte	6
	.byte	'__codeptr',0,1,1,1
	.word	229
	.byte	6
	.byte	'uint8',0,2,81,25
	.word	205
	.byte	6
	.byte	'uint16',0,2,91,25
	.word	178
	.byte	6
	.byte	'sint32',0,2,96,24
	.word	150
	.byte	6
	.byte	'uint32',0,2,106,24
	.word	157
	.byte	4
	.byte	'unsigned long long int',0,8,7,6
	.byte	'rba_BswSrv_uint64',0,3,66,28
	.word	311
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L15:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,59,0,3,8,0,0,3,15,0,73,19,0,0,4,36,0,3,8,11,15,62,15,0
	.byte	0,5,21,0,54,15,0,0,6,22,0,3,8,58,15,59,15,57,15,73,19,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L16:
	.word	.L49-.L48
.L48:
	.half	3
	.word	.L51-.L50
.L50:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Integration\\BSW\\Src\\rba_BswSrv_MemSet.c',0,0,0,0
	.byte	'.\\BSW\\src\\BSW\\Gen\\Platform\\Platform_Types.h',0,0,0,0
	.byte	'.\\Integration\\BSW\\Include\\rba_BswSrv.h',0,0,0,0,0
.L51:
.L49:
	.sdecl	'.debug_info',debug,cluster('rba_BswSrv_MemSet')
	.sect	'.debug_info'
.L17:
	.word	406
	.half	3
	.word	.L18
	.byte	4,1
	.byte	'Integration\\BSW\\Src\\rba_BswSrv_MemSet.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\HUR4HC\\Desktop\\Main_extract\\',0,12,1
	.word	.L20,.L19
	.byte	2
	.word	.L13
	.byte	3
	.byte	'rba_BswSrv_MemSet',0,1,53,7
	.word	.L22
	.byte	1,1,1
	.word	.L12,.L23,.L11
	.byte	4
	.byte	'xDest_pv',0,1,53,31
	.word	.L22,.L24
	.byte	4
	.byte	'xPattern_u32',0,1,53,48
	.word	.L25,.L26
	.byte	4
	.byte	'numBytes_u32',0,1,53,69
	.word	.L27,.L28
	.byte	5
	.word	.L12,.L23
	.byte	6
	.byte	'adDest_u32',0,1,56,13
	.word	.L27,.L29
	.byte	6
	.byte	'xDest_pu32',0,1,57,13
	.word	.L30,.L31
	.byte	6
	.byte	'xDest_pu16',0,1,58,13
	.word	.L32,.L33
	.byte	6
	.byte	'xDest_pu8',0,1,59,12
	.word	.L34,.L35
	.byte	6
	.byte	'xPattern_u8',0,1,60,12
	.word	.L36,.L37
	.byte	6
	.byte	'ctLoop_u32',0,1,61,12
	.word	.L27,.L38
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rba_BswSrv_MemSet')
	.sect	'.debug_abbrev'
.L18:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rba_BswSrv_MemSet')
	.sect	'.debug_line'
.L19:
	.word	.L53-.L52
.L52:
	.half	3
	.word	.L55-.L54
.L54:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'Integration\\BSW\\Src\\rba_BswSrv_MemSet.c',0,0,0,0,0
.L55:
	.byte	5,34,7,0,5,2
	.word	.L12
	.byte	3,55,1,5,27,9
	.half	.L40-.L12
	.byte	3,4,1,5,47,9
	.half	.L41-.L40
	.byte	3,4,1,5,32,9
	.half	.L56-.L41
	.byte	1,5,68,9
	.half	.L57-.L56
	.byte	1,5,53,9
	.half	.L58-.L57
	.byte	1,5,90,9
	.half	.L59-.L58
	.byte	1,5,75,9
	.half	.L42-.L59
	.byte	1,5,9,9
	.half	.L39-.L42
	.byte	3,3,1,5,53,7,9
	.half	.L60-.L39
	.byte	1,5,19,7,9
	.half	.L61-.L60
	.byte	3,3,1,5,22,9
	.half	.L43-.L61
	.byte	3,1,1,5,20,9
	.half	.L62-.L43
	.byte	3,1,1,5,19,9
	.half	.L63-.L62
	.byte	3,1,1,5,9,9
	.half	.L2-.L63
	.byte	3,4,1,5,53,7,9
	.half	.L64-.L2
	.byte	1,5,20,7,9
	.half	.L65-.L64
	.byte	3,3,1,5,22,9
	.half	.L44-.L65
	.byte	3,1,1,5,21,9
	.half	.L66-.L44
	.byte	3,1,1,5,20,9
	.half	.L67-.L66
	.byte	3,1,1,5,16,9
	.half	.L4-.L67
	.byte	3,5,1,5,5,9
	.half	.L45-.L4
	.byte	3,1,1,5,22,7,9
	.half	.L68-.L45
	.byte	3,2,1,9
	.half	.L46-.L68
	.byte	3,1,1,5,25,9
	.half	.L7-.L46
	.byte	3,3,1,5,23,9
	.half	.L69-.L7
	.byte	3,1,1,9
	.half	.L70-.L69
	.byte	3,1,1,5,32,9
	.half	.L71-.L70
	.byte	3,1,1,5,5,7,9
	.half	.L6-.L71
	.byte	3,6,1,5,22,7,9
	.half	.L72-.L6
	.byte	3,2,1,5,21,9
	.half	.L73-.L72
	.byte	3,1,1,5,19,9
	.half	.L74-.L73
	.byte	3,1,1,5,5,9
	.half	.L8-.L74
	.byte	3,6,1,5,20,7,9
	.half	.L75-.L8
	.byte	3,2,1,5,5,9
	.half	.L9-.L75
	.byte	3,2,1,5,1,9
	.half	.L10-.L9
	.byte	3,1,1,7,9
	.half	.L21-.L10
	.byte	0,1,1
.L53:
	.sdecl	'.debug_ranges',debug,cluster('rba_BswSrv_MemSet')
	.sect	'.debug_ranges'
.L20:
	.word	-1,.L12,0,.L21-.L12,0,0
	.sdecl	'.debug_loc',debug,cluster('rba_BswSrv_MemSet')
	.sect	'.debug_loc'
.L29:
	.word	-1,.L12,.L40-.L12,.L23-.L12
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L38:
	.word	-1,.L12,.L46-.L12,.L6-.L12
	.half	1
	.byte	95
	.word	0,0
.L28:
	.word	-1,.L12,0,.L23-.L12
	.half	1
	.byte	85
	.word	0,0
.L11:
	.word	-1,.L12,0,.L23-.L12
	.half	2
	.byte	138,0
	.word	0,0
.L33:
	.word	-1,.L12,.L44-.L12,.L4-.L12
	.half	1
	.byte	111
	.word	0,0
.L31:
	.word	-1,.L12,.L45-.L12,.L23-.L12
	.half	1
	.byte	111
	.word	0,0
.L35:
	.word	-1,.L12,.L43-.L12,.L2-.L12
	.half	1
	.byte	111
	.word	0,0
.L24:
	.word	-1,.L12,0,.L23-.L12
	.half	1
	.byte	100
	.word	.L47-.L12,.L23-.L12
	.half	1
	.byte	98
	.word	0,0
.L26:
	.word	-1,.L12,0,.L39-.L12
	.half	1
	.byte	84
	.word	.L42-.L12,.L23-.L12
	.half	1
	.byte	81
	.word	0,0
.L37:
	.word	-1,.L12,.L41-.L12,.L42-.L12
	.half	1
	.byte	81
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L76:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('rba_BswSrv_MemSet')
	.sect	'.debug_frame'
	.word	20
	.word	.L76,.L12,.L23-.L12
	.byte	8,19,8,21,8,22,8,23

; Integration\BSW\Src\rba_BswSrv_MemSet.c	   120  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   121  #define RBA_BSWSRV_STOP_SEC_CODE
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   122  #include "rba_BswSrv_MemMap.h"
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   123  
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   124  /*<BASDKey>
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   125  **********************************************************************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   126  * $History__:$
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   127  **********************************************************************************************************************
; Integration\BSW\Src\rba_BswSrv_MemSet.c	   128  </BASDKey>*/

	; Module end
